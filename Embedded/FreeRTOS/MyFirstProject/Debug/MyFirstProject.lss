
MyFirstProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000048c  00800200  00004894  00004928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004894  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021b  0080068c  0080068c  00004db4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00004db4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004e10  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000958  00000000  00000000  00004e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c48f  00000000  00000000  000057a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000320f  00000000  00000000  00011c37  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005dfe  00000000  00000000  00014e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f48  00000000  00000000  0001ac44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b09  00000000  00000000  0001cb8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b18d  00000000  00000000  00020695  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000998  00000000  00000000  0002b822  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	05 c2       	rjmp	.+1034   	; 0x40c <__ctors_end>
       2:	00 00       	nop
       4:	24 c2       	rjmp	.+1096   	; 0x44e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c2       	rjmp	.+1092   	; 0x44e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c2       	rjmp	.+1088   	; 0x44e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c2       	rjmp	.+1084   	; 0x44e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c2       	rjmp	.+1080   	; 0x44e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c2       	rjmp	.+1076   	; 0x44e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c2       	rjmp	.+1072   	; 0x44e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c2       	rjmp	.+1068   	; 0x44e <__bad_interrupt>
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__bad_interrupt>
      26:	00 00       	nop
      28:	12 c2       	rjmp	.+1060   	; 0x44e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c2       	rjmp	.+1056   	; 0x44e <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c4       	rjmp	.+2232   	; 0x8ea <__vector_12>
      32:	00 00       	nop
      34:	0c c2       	rjmp	.+1048   	; 0x44e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c2       	rjmp	.+1044   	; 0x44e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c2       	rjmp	.+1040   	; 0x44e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c2       	rjmp	.+1036   	; 0x44e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c2       	rjmp	.+1032   	; 0x44e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c2       	rjmp	.+1028   	; 0x44e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c2       	rjmp	.+1024   	; 0x44e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c1       	rjmp	.+1020   	; 0x44e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c1       	rjmp	.+1016   	; 0x44e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c1       	rjmp	.+1012   	; 0x44e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f8 c1       	rjmp	.+1008   	; 0x44e <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 47 1a 	jmp	0x348e	; 0x348e <__vector_25>
      68:	0c 94 99 1a 	jmp	0x3532	; 0x3532 <__vector_26>
      6c:	f0 c1       	rjmp	.+992    	; 0x44e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c1       	rjmp	.+988    	; 0x44e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c1       	rjmp	.+984    	; 0x44e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c1       	rjmp	.+980    	; 0x44e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c1       	rjmp	.+976    	; 0x44e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c1       	rjmp	.+972    	; 0x44e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c1       	rjmp	.+968    	; 0x44e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c1       	rjmp	.+964    	; 0x44e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c1       	rjmp	.+960    	; 0x44e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <__vector_36>
      94:	0c 94 2f 1b 	jmp	0x365e	; 0x365e <__vector_37>
      98:	da c1       	rjmp	.+948    	; 0x44e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 e6 1c 	jmp	0x39cc	; 0x39cc <__vector_39>
      a0:	d6 c1       	rjmp	.+940    	; 0x44e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c1       	rjmp	.+936    	; 0x44e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c1       	rjmp	.+932    	; 0x44e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c1       	rjmp	.+928    	; 0x44e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c1       	rjmp	.+924    	; 0x44e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c1       	rjmp	.+920    	; 0x44e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c1       	rjmp	.+916    	; 0x44e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c1       	rjmp	.+912    	; 0x44e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c1       	rjmp	.+908    	; 0x44e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c1       	rjmp	.+904    	; 0x44e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c1       	rjmp	.+900    	; 0x44e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__vector_51>
      d0:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <__vector_52>
      d4:	bc c1       	rjmp	.+888    	; 0x44e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 09 1c 	jmp	0x3812	; 0x3812 <__vector_54>
      dc:	0c 94 5b 1c 	jmp	0x38b6	; 0x38b6 <__vector_55>
      e0:	b6 c1       	rjmp	.+876    	; 0x44e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	95 01       	movw	r18, r10
      e6:	95 01       	movw	r18, r10
      e8:	95 01       	movw	r18, r10
      ea:	c4 01       	movw	r24, r8
      ec:	cc 01       	movw	r24, r24
      ee:	db 01       	movw	r26, r22
      f0:	95 01       	movw	r18, r10
      f2:	95 01       	movw	r18, r10
      f4:	c4 01       	movw	r24, r8
      f6:	cc 01       	movw	r24, r24
      f8:	08 1d       	adc	r16, r8
      fa:	78 1d       	adc	r23, r8
      fc:	78 1d       	adc	r23, r8
      fe:	78 1d       	adc	r23, r8
     100:	78 1d       	adc	r23, r8
     102:	78 1d       	adc	r23, r8
     104:	78 1d       	adc	r23, r8
     106:	78 1d       	adc	r23, r8
     108:	08 1d       	adc	r16, r8
     10a:	78 1d       	adc	r23, r8
     10c:	78 1d       	adc	r23, r8
     10e:	78 1d       	adc	r23, r8
     110:	78 1d       	adc	r23, r8
     112:	78 1d       	adc	r23, r8
     114:	78 1d       	adc	r23, r8
     116:	78 1d       	adc	r23, r8
     118:	0a 1d       	adc	r16, r10
     11a:	78 1d       	adc	r23, r8
     11c:	78 1d       	adc	r23, r8
     11e:	78 1d       	adc	r23, r8
     120:	78 1d       	adc	r23, r8
     122:	78 1d       	adc	r23, r8
     124:	78 1d       	adc	r23, r8
     126:	78 1d       	adc	r23, r8
     128:	78 1d       	adc	r23, r8
     12a:	78 1d       	adc	r23, r8
     12c:	78 1d       	adc	r23, r8
     12e:	78 1d       	adc	r23, r8
     130:	78 1d       	adc	r23, r8
     132:	78 1d       	adc	r23, r8
     134:	78 1d       	adc	r23, r8
     136:	78 1d       	adc	r23, r8
     138:	0a 1d       	adc	r16, r10
     13a:	78 1d       	adc	r23, r8
     13c:	78 1d       	adc	r23, r8
     13e:	78 1d       	adc	r23, r8
     140:	78 1d       	adc	r23, r8
     142:	78 1d       	adc	r23, r8
     144:	78 1d       	adc	r23, r8
     146:	78 1d       	adc	r23, r8
     148:	78 1d       	adc	r23, r8
     14a:	78 1d       	adc	r23, r8
     14c:	78 1d       	adc	r23, r8
     14e:	78 1d       	adc	r23, r8
     150:	78 1d       	adc	r23, r8
     152:	78 1d       	adc	r23, r8
     154:	78 1d       	adc	r23, r8
     156:	78 1d       	adc	r23, r8
     158:	74 1d       	adc	r23, r4
     15a:	78 1d       	adc	r23, r8
     15c:	78 1d       	adc	r23, r8
     15e:	78 1d       	adc	r23, r8
     160:	78 1d       	adc	r23, r8
     162:	78 1d       	adc	r23, r8
     164:	78 1d       	adc	r23, r8
     166:	78 1d       	adc	r23, r8
     168:	3f 1d       	adc	r19, r15
     16a:	78 1d       	adc	r23, r8
     16c:	78 1d       	adc	r23, r8
     16e:	78 1d       	adc	r23, r8
     170:	78 1d       	adc	r23, r8
     172:	78 1d       	adc	r23, r8
     174:	78 1d       	adc	r23, r8
     176:	78 1d       	adc	r23, r8
     178:	78 1d       	adc	r23, r8
     17a:	78 1d       	adc	r23, r8
     17c:	78 1d       	adc	r23, r8
     17e:	78 1d       	adc	r23, r8
     180:	78 1d       	adc	r23, r8
     182:	78 1d       	adc	r23, r8
     184:	78 1d       	adc	r23, r8
     186:	78 1d       	adc	r23, r8
     188:	33 1d       	adc	r19, r3
     18a:	78 1d       	adc	r23, r8
     18c:	78 1d       	adc	r23, r8
     18e:	78 1d       	adc	r23, r8
     190:	78 1d       	adc	r23, r8
     192:	78 1d       	adc	r23, r8
     194:	78 1d       	adc	r23, r8
     196:	78 1d       	adc	r23, r8
     198:	57 1d       	adc	r21, r7

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	04 ea       	ldi	r16, 0xA4	; 164
     19c:	16 e0       	ldi	r17, 0x06	; 6
     19e:	0f 2e       	mov	r0, r31
     1a0:	fc ec       	ldi	r31, 0xCC	; 204
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f6 e0       	ldi	r31, 0x06	; 6
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	f5 d1       	rcall	.+1002   	; 0x5b6 <uxListRemove>
     1cc:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <uxCurrentNumberOfTasks>
     1d6:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 a3 06 	sts	0x06A3, r24	; 0x8006a3 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	73 d1       	rcall	.+742    	; 0x4d0 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	71 d1       	rcall	.+738    	; 0x4d0 <vPortFree>
     1ee:	80 91 a3 06 	lds	r24, 0x06A3	; 0x8006a3 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	b0 d2       	rcall	.+1376   	; 0x760 <vPortYield>
     200:	0e 94 bd 12 	call	0x257a	; 0x257a <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     220:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
     226:	e0 91 fa 06 	lds	r30, 0x06FA	; 0x8006fa <pxCurrentTimerList>
     22a:	f0 91 fb 06 	lds	r31, 0x06FB	; 0x8006fb <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d7 c0       	rjmp	.+430    	; 0x3e4 <prvTimerTask+0x1de>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     240:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     244:	c4 01       	movw	r24, r8
     246:	0e 94 4f 12 	call	0x249e	; 0x249e <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	48 c0       	rjmp	.+144    	; 0x2e2 <prvTimerTask+0xdc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
            {
                ( void ) xTaskResumeAll();
     258:	0e 94 bd 0c 	call	0x197a	; 0x197a <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     25c:	e0 91 fa 06 	lds	r30, 0x06FA	; 0x8006fa <pxCurrentTimerList>
     260:	f0 91 fb 06 	lds	r31, 0x06FB	; 0x8006fb <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	a1 d1       	rcall	.+834    	; 0x5b6 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 08 12 	call	0x2410	; 0x2410 <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	84 c0       	rjmp	.+264    	; 0x3cc <prvTimerTask+0x1c6>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     2c4:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xTimerQueue>
     2d0:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <xTimerQueue+0x1>
     2d4:	78 d6       	rcall	.+3312   	; 0xfc6 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
     2d6:	0e 94 bd 0c 	call	0x197a	; 0x197a <xTaskResumeAll>
     2da:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
     2dc:	77 c0       	rjmp	.+238    	; 0x3cc <prvTimerTask+0x1c6>
     2de:	40 d2       	rcall	.+1152   	; 0x760 <vPortYield>
     2e0:	75 c0       	rjmp	.+234    	; 0x3cc <prvTimerTask+0x1c6>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
     2e2:	0e 94 bd 0c 	call	0x197a	; 0x197a <xTaskResumeAll>
     2e6:	72 c0       	rjmp	.+228    	; 0x3cc <prvTimerTask+0x1c6>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 23       	and	r24, r24
     2ec:	0c f4       	brge	.+2      	; 0x2f0 <prvTimerTask+0xea>
     2ee:	6e c0       	rjmp	.+220    	; 0x3cc <prvTimerTask+0x1c6>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
     2f0:	ac 80       	ldd	r10, Y+4	; 0x04
     2f2:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
     2f4:	f5 01       	movw	r30, r10
     2f6:	82 85       	ldd	r24, Z+10	; 0x0a
     2f8:	93 85       	ldd	r25, Z+11	; 0x0b
     2fa:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     2fc:	19 f0       	breq	.+6      	; 0x304 <prvTimerTask+0xfe>
     2fe:	c5 01       	movw	r24, r10
     300:	02 96       	adiw	r24, 0x02	; 2
     302:	59 d1       	rcall	.+690    	; 0x5b6 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     304:	ce 01       	movw	r24, r28
     306:	06 96       	adiw	r24, 0x06	; 6
     308:	0e 94 4f 12 	call	0x249e	; 0x249e <prvSampleTimeNow>
     30c:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
     30e:	e9 81       	ldd	r30, Y+1	; 0x01
     310:	0e 2e       	mov	r0, r30
     312:	00 0c       	add	r0, r0
     314:	ff 0b       	sbc	r31, r31
     316:	ea 30       	cpi	r30, 0x0A	; 10
     318:	f1 05       	cpc	r31, r1
     31a:	08 f0       	brcs	.+2      	; 0x31e <prvTimerTask+0x118>
     31c:	57 c0       	rjmp	.+174    	; 0x3cc <prvTimerTask+0x1c6>
     31e:	88 27       	eor	r24, r24
     320:	ee 58       	subi	r30, 0x8E	; 142
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	8f 4f       	sbci	r24, 0xFF	; 255
     326:	0c 94 a9 1f 	jmp	0x3f52	; 0x3f52 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     32a:	d5 01       	movw	r26, r10
     32c:	53 96       	adiw	r26, 0x13	; 19
     32e:	8c 91       	ld	r24, X
     330:	53 97       	sbiw	r26, 0x13	; 19
     332:	81 60       	ori	r24, 0x01	; 1
     334:	53 96       	adiw	r26, 0x13	; 19
     336:	8c 93       	st	X, r24
     338:	53 97       	sbiw	r26, 0x13	; 19
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	3b 81       	ldd	r19, Y+3	; 0x03
     33e:	1c 96       	adiw	r26, 0x0c	; 12
     340:	6d 91       	ld	r22, X+
     342:	7c 91       	ld	r23, X
     344:	1d 97       	sbiw	r26, 0x0d	; 13
     346:	62 0f       	add	r22, r18
     348:	73 1f       	adc	r23, r19
     34a:	c5 01       	movw	r24, r10
     34c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <prvInsertTimerInActiveList>
     350:	88 23       	and	r24, r24
     352:	e1 f1       	breq	.+120    	; 0x3cc <prvTimerTask+0x1c6>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     354:	d5 01       	movw	r26, r10
     356:	50 96       	adiw	r26, 0x10	; 16
     358:	ed 91       	ld	r30, X+
     35a:	fc 91       	ld	r31, X
     35c:	51 97       	sbiw	r26, 0x11	; 17
     35e:	c5 01       	movw	r24, r10
     360:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     362:	f5 01       	movw	r30, r10
     364:	83 89       	ldd	r24, Z+19	; 0x13
     366:	82 ff       	sbrs	r24, 2
     368:	31 c0       	rjmp	.+98     	; 0x3cc <prvTimerTask+0x1c6>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
     36a:	4a 81       	ldd	r20, Y+2	; 0x02
     36c:	5b 81       	ldd	r21, Y+3	; 0x03
     36e:	84 85       	ldd	r24, Z+12	; 0x0c
     370:	95 85       	ldd	r25, Z+13	; 0x0d
     372:	48 0f       	add	r20, r24
     374:	59 1f       	adc	r21, r25
     376:	0e 2d       	mov	r16, r14
     378:	1f 2d       	mov	r17, r15
     37a:	2e 2d       	mov	r18, r14
     37c:	3f 2d       	mov	r19, r15
     37e:	65 2d       	mov	r22, r5
     380:	c5 01       	movw	r24, r10
     382:	0e 94 08 12 	call	0x2410	; 0x2410 <xTimerGenericCommand>
     386:	22 c0       	rjmp	.+68     	; 0x3cc <prvTimerTask+0x1c6>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     388:	d5 01       	movw	r26, r10
     38a:	53 96       	adiw	r26, 0x13	; 19
     38c:	8c 91       	ld	r24, X
     38e:	53 97       	sbiw	r26, 0x13	; 19
     390:	8e 7f       	andi	r24, 0xFE	; 254
     392:	53 96       	adiw	r26, 0x13	; 19
     394:	8c 93       	st	X, r24
     396:	1a c0       	rjmp	.+52     	; 0x3cc <prvTimerTask+0x1c6>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     398:	f5 01       	movw	r30, r10
     39a:	83 89       	ldd	r24, Z+19	; 0x13
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	83 8b       	std	Z+19, r24	; 0x13
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
     3a0:	6a 81       	ldd	r22, Y+2	; 0x02
     3a2:	7b 81       	ldd	r23, Y+3	; 0x03
     3a4:	75 87       	std	Z+13, r23	; 0x0d
     3a6:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
     3a8:	64 0f       	add	r22, r20
     3aa:	75 1f       	adc	r23, r21
     3ac:	9a 01       	movw	r18, r20
     3ae:	c5 01       	movw	r24, r10
     3b0:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <prvInsertTimerInActiveList>
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <prvTimerTask+0x1c6>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
     3b6:	d5 01       	movw	r26, r10
     3b8:	53 96       	adiw	r26, 0x13	; 19
     3ba:	8c 91       	ld	r24, X
     3bc:	81 fd       	sbrc	r24, 1
                        {
                            vPortFree( pxTimer );
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <prvTimerTask+0x1c0>
     3c0:	c5 01       	movw	r24, r10
     3c2:	86 d0       	rcall	.+268    	; 0x4d0 <vPortFree>
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <prvTimerTask+0x1c6>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     3c6:	8e 7f       	andi	r24, 0xFE	; 254
     3c8:	f5 01       	movw	r30, r10
     3ca:	83 8b       	std	Z+19, r24	; 0x13
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     3cc:	4e 2d       	mov	r20, r14
     3ce:	5f 2d       	mov	r21, r15
     3d0:	6c 2d       	mov	r22, r12
     3d2:	7d 2d       	mov	r23, r13
     3d4:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xTimerQueue>
     3d8:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <xTimerQueue+0x1>
     3dc:	af d4       	rcall	.+2398   	; 0xd3c <xQueueReceive>
     3de:	81 11       	cpse	r24, r1
     3e0:	83 cf       	rjmp	.-250    	; 0x2e8 <prvTimerTask+0xe2>
     3e2:	21 cf       	rjmp	.-446    	; 0x226 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     3e4:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     3e8:	c4 01       	movw	r24, r8
     3ea:	0e 94 4f 12 	call	0x249e	; 0x249e <prvSampleTimeNow>
     3ee:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	81 11       	cpse	r24, r1
     3f4:	76 cf       	rjmp	.-276    	; 0x2e2 <prvTimerTask+0xdc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     3f6:	e0 91 f8 06 	lds	r30, 0x06F8	; 0x8006f8 <pxOverflowTimerList>
     3fa:	f0 91 f9 06 	lds	r31, 0x06F9	; 0x8006f9 <pxOverflowTimerList+0x1>
     3fe:	80 81       	ld	r24, Z
     400:	44 2d       	mov	r20, r4
     402:	81 11       	cpse	r24, r1
     404:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     406:	ae 2c       	mov	r10, r14
     408:	bf 2c       	mov	r11, r15
     40a:	5d cf       	rjmp	.-326    	; 0x2c6 <prvTimerTask+0xc0>

0000040c <__ctors_end>:
     40c:	11 24       	eor	r1, r1
     40e:	1f be       	out	0x3f, r1	; 63
     410:	cf ef       	ldi	r28, 0xFF	; 255
     412:	d1 e2       	ldi	r29, 0x21	; 33
     414:	de bf       	out	0x3e, r29	; 62
     416:	cd bf       	out	0x3d, r28	; 61
     418:	00 e0       	ldi	r16, 0x00	; 0
     41a:	0c bf       	out	0x3c, r16	; 60

0000041c <__do_copy_data>:
     41c:	16 e0       	ldi	r17, 0x06	; 6
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b2 e0       	ldi	r27, 0x02	; 2
     422:	e4 e9       	ldi	r30, 0x94	; 148
     424:	f8 e4       	ldi	r31, 0x48	; 72
     426:	00 e0       	ldi	r16, 0x00	; 0
     428:	0b bf       	out	0x3b, r16	; 59
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x14>
     42c:	07 90       	elpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	ac 38       	cpi	r26, 0x8C	; 140
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0x10>

00000436 <__do_clear_bss>:
     436:	28 e0       	ldi	r18, 0x08	; 8
     438:	ac e8       	ldi	r26, 0x8C	; 140
     43a:	b6 e0       	ldi	r27, 0x06	; 6
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	a7 3a       	cpi	r26, 0xA7	; 167
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <main>
     44a:	0c 94 48 24 	jmp	0x4890	; 0x4890 <_exit>

0000044e <__bad_interrupt>:
     44e:	d8 cd       	rjmp	.-1104   	; 0x0 <__vectors>

00000450 <co2_callback>:
		//vTaskDelayUntil(&xLastWakeTimeCO2,SENSOR_TIMER*60);
	//}
}

// call back function for getting co2 value
void co2_callback(uint16_t co2_ppm) {
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	1f 92       	push	r1
     456:	1f 92       	push	r1
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	co2_ppm_pointer = &co2_ppm;
     45c:	ce 01       	movw	r24, r28
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	90 93 74 08 	sts	0x0874, r25	; 0x800874 <co2_ppm_pointer+0x1>
     464:	80 93 73 08 	sts	0x0873, r24	; 0x800873 <co2_ppm_pointer>
}
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <co2_sensor_init>:

uint16_t* co2_ppm_pointer;

// create drivers
void co2_sensor_init() {	
	mh_z19_create(ser_USART3, co2_callback);
     472:	68 e2       	ldi	r22, 0x28	; 40
     474:	72 e0       	ldi	r23, 0x02	; 2
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	0c 94 f2 18 	jmp	0x31e4	; 0x31e4 <mh_z19_create>
     47c:	08 95       	ret

0000047e <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     47e:	e7 e0       	ldi	r30, 0x07	; 7
     480:	f1 e0       	ldi	r31, 0x01	; 1
     482:	80 81       	ld	r24, Z
     484:	8f 60       	ori	r24, 0x0F	; 15
     486:	80 83       	st	Z, r24
     488:	08 95       	ret

0000048a <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     48a:	e8 e0       	ldi	r30, 0x08	; 8
     48c:	f1 e0       	ldi	r31, 0x01	; 1
     48e:	90 81       	ld	r25, Z
     490:	90 7f       	andi	r25, 0xF0	; 240
     492:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     494:	90 81       	ld	r25, Z
     496:	8f 70       	andi	r24, 0x0F	; 15
     498:	98 2b       	or	r25, r24
     49a:	90 83       	st	Z, r25
     49c:	08 95       	ret

0000049e <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     49e:	e8 e0       	ldi	r30, 0x08	; 8
     4a0:	f1 e0       	ldi	r31, 0x01	; 1
     4a2:	80 81       	ld	r24, Z
     4a4:	80 7f       	andi	r24, 0xF0	; 240
     4a6:	80 83       	st	Z, r24
     4a8:	08 95       	ret

000004aa <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     4b0:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     4b4:	ce 01       	movw	r24, r28
     4b6:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <malloc>
     4ba:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     4bc:	0e 94 bd 0c 	call	0x197a	; 0x197a <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     4c0:	20 97       	sbiw	r28, 0x00	; 0
     4c2:	11 f4       	brne	.+4      	; 0x4c8 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     4c4:	0e 94 be 12 	call	0x257c	; 0x257c <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     4c8:	ce 01       	movw	r24, r28
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
    if( pv )
     4d4:	00 97       	sbiw	r24, 0x00	; 0
     4d6:	41 f0       	breq	.+16     	; 0x4e8 <vPortFree+0x18>
     4d8:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     4da:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <vTaskSuspendAll>
        {
            free( pv );
     4de:	ce 01       	movw	r24, r28
     4e0:	0e 94 63 20 	call	0x40c6	; 0x40c6 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     4e4:	0e 94 bd 0c 	call	0x197a	; 0x197a <xTaskResumeAll>
    }
}
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     4ee:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4f0:	03 96       	adiw	r24, 0x03	; 3
     4f2:	92 83       	std	Z+2, r25	; 0x02
     4f4:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     4f6:	2f ef       	ldi	r18, 0xFF	; 255
     4f8:	3f ef       	ldi	r19, 0xFF	; 255
     4fa:	34 83       	std	Z+4, r19	; 0x04
     4fc:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4fe:	96 83       	std	Z+6, r25	; 0x06
     500:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     502:	90 87       	std	Z+8, r25	; 0x08
     504:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     506:	10 82       	st	Z, r1
     508:	08 95       	ret

0000050a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     50a:	fc 01       	movw	r30, r24
     50c:	11 86       	std	Z+9, r1	; 0x09
     50e:	10 86       	std	Z+8, r1	; 0x08
     510:	08 95       	ret

00000512 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	9c 01       	movw	r18, r24
     518:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     51a:	dc 01       	movw	r26, r24
     51c:	11 96       	adiw	r26, 0x01	; 1
     51e:	cd 91       	ld	r28, X+
     520:	dc 91       	ld	r29, X
     522:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     524:	d3 83       	std	Z+3, r29	; 0x03
     526:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     528:	8c 81       	ldd	r24, Y+4	; 0x04
     52a:	9d 81       	ldd	r25, Y+5	; 0x05
     52c:	95 83       	std	Z+5, r25	; 0x05
     52e:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     530:	8c 81       	ldd	r24, Y+4	; 0x04
     532:	9d 81       	ldd	r25, Y+5	; 0x05
     534:	dc 01       	movw	r26, r24
     536:	13 96       	adiw	r26, 0x03	; 3
     538:	7c 93       	st	X, r23
     53a:	6e 93       	st	-X, r22
     53c:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     53e:	7d 83       	std	Y+5, r23	; 0x05
     540:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     542:	31 87       	std	Z+9, r19	; 0x09
     544:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     546:	f9 01       	movw	r30, r18
     548:	80 81       	ld	r24, Z
     54a:	8f 5f       	subi	r24, 0xFF	; 255
     54c:	80 83       	st	Z, r24
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     55a:	48 81       	ld	r20, Y
     55c:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     55e:	4f 3f       	cpi	r20, 0xFF	; 255
     560:	2f ef       	ldi	r18, 0xFF	; 255
     562:	52 07       	cpc	r21, r18
     564:	21 f4       	brne	.+8      	; 0x56e <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     566:	fc 01       	movw	r30, r24
     568:	a7 81       	ldd	r26, Z+7	; 0x07
     56a:	b0 85       	ldd	r27, Z+8	; 0x08
     56c:	0d c0       	rjmp	.+26     	; 0x588 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     56e:	dc 01       	movw	r26, r24
     570:	13 96       	adiw	r26, 0x03	; 3
     572:	01 c0       	rjmp	.+2      	; 0x576 <vListInsert+0x22>
     574:	df 01       	movw	r26, r30
     576:	12 96       	adiw	r26, 0x02	; 2
     578:	ed 91       	ld	r30, X+
     57a:	fc 91       	ld	r31, X
     57c:	13 97       	sbiw	r26, 0x03	; 3
     57e:	20 81       	ld	r18, Z
     580:	31 81       	ldd	r19, Z+1	; 0x01
     582:	42 17       	cp	r20, r18
     584:	53 07       	cpc	r21, r19
     586:	b0 f7       	brcc	.-20     	; 0x574 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     588:	12 96       	adiw	r26, 0x02	; 2
     58a:	ed 91       	ld	r30, X+
     58c:	fc 91       	ld	r31, X
     58e:	13 97       	sbiw	r26, 0x03	; 3
     590:	fb 83       	std	Y+3, r31	; 0x03
     592:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     594:	d5 83       	std	Z+5, r29	; 0x05
     596:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     598:	bd 83       	std	Y+5, r27	; 0x05
     59a:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     59c:	13 96       	adiw	r26, 0x03	; 3
     59e:	dc 93       	st	X, r29
     5a0:	ce 93       	st	-X, r28
     5a2:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     5a4:	99 87       	std	Y+9, r25	; 0x09
     5a6:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 81       	ld	r18, Z
     5ac:	2f 5f       	subi	r18, 0xFF	; 255
     5ae:	20 83       	st	Z, r18
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     5bc:	a0 85       	ldd	r26, Z+8	; 0x08
     5be:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5c0:	c2 81       	ldd	r28, Z+2	; 0x02
     5c2:	d3 81       	ldd	r29, Z+3	; 0x03
     5c4:	84 81       	ldd	r24, Z+4	; 0x04
     5c6:	95 81       	ldd	r25, Z+5	; 0x05
     5c8:	9d 83       	std	Y+5, r25	; 0x05
     5ca:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5cc:	c4 81       	ldd	r28, Z+4	; 0x04
     5ce:	d5 81       	ldd	r29, Z+5	; 0x05
     5d0:	82 81       	ldd	r24, Z+2	; 0x02
     5d2:	93 81       	ldd	r25, Z+3	; 0x03
     5d4:	9b 83       	std	Y+3, r25	; 0x03
     5d6:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     5d8:	11 96       	adiw	r26, 0x01	; 1
     5da:	8d 91       	ld	r24, X+
     5dc:	9c 91       	ld	r25, X
     5de:	12 97       	sbiw	r26, 0x02	; 2
     5e0:	e8 17       	cp	r30, r24
     5e2:	f9 07       	cpc	r31, r25
     5e4:	31 f4       	brne	.+12     	; 0x5f2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     5e6:	84 81       	ldd	r24, Z+4	; 0x04
     5e8:	95 81       	ldd	r25, Z+5	; 0x05
     5ea:	12 96       	adiw	r26, 0x02	; 2
     5ec:	9c 93       	st	X, r25
     5ee:	8e 93       	st	-X, r24
     5f0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5f2:	11 86       	std	Z+9, r1	; 0x09
     5f4:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     5f6:	8c 91       	ld	r24, X
     5f8:	81 50       	subi	r24, 0x01	; 1
     5fa:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5fc:	8c 91       	ld	r24, X
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     604:	31 e1       	ldi	r19, 0x11	; 17
     606:	fc 01       	movw	r30, r24
     608:	30 83       	st	Z, r19
     60a:	31 97       	sbiw	r30, 0x01	; 1
     60c:	22 e2       	ldi	r18, 0x22	; 34
     60e:	20 83       	st	Z, r18
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	a3 e3       	ldi	r26, 0x33	; 51
     614:	a0 83       	st	Z, r26
     616:	31 97       	sbiw	r30, 0x01	; 1
     618:	60 83       	st	Z, r22
     61a:	31 97       	sbiw	r30, 0x01	; 1
     61c:	70 83       	st	Z, r23
     61e:	31 97       	sbiw	r30, 0x01	; 1
     620:	10 82       	st	Z, r1
     622:	31 97       	sbiw	r30, 0x01	; 1
     624:	10 82       	st	Z, r1
     626:	31 97       	sbiw	r30, 0x01	; 1
     628:	60 e8       	ldi	r22, 0x80	; 128
     62a:	60 83       	st	Z, r22
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	10 82       	st	Z, r1
     630:	31 97       	sbiw	r30, 0x01	; 1
     632:	10 82       	st	Z, r1
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	10 82       	st	Z, r1
     638:	31 97       	sbiw	r30, 0x01	; 1
     63a:	62 e0       	ldi	r22, 0x02	; 2
     63c:	60 83       	st	Z, r22
     63e:	31 97       	sbiw	r30, 0x01	; 1
     640:	63 e0       	ldi	r22, 0x03	; 3
     642:	60 83       	st	Z, r22
     644:	31 97       	sbiw	r30, 0x01	; 1
     646:	64 e0       	ldi	r22, 0x04	; 4
     648:	60 83       	st	Z, r22
     64a:	31 97       	sbiw	r30, 0x01	; 1
     64c:	65 e0       	ldi	r22, 0x05	; 5
     64e:	60 83       	st	Z, r22
     650:	31 97       	sbiw	r30, 0x01	; 1
     652:	66 e0       	ldi	r22, 0x06	; 6
     654:	60 83       	st	Z, r22
     656:	31 97       	sbiw	r30, 0x01	; 1
     658:	67 e0       	ldi	r22, 0x07	; 7
     65a:	60 83       	st	Z, r22
     65c:	31 97       	sbiw	r30, 0x01	; 1
     65e:	68 e0       	ldi	r22, 0x08	; 8
     660:	60 83       	st	Z, r22
     662:	31 97       	sbiw	r30, 0x01	; 1
     664:	69 e0       	ldi	r22, 0x09	; 9
     666:	60 83       	st	Z, r22
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	60 e1       	ldi	r22, 0x10	; 16
     66c:	60 83       	st	Z, r22
     66e:	31 97       	sbiw	r30, 0x01	; 1
     670:	30 83       	st	Z, r19
     672:	31 97       	sbiw	r30, 0x01	; 1
     674:	32 e1       	ldi	r19, 0x12	; 18
     676:	30 83       	st	Z, r19
     678:	31 97       	sbiw	r30, 0x01	; 1
     67a:	33 e1       	ldi	r19, 0x13	; 19
     67c:	30 83       	st	Z, r19
     67e:	31 97       	sbiw	r30, 0x01	; 1
     680:	34 e1       	ldi	r19, 0x14	; 20
     682:	30 83       	st	Z, r19
     684:	31 97       	sbiw	r30, 0x01	; 1
     686:	35 e1       	ldi	r19, 0x15	; 21
     688:	30 83       	st	Z, r19
     68a:	31 97       	sbiw	r30, 0x01	; 1
     68c:	36 e1       	ldi	r19, 0x16	; 22
     68e:	30 83       	st	Z, r19
     690:	31 97       	sbiw	r30, 0x01	; 1
     692:	37 e1       	ldi	r19, 0x17	; 23
     694:	30 83       	st	Z, r19
     696:	31 97       	sbiw	r30, 0x01	; 1
     698:	38 e1       	ldi	r19, 0x18	; 24
     69a:	30 83       	st	Z, r19
     69c:	31 97       	sbiw	r30, 0x01	; 1
     69e:	39 e1       	ldi	r19, 0x19	; 25
     6a0:	30 83       	st	Z, r19
     6a2:	31 97       	sbiw	r30, 0x01	; 1
     6a4:	30 e2       	ldi	r19, 0x20	; 32
     6a6:	30 83       	st	Z, r19
     6a8:	31 97       	sbiw	r30, 0x01	; 1
     6aa:	31 e2       	ldi	r19, 0x21	; 33
     6ac:	30 83       	st	Z, r19
     6ae:	31 97       	sbiw	r30, 0x01	; 1
     6b0:	20 83       	st	Z, r18
     6b2:	31 97       	sbiw	r30, 0x01	; 1
     6b4:	23 e2       	ldi	r18, 0x23	; 35
     6b6:	20 83       	st	Z, r18
     6b8:	31 97       	sbiw	r30, 0x01	; 1
     6ba:	40 83       	st	Z, r20
     6bc:	31 97       	sbiw	r30, 0x01	; 1
     6be:	50 83       	st	Z, r21
     6c0:	31 97       	sbiw	r30, 0x01	; 1
     6c2:	26 e2       	ldi	r18, 0x26	; 38
     6c4:	20 83       	st	Z, r18
     6c6:	31 97       	sbiw	r30, 0x01	; 1
     6c8:	27 e2       	ldi	r18, 0x27	; 39
     6ca:	20 83       	st	Z, r18
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	28 e2       	ldi	r18, 0x28	; 40
     6d0:	20 83       	st	Z, r18
     6d2:	31 97       	sbiw	r30, 0x01	; 1
     6d4:	29 e2       	ldi	r18, 0x29	; 41
     6d6:	20 83       	st	Z, r18
     6d8:	31 97       	sbiw	r30, 0x01	; 1
     6da:	20 e3       	ldi	r18, 0x30	; 48
     6dc:	20 83       	st	Z, r18
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	21 e3       	ldi	r18, 0x31	; 49
     6e2:	20 83       	st	Z, r18
     6e4:	89 97       	sbiw	r24, 0x29	; 41
     6e6:	08 95       	ret

000006e8 <xPortStartScheduler>:
     6e8:	a8 95       	wdr
     6ea:	90 ec       	ldi	r25, 0xC0	; 192
     6ec:	88 e1       	ldi	r24, 0x18	; 24
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	a8 95       	wdr
     6f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     6fe:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
     702:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
     706:	cd 91       	ld	r28, X+
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	dd 91       	ld	r29, X+
     70c:	de bf       	out	0x3e, r29	; 62
     70e:	ff 91       	pop	r31
     710:	ef 91       	pop	r30
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	bf 91       	pop	r27
     718:	af 91       	pop	r26
     71a:	9f 91       	pop	r25
     71c:	8f 91       	pop	r24
     71e:	7f 91       	pop	r23
     720:	6f 91       	pop	r22
     722:	5f 91       	pop	r21
     724:	4f 91       	pop	r20
     726:	3f 91       	pop	r19
     728:	2f 91       	pop	r18
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	cf 90       	pop	r12
     736:	bf 90       	pop	r11
     738:	af 90       	pop	r10
     73a:	9f 90       	pop	r9
     73c:	8f 90       	pop	r8
     73e:	7f 90       	pop	r7
     740:	6f 90       	pop	r6
     742:	5f 90       	pop	r5
     744:	4f 90       	pop	r4
     746:	3f 90       	pop	r3
     748:	2f 90       	pop	r2
     74a:	1f 90       	pop	r1
     74c:	0f 90       	pop	r0
     74e:	0c be       	out	0x3c, r0	; 60
     750:	0f 90       	pop	r0
     752:	0b be       	out	0x3b, r0	; 59
     754:	0f 90       	pop	r0
     756:	0f be       	out	0x3f, r0	; 63
     758:	0f 90       	pop	r0
     75a:	08 95       	ret
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	08 95       	ret

00000760 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     760:	0f 92       	push	r0
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	0f 92       	push	r0
     768:	0b b6       	in	r0, 0x3b	; 59
     76a:	0f 92       	push	r0
     76c:	0c b6       	in	r0, 0x3c	; 60
     76e:	0f 92       	push	r0
     770:	1f 92       	push	r1
     772:	11 24       	eor	r1, r1
     774:	2f 92       	push	r2
     776:	3f 92       	push	r3
     778:	4f 92       	push	r4
     77a:	5f 92       	push	r5
     77c:	6f 92       	push	r6
     77e:	7f 92       	push	r7
     780:	8f 92       	push	r8
     782:	9f 92       	push	r9
     784:	af 92       	push	r10
     786:	bf 92       	push	r11
     788:	cf 92       	push	r12
     78a:	df 92       	push	r13
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	2f 93       	push	r18
     796:	3f 93       	push	r19
     798:	4f 93       	push	r20
     79a:	5f 93       	push	r21
     79c:	6f 93       	push	r22
     79e:	7f 93       	push	r23
     7a0:	8f 93       	push	r24
     7a2:	9f 93       	push	r25
     7a4:	af 93       	push	r26
     7a6:	bf 93       	push	r27
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ef 93       	push	r30
     7ae:	ff 93       	push	r31
     7b0:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
     7b4:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
     7b8:	0d b6       	in	r0, 0x3d	; 61
     7ba:	0d 92       	st	X+, r0
     7bc:	0e b6       	in	r0, 0x3e	; 62
     7be:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     7c0:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     7c4:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
     7c8:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
     7cc:	cd 91       	ld	r28, X+
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	dd 91       	ld	r29, X+
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	ff 91       	pop	r31
     7d6:	ef 91       	pop	r30
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	df 90       	pop	r13
     7fa:	cf 90       	pop	r12
     7fc:	bf 90       	pop	r11
     7fe:	af 90       	pop	r10
     800:	9f 90       	pop	r9
     802:	8f 90       	pop	r8
     804:	7f 90       	pop	r7
     806:	6f 90       	pop	r6
     808:	5f 90       	pop	r5
     80a:	4f 90       	pop	r4
     80c:	3f 90       	pop	r3
     80e:	2f 90       	pop	r2
     810:	1f 90       	pop	r1
     812:	0f 90       	pop	r0
     814:	0c be       	out	0x3c, r0	; 60
     816:	0f 90       	pop	r0
     818:	0b be       	out	0x3b, r0	; 59
     81a:	0f 90       	pop	r0
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     820:	08 95       	ret

00000822 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     822:	0f 92       	push	r0
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	0f 92       	push	r0
     82a:	0b b6       	in	r0, 0x3b	; 59
     82c:	0f 92       	push	r0
     82e:	0c b6       	in	r0, 0x3c	; 60
     830:	0f 92       	push	r0
     832:	1f 92       	push	r1
     834:	11 24       	eor	r1, r1
     836:	2f 92       	push	r2
     838:	3f 92       	push	r3
     83a:	4f 92       	push	r4
     83c:	5f 92       	push	r5
     83e:	6f 92       	push	r6
     840:	7f 92       	push	r7
     842:	8f 92       	push	r8
     844:	9f 92       	push	r9
     846:	af 92       	push	r10
     848:	bf 92       	push	r11
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ef 93       	push	r30
     870:	ff 93       	push	r31
     872:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
     876:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
     87a:	0d b6       	in	r0, 0x3d	; 61
     87c:	0d 92       	st	X+, r0
     87e:	0e b6       	in	r0, 0x3e	; 62
     880:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     882:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     884:	c0 d7       	rcall	.+3968   	; 0x1806 <xTaskIncrementTick>
     886:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     888:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     88c:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
     890:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
     894:	cd 91       	ld	r28, X+
     896:	cd bf       	out	0x3d, r28	; 61
     898:	dd 91       	ld	r29, X+
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	ff 91       	pop	r31
     89e:	ef 91       	pop	r30
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	bf 91       	pop	r27
     8a6:	af 91       	pop	r26
     8a8:	9f 91       	pop	r25
     8aa:	8f 91       	pop	r24
     8ac:	7f 91       	pop	r23
     8ae:	6f 91       	pop	r22
     8b0:	5f 91       	pop	r21
     8b2:	4f 91       	pop	r20
     8b4:	3f 91       	pop	r19
     8b6:	2f 91       	pop	r18
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
     8c4:	bf 90       	pop	r11
     8c6:	af 90       	pop	r10
     8c8:	9f 90       	pop	r9
     8ca:	8f 90       	pop	r8
     8cc:	7f 90       	pop	r7
     8ce:	6f 90       	pop	r6
     8d0:	5f 90       	pop	r5
     8d2:	4f 90       	pop	r4
     8d4:	3f 90       	pop	r3
     8d6:	2f 90       	pop	r2
     8d8:	1f 90       	pop	r1
     8da:	0f 90       	pop	r0
     8dc:	0c be       	out	0x3c, r0	; 60
     8de:	0f 90       	pop	r0
     8e0:	0b be       	out	0x3b, r0	; 59
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     8e8:	08 95       	ret

000008ea <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     8ea:	9b df       	rcall	.-202    	; 0x822 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     8ec:	18 95       	reti

000008ee <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	0f 92       	push	r0
     8f4:	fc 01       	movw	r30, r24
     8f6:	92 8d       	ldd	r25, Z+26	; 0x1a
     8f8:	0f 90       	pop	r0
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	91 11       	cpse	r25, r1
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	08 95       	ret

00000904 <prvCopyDataToQueue>:
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	ec 01       	movw	r28, r24
     90e:	04 2f       	mov	r16, r20
     910:	1a 8d       	ldd	r17, Y+26	; 0x1a
     912:	4c 8d       	ldd	r20, Y+28	; 0x1c
     914:	41 11       	cpse	r20, r1
     916:	0c c0       	rjmp	.+24     	; 0x930 <prvCopyDataToQueue+0x2c>
     918:	88 81       	ld	r24, Y
     91a:	99 81       	ldd	r25, Y+1	; 0x01
     91c:	89 2b       	or	r24, r25
     91e:	09 f0       	breq	.+2      	; 0x922 <prvCopyDataToQueue+0x1e>
     920:	42 c0       	rjmp	.+132    	; 0x9a6 <prvCopyDataToQueue+0xa2>
     922:	8c 81       	ldd	r24, Y+4	; 0x04
     924:	9d 81       	ldd	r25, Y+5	; 0x05
     926:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <xTaskPriorityDisinherit>
     92a:	1d 82       	std	Y+5, r1	; 0x05
     92c:	1c 82       	std	Y+4, r1	; 0x04
     92e:	42 c0       	rjmp	.+132    	; 0x9b4 <prvCopyDataToQueue+0xb0>
     930:	01 11       	cpse	r16, r1
     932:	17 c0       	rjmp	.+46     	; 0x962 <prvCopyDataToQueue+0x5e>
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	8a 81       	ldd	r24, Y+2	; 0x02
     938:	9b 81       	ldd	r25, Y+3	; 0x03
     93a:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <memcpy>
     93e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     940:	8a 81       	ldd	r24, Y+2	; 0x02
     942:	9b 81       	ldd	r25, Y+3	; 0x03
     944:	82 0f       	add	r24, r18
     946:	91 1d       	adc	r25, r1
     948:	9b 83       	std	Y+3, r25	; 0x03
     94a:	8a 83       	std	Y+2, r24	; 0x02
     94c:	2c 81       	ldd	r18, Y+4	; 0x04
     94e:	3d 81       	ldd	r19, Y+5	; 0x05
     950:	82 17       	cp	r24, r18
     952:	93 07       	cpc	r25, r19
     954:	50 f1       	brcs	.+84     	; 0x9aa <prvCopyDataToQueue+0xa6>
     956:	88 81       	ld	r24, Y
     958:	99 81       	ldd	r25, Y+1	; 0x01
     95a:	9b 83       	std	Y+3, r25	; 0x03
     95c:	8a 83       	std	Y+2, r24	; 0x02
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	29 c0       	rjmp	.+82     	; 0x9b4 <prvCopyDataToQueue+0xb0>
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	8e 81       	ldd	r24, Y+6	; 0x06
     966:	9f 81       	ldd	r25, Y+7	; 0x07
     968:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <memcpy>
     96c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	91 95       	neg	r25
     972:	81 95       	neg	r24
     974:	91 09       	sbc	r25, r1
     976:	2e 81       	ldd	r18, Y+6	; 0x06
     978:	3f 81       	ldd	r19, Y+7	; 0x07
     97a:	28 0f       	add	r18, r24
     97c:	39 1f       	adc	r19, r25
     97e:	3f 83       	std	Y+7, r19	; 0x07
     980:	2e 83       	std	Y+6, r18	; 0x06
     982:	48 81       	ld	r20, Y
     984:	59 81       	ldd	r21, Y+1	; 0x01
     986:	24 17       	cp	r18, r20
     988:	35 07       	cpc	r19, r21
     98a:	30 f4       	brcc	.+12     	; 0x998 <prvCopyDataToQueue+0x94>
     98c:	2c 81       	ldd	r18, Y+4	; 0x04
     98e:	3d 81       	ldd	r19, Y+5	; 0x05
     990:	82 0f       	add	r24, r18
     992:	93 1f       	adc	r25, r19
     994:	9f 83       	std	Y+7, r25	; 0x07
     996:	8e 83       	std	Y+6, r24	; 0x06
     998:	02 30       	cpi	r16, 0x02	; 2
     99a:	49 f4       	brne	.+18     	; 0x9ae <prvCopyDataToQueue+0xaa>
     99c:	11 23       	and	r17, r17
     99e:	49 f0       	breq	.+18     	; 0x9b2 <prvCopyDataToQueue+0xae>
     9a0:	11 50       	subi	r17, 0x01	; 1
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	07 c0       	rjmp	.+14     	; 0x9b4 <prvCopyDataToQueue+0xb0>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <prvCopyDataToQueue+0xb0>
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <prvCopyDataToQueue+0xb0>
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <prvCopyDataToQueue+0xb0>
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	1f 5f       	subi	r17, 0xFF	; 255
     9b6:	1a 8f       	std	Y+26, r17	; 0x1a
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	08 95       	ret

000009c2 <prvCopyDataFromQueue>:
     9c2:	fc 01       	movw	r30, r24
     9c4:	44 8d       	ldd	r20, Z+28	; 0x1c
     9c6:	44 23       	and	r20, r20
     9c8:	a9 f0       	breq	.+42     	; 0x9f4 <prvCopyDataFromQueue+0x32>
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	26 81       	ldd	r18, Z+6	; 0x06
     9ce:	37 81       	ldd	r19, Z+7	; 0x07
     9d0:	24 0f       	add	r18, r20
     9d2:	35 1f       	adc	r19, r21
     9d4:	37 83       	std	Z+7, r19	; 0x07
     9d6:	26 83       	std	Z+6, r18	; 0x06
     9d8:	84 81       	ldd	r24, Z+4	; 0x04
     9da:	95 81       	ldd	r25, Z+5	; 0x05
     9dc:	28 17       	cp	r18, r24
     9de:	39 07       	cpc	r19, r25
     9e0:	20 f0       	brcs	.+8      	; 0x9ea <prvCopyDataFromQueue+0x28>
     9e2:	80 81       	ld	r24, Z
     9e4:	91 81       	ldd	r25, Z+1	; 0x01
     9e6:	97 83       	std	Z+7, r25	; 0x07
     9e8:	86 83       	std	Z+6, r24	; 0x06
     9ea:	cb 01       	movw	r24, r22
     9ec:	66 81       	ldd	r22, Z+6	; 0x06
     9ee:	77 81       	ldd	r23, Z+7	; 0x07
     9f0:	0c 94 f0 20 	jmp	0x41e0	; 0x41e0 <memcpy>
     9f4:	08 95       	ret

000009f6 <prvUnlockQueue>:
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	8c 01       	movw	r16, r24
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	0f 92       	push	r0
     a08:	fc 01       	movw	r30, r24
     a0a:	c6 8d       	ldd	r28, Z+30	; 0x1e
     a0c:	1c 16       	cp	r1, r28
     a0e:	ac f4       	brge	.+42     	; 0xa3a <prvUnlockQueue+0x44>
     a10:	81 89       	ldd	r24, Z+17	; 0x11
     a12:	81 11       	cpse	r24, r1
     a14:	06 c0       	rjmp	.+12     	; 0xa22 <prvUnlockQueue+0x2c>
     a16:	11 c0       	rjmp	.+34     	; 0xa3a <prvUnlockQueue+0x44>
     a18:	f8 01       	movw	r30, r16
     a1a:	81 89       	ldd	r24, Z+17	; 0x11
     a1c:	81 11       	cpse	r24, r1
     a1e:	05 c0       	rjmp	.+10     	; 0xa2a <prvUnlockQueue+0x34>
     a20:	0c c0       	rjmp	.+24     	; 0xa3a <prvUnlockQueue+0x44>
     a22:	78 01       	movw	r14, r16
     a24:	f1 e1       	ldi	r31, 0x11	; 17
     a26:	ef 0e       	add	r14, r31
     a28:	f1 1c       	adc	r15, r1
     a2a:	c7 01       	movw	r24, r14
     a2c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <xTaskRemoveFromEventList>
     a30:	81 11       	cpse	r24, r1
     a32:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <vTaskMissedYield>
     a36:	c1 50       	subi	r28, 0x01	; 1
     a38:	79 f7       	brne	.-34     	; 0xa18 <prvUnlockQueue+0x22>
     a3a:	8f ef       	ldi	r24, 0xFF	; 255
     a3c:	f8 01       	movw	r30, r16
     a3e:	86 8f       	std	Z+30, r24	; 0x1e
     a40:	0f 90       	pop	r0
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	0f 92       	push	r0
     a4a:	c5 8d       	ldd	r28, Z+29	; 0x1d
     a4c:	1c 16       	cp	r1, r28
     a4e:	ac f4       	brge	.+42     	; 0xa7a <prvUnlockQueue+0x84>
     a50:	80 85       	ldd	r24, Z+8	; 0x08
     a52:	81 11       	cpse	r24, r1
     a54:	06 c0       	rjmp	.+12     	; 0xa62 <prvUnlockQueue+0x6c>
     a56:	11 c0       	rjmp	.+34     	; 0xa7a <prvUnlockQueue+0x84>
     a58:	f8 01       	movw	r30, r16
     a5a:	80 85       	ldd	r24, Z+8	; 0x08
     a5c:	81 11       	cpse	r24, r1
     a5e:	05 c0       	rjmp	.+10     	; 0xa6a <prvUnlockQueue+0x74>
     a60:	0c c0       	rjmp	.+24     	; 0xa7a <prvUnlockQueue+0x84>
     a62:	78 01       	movw	r14, r16
     a64:	f8 e0       	ldi	r31, 0x08	; 8
     a66:	ef 0e       	add	r14, r31
     a68:	f1 1c       	adc	r15, r1
     a6a:	c7 01       	movw	r24, r14
     a6c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <xTaskRemoveFromEventList>
     a70:	81 11       	cpse	r24, r1
     a72:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <vTaskMissedYield>
     a76:	c1 50       	subi	r28, 0x01	; 1
     a78:	79 f7       	brne	.-34     	; 0xa58 <prvUnlockQueue+0x62>
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	f8 01       	movw	r30, r16
     a7e:	85 8f       	std	Z+29, r24	; 0x1d
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	08 95       	ret

00000a90 <xQueueGenericReset>:
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	ec 01       	movw	r28, r24
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	0f 92       	push	r0
     a9c:	e8 81       	ld	r30, Y
     a9e:	f9 81       	ldd	r31, Y+1	; 0x01
     aa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     aa2:	2c 8d       	ldd	r18, Y+28	; 0x1c
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	82 9f       	mul	r24, r18
     aaa:	a0 01       	movw	r20, r0
     aac:	83 9f       	mul	r24, r19
     aae:	50 0d       	add	r21, r0
     ab0:	92 9f       	mul	r25, r18
     ab2:	50 0d       	add	r21, r0
     ab4:	11 24       	eor	r1, r1
     ab6:	4e 0f       	add	r20, r30
     ab8:	5f 1f       	adc	r21, r31
     aba:	5d 83       	std	Y+5, r21	; 0x05
     abc:	4c 83       	std	Y+4, r20	; 0x04
     abe:	1a 8e       	std	Y+26, r1	; 0x1a
     ac0:	fb 83       	std	Y+3, r31	; 0x03
     ac2:	ea 83       	std	Y+2, r30	; 0x02
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	82 9f       	mul	r24, r18
     ac8:	a0 01       	movw	r20, r0
     aca:	83 9f       	mul	r24, r19
     acc:	50 0d       	add	r21, r0
     ace:	92 9f       	mul	r25, r18
     ad0:	50 0d       	add	r21, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	cf 01       	movw	r24, r30
     ad6:	84 0f       	add	r24, r20
     ad8:	95 1f       	adc	r25, r21
     ada:	9f 83       	std	Y+7, r25	; 0x07
     adc:	8e 83       	std	Y+6, r24	; 0x06
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	8d 8f       	std	Y+29, r24	; 0x1d
     ae2:	8e 8f       	std	Y+30, r24	; 0x1e
     ae4:	61 11       	cpse	r22, r1
     ae6:	0b c0       	rjmp	.+22     	; 0xafe <xQueueGenericReset+0x6e>
     ae8:	88 85       	ldd	r24, Y+8	; 0x08
     aea:	88 23       	and	r24, r24
     aec:	71 f0       	breq	.+28     	; 0xb0a <xQueueGenericReset+0x7a>
     aee:	ce 01       	movw	r24, r28
     af0:	08 96       	adiw	r24, 0x08	; 8
     af2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <xTaskRemoveFromEventList>
     af6:	88 23       	and	r24, r24
     af8:	41 f0       	breq	.+16     	; 0xb0a <xQueueGenericReset+0x7a>
     afa:	32 de       	rcall	.-924    	; 0x760 <vPortYield>
     afc:	06 c0       	rjmp	.+12     	; 0xb0a <xQueueGenericReset+0x7a>
     afe:	ce 01       	movw	r24, r28
     b00:	08 96       	adiw	r24, 0x08	; 8
     b02:	f5 dc       	rcall	.-1558   	; 0x4ee <vListInitialise>
     b04:	ce 01       	movw	r24, r28
     b06:	41 96       	adiw	r24, 0x11	; 17
     b08:	f2 dc       	rcall	.-1564   	; 0x4ee <vListInitialise>
     b0a:	0f 90       	pop	r0
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <xQueueGenericCreate>:
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	08 2f       	mov	r16, r24
     b22:	16 2f       	mov	r17, r22
     b24:	f4 2e       	mov	r15, r20
     b26:	66 23       	and	r22, r22
     b28:	b9 f0       	breq	.+46     	; 0xb58 <xQueueGenericCreate+0x42>
     b2a:	86 9f       	mul	r24, r22
     b2c:	c0 01       	movw	r24, r0
     b2e:	11 24       	eor	r1, r1
     b30:	81 96       	adiw	r24, 0x21	; 33
     b32:	bb dc       	rcall	.-1674   	; 0x4aa <pvPortMalloc>
     b34:	ec 01       	movw	r28, r24
     b36:	00 97       	sbiw	r24, 0x00	; 0
     b38:	41 f4       	brne	.+16     	; 0xb4a <xQueueGenericCreate+0x34>
     b3a:	14 c0       	rjmp	.+40     	; 0xb64 <xQueueGenericCreate+0x4e>
     b3c:	0b 8f       	std	Y+27, r16	; 0x1b
     b3e:	1c 8f       	std	Y+28, r17	; 0x1c
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	ce 01       	movw	r24, r28
     b44:	a5 df       	rcall	.-182    	; 0xa90 <xQueueGenericReset>
     b46:	f8 a2       	std	Y+32, r15	; 0x20
     b48:	0d c0       	rjmp	.+26     	; 0xb64 <xQueueGenericCreate+0x4e>
     b4a:	81 96       	adiw	r24, 0x21	; 33
     b4c:	99 83       	std	Y+1, r25	; 0x01
     b4e:	88 83       	st	Y, r24
     b50:	f5 cf       	rjmp	.-22     	; 0xb3c <xQueueGenericCreate+0x26>
     b52:	d9 83       	std	Y+1, r29	; 0x01
     b54:	c8 83       	st	Y, r28
     b56:	f2 cf       	rjmp	.-28     	; 0xb3c <xQueueGenericCreate+0x26>
     b58:	81 e2       	ldi	r24, 0x21	; 33
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	a6 dc       	rcall	.-1716   	; 0x4aa <pvPortMalloc>
     b5e:	ec 01       	movw	r28, r24
     b60:	89 2b       	or	r24, r25
     b62:	b9 f7       	brne	.-18     	; 0xb52 <xQueueGenericCreate+0x3c>
     b64:	ce 01       	movw	r24, r28
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	08 95       	ret

00000b72 <xQueueGenericSend>:
     b72:	9f 92       	push	r9
     b74:	af 92       	push	r10
     b76:	bf 92       	push	r11
     b78:	cf 92       	push	r12
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	00 d0       	rcall	.+0      	; 0xb8a <xQueueGenericSend+0x18>
     b8a:	1f 92       	push	r1
     b8c:	1f 92       	push	r1
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	8c 01       	movw	r16, r24
     b94:	6b 01       	movw	r12, r22
     b96:	5d 83       	std	Y+5, r21	; 0x05
     b98:	4c 83       	std	Y+4, r20	; 0x04
     b9a:	a2 2e       	mov	r10, r18
     b9c:	b1 2c       	mov	r11, r1
     b9e:	99 24       	eor	r9, r9
     ba0:	93 94       	inc	r9
     ba2:	7c 01       	movw	r14, r24
     ba4:	88 e0       	ldi	r24, 0x08	; 8
     ba6:	e8 0e       	add	r14, r24
     ba8:	f1 1c       	adc	r15, r1
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	0f 92       	push	r0
     bb0:	f8 01       	movw	r30, r16
     bb2:	92 8d       	ldd	r25, Z+26	; 0x1a
     bb4:	83 8d       	ldd	r24, Z+27	; 0x1b
     bb6:	98 17       	cp	r25, r24
     bb8:	18 f0       	brcs	.+6      	; 0xbc0 <xQueueGenericSend+0x4e>
     bba:	f2 e0       	ldi	r31, 0x02	; 2
     bbc:	af 12       	cpse	r10, r31
     bbe:	16 c0       	rjmp	.+44     	; 0xbec <xQueueGenericSend+0x7a>
     bc0:	4a 2d       	mov	r20, r10
     bc2:	b6 01       	movw	r22, r12
     bc4:	c8 01       	movw	r24, r16
     bc6:	9e de       	rcall	.-708    	; 0x904 <prvCopyDataToQueue>
     bc8:	f8 01       	movw	r30, r16
     bca:	91 89       	ldd	r25, Z+17	; 0x11
     bcc:	99 23       	and	r25, r25
     bce:	41 f0       	breq	.+16     	; 0xbe0 <xQueueGenericSend+0x6e>
     bd0:	c8 01       	movw	r24, r16
     bd2:	41 96       	adiw	r24, 0x11	; 17
     bd4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <xTaskRemoveFromEventList>
     bd8:	88 23       	and	r24, r24
     bda:	21 f0       	breq	.+8      	; 0xbe4 <xQueueGenericSend+0x72>
     bdc:	c1 dd       	rcall	.-1150   	; 0x760 <vPortYield>
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <xQueueGenericSend+0x72>
     be0:	81 11       	cpse	r24, r1
     be2:	be dd       	rcall	.-1156   	; 0x760 <vPortYield>
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <xQueueGenericSend+0x108>
     bec:	8c 81       	ldd	r24, Y+4	; 0x04
     bee:	9d 81       	ldd	r25, Y+5	; 0x05
     bf0:	89 2b       	or	r24, r25
     bf2:	21 f4       	brne	.+8      	; 0xbfc <xQueueGenericSend+0x8a>
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	3f c0       	rjmp	.+126    	; 0xc7a <xQueueGenericSend+0x108>
     bfc:	b1 10       	cpse	r11, r1
     bfe:	05 c0       	rjmp	.+10     	; 0xc0a <xQueueGenericSend+0x98>
     c00:	ce 01       	movw	r24, r28
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <vTaskInternalSetTimeOutState>
     c08:	b9 2c       	mov	r11, r9
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	eb d5       	rcall	.+3030   	; 0x17e6 <vTaskSuspendAll>
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	0f 92       	push	r0
     c16:	f8 01       	movw	r30, r16
     c18:	85 8d       	ldd	r24, Z+29	; 0x1d
     c1a:	8f 3f       	cpi	r24, 0xFF	; 255
     c1c:	09 f4       	brne	.+2      	; 0xc20 <xQueueGenericSend+0xae>
     c1e:	15 8e       	std	Z+29, r1	; 0x1d
     c20:	f8 01       	movw	r30, r16
     c22:	86 8d       	ldd	r24, Z+30	; 0x1e
     c24:	8f 3f       	cpi	r24, 0xFF	; 255
     c26:	09 f4       	brne	.+2      	; 0xc2a <xQueueGenericSend+0xb8>
     c28:	16 8e       	std	Z+30, r1	; 0x1e
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	be 01       	movw	r22, r28
     c30:	6c 5f       	subi	r22, 0xFC	; 252
     c32:	7f 4f       	sbci	r23, 0xFF	; 255
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 55 0e 	call	0x1caa	; 0x1caa <xTaskCheckForTimeOut>
     c3c:	81 11       	cpse	r24, r1
     c3e:	19 c0       	rjmp	.+50     	; 0xc72 <xQueueGenericSend+0x100>
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	0f 92       	push	r0
     c46:	f8 01       	movw	r30, r16
     c48:	92 8d       	ldd	r25, Z+26	; 0x1a
     c4a:	83 8d       	ldd	r24, Z+27	; 0x1b
     c4c:	0f 90       	pop	r0
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	98 13       	cpse	r25, r24
     c52:	0b c0       	rjmp	.+22     	; 0xc6a <xQueueGenericSend+0xf8>
     c54:	6c 81       	ldd	r22, Y+4	; 0x04
     c56:	7d 81       	ldd	r23, Y+5	; 0x05
     c58:	c7 01       	movw	r24, r14
     c5a:	ab d7       	rcall	.+3926   	; 0x1bb2 <vTaskPlaceOnEventList>
     c5c:	c8 01       	movw	r24, r16
     c5e:	cb de       	rcall	.-618    	; 0x9f6 <prvUnlockQueue>
     c60:	8c d6       	rcall	.+3352   	; 0x197a <xTaskResumeAll>
     c62:	81 11       	cpse	r24, r1
     c64:	a2 cf       	rjmp	.-188    	; 0xbaa <xQueueGenericSend+0x38>
     c66:	7c dd       	rcall	.-1288   	; 0x760 <vPortYield>
     c68:	a0 cf       	rjmp	.-192    	; 0xbaa <xQueueGenericSend+0x38>
     c6a:	c8 01       	movw	r24, r16
     c6c:	c4 de       	rcall	.-632    	; 0x9f6 <prvUnlockQueue>
     c6e:	85 d6       	rcall	.+3338   	; 0x197a <xTaskResumeAll>
     c70:	9c cf       	rjmp	.-200    	; 0xbaa <xQueueGenericSend+0x38>
     c72:	c8 01       	movw	r24, r16
     c74:	c0 de       	rcall	.-640    	; 0x9f6 <prvUnlockQueue>
     c76:	81 d6       	rcall	.+3330   	; 0x197a <xTaskResumeAll>
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	bf 90       	pop	r11
     c96:	af 90       	pop	r10
     c98:	9f 90       	pop	r9
     c9a:	08 95       	ret

00000c9c <xQueueCreateMutex>:
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	48 2f       	mov	r20, r24
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	37 df       	rcall	.-402    	; 0xb16 <xQueueGenericCreate>
     ca8:	ec 01       	movw	r28, r24
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	59 f0       	breq	.+22     	; 0xcc4 <xQueueCreateMutex+0x28>
     cae:	1d 82       	std	Y+5, r1	; 0x05
     cb0:	1c 82       	std	Y+4, r1	; 0x04
     cb2:	19 82       	std	Y+1, r1	; 0x01
     cb4:	18 82       	st	Y, r1
     cb6:	1e 82       	std	Y+6, r1	; 0x06
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	57 df       	rcall	.-338    	; 0xb72 <xQueueGenericSend>
     cc4:	ce 01       	movw	r24, r28
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <xQueueGenericSendFromISR>:
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	8a 01       	movw	r16, r20
     cda:	fc 01       	movw	r30, r24
     cdc:	52 8d       	ldd	r21, Z+26	; 0x1a
     cde:	33 8d       	ldd	r19, Z+27	; 0x1b
     ce0:	53 17       	cp	r21, r19
     ce2:	10 f0       	brcs	.+4      	; 0xce8 <xQueueGenericSendFromISR+0x1c>
     ce4:	22 30       	cpi	r18, 0x02	; 2
     ce6:	e1 f4       	brne	.+56     	; 0xd20 <xQueueGenericSendFromISR+0x54>
     ce8:	42 2f       	mov	r20, r18
     cea:	78 01       	movw	r14, r16
     cec:	ec 01       	movw	r28, r24
     cee:	1e 8d       	ldd	r17, Y+30	; 0x1e
     cf0:	09 de       	rcall	.-1006   	; 0x904 <prvCopyDataToQueue>
     cf2:	1f 3f       	cpi	r17, 0xFF	; 255
     cf4:	79 f4       	brne	.+30     	; 0xd14 <xQueueGenericSendFromISR+0x48>
     cf6:	89 89       	ldd	r24, Y+17	; 0x11
     cf8:	88 23       	and	r24, r24
     cfa:	a1 f0       	breq	.+40     	; 0xd24 <xQueueGenericSendFromISR+0x58>
     cfc:	ce 01       	movw	r24, r28
     cfe:	41 96       	adiw	r24, 0x11	; 17
     d00:	81 d7       	rcall	.+3842   	; 0x1c04 <xTaskRemoveFromEventList>
     d02:	88 23       	and	r24, r24
     d04:	89 f0       	breq	.+34     	; 0xd28 <xQueueGenericSendFromISR+0x5c>
     d06:	e1 14       	cp	r14, r1
     d08:	f1 04       	cpc	r15, r1
     d0a:	81 f0       	breq	.+32     	; 0xd2c <xQueueGenericSendFromISR+0x60>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	f7 01       	movw	r30, r14
     d10:	80 83       	st	Z, r24
     d12:	0d c0       	rjmp	.+26     	; 0xd2e <xQueueGenericSendFromISR+0x62>
     d14:	ff 24       	eor	r15, r15
     d16:	f3 94       	inc	r15
     d18:	f1 0e       	add	r15, r17
     d1a:	fe 8e       	std	Y+30, r15	; 0x1e
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	07 c0       	rjmp	.+14     	; 0xd2e <xQueueGenericSendFromISR+0x62>
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <xQueueGenericSendFromISR+0x62>
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	03 c0       	rjmp	.+6      	; 0xd2e <xQueueGenericSendFromISR+0x62>
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <xQueueGenericSendFromISR+0x62>
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	08 95       	ret

00000d3c <xQueueReceive>:
     d3c:	9f 92       	push	r9
     d3e:	af 92       	push	r10
     d40:	bf 92       	push	r11
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	00 d0       	rcall	.+0      	; 0xd54 <xQueueReceive+0x18>
     d54:	1f 92       	push	r1
     d56:	1f 92       	push	r1
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	8c 01       	movw	r16, r24
     d5e:	5b 01       	movw	r10, r22
     d60:	5d 83       	std	Y+5, r21	; 0x05
     d62:	4c 83       	std	Y+4, r20	; 0x04
     d64:	e1 2c       	mov	r14, r1
     d66:	99 24       	eor	r9, r9
     d68:	93 94       	inc	r9
     d6a:	6c 01       	movw	r12, r24
     d6c:	81 e1       	ldi	r24, 0x11	; 17
     d6e:	c8 0e       	add	r12, r24
     d70:	d1 1c       	adc	r13, r1
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	0f 92       	push	r0
     d78:	f8 01       	movw	r30, r16
     d7a:	f2 8c       	ldd	r15, Z+26	; 0x1a
     d7c:	ff 20       	and	r15, r15
     d7e:	91 f0       	breq	.+36     	; 0xda4 <xQueueReceive+0x68>
     d80:	b5 01       	movw	r22, r10
     d82:	c8 01       	movw	r24, r16
     d84:	1e de       	rcall	.-964    	; 0x9c2 <prvCopyDataFromQueue>
     d86:	fa 94       	dec	r15
     d88:	f8 01       	movw	r30, r16
     d8a:	f2 8e       	std	Z+26, r15	; 0x1a
     d8c:	80 85       	ldd	r24, Z+8	; 0x08
     d8e:	88 23       	and	r24, r24
     d90:	29 f0       	breq	.+10     	; 0xd9c <xQueueReceive+0x60>
     d92:	c8 01       	movw	r24, r16
     d94:	08 96       	adiw	r24, 0x08	; 8
     d96:	36 d7       	rcall	.+3692   	; 0x1c04 <xTaskRemoveFromEventList>
     d98:	81 11       	cpse	r24, r1
     d9a:	e2 dc       	rcall	.-1596   	; 0x760 <vPortYield>
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	44 c0       	rjmp	.+136    	; 0xe2c <xQueueReceive+0xf0>
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
     da6:	9d 81       	ldd	r25, Y+5	; 0x05
     da8:	89 2b       	or	r24, r25
     daa:	21 f4       	brne	.+8      	; 0xdb4 <xQueueReceive+0x78>
     dac:	0f 90       	pop	r0
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	3c c0       	rjmp	.+120    	; 0xe2c <xQueueReceive+0xf0>
     db4:	e1 10       	cpse	r14, r1
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <xQueueReceive+0x84>
     db8:	ce 01       	movw	r24, r28
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	6b d7       	rcall	.+3798   	; 0x1c94 <vTaskInternalSetTimeOutState>
     dbe:	e9 2c       	mov	r14, r9
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	10 d5       	rcall	.+2592   	; 0x17e6 <vTaskSuspendAll>
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	0f 92       	push	r0
     dcc:	f8 01       	movw	r30, r16
     dce:	85 8d       	ldd	r24, Z+29	; 0x1d
     dd0:	8f 3f       	cpi	r24, 0xFF	; 255
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <xQueueReceive+0x9a>
     dd4:	15 8e       	std	Z+29, r1	; 0x1d
     dd6:	f8 01       	movw	r30, r16
     dd8:	86 8d       	ldd	r24, Z+30	; 0x1e
     dda:	8f 3f       	cpi	r24, 0xFF	; 255
     ddc:	09 f4       	brne	.+2      	; 0xde0 <xQueueReceive+0xa4>
     dde:	16 8e       	std	Z+30, r1	; 0x1e
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	be 01       	movw	r22, r28
     de6:	6c 5f       	subi	r22, 0xFC	; 252
     de8:	7f 4f       	sbci	r23, 0xFF	; 255
     dea:	ce 01       	movw	r24, r28
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	5d d7       	rcall	.+3770   	; 0x1caa <xTaskCheckForTimeOut>
     df0:	81 11       	cpse	r24, r1
     df2:	13 c0       	rjmp	.+38     	; 0xe1a <xQueueReceive+0xde>
     df4:	c8 01       	movw	r24, r16
     df6:	7b dd       	rcall	.-1290   	; 0x8ee <prvIsQueueEmpty>
     df8:	88 23       	and	r24, r24
     dfa:	59 f0       	breq	.+22     	; 0xe12 <xQueueReceive+0xd6>
     dfc:	6c 81       	ldd	r22, Y+4	; 0x04
     dfe:	7d 81       	ldd	r23, Y+5	; 0x05
     e00:	c6 01       	movw	r24, r12
     e02:	d7 d6       	rcall	.+3502   	; 0x1bb2 <vTaskPlaceOnEventList>
     e04:	c8 01       	movw	r24, r16
     e06:	f7 dd       	rcall	.-1042   	; 0x9f6 <prvUnlockQueue>
     e08:	b8 d5       	rcall	.+2928   	; 0x197a <xTaskResumeAll>
     e0a:	81 11       	cpse	r24, r1
     e0c:	b2 cf       	rjmp	.-156    	; 0xd72 <xQueueReceive+0x36>
     e0e:	a8 dc       	rcall	.-1712   	; 0x760 <vPortYield>
     e10:	b0 cf       	rjmp	.-160    	; 0xd72 <xQueueReceive+0x36>
     e12:	c8 01       	movw	r24, r16
     e14:	f0 dd       	rcall	.-1056   	; 0x9f6 <prvUnlockQueue>
     e16:	b1 d5       	rcall	.+2914   	; 0x197a <xTaskResumeAll>
     e18:	ac cf       	rjmp	.-168    	; 0xd72 <xQueueReceive+0x36>
     e1a:	c8 01       	movw	r24, r16
     e1c:	ec dd       	rcall	.-1064   	; 0x9f6 <prvUnlockQueue>
     e1e:	ad d5       	rcall	.+2906   	; 0x197a <xTaskResumeAll>
     e20:	c8 01       	movw	r24, r16
     e22:	65 dd       	rcall	.-1334   	; 0x8ee <prvIsQueueEmpty>
     e24:	88 23       	and	r24, r24
     e26:	09 f4       	brne	.+2      	; 0xe2a <xQueueReceive+0xee>
     e28:	a4 cf       	rjmp	.-184    	; 0xd72 <xQueueReceive+0x36>
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	bf 90       	pop	r11
     e48:	af 90       	pop	r10
     e4a:	9f 90       	pop	r9
     e4c:	08 95       	ret

00000e4e <xQueueSemaphoreTake>:
     e4e:	bf 92       	push	r11
     e50:	cf 92       	push	r12
     e52:	df 92       	push	r13
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	00 d0       	rcall	.+0      	; 0xe62 <xQueueSemaphoreTake+0x14>
     e62:	1f 92       	push	r1
     e64:	1f 92       	push	r1
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	8c 01       	movw	r16, r24
     e6c:	7d 83       	std	Y+5, r23	; 0x05
     e6e:	6c 83       	std	Y+4, r22	; 0x04
     e70:	b1 2c       	mov	r11, r1
     e72:	d1 2c       	mov	r13, r1
     e74:	cc 24       	eor	r12, r12
     e76:	c3 94       	inc	r12
     e78:	7c 01       	movw	r14, r24
     e7a:	81 e1       	ldi	r24, 0x11	; 17
     e7c:	e8 0e       	add	r14, r24
     e7e:	f1 1c       	adc	r15, r1
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	0f 92       	push	r0
     e86:	d8 01       	movw	r26, r16
     e88:	5a 96       	adiw	r26, 0x1a	; 26
     e8a:	8c 91       	ld	r24, X
     e8c:	5a 97       	sbiw	r26, 0x1a	; 26
     e8e:	88 23       	and	r24, r24
     e90:	d9 f0       	breq	.+54     	; 0xec8 <xQueueSemaphoreTake+0x7a>
     e92:	81 50       	subi	r24, 0x01	; 1
     e94:	5a 96       	adiw	r26, 0x1a	; 26
     e96:	8c 93       	st	X, r24
     e98:	5a 97       	sbiw	r26, 0x1a	; 26
     e9a:	8d 91       	ld	r24, X+
     e9c:	9c 91       	ld	r25, X
     e9e:	89 2b       	or	r24, r25
     ea0:	29 f4       	brne	.+10     	; 0xeac <xQueueSemaphoreTake+0x5e>
     ea2:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <pvTaskIncrementMutexHeldCount>
     ea6:	f8 01       	movw	r30, r16
     ea8:	95 83       	std	Z+5, r25	; 0x05
     eaa:	84 83       	std	Z+4, r24	; 0x04
     eac:	d8 01       	movw	r26, r16
     eae:	18 96       	adiw	r26, 0x08	; 8
     eb0:	8c 91       	ld	r24, X
     eb2:	88 23       	and	r24, r24
     eb4:	29 f0       	breq	.+10     	; 0xec0 <xQueueSemaphoreTake+0x72>
     eb6:	c8 01       	movw	r24, r16
     eb8:	08 96       	adiw	r24, 0x08	; 8
     eba:	a4 d6       	rcall	.+3400   	; 0x1c04 <xTaskRemoveFromEventList>
     ebc:	81 11       	cpse	r24, r1
     ebe:	50 dc       	rcall	.-1888   	; 0x760 <vPortYield>
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	70 c0       	rjmp	.+224    	; 0xfa8 <xQueueSemaphoreTake+0x15a>
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	9d 81       	ldd	r25, Y+5	; 0x05
     ecc:	89 2b       	or	r24, r25
     ece:	21 f4       	brne	.+8      	; 0xed8 <xQueueSemaphoreTake+0x8a>
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	68 c0       	rjmp	.+208    	; 0xfa8 <xQueueSemaphoreTake+0x15a>
     ed8:	d1 10       	cpse	r13, r1
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <xQueueSemaphoreTake+0x96>
     edc:	ce 01       	movw	r24, r28
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	d9 d6       	rcall	.+3506   	; 0x1c94 <vTaskInternalSetTimeOutState>
     ee2:	dc 2c       	mov	r13, r12
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	7e d4       	rcall	.+2300   	; 0x17e6 <vTaskSuspendAll>
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	0f 92       	push	r0
     ef0:	f8 01       	movw	r30, r16
     ef2:	85 8d       	ldd	r24, Z+29	; 0x1d
     ef4:	8f 3f       	cpi	r24, 0xFF	; 255
     ef6:	09 f4       	brne	.+2      	; 0xefa <xQueueSemaphoreTake+0xac>
     ef8:	15 8e       	std	Z+29, r1	; 0x1d
     efa:	d8 01       	movw	r26, r16
     efc:	5e 96       	adiw	r26, 0x1e	; 30
     efe:	8c 91       	ld	r24, X
     f00:	5e 97       	sbiw	r26, 0x1e	; 30
     f02:	8f 3f       	cpi	r24, 0xFF	; 255
     f04:	11 f4       	brne	.+4      	; 0xf0a <xQueueSemaphoreTake+0xbc>
     f06:	5e 96       	adiw	r26, 0x1e	; 30
     f08:	1c 92       	st	X, r1
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	be 01       	movw	r22, r28
     f10:	6c 5f       	subi	r22, 0xFC	; 252
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	ce 01       	movw	r24, r28
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	c8 d6       	rcall	.+3472   	; 0x1caa <xTaskCheckForTimeOut>
     f1a:	81 11       	cpse	r24, r1
     f1c:	21 c0       	rjmp	.+66     	; 0xf60 <xQueueSemaphoreTake+0x112>
     f1e:	c8 01       	movw	r24, r16
     f20:	e6 dc       	rcall	.-1588   	; 0x8ee <prvIsQueueEmpty>
     f22:	88 23       	and	r24, r24
     f24:	c9 f0       	breq	.+50     	; 0xf58 <xQueueSemaphoreTake+0x10a>
     f26:	f8 01       	movw	r30, r16
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	89 2b       	or	r24, r25
     f2e:	49 f4       	brne	.+18     	; 0xf42 <xQueueSemaphoreTake+0xf4>
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	0f 92       	push	r0
     f36:	84 81       	ldd	r24, Z+4	; 0x04
     f38:	95 81       	ldd	r25, Z+5	; 0x05
     f3a:	03 d7       	rcall	.+3590   	; 0x1d42 <xTaskPriorityInherit>
     f3c:	b8 2e       	mov	r11, r24
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	6c 81       	ldd	r22, Y+4	; 0x04
     f44:	7d 81       	ldd	r23, Y+5	; 0x05
     f46:	c7 01       	movw	r24, r14
     f48:	34 d6       	rcall	.+3176   	; 0x1bb2 <vTaskPlaceOnEventList>
     f4a:	c8 01       	movw	r24, r16
     f4c:	54 dd       	rcall	.-1368   	; 0x9f6 <prvUnlockQueue>
     f4e:	15 d5       	rcall	.+2602   	; 0x197a <xTaskResumeAll>
     f50:	81 11       	cpse	r24, r1
     f52:	96 cf       	rjmp	.-212    	; 0xe80 <xQueueSemaphoreTake+0x32>
     f54:	05 dc       	rcall	.-2038   	; 0x760 <vPortYield>
     f56:	94 cf       	rjmp	.-216    	; 0xe80 <xQueueSemaphoreTake+0x32>
     f58:	c8 01       	movw	r24, r16
     f5a:	4d dd       	rcall	.-1382   	; 0x9f6 <prvUnlockQueue>
     f5c:	0e d5       	rcall	.+2588   	; 0x197a <xTaskResumeAll>
     f5e:	90 cf       	rjmp	.-224    	; 0xe80 <xQueueSemaphoreTake+0x32>
     f60:	c8 01       	movw	r24, r16
     f62:	49 dd       	rcall	.-1390   	; 0x9f6 <prvUnlockQueue>
     f64:	0a d5       	rcall	.+2580   	; 0x197a <xTaskResumeAll>
     f66:	c8 01       	movw	r24, r16
     f68:	c2 dc       	rcall	.-1660   	; 0x8ee <prvIsQueueEmpty>
     f6a:	88 23       	and	r24, r24
     f6c:	09 f4       	brne	.+2      	; 0xf70 <xQueueSemaphoreTake+0x122>
     f6e:	88 cf       	rjmp	.-240    	; 0xe80 <xQueueSemaphoreTake+0x32>
     f70:	bb 20       	and	r11, r11
     f72:	c9 f0       	breq	.+50     	; 0xfa6 <xQueueSemaphoreTake+0x158>
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	0f 92       	push	r0
     f7a:	f8 01       	movw	r30, r16
     f7c:	81 89       	ldd	r24, Z+17	; 0x11
     f7e:	88 23       	and	r24, r24
     f80:	39 f0       	breq	.+14     	; 0xf90 <xQueueSemaphoreTake+0x142>
     f82:	06 88       	ldd	r0, Z+22	; 0x16
     f84:	f7 89       	ldd	r31, Z+23	; 0x17
     f86:	e0 2d       	mov	r30, r0
     f88:	80 81       	ld	r24, Z
     f8a:	64 e0       	ldi	r22, 0x04	; 4
     f8c:	68 1b       	sub	r22, r24
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <xQueueSemaphoreTake+0x144>
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	d8 01       	movw	r26, r16
     f94:	14 96       	adiw	r26, 0x04	; 4
     f96:	8d 91       	ld	r24, X+
     f98:	9c 91       	ld	r25, X
     f9a:	15 97       	sbiw	r26, 0x05	; 5
     f9c:	84 d7       	rcall	.+3848   	; 0x1ea6 <vTaskPriorityDisinheritAfterTimeout>
     f9e:	0f 90       	pop	r0
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <xQueueSemaphoreTake+0x15a>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	df 90       	pop	r13
     fc0:	cf 90       	pop	r12
     fc2:	bf 90       	pop	r11
     fc4:	08 95       	ret

00000fc6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	0f 92       	push	r0
     fd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fd4:	8f 3f       	cpi	r24, 0xFF	; 255
     fd6:	09 f4       	brne	.+2      	; 0xfda <vQueueWaitForMessageRestricted+0x14>
     fd8:	1d 8e       	std	Y+29, r1	; 0x1d
     fda:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fdc:	8f 3f       	cpi	r24, 0xFF	; 255
     fde:	09 f4       	brne	.+2      	; 0xfe2 <vQueueWaitForMessageRestricted+0x1c>
     fe0:	1e 8e       	std	Y+30, r1	; 0x1e
     fe2:	0f 90       	pop	r0
     fe4:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     fe6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fe8:	81 11       	cpse	r24, r1
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     fec:	ce 01       	movw	r24, r28
     fee:	41 96       	adiw	r24, 0x11	; 17
     ff0:	f1 d5       	rcall	.+3042   	; 0x1bd4 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
     ff2:	ce 01       	movw	r24, r28
     ff4:	00 dd       	rcall	.-1536   	; 0x9f6 <prvUnlockQueue>
    }
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
     ffc:	fc 01       	movw	r30, r24
     ffe:	44 81       	ldd	r20, Z+4	; 0x04
    1000:	55 81       	ldd	r21, Z+5	; 0x05
    1002:	22 81       	ldd	r18, Z+2	; 0x02
    1004:	33 81       	ldd	r19, Z+3	; 0x03
    1006:	24 0f       	add	r18, r20
    1008:	35 1f       	adc	r19, r21
    100a:	80 81       	ld	r24, Z
    100c:	91 81       	ldd	r25, Z+1	; 0x01
    100e:	b9 01       	movw	r22, r18
    1010:	68 1b       	sub	r22, r24
    1012:	79 0b       	sbc	r23, r25
    1014:	cb 01       	movw	r24, r22
    1016:	64 17       	cp	r22, r20
    1018:	75 07       	cpc	r23, r21
    101a:	10 f0       	brcs	.+4      	; 0x1020 <prvBytesInBuffer+0x24>
    101c:	84 1b       	sub	r24, r20
    101e:	95 0b       	sbc	r25, r21
    1020:	08 95       	ret

00001022 <prvWriteBytesToBuffer>:
    1022:	af 92       	push	r10
    1024:	bf 92       	push	r11
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	6c 01       	movw	r12, r24
    1038:	5b 01       	movw	r10, r22
    103a:	7a 01       	movw	r14, r20
    103c:	fc 01       	movw	r30, r24
    103e:	c2 81       	ldd	r28, Z+2	; 0x02
    1040:	d3 81       	ldd	r29, Z+3	; 0x03
    1042:	04 81       	ldd	r16, Z+4	; 0x04
    1044:	15 81       	ldd	r17, Z+5	; 0x05
    1046:	0c 1b       	sub	r16, r28
    1048:	1d 0b       	sbc	r17, r29
    104a:	40 17       	cp	r20, r16
    104c:	51 07       	cpc	r21, r17
    104e:	08 f4       	brcc	.+2      	; 0x1052 <prvWriteBytesToBuffer+0x30>
    1050:	8a 01       	movw	r16, r20
    1052:	f6 01       	movw	r30, r12
    1054:	84 85       	ldd	r24, Z+12	; 0x0c
    1056:	95 85       	ldd	r25, Z+13	; 0x0d
    1058:	a8 01       	movw	r20, r16
    105a:	b5 01       	movw	r22, r10
    105c:	8c 0f       	add	r24, r28
    105e:	9d 1f       	adc	r25, r29
    1060:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <memcpy>
    1064:	0e 15       	cp	r16, r14
    1066:	1f 05       	cpc	r17, r15
    1068:	58 f4       	brcc	.+22     	; 0x1080 <prvWriteBytesToBuffer+0x5e>
    106a:	a7 01       	movw	r20, r14
    106c:	40 1b       	sub	r20, r16
    106e:	51 0b       	sbc	r21, r17
    1070:	b5 01       	movw	r22, r10
    1072:	60 0f       	add	r22, r16
    1074:	71 1f       	adc	r23, r17
    1076:	f6 01       	movw	r30, r12
    1078:	84 85       	ldd	r24, Z+12	; 0x0c
    107a:	95 85       	ldd	r25, Z+13	; 0x0d
    107c:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <memcpy>
    1080:	ce 01       	movw	r24, r28
    1082:	8e 0d       	add	r24, r14
    1084:	9f 1d       	adc	r25, r15
    1086:	f6 01       	movw	r30, r12
    1088:	24 81       	ldd	r18, Z+4	; 0x04
    108a:	35 81       	ldd	r19, Z+5	; 0x05
    108c:	82 17       	cp	r24, r18
    108e:	93 07       	cpc	r25, r19
    1090:	10 f0       	brcs	.+4      	; 0x1096 <prvWriteBytesToBuffer+0x74>
    1092:	82 1b       	sub	r24, r18
    1094:	93 0b       	sbc	r25, r19
    1096:	f6 01       	movw	r30, r12
    1098:	93 83       	std	Z+3, r25	; 0x03
    109a:	82 83       	std	Z+2, r24	; 0x02
    109c:	c7 01       	movw	r24, r14
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	bf 90       	pop	r11
    10b0:	af 90       	pop	r10
    10b2:	08 95       	ret

000010b4 <prvWriteMessageToBuffer>:
    10b4:	cf 92       	push	r12
    10b6:	df 92       	push	r13
    10b8:	ef 92       	push	r14
    10ba:	ff 92       	push	r15
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	1f 92       	push	r1
    10c6:	1f 92       	push	r1
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	5a 83       	std	Y+2, r21	; 0x02
    10ce:	49 83       	std	Y+1, r20	; 0x01
    10d0:	21 15       	cp	r18, r1
    10d2:	31 05       	cpc	r19, r1
    10d4:	c9 f0       	breq	.+50     	; 0x1108 <prvWriteMessageToBuffer+0x54>
    10d6:	6b 01       	movw	r12, r22
    10d8:	7c 01       	movw	r14, r24
    10da:	fc 01       	movw	r30, r24
    10dc:	86 85       	ldd	r24, Z+14	; 0x0e
    10de:	80 fd       	sbrc	r24, 0
    10e0:	08 c0       	rjmp	.+16     	; 0x10f2 <prvWriteMessageToBuffer+0x3e>
    10e2:	ca 01       	movw	r24, r20
    10e4:	24 17       	cp	r18, r20
    10e6:	35 07       	cpc	r19, r21
    10e8:	08 f4       	brcc	.+2      	; 0x10ec <prvWriteMessageToBuffer+0x38>
    10ea:	c9 01       	movw	r24, r18
    10ec:	9a 83       	std	Y+2, r25	; 0x02
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	11 c0       	rjmp	.+34     	; 0x1114 <prvWriteMessageToBuffer+0x60>
    10f2:	20 17       	cp	r18, r16
    10f4:	31 07       	cpc	r19, r17
    10f6:	58 f0       	brcs	.+22     	; 0x110e <prvWriteMessageToBuffer+0x5a>
    10f8:	42 e0       	ldi	r20, 0x02	; 2
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	be 01       	movw	r22, r28
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	c7 01       	movw	r24, r14
    1104:	8e df       	rcall	.-228    	; 0x1022 <prvWriteBytesToBuffer>
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <prvWriteMessageToBuffer+0x60>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	08 c0       	rjmp	.+16     	; 0x111e <prvWriteMessageToBuffer+0x6a>
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	05 c0       	rjmp	.+10     	; 0x111e <prvWriteMessageToBuffer+0x6a>
    1114:	49 81       	ldd	r20, Y+1	; 0x01
    1116:	5a 81       	ldd	r21, Y+2	; 0x02
    1118:	b6 01       	movw	r22, r12
    111a:	c7 01       	movw	r24, r14
    111c:	82 df       	rcall	.-252    	; 0x1022 <prvWriteBytesToBuffer>
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	df 90       	pop	r13
    1130:	cf 90       	pop	r12
    1132:	08 95       	ret

00001134 <prvReadBytesFromBuffer>:
    1134:	af 92       	push	r10
    1136:	bf 92       	push	r11
    1138:	cf 92       	push	r12
    113a:	df 92       	push	r13
    113c:	ef 92       	push	r14
    113e:	ff 92       	push	r15
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	7c 01       	movw	r14, r24
    114a:	5b 01       	movw	r10, r22
    114c:	e9 01       	movw	r28, r18
    114e:	42 17       	cp	r20, r18
    1150:	53 07       	cpc	r21, r19
    1152:	08 f4       	brcc	.+2      	; 0x1156 <prvReadBytesFromBuffer+0x22>
    1154:	ea 01       	movw	r28, r20
    1156:	20 97       	sbiw	r28, 0x00	; 0
    1158:	79 f1       	breq	.+94     	; 0x11b8 <prvReadBytesFromBuffer+0x84>
    115a:	f7 01       	movw	r30, r14
    115c:	00 81       	ld	r16, Z
    115e:	11 81       	ldd	r17, Z+1	; 0x01
    1160:	c4 80       	ldd	r12, Z+4	; 0x04
    1162:	d5 80       	ldd	r13, Z+5	; 0x05
    1164:	c0 1a       	sub	r12, r16
    1166:	d1 0a       	sbc	r13, r17
    1168:	cc 15       	cp	r28, r12
    116a:	dd 05       	cpc	r29, r13
    116c:	08 f4       	brcc	.+2      	; 0x1170 <prvReadBytesFromBuffer+0x3c>
    116e:	6e 01       	movw	r12, r28
    1170:	f7 01       	movw	r30, r14
    1172:	64 85       	ldd	r22, Z+12	; 0x0c
    1174:	75 85       	ldd	r23, Z+13	; 0x0d
    1176:	60 0f       	add	r22, r16
    1178:	71 1f       	adc	r23, r17
    117a:	a6 01       	movw	r20, r12
    117c:	c5 01       	movw	r24, r10
    117e:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <memcpy>
    1182:	cc 16       	cp	r12, r28
    1184:	dd 06       	cpc	r13, r29
    1186:	58 f4       	brcc	.+22     	; 0x119e <prvReadBytesFromBuffer+0x6a>
    1188:	ae 01       	movw	r20, r28
    118a:	4c 19       	sub	r20, r12
    118c:	5d 09       	sbc	r21, r13
    118e:	f7 01       	movw	r30, r14
    1190:	64 85       	ldd	r22, Z+12	; 0x0c
    1192:	75 85       	ldd	r23, Z+13	; 0x0d
    1194:	c5 01       	movw	r24, r10
    1196:	8c 0d       	add	r24, r12
    1198:	9d 1d       	adc	r25, r13
    119a:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <memcpy>
    119e:	0c 0f       	add	r16, r28
    11a0:	1d 1f       	adc	r17, r29
    11a2:	f7 01       	movw	r30, r14
    11a4:	84 81       	ldd	r24, Z+4	; 0x04
    11a6:	95 81       	ldd	r25, Z+5	; 0x05
    11a8:	08 17       	cp	r16, r24
    11aa:	19 07       	cpc	r17, r25
    11ac:	10 f0       	brcs	.+4      	; 0x11b2 <prvReadBytesFromBuffer+0x7e>
    11ae:	08 1b       	sub	r16, r24
    11b0:	19 0b       	sbc	r17, r25
    11b2:	f7 01       	movw	r30, r14
    11b4:	11 83       	std	Z+1, r17	; 0x01
    11b6:	00 83       	st	Z, r16
    11b8:	ce 01       	movw	r24, r28
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	ff 90       	pop	r15
    11c4:	ef 90       	pop	r14
    11c6:	df 90       	pop	r13
    11c8:	cf 90       	pop	r12
    11ca:	bf 90       	pop	r11
    11cc:	af 90       	pop	r10
    11ce:	08 95       	ret

000011d0 <xStreamBufferGenericCreate>:
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	eb 01       	movw	r28, r22
    11dc:	11 e0       	ldi	r17, 0x01	; 1
    11de:	41 30       	cpi	r20, 0x01	; 1
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <xStreamBufferGenericCreate+0x14>
    11e2:	10 e0       	ldi	r17, 0x00	; 0
    11e4:	20 97       	sbiw	r28, 0x00	; 0
    11e6:	11 f4       	brne	.+4      	; 0x11ec <xStreamBufferGenericCreate+0x1c>
    11e8:	c1 e0       	ldi	r28, 0x01	; 1
    11ea:	d0 e0       	ldi	r29, 0x00	; 0
    11ec:	7c 01       	movw	r14, r24
    11ee:	2f ef       	ldi	r18, 0xFF	; 255
    11f0:	e2 1a       	sub	r14, r18
    11f2:	f2 0a       	sbc	r15, r18
    11f4:	41 96       	adiw	r24, 0x11	; 17
    11f6:	59 d9       	rcall	.-3406   	; 0x4aa <pvPortMalloc>
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	81 f0       	breq	.+32     	; 0x121c <xStreamBufferGenericCreate+0x4c>
    11fc:	20 e1       	ldi	r18, 0x10	; 16
    11fe:	fc 01       	movw	r30, r24
    1200:	11 92       	st	Z+, r1
    1202:	2a 95       	dec	r18
    1204:	e9 f7       	brne	.-6      	; 0x1200 <xStreamBufferGenericCreate+0x30>
    1206:	9c 01       	movw	r18, r24
    1208:	20 5f       	subi	r18, 0xF0	; 240
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	fc 01       	movw	r30, r24
    120e:	35 87       	std	Z+13, r19	; 0x0d
    1210:	24 87       	std	Z+12, r18	; 0x0c
    1212:	f5 82       	std	Z+5, r15	; 0x05
    1214:	e4 82       	std	Z+4, r14	; 0x04
    1216:	d7 83       	std	Z+7, r29	; 0x07
    1218:	c6 83       	std	Z+6, r28	; 0x06
    121a:	16 87       	std	Z+14, r17	; 0x0e
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	08 95       	ret

00001228 <xStreamBufferReset>:
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	fc 01       	movw	r30, r24
    122e:	27 85       	ldd	r18, Z+15	; 0x0f
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	0f 92       	push	r0
    1236:	80 85       	ldd	r24, Z+8	; 0x08
    1238:	91 85       	ldd	r25, Z+9	; 0x09
    123a:	89 2b       	or	r24, r25
    123c:	d1 f4       	brne	.+52     	; 0x1272 <xStreamBufferReset+0x4a>
    123e:	82 85       	ldd	r24, Z+10	; 0x0a
    1240:	93 85       	ldd	r25, Z+11	; 0x0b
    1242:	89 2b       	or	r24, r25
    1244:	c1 f4       	brne	.+48     	; 0x1276 <xStreamBufferReset+0x4e>
    1246:	86 85       	ldd	r24, Z+14	; 0x0e
    1248:	46 81       	ldd	r20, Z+6	; 0x06
    124a:	57 81       	ldd	r21, Z+7	; 0x07
    124c:	64 81       	ldd	r22, Z+4	; 0x04
    124e:	75 81       	ldd	r23, Z+5	; 0x05
    1250:	a4 85       	ldd	r26, Z+12	; 0x0c
    1252:	b5 85       	ldd	r27, Z+13	; 0x0d
    1254:	90 e1       	ldi	r25, 0x10	; 16
    1256:	ef 01       	movw	r28, r30
    1258:	19 92       	st	Y+, r1
    125a:	9a 95       	dec	r25
    125c:	e9 f7       	brne	.-6      	; 0x1258 <xStreamBufferReset+0x30>
    125e:	b5 87       	std	Z+13, r27	; 0x0d
    1260:	a4 87       	std	Z+12, r26	; 0x0c
    1262:	75 83       	std	Z+5, r23	; 0x05
    1264:	64 83       	std	Z+4, r22	; 0x04
    1266:	57 83       	std	Z+7, r21	; 0x07
    1268:	46 83       	std	Z+6, r20	; 0x06
    126a:	86 87       	std	Z+14, r24	; 0x0e
    126c:	27 87       	std	Z+15, r18	; 0x0f
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <xStreamBufferReset+0x50>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <xStreamBufferReset+0x50>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <xStreamBufferSpacesAvailable>:
    1282:	fc 01       	movw	r30, r24
    1284:	24 81       	ldd	r18, Z+4	; 0x04
    1286:	35 81       	ldd	r19, Z+5	; 0x05
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	42 81       	ldd	r20, Z+2	; 0x02
    128e:	53 81       	ldd	r21, Z+3	; 0x03
    1290:	82 0f       	add	r24, r18
    1292:	93 1f       	adc	r25, r19
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	84 1b       	sub	r24, r20
    1298:	95 0b       	sbc	r25, r21
    129a:	82 17       	cp	r24, r18
    129c:	93 07       	cpc	r25, r19
    129e:	10 f0       	brcs	.+4      	; 0x12a4 <xStreamBufferSpacesAvailable+0x22>
    12a0:	82 1b       	sub	r24, r18
    12a2:	93 0b       	sbc	r25, r19
    12a4:	08 95       	ret

000012a6 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    12a6:	af 92       	push	r10
    12a8:	bf 92       	push	r11
    12aa:	cf 92       	push	r12
    12ac:	df 92       	push	r13
    12ae:	ef 92       	push	r14
    12b0:	ff 92       	push	r15
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	ec 01       	movw	r28, r24
    12bc:	5b 01       	movw	r10, r22
    12be:	6a 01       	movw	r12, r20
    12c0:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    12c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    12c4:	80 ff       	sbrs	r24, 0
    12c6:	04 c0       	rjmp	.+8      	; 0x12d0 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    12c8:	8a 01       	movw	r16, r20
    12ca:	0e 5f       	subi	r16, 0xFE	; 254
    12cc:	1f 4f       	sbci	r17, 0xFF	; 255
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    12d0:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    12d2:	ce 01       	movw	r24, r28
    12d4:	d6 df       	rcall	.-84     	; 0x1282 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    12d6:	9c 01       	movw	r18, r24
    12d8:	a6 01       	movw	r20, r12
    12da:	b5 01       	movw	r22, r10
    12dc:	ce 01       	movw	r24, r28
    12de:	ea de       	rcall	.-556    	; 0x10b4 <prvWriteMessageToBuffer>
    12e0:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    12e2:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    12e4:	b1 f0       	breq	.+44     	; 0x1312 <xStreamBufferSendFromISR+0x6c>
    12e6:	ce 01       	movw	r24, r28
    12e8:	89 de       	rcall	.-750    	; 0xffc <prvBytesInBuffer>
    12ea:	2e 81       	ldd	r18, Y+6	; 0x06
    12ec:	3f 81       	ldd	r19, Y+7	; 0x07
    12ee:	82 17       	cp	r24, r18
    12f0:	93 07       	cpc	r25, r19
    12f2:	78 f0       	brcs	.+30     	; 0x1312 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    12f4:	88 85       	ldd	r24, Y+8	; 0x08
    12f6:	99 85       	ldd	r25, Y+9	; 0x09
    12f8:	89 2b       	or	r24, r25
    12fa:	59 f0       	breq	.+22     	; 0x1312 <xStreamBufferSendFromISR+0x6c>
    12fc:	88 85       	ldd	r24, Y+8	; 0x08
    12fe:	99 85       	ldd	r25, Y+9	; 0x09
    1300:	00 e0       	ldi	r16, 0x00	; 0
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	ba 01       	movw	r22, r20
    130c:	2f d7       	rcall	.+3678   	; 0x216c <xTaskGenericNotifyFromISR>
    130e:	19 86       	std	Y+9, r1	; 0x09
    1310:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1312:	c6 01       	movw	r24, r12
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	df 90       	pop	r13
    1322:	cf 90       	pop	r12
    1324:	bf 90       	pop	r11
    1326:	af 90       	pop	r10
    1328:	08 95       	ret

0000132a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    132a:	6f 92       	push	r6
    132c:	7f 92       	push	r7
    132e:	8f 92       	push	r8
    1330:	9f 92       	push	r9
    1332:	af 92       	push	r10
    1334:	bf 92       	push	r11
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	1f 92       	push	r1
    1348:	1f 92       	push	r1
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	6c 01       	movw	r12, r24
    1350:	3b 01       	movw	r6, r22
    1352:	4a 01       	movw	r8, r20
    1354:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1356:	fc 01       	movw	r30, r24
    1358:	86 85       	ldd	r24, Z+14	; 0x0e
    135a:	80 fd       	sbrc	r24, 0
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    135e:	a1 2c       	mov	r10, r1
    1360:	b1 2c       	mov	r11, r1
    1362:	04 c0       	rjmp	.+8      	; 0x136c <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1364:	68 94       	set
    1366:	aa 24       	eor	r10, r10
    1368:	a1 f8       	bld	r10, 1
    136a:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    136c:	e1 14       	cp	r14, r1
    136e:	f1 04       	cpc	r15, r1
    1370:	29 f1       	breq	.+74     	; 0x13bc <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1378:	c6 01       	movw	r24, r12
    137a:	40 de       	rcall	.-896    	; 0xffc <prvBytesInBuffer>
    137c:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    137e:	a8 16       	cp	r10, r24
    1380:	b9 06       	cpc	r11, r25
    1382:	38 f0       	brcs	.+14     	; 0x1392 <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1388:	81 d7       	rcall	.+3842   	; 0x228c <xTaskNotifyStateClear>
    138a:	c8 d4       	rcall	.+2448   	; 0x1d1c <xTaskGetCurrentTaskHandle>
    138c:	f6 01       	movw	r30, r12
    138e:	91 87       	std	Z+9, r25	; 0x09
    1390:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1392:	0f 90       	pop	r0
    1394:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1396:	a0 16       	cp	r10, r16
    1398:	b1 06       	cpc	r11, r17
    139a:	b0 f0       	brcs	.+44     	; 0x13c8 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    139c:	00 e0       	ldi	r16, 0x00	; 0
    139e:	10 e0       	ldi	r17, 0x00	; 0
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	a9 01       	movw	r20, r18
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	cb 01       	movw	r24, r22
    13ac:	de d5       	rcall	.+3004   	; 0x1f6a <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    13ae:	f6 01       	movw	r30, r12
    13b0:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13b2:	10 86       	std	Z+8, r1	; 0x08
    13b4:	c6 01       	movw	r24, r12
    13b6:	22 de       	rcall	.-956    	; 0xffc <prvBytesInBuffer>
    13b8:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <xStreamBufferReceive+0x98>
    13bc:	c6 01       	movw	r24, r12
    13be:	1e de       	rcall	.-964    	; 0xffc <prvBytesInBuffer>
    13c0:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    13c2:	a0 16       	cp	r10, r16
    13c4:	b1 06       	cpc	r11, r17
    13c6:	b8 f5       	brcc	.+110    	; 0x1436 <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    13c8:	a1 14       	cp	r10, r1
    13ca:	b1 04       	cpc	r11, r1
    13cc:	c1 f0       	breq	.+48     	; 0x13fe <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    13ce:	f6 01       	movw	r30, r12
    13d0:	e0 80       	ld	r14, Z
    13d2:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    13d4:	98 01       	movw	r18, r16
    13d6:	a5 01       	movw	r20, r10
    13d8:	be 01       	movw	r22, r28
    13da:	6f 5f       	subi	r22, 0xFF	; 255
    13dc:	7f 4f       	sbci	r23, 0xFF	; 255
    13de:	c6 01       	movw	r24, r12
    13e0:	a9 de       	rcall	.-686    	; 0x1134 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    13e6:	0a 19       	sub	r16, r10
    13e8:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    13ea:	88 16       	cp	r8, r24
    13ec:	99 06       	cpc	r9, r25
    13ee:	30 f4       	brcc	.+12     	; 0x13fc <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    13f0:	f6 01       	movw	r30, r12
    13f2:	f1 82       	std	Z+1, r15	; 0x01
    13f4:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    13f6:	81 2c       	mov	r8, r1
    13f8:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    13fc:	4c 01       	movw	r8, r24
    13fe:	98 01       	movw	r18, r16
    1400:	a4 01       	movw	r20, r8
    1402:	b3 01       	movw	r22, r6
    1404:	c6 01       	movw	r24, r12
    1406:	96 de       	rcall	.-724    	; 0x1134 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1408:	7c 01       	movw	r14, r24
    140a:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    140c:	b1 f0       	breq	.+44     	; 0x143a <xStreamBufferReceive+0x110>
    140e:	eb d1       	rcall	.+982    	; 0x17e6 <vTaskSuspendAll>
    1410:	f6 01       	movw	r30, r12
    1412:	82 85       	ldd	r24, Z+10	; 0x0a
    1414:	93 85       	ldd	r25, Z+11	; 0x0b
    1416:	89 2b       	or	r24, r25
    1418:	61 f0       	breq	.+24     	; 0x1432 <xStreamBufferReceive+0x108>
    141a:	82 85       	ldd	r24, Z+10	; 0x0a
    141c:	93 85       	ldd	r25, Z+11	; 0x0b
    141e:	00 e0       	ldi	r16, 0x00	; 0
    1420:	10 e0       	ldi	r17, 0x00	; 0
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	ba 01       	movw	r22, r20
    142a:	22 d6       	rcall	.+3140   	; 0x2070 <xTaskGenericNotify>
    142c:	f6 01       	movw	r30, r12
    142e:	13 86       	std	Z+11, r1	; 0x0b
    1430:	12 86       	std	Z+10, r1	; 0x0a
    1432:	a3 d2       	rcall	.+1350   	; 0x197a <xTaskResumeAll>
    1434:	02 c0       	rjmp	.+4      	; 0x143a <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1436:	e1 2c       	mov	r14, r1
    1438:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    143a:	c7 01       	movw	r24, r14
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	ff 90       	pop	r15
    144a:	ef 90       	pop	r14
    144c:	df 90       	pop	r13
    144e:	cf 90       	pop	r12
    1450:	bf 90       	pop	r11
    1452:	af 90       	pop	r10
    1454:	9f 90       	pop	r9
    1456:	8f 90       	pop	r8
    1458:	7f 90       	pop	r7
    145a:	6f 90       	pop	r6
    145c:	08 95       	ret

0000145e <prvResetNextTaskUnblockTime>:
    145e:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxDelayedTaskList>
    1462:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxDelayedTaskList+0x1>
    1466:	80 81       	ld	r24, Z
    1468:	81 11       	cpse	r24, r1
    146a:	07 c0       	rjmp	.+14     	; 0x147a <prvResetNextTaskUnblockTime+0x1c>
    146c:	8f ef       	ldi	r24, 0xFF	; 255
    146e:	9f ef       	ldi	r25, 0xFF	; 255
    1470:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <xNextTaskUnblockTime+0x1>
    1474:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <xNextTaskUnblockTime>
    1478:	08 95       	ret
    147a:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxDelayedTaskList>
    147e:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxDelayedTaskList+0x1>
    1482:	05 80       	ldd	r0, Z+5	; 0x05
    1484:	f6 81       	ldd	r31, Z+6	; 0x06
    1486:	e0 2d       	mov	r30, r0
    1488:	06 80       	ldd	r0, Z+6	; 0x06
    148a:	f7 81       	ldd	r31, Z+7	; 0x07
    148c:	e0 2d       	mov	r30, r0
    148e:	82 81       	ldd	r24, Z+2	; 0x02
    1490:	93 81       	ldd	r25, Z+3	; 0x03
    1492:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <xNextTaskUnblockTime+0x1>
    1496:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <xNextTaskUnblockTime>
    149a:	08 95       	ret

0000149c <prvAddCurrentTaskToDelayedList>:
    149c:	ff 92       	push	r15
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	ec 01       	movw	r28, r24
    14a8:	f6 2e       	mov	r15, r22
    14aa:	00 91 97 06 	lds	r16, 0x0697	; 0x800697 <xTickCount>
    14ae:	10 91 98 06 	lds	r17, 0x0698	; 0x800698 <xTickCount+0x1>
    14b2:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    14b6:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    14ba:	02 96       	adiw	r24, 0x02	; 2
    14bc:	7c d8       	rcall	.-3848   	; 0x5b6 <uxListRemove>
    14be:	cf 3f       	cpi	r28, 0xFF	; 255
    14c0:	8f ef       	ldi	r24, 0xFF	; 255
    14c2:	d8 07       	cpc	r29, r24
    14c4:	61 f4       	brne	.+24     	; 0x14de <prvAddCurrentTaskToDelayedList+0x42>
    14c6:	ff 20       	and	r15, r15
    14c8:	51 f0       	breq	.+20     	; 0x14de <prvAddCurrentTaskToDelayedList+0x42>
    14ca:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    14ce:	70 91 f1 06 	lds	r23, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    14d2:	6e 5f       	subi	r22, 0xFE	; 254
    14d4:	7f 4f       	sbci	r23, 0xFF	; 255
    14d6:	8a e9       	ldi	r24, 0x9A	; 154
    14d8:	96 e0       	ldi	r25, 0x06	; 6
    14da:	1b d8       	rcall	.-4042   	; 0x512 <vListInsertEnd>
    14dc:	2d c0       	rjmp	.+90     	; 0x1538 <prvAddCurrentTaskToDelayedList+0x9c>
    14de:	c0 0f       	add	r28, r16
    14e0:	d1 1f       	adc	r29, r17
    14e2:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    14e6:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    14ea:	d3 83       	std	Z+3, r29	; 0x03
    14ec:	c2 83       	std	Z+2, r28	; 0x02
    14ee:	c0 17       	cp	r28, r16
    14f0:	d1 07       	cpc	r29, r17
    14f2:	60 f4       	brcc	.+24     	; 0x150c <prvAddCurrentTaskToDelayedList+0x70>
    14f4:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    14f8:	70 91 f1 06 	lds	r23, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    14fc:	80 91 b6 06 	lds	r24, 0x06B6	; 0x8006b6 <pxOverflowDelayedTaskList>
    1500:	90 91 b7 06 	lds	r25, 0x06B7	; 0x8006b7 <pxOverflowDelayedTaskList+0x1>
    1504:	6e 5f       	subi	r22, 0xFE	; 254
    1506:	7f 4f       	sbci	r23, 0xFF	; 255
    1508:	25 d8       	rcall	.-4022   	; 0x554 <vListInsert>
    150a:	16 c0       	rjmp	.+44     	; 0x1538 <prvAddCurrentTaskToDelayedList+0x9c>
    150c:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1510:	70 91 f1 06 	lds	r23, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1514:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <pxDelayedTaskList>
    1518:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <pxDelayedTaskList+0x1>
    151c:	6e 5f       	subi	r22, 0xFE	; 254
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	19 d8       	rcall	.-4046   	; 0x554 <vListInsert>
    1522:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <xNextTaskUnblockTime>
    1526:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <xNextTaskUnblockTime+0x1>
    152a:	c8 17       	cp	r28, r24
    152c:	d9 07       	cpc	r29, r25
    152e:	20 f4       	brcc	.+8      	; 0x1538 <prvAddCurrentTaskToDelayedList+0x9c>
    1530:	d0 93 90 06 	sts	0x0690, r29	; 0x800690 <xNextTaskUnblockTime+0x1>
    1534:	c0 93 8f 06 	sts	0x068F, r28	; 0x80068f <xNextTaskUnblockTime>
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	08 95       	ret

00001544 <xTaskCreate>:
    1544:	4f 92       	push	r4
    1546:	5f 92       	push	r5
    1548:	6f 92       	push	r6
    154a:	7f 92       	push	r7
    154c:	8f 92       	push	r8
    154e:	9f 92       	push	r9
    1550:	af 92       	push	r10
    1552:	bf 92       	push	r11
    1554:	cf 92       	push	r12
    1556:	df 92       	push	r13
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	0f 93       	push	r16
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	4c 01       	movw	r8, r24
    1564:	6b 01       	movw	r12, r22
    1566:	5a 01       	movw	r10, r20
    1568:	29 01       	movw	r4, r18
    156a:	ca 01       	movw	r24, r20
    156c:	0e 94 55 02 	call	0x4aa	; 0x4aa <pvPortMalloc>
    1570:	3c 01       	movw	r6, r24
    1572:	89 2b       	or	r24, r25
    1574:	09 f4       	brne	.+2      	; 0x1578 <xTaskCreate+0x34>
    1576:	f3 c0       	rjmp	.+486    	; 0x175e <xTaskCreate+0x21a>
    1578:	8c e2       	ldi	r24, 0x2C	; 44
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 55 02 	call	0x4aa	; 0x4aa <pvPortMalloc>
    1580:	ec 01       	movw	r28, r24
    1582:	89 2b       	or	r24, r25
    1584:	99 f0       	breq	.+38     	; 0x15ac <xTaskCreate+0x68>
    1586:	78 8e       	std	Y+24, r7	; 0x18
    1588:	6f 8a       	std	Y+23, r6	; 0x17
    158a:	a5 01       	movw	r20, r10
    158c:	65 ea       	ldi	r22, 0xA5	; 165
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	c3 01       	movw	r24, r6
    1592:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <memset>
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	a8 1a       	sub	r10, r24
    159a:	b1 08       	sbc	r11, r1
    159c:	8f 89       	ldd	r24, Y+23	; 0x17
    159e:	98 8d       	ldd	r25, Y+24	; 0x18
    15a0:	a8 0e       	add	r10, r24
    15a2:	b9 1e       	adc	r11, r25
    15a4:	c1 14       	cp	r12, r1
    15a6:	d1 04       	cpc	r13, r1
    15a8:	29 f4       	brne	.+10     	; 0x15b4 <xTaskCreate+0x70>
    15aa:	20 c0       	rjmp	.+64     	; 0x15ec <xTaskCreate+0xa8>
    15ac:	c3 01       	movw	r24, r6
    15ae:	0e 94 68 02 	call	0x4d0	; 0x4d0 <vPortFree>
    15b2:	d5 c0       	rjmp	.+426    	; 0x175e <xTaskCreate+0x21a>
    15b4:	d6 01       	movw	r26, r12
    15b6:	8c 91       	ld	r24, X
    15b8:	89 8f       	std	Y+25, r24	; 0x19
    15ba:	8c 91       	ld	r24, X
    15bc:	88 23       	and	r24, r24
    15be:	a1 f0       	breq	.+40     	; 0x15e8 <xTaskCreate+0xa4>
    15c0:	ae 01       	movw	r20, r28
    15c2:	46 5e       	subi	r20, 0xE6	; 230
    15c4:	5f 4f       	sbci	r21, 0xFF	; 255
    15c6:	f6 01       	movw	r30, r12
    15c8:	31 96       	adiw	r30, 0x01	; 1
    15ca:	b8 e0       	ldi	r27, 0x08	; 8
    15cc:	cb 0e       	add	r12, r27
    15ce:	d1 1c       	adc	r13, r1
    15d0:	cf 01       	movw	r24, r30
    15d2:	21 91       	ld	r18, Z+
    15d4:	da 01       	movw	r26, r20
    15d6:	2d 93       	st	X+, r18
    15d8:	ad 01       	movw	r20, r26
    15da:	dc 01       	movw	r26, r24
    15dc:	8c 91       	ld	r24, X
    15de:	88 23       	and	r24, r24
    15e0:	19 f0       	breq	.+6      	; 0x15e8 <xTaskCreate+0xa4>
    15e2:	ec 15       	cp	r30, r12
    15e4:	fd 05       	cpc	r31, r13
    15e6:	a1 f7       	brne	.-24     	; 0x15d0 <xTaskCreate+0x8c>
    15e8:	18 a2       	std	Y+32, r1	; 0x20
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <xTaskCreate+0xaa>
    15ec:	19 8e       	std	Y+25, r1	; 0x19
    15ee:	04 30       	cpi	r16, 0x04	; 4
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <xTaskCreate+0xb0>
    15f2:	03 e0       	ldi	r16, 0x03	; 3
    15f4:	0e 8b       	std	Y+22, r16	; 0x16
    15f6:	0b a3       	std	Y+35, r16	; 0x23
    15f8:	1c a2       	std	Y+36, r1	; 0x24
    15fa:	6e 01       	movw	r12, r28
    15fc:	b2 e0       	ldi	r27, 0x02	; 2
    15fe:	cb 0e       	add	r12, r27
    1600:	d1 1c       	adc	r13, r1
    1602:	c6 01       	movw	r24, r12
    1604:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialiseItem>
    1608:	ce 01       	movw	r24, r28
    160a:	0c 96       	adiw	r24, 0x0c	; 12
    160c:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialiseItem>
    1610:	d9 87       	std	Y+9, r29	; 0x09
    1612:	c8 87       	std	Y+8, r28	; 0x08
    1614:	84 e0       	ldi	r24, 0x04	; 4
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	80 1b       	sub	r24, r16
    161a:	91 09       	sbc	r25, r1
    161c:	9d 87       	std	Y+13, r25	; 0x0d
    161e:	8c 87       	std	Y+12, r24	; 0x0c
    1620:	db 8b       	std	Y+19, r29	; 0x13
    1622:	ca 8b       	std	Y+18, r28	; 0x12
    1624:	1e a2       	std	Y+38, r1	; 0x26
    1626:	1d a2       	std	Y+37, r1	; 0x25
    1628:	1f a2       	std	Y+39, r1	; 0x27
    162a:	18 a6       	std	Y+40, r1	; 0x28
    162c:	19 a6       	std	Y+41, r1	; 0x29
    162e:	1a a6       	std	Y+42, r1	; 0x2a
    1630:	1b a6       	std	Y+43, r1	; 0x2b
    1632:	a2 01       	movw	r20, r4
    1634:	b4 01       	movw	r22, r8
    1636:	c5 01       	movw	r24, r10
    1638:	0e 94 02 03 	call	0x604	; 0x604 <pxPortInitialiseStack>
    163c:	99 83       	std	Y+1, r25	; 0x01
    163e:	88 83       	st	Y, r24
    1640:	e1 14       	cp	r14, r1
    1642:	f1 04       	cpc	r15, r1
    1644:	19 f0       	breq	.+6      	; 0x164c <xTaskCreate+0x108>
    1646:	f7 01       	movw	r30, r14
    1648:	d1 83       	std	Z+1, r29	; 0x01
    164a:	c0 83       	st	Z, r28
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	0f 92       	push	r0
    1652:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <uxCurrentNumberOfTasks>
    1656:	8f 5f       	subi	r24, 0xFF	; 255
    1658:	80 93 99 06 	sts	0x0699, r24	; 0x800699 <uxCurrentNumberOfTasks>
    165c:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1660:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1664:	89 2b       	or	r24, r25
    1666:	d1 f5       	brne	.+116    	; 0x16dc <xTaskCreate+0x198>
    1668:	d0 93 f1 06 	sts	0x06F1, r29	; 0x8006f1 <pxCurrentTCB+0x1>
    166c:	c0 93 f0 06 	sts	0x06F0, r28	; 0x8006f0 <pxCurrentTCB>
    1670:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <uxCurrentNumberOfTasks>
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	09 f0       	breq	.+2      	; 0x167a <xTaskCreate+0x136>
    1678:	41 c0       	rjmp	.+130    	; 0x16fc <xTaskCreate+0x1b8>
    167a:	8c ec       	ldi	r24, 0xCC	; 204
    167c:	96 e0       	ldi	r25, 0x06	; 6
    167e:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    1682:	85 ed       	ldi	r24, 0xD5	; 213
    1684:	96 e0       	ldi	r25, 0x06	; 6
    1686:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    168a:	8e ed       	ldi	r24, 0xDE	; 222
    168c:	96 e0       	ldi	r25, 0x06	; 6
    168e:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    1692:	87 ee       	ldi	r24, 0xE7	; 231
    1694:	96 e0       	ldi	r25, 0x06	; 6
    1696:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    169a:	83 ec       	ldi	r24, 0xC3	; 195
    169c:	96 e0       	ldi	r25, 0x06	; 6
    169e:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    16a2:	8a eb       	ldi	r24, 0xBA	; 186
    16a4:	96 e0       	ldi	r25, 0x06	; 6
    16a6:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    16aa:	8d ea       	ldi	r24, 0xAD	; 173
    16ac:	96 e0       	ldi	r25, 0x06	; 6
    16ae:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    16b2:	84 ea       	ldi	r24, 0xA4	; 164
    16b4:	96 e0       	ldi	r25, 0x06	; 6
    16b6:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    16ba:	8a e9       	ldi	r24, 0x9A	; 154
    16bc:	96 e0       	ldi	r25, 0x06	; 6
    16be:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    16c2:	83 ec       	ldi	r24, 0xC3	; 195
    16c4:	96 e0       	ldi	r25, 0x06	; 6
    16c6:	90 93 b9 06 	sts	0x06B9, r25	; 0x8006b9 <pxDelayedTaskList+0x1>
    16ca:	80 93 b8 06 	sts	0x06B8, r24	; 0x8006b8 <pxDelayedTaskList>
    16ce:	8a eb       	ldi	r24, 0xBA	; 186
    16d0:	96 e0       	ldi	r25, 0x06	; 6
    16d2:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <pxOverflowDelayedTaskList+0x1>
    16d6:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <pxOverflowDelayedTaskList>
    16da:	10 c0       	rjmp	.+32     	; 0x16fc <xTaskCreate+0x1b8>
    16dc:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <xSchedulerRunning>
    16e0:	81 11       	cpse	r24, r1
    16e2:	0c c0       	rjmp	.+24     	; 0x16fc <xTaskCreate+0x1b8>
    16e4:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    16e8:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    16ec:	96 89       	ldd	r25, Z+22	; 0x16
    16ee:	8e 89       	ldd	r24, Y+22	; 0x16
    16f0:	89 17       	cp	r24, r25
    16f2:	20 f0       	brcs	.+8      	; 0x16fc <xTaskCreate+0x1b8>
    16f4:	d0 93 f1 06 	sts	0x06F1, r29	; 0x8006f1 <pxCurrentTCB+0x1>
    16f8:	c0 93 f0 06 	sts	0x06F0, r28	; 0x8006f0 <pxCurrentTCB>
    16fc:	80 91 91 06 	lds	r24, 0x0691	; 0x800691 <uxTaskNumber>
    1700:	8f 5f       	subi	r24, 0xFF	; 255
    1702:	80 93 91 06 	sts	0x0691, r24	; 0x800691 <uxTaskNumber>
    1706:	89 a3       	std	Y+33, r24	; 0x21
    1708:	8e 89       	ldd	r24, Y+22	; 0x16
    170a:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <uxTopReadyPriority>
    170e:	98 17       	cp	r25, r24
    1710:	10 f4       	brcc	.+4      	; 0x1716 <xTaskCreate+0x1d2>
    1712:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <uxTopReadyPriority>
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9c 01       	movw	r18, r24
    171a:	22 0f       	add	r18, r18
    171c:	33 1f       	adc	r19, r19
    171e:	22 0f       	add	r18, r18
    1720:	33 1f       	adc	r19, r19
    1722:	22 0f       	add	r18, r18
    1724:	33 1f       	adc	r19, r19
    1726:	82 0f       	add	r24, r18
    1728:	93 1f       	adc	r25, r19
    172a:	b6 01       	movw	r22, r12
    172c:	84 53       	subi	r24, 0x34	; 52
    172e:	99 4f       	sbci	r25, 0xF9	; 249
    1730:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1734:	0f 90       	pop	r0
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <xSchedulerRunning>
    173c:	88 23       	and	r24, r24
    173e:	59 f0       	breq	.+22     	; 0x1756 <xTaskCreate+0x212>
    1740:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1744:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1748:	96 89       	ldd	r25, Z+22	; 0x16
    174a:	8e 89       	ldd	r24, Y+22	; 0x16
    174c:	98 17       	cp	r25, r24
    174e:	28 f4       	brcc	.+10     	; 0x175a <xTaskCreate+0x216>
    1750:	07 d8       	rcall	.-4082   	; 0x760 <vPortYield>
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	05 c0       	rjmp	.+10     	; 0x1760 <xTaskCreate+0x21c>
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <xTaskCreate+0x21c>
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	01 c0       	rjmp	.+2      	; 0x1760 <xTaskCreate+0x21c>
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	0f 91       	pop	r16
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	df 90       	pop	r13
    176c:	cf 90       	pop	r12
    176e:	bf 90       	pop	r11
    1770:	af 90       	pop	r10
    1772:	9f 90       	pop	r9
    1774:	8f 90       	pop	r8
    1776:	7f 90       	pop	r7
    1778:	6f 90       	pop	r6
    177a:	5f 90       	pop	r5
    177c:	4f 90       	pop	r4
    177e:	08 95       	ret

00001780 <vTaskStartScheduler>:
    1780:	ef 92       	push	r14
    1782:	ff 92       	push	r15
    1784:	0f 93       	push	r16
    1786:	0f 2e       	mov	r0, r31
    1788:	fd e8       	ldi	r31, 0x8D	; 141
    178a:	ef 2e       	mov	r14, r31
    178c:	f6 e0       	ldi	r31, 0x06	; 6
    178e:	ff 2e       	mov	r15, r31
    1790:	f0 2d       	mov	r31, r0
    1792:	00 e0       	ldi	r16, 0x00	; 0
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 ec       	ldi	r20, 0xC0	; 192
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	6d e1       	ldi	r22, 0x1D	; 29
    179e:	72 e0       	ldi	r23, 0x02	; 2
    17a0:	8d ec       	ldi	r24, 0xCD	; 205
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	cf de       	rcall	.-610    	; 0x1544 <xTaskCreate>
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	d1 f4       	brne	.+52     	; 0x17de <vTaskStartScheduler+0x5e>
    17aa:	dc d5       	rcall	.+3000   	; 0x2364 <xTimerCreateTimerTask>
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	b9 f4       	brne	.+46     	; 0x17de <vTaskStartScheduler+0x5e>
    17b0:	f8 94       	cli
    17b2:	8f ef       	ldi	r24, 0xFF	; 255
    17b4:	9f ef       	ldi	r25, 0xFF	; 255
    17b6:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <xNextTaskUnblockTime+0x1>
    17ba:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <xNextTaskUnblockTime>
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	80 93 95 06 	sts	0x0695, r24	; 0x800695 <xSchedulerRunning>
    17c4:	10 92 98 06 	sts	0x0698, r1	; 0x800698 <xTickCount+0x1>
    17c8:	10 92 97 06 	sts	0x0697, r1	; 0x800697 <xTickCount>
    17cc:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    17d0:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    17d4:	85 a1       	ldd	r24, Z+37	; 0x25
    17d6:	0e 94 45 02 	call	0x48a	; 0x48a <task_switch_in>
    17da:	0e 94 74 03 	call	0x6e8	; 0x6e8 <xPortStartScheduler>
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	08 95       	ret

000017e6 <vTaskSuspendAll>:
    17e6:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <__data_end>
    17ea:	8f 5f       	subi	r24, 0xFF	; 255
    17ec:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <__data_end>
    17f0:	08 95       	ret

000017f2 <xTaskGetTickCount>:
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	0f 92       	push	r0
    17f8:	80 91 97 06 	lds	r24, 0x0697	; 0x800697 <xTickCount>
    17fc:	90 91 98 06 	lds	r25, 0x0698	; 0x800698 <xTickCount+0x1>
    1800:	0f 90       	pop	r0
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	08 95       	ret

00001806 <xTaskIncrementTick>:
    1806:	cf 92       	push	r12
    1808:	df 92       	push	r13
    180a:	ef 92       	push	r14
    180c:	ff 92       	push	r15
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <__data_end>
    181a:	81 11       	cpse	r24, r1
    181c:	98 c0       	rjmp	.+304    	; 0x194e <xTaskIncrementTick+0x148>
    181e:	e0 90 97 06 	lds	r14, 0x0697	; 0x800697 <xTickCount>
    1822:	f0 90 98 06 	lds	r15, 0x0698	; 0x800698 <xTickCount+0x1>
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	e8 1a       	sub	r14, r24
    182a:	f8 0a       	sbc	r15, r24
    182c:	f0 92 98 06 	sts	0x0698, r15	; 0x800698 <xTickCount+0x1>
    1830:	e0 92 97 06 	sts	0x0697, r14	; 0x800697 <xTickCount>
    1834:	e1 14       	cp	r14, r1
    1836:	f1 04       	cpc	r15, r1
    1838:	b1 f4       	brne	.+44     	; 0x1866 <xTaskIncrementTick+0x60>
    183a:	80 91 b8 06 	lds	r24, 0x06B8	; 0x8006b8 <pxDelayedTaskList>
    183e:	90 91 b9 06 	lds	r25, 0x06B9	; 0x8006b9 <pxDelayedTaskList+0x1>
    1842:	20 91 b6 06 	lds	r18, 0x06B6	; 0x8006b6 <pxOverflowDelayedTaskList>
    1846:	30 91 b7 06 	lds	r19, 0x06B7	; 0x8006b7 <pxOverflowDelayedTaskList+0x1>
    184a:	30 93 b9 06 	sts	0x06B9, r19	; 0x8006b9 <pxDelayedTaskList+0x1>
    184e:	20 93 b8 06 	sts	0x06B8, r18	; 0x8006b8 <pxDelayedTaskList>
    1852:	90 93 b7 06 	sts	0x06B7, r25	; 0x8006b7 <pxOverflowDelayedTaskList+0x1>
    1856:	80 93 b6 06 	sts	0x06B6, r24	; 0x8006b6 <pxOverflowDelayedTaskList>
    185a:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <xNumOfOverflows>
    185e:	8f 5f       	subi	r24, 0xFF	; 255
    1860:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <xNumOfOverflows>
    1864:	fc dd       	rcall	.-1032   	; 0x145e <prvResetNextTaskUnblockTime>
    1866:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <xNextTaskUnblockTime>
    186a:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <xNextTaskUnblockTime+0x1>
    186e:	e8 16       	cp	r14, r24
    1870:	f9 06       	cpc	r15, r25
    1872:	10 f4       	brcc	.+4      	; 0x1878 <xTaskIncrementTick+0x72>
    1874:	d1 2c       	mov	r13, r1
    1876:	53 c0       	rjmp	.+166    	; 0x191e <xTaskIncrementTick+0x118>
    1878:	d1 2c       	mov	r13, r1
    187a:	cc 24       	eor	r12, r12
    187c:	c3 94       	inc	r12
    187e:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxDelayedTaskList>
    1882:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxDelayedTaskList+0x1>
    1886:	80 81       	ld	r24, Z
    1888:	81 11       	cpse	r24, r1
    188a:	07 c0       	rjmp	.+14     	; 0x189a <xTaskIncrementTick+0x94>
    188c:	8f ef       	ldi	r24, 0xFF	; 255
    188e:	9f ef       	ldi	r25, 0xFF	; 255
    1890:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <xNextTaskUnblockTime+0x1>
    1894:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <xNextTaskUnblockTime>
    1898:	42 c0       	rjmp	.+132    	; 0x191e <xTaskIncrementTick+0x118>
    189a:	e0 91 b8 06 	lds	r30, 0x06B8	; 0x8006b8 <pxDelayedTaskList>
    189e:	f0 91 b9 06 	lds	r31, 0x06B9	; 0x8006b9 <pxDelayedTaskList+0x1>
    18a2:	05 80       	ldd	r0, Z+5	; 0x05
    18a4:	f6 81       	ldd	r31, Z+6	; 0x06
    18a6:	e0 2d       	mov	r30, r0
    18a8:	c6 81       	ldd	r28, Z+6	; 0x06
    18aa:	d7 81       	ldd	r29, Z+7	; 0x07
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	9b 81       	ldd	r25, Y+3	; 0x03
    18b0:	e8 16       	cp	r14, r24
    18b2:	f9 06       	cpc	r15, r25
    18b4:	28 f4       	brcc	.+10     	; 0x18c0 <xTaskIncrementTick+0xba>
    18b6:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <xNextTaskUnblockTime+0x1>
    18ba:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <xNextTaskUnblockTime>
    18be:	2f c0       	rjmp	.+94     	; 0x191e <xTaskIncrementTick+0x118>
    18c0:	8e 01       	movw	r16, r28
    18c2:	0e 5f       	subi	r16, 0xFE	; 254
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	c8 01       	movw	r24, r16
    18c8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    18cc:	8c 89       	ldd	r24, Y+20	; 0x14
    18ce:	9d 89       	ldd	r25, Y+21	; 0x15
    18d0:	89 2b       	or	r24, r25
    18d2:	21 f0       	breq	.+8      	; 0x18dc <xTaskIncrementTick+0xd6>
    18d4:	ce 01       	movw	r24, r28
    18d6:	0c 96       	adiw	r24, 0x0c	; 12
    18d8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    18dc:	8e 89       	ldd	r24, Y+22	; 0x16
    18de:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <uxTopReadyPriority>
    18e2:	98 17       	cp	r25, r24
    18e4:	10 f4       	brcc	.+4      	; 0x18ea <xTaskIncrementTick+0xe4>
    18e6:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <uxTopReadyPriority>
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	9c 01       	movw	r18, r24
    18ee:	22 0f       	add	r18, r18
    18f0:	33 1f       	adc	r19, r19
    18f2:	22 0f       	add	r18, r18
    18f4:	33 1f       	adc	r19, r19
    18f6:	22 0f       	add	r18, r18
    18f8:	33 1f       	adc	r19, r19
    18fa:	82 0f       	add	r24, r18
    18fc:	93 1f       	adc	r25, r19
    18fe:	b8 01       	movw	r22, r16
    1900:	84 53       	subi	r24, 0x34	; 52
    1902:	99 4f       	sbci	r25, 0xF9	; 249
    1904:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1908:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    190c:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1910:	9e 89       	ldd	r25, Y+22	; 0x16
    1912:	86 89       	ldd	r24, Z+22	; 0x16
    1914:	98 17       	cp	r25, r24
    1916:	08 f4       	brcc	.+2      	; 0x191a <xTaskIncrementTick+0x114>
    1918:	b2 cf       	rjmp	.-156    	; 0x187e <xTaskIncrementTick+0x78>
    191a:	dc 2c       	mov	r13, r12
    191c:	b0 cf       	rjmp	.-160    	; 0x187e <xTaskIncrementTick+0x78>
    191e:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1922:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1926:	86 89       	ldd	r24, Z+22	; 0x16
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	fc 01       	movw	r30, r24
    192c:	ee 0f       	add	r30, r30
    192e:	ff 1f       	adc	r31, r31
    1930:	ee 0f       	add	r30, r30
    1932:	ff 1f       	adc	r31, r31
    1934:	ee 0f       	add	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	8e 0f       	add	r24, r30
    193a:	9f 1f       	adc	r25, r31
    193c:	fc 01       	movw	r30, r24
    193e:	e4 53       	subi	r30, 0x34	; 52
    1940:	f9 4f       	sbci	r31, 0xF9	; 249
    1942:	80 81       	ld	r24, Z
    1944:	82 30       	cpi	r24, 0x02	; 2
    1946:	48 f0       	brcs	.+18     	; 0x195a <xTaskIncrementTick+0x154>
    1948:	dd 24       	eor	r13, r13
    194a:	d3 94       	inc	r13
    194c:	06 c0       	rjmp	.+12     	; 0x195a <xTaskIncrementTick+0x154>
    194e:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <uxPendedTicks>
    1952:	8f 5f       	subi	r24, 0xFF	; 255
    1954:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <uxPendedTicks>
    1958:	d1 2c       	mov	r13, r1
    195a:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <xYieldPending>
    195e:	88 23       	and	r24, r24
    1960:	11 f0       	breq	.+4      	; 0x1966 <xTaskIncrementTick+0x160>
    1962:	dd 24       	eor	r13, r13
    1964:	d3 94       	inc	r13
    1966:	8d 2d       	mov	r24, r13
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	ff 90       	pop	r15
    1972:	ef 90       	pop	r14
    1974:	df 90       	pop	r13
    1976:	cf 90       	pop	r12
    1978:	08 95       	ret

0000197a <xTaskResumeAll>:
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	0f 92       	push	r0
    198e:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <__data_end>
    1992:	81 50       	subi	r24, 0x01	; 1
    1994:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <__data_end>
    1998:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <__data_end>
    199c:	81 11       	cpse	r24, r1
    199e:	5d c0       	rjmp	.+186    	; 0x1a5a <xTaskResumeAll+0xe0>
    19a0:	80 91 99 06 	lds	r24, 0x0699	; 0x800699 <uxCurrentNumberOfTasks>
    19a4:	81 11       	cpse	r24, r1
    19a6:	33 c0       	rjmp	.+102    	; 0x1a0e <xTaskResumeAll+0x94>
    19a8:	5b c0       	rjmp	.+182    	; 0x1a60 <xTaskResumeAll+0xe6>
    19aa:	d7 01       	movw	r26, r14
    19ac:	15 96       	adiw	r26, 0x05	; 5
    19ae:	ed 91       	ld	r30, X+
    19b0:	fc 91       	ld	r31, X
    19b2:	16 97       	sbiw	r26, 0x06	; 6
    19b4:	c6 81       	ldd	r28, Z+6	; 0x06
    19b6:	d7 81       	ldd	r29, Z+7	; 0x07
    19b8:	ce 01       	movw	r24, r28
    19ba:	0c 96       	adiw	r24, 0x0c	; 12
    19bc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    19c0:	8e 01       	movw	r16, r28
    19c2:	0e 5f       	subi	r16, 0xFE	; 254
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	c8 01       	movw	r24, r16
    19c8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    19cc:	8e 89       	ldd	r24, Y+22	; 0x16
    19ce:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <uxTopReadyPriority>
    19d2:	98 17       	cp	r25, r24
    19d4:	10 f4       	brcc	.+4      	; 0x19da <xTaskResumeAll+0x60>
    19d6:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <uxTopReadyPriority>
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9c 01       	movw	r18, r24
    19de:	22 0f       	add	r18, r18
    19e0:	33 1f       	adc	r19, r19
    19e2:	22 0f       	add	r18, r18
    19e4:	33 1f       	adc	r19, r19
    19e6:	22 0f       	add	r18, r18
    19e8:	33 1f       	adc	r19, r19
    19ea:	82 0f       	add	r24, r18
    19ec:	93 1f       	adc	r25, r19
    19ee:	b8 01       	movw	r22, r16
    19f0:	84 53       	subi	r24, 0x34	; 52
    19f2:	99 4f       	sbci	r25, 0xF9	; 249
    19f4:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    19f8:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    19fc:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1a00:	9e 89       	ldd	r25, Y+22	; 0x16
    1a02:	86 89       	ldd	r24, Z+22	; 0x16
    1a04:	98 17       	cp	r25, r24
    1a06:	68 f0       	brcs	.+26     	; 0x1a22 <xTaskResumeAll+0xa8>
    1a08:	d0 92 93 06 	sts	0x0693, r13	; 0x800693 <xYieldPending>
    1a0c:	0a c0       	rjmp	.+20     	; 0x1a22 <xTaskResumeAll+0xa8>
    1a0e:	c0 e0       	ldi	r28, 0x00	; 0
    1a10:	d0 e0       	ldi	r29, 0x00	; 0
    1a12:	0f 2e       	mov	r0, r31
    1a14:	fd ea       	ldi	r31, 0xAD	; 173
    1a16:	ef 2e       	mov	r14, r31
    1a18:	f6 e0       	ldi	r31, 0x06	; 6
    1a1a:	ff 2e       	mov	r15, r31
    1a1c:	f0 2d       	mov	r31, r0
    1a1e:	dd 24       	eor	r13, r13
    1a20:	d3 94       	inc	r13
    1a22:	f7 01       	movw	r30, r14
    1a24:	80 81       	ld	r24, Z
    1a26:	81 11       	cpse	r24, r1
    1a28:	c0 cf       	rjmp	.-128    	; 0x19aa <xTaskResumeAll+0x30>
    1a2a:	cd 2b       	or	r28, r29
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <xTaskResumeAll+0xb6>
    1a2e:	17 dd       	rcall	.-1490   	; 0x145e <prvResetNextTaskUnblockTime>
    1a30:	c0 91 94 06 	lds	r28, 0x0694	; 0x800694 <uxPendedTicks>
    1a34:	cc 23       	and	r28, r28
    1a36:	49 f0       	breq	.+18     	; 0x1a4a <xTaskResumeAll+0xd0>
    1a38:	d1 e0       	ldi	r29, 0x01	; 1
    1a3a:	e5 de       	rcall	.-566    	; 0x1806 <xTaskIncrementTick>
    1a3c:	81 11       	cpse	r24, r1
    1a3e:	d0 93 93 06 	sts	0x0693, r29	; 0x800693 <xYieldPending>
    1a42:	c1 50       	subi	r28, 0x01	; 1
    1a44:	d1 f7       	brne	.-12     	; 0x1a3a <xTaskResumeAll+0xc0>
    1a46:	10 92 94 06 	sts	0x0694, r1	; 0x800694 <uxPendedTicks>
    1a4a:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <xYieldPending>
    1a4e:	88 23       	and	r24, r24
    1a50:	31 f0       	breq	.+12     	; 0x1a5e <xTaskResumeAll+0xe4>
    1a52:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	03 c0       	rjmp	.+6      	; 0x1a60 <xTaskResumeAll+0xe6>
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <xTaskResumeAll+0xe6>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	0f 90       	pop	r0
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	df 90       	pop	r13
    1a72:	08 95       	ret

00001a74 <vTaskDelay>:
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	ec 01       	movw	r28, r24
    1a7a:	89 2b       	or	r24, r25
    1a7c:	39 f0       	breq	.+14     	; 0x1a8c <vTaskDelay+0x18>
    1a7e:	b3 de       	rcall	.-666    	; 0x17e6 <vTaskSuspendAll>
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	ce 01       	movw	r24, r28
    1a84:	0b dd       	rcall	.-1514   	; 0x149c <prvAddCurrentTaskToDelayedList>
    1a86:	79 df       	rcall	.-270    	; 0x197a <xTaskResumeAll>
    1a88:	81 11       	cpse	r24, r1
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <vTaskDelay+0x1c>
    1a8c:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	08 95       	ret

00001a96 <vTaskSwitchContext>:
    1a96:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <__data_end>
    1a9a:	88 23       	and	r24, r24
    1a9c:	21 f0       	breq	.+8      	; 0x1aa6 <vTaskSwitchContext+0x10>
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <xYieldPending>
    1aa4:	08 95       	ret
    1aa6:	10 92 93 06 	sts	0x0693, r1	; 0x800693 <xYieldPending>
    1aaa:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1aae:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1ab2:	85 a1       	ldd	r24, Z+37	; 0x25
    1ab4:	0e 94 4f 02 	call	0x49e	; 0x49e <task_switch_out>
    1ab8:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1abc:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1ac0:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1ac4:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1ac8:	2d 91       	ld	r18, X+
    1aca:	3c 91       	ld	r19, X
    1acc:	87 89       	ldd	r24, Z+23	; 0x17
    1ace:	90 8d       	ldd	r25, Z+24	; 0x18
    1ad0:	82 17       	cp	r24, r18
    1ad2:	93 07       	cpc	r25, r19
    1ad4:	58 f0       	brcs	.+22     	; 0x1aec <vTaskSwitchContext+0x56>
    1ad6:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1ada:	70 91 f1 06 	lds	r23, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1ade:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1ae2:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1ae6:	67 5e       	subi	r22, 0xE7	; 231
    1ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aea:	55 d5       	rcall	.+2730   	; 0x2596 <vApplicationStackOverflowHook>
    1aec:	20 91 96 06 	lds	r18, 0x0696	; 0x800696 <uxTopReadyPriority>
    1af0:	82 2f       	mov	r24, r18
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	fc 01       	movw	r30, r24
    1af6:	ee 0f       	add	r30, r30
    1af8:	ff 1f       	adc	r31, r31
    1afa:	ee 0f       	add	r30, r30
    1afc:	ff 1f       	adc	r31, r31
    1afe:	ee 0f       	add	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	e8 0f       	add	r30, r24
    1b04:	f9 1f       	adc	r31, r25
    1b06:	e4 53       	subi	r30, 0x34	; 52
    1b08:	f9 4f       	sbci	r31, 0xF9	; 249
    1b0a:	30 81       	ld	r19, Z
    1b0c:	31 11       	cpse	r19, r1
    1b0e:	11 c0       	rjmp	.+34     	; 0x1b32 <vTaskSwitchContext+0x9c>
    1b10:	21 50       	subi	r18, 0x01	; 1
    1b12:	82 2f       	mov	r24, r18
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	fc 01       	movw	r30, r24
    1b18:	ee 0f       	add	r30, r30
    1b1a:	ff 1f       	adc	r31, r31
    1b1c:	ee 0f       	add	r30, r30
    1b1e:	ff 1f       	adc	r31, r31
    1b20:	ee 0f       	add	r30, r30
    1b22:	ff 1f       	adc	r31, r31
    1b24:	e8 0f       	add	r30, r24
    1b26:	f9 1f       	adc	r31, r25
    1b28:	e4 53       	subi	r30, 0x34	; 52
    1b2a:	f9 4f       	sbci	r31, 0xF9	; 249
    1b2c:	30 81       	ld	r19, Z
    1b2e:	33 23       	and	r19, r19
    1b30:	79 f3       	breq	.-34     	; 0x1b10 <vTaskSwitchContext+0x7a>
    1b32:	ac 01       	movw	r20, r24
    1b34:	44 0f       	add	r20, r20
    1b36:	55 1f       	adc	r21, r21
    1b38:	44 0f       	add	r20, r20
    1b3a:	55 1f       	adc	r21, r21
    1b3c:	44 0f       	add	r20, r20
    1b3e:	55 1f       	adc	r21, r21
    1b40:	48 0f       	add	r20, r24
    1b42:	59 1f       	adc	r21, r25
    1b44:	da 01       	movw	r26, r20
    1b46:	a4 53       	subi	r26, 0x34	; 52
    1b48:	b9 4f       	sbci	r27, 0xF9	; 249
    1b4a:	11 96       	adiw	r26, 0x01	; 1
    1b4c:	ed 91       	ld	r30, X+
    1b4e:	fc 91       	ld	r31, X
    1b50:	12 97       	sbiw	r26, 0x02	; 2
    1b52:	02 80       	ldd	r0, Z+2	; 0x02
    1b54:	f3 81       	ldd	r31, Z+3	; 0x03
    1b56:	e0 2d       	mov	r30, r0
    1b58:	12 96       	adiw	r26, 0x02	; 2
    1b5a:	fc 93       	st	X, r31
    1b5c:	ee 93       	st	-X, r30
    1b5e:	11 97       	sbiw	r26, 0x01	; 1
    1b60:	41 53       	subi	r20, 0x31	; 49
    1b62:	59 4f       	sbci	r21, 0xF9	; 249
    1b64:	e4 17       	cp	r30, r20
    1b66:	f5 07       	cpc	r31, r21
    1b68:	29 f4       	brne	.+10     	; 0x1b74 <vTaskSwitchContext+0xde>
    1b6a:	42 81       	ldd	r20, Z+2	; 0x02
    1b6c:	53 81       	ldd	r21, Z+3	; 0x03
    1b6e:	fd 01       	movw	r30, r26
    1b70:	52 83       	std	Z+2, r21	; 0x02
    1b72:	41 83       	std	Z+1, r20	; 0x01
    1b74:	fc 01       	movw	r30, r24
    1b76:	ee 0f       	add	r30, r30
    1b78:	ff 1f       	adc	r31, r31
    1b7a:	ee 0f       	add	r30, r30
    1b7c:	ff 1f       	adc	r31, r31
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31
    1b82:	8e 0f       	add	r24, r30
    1b84:	9f 1f       	adc	r25, r31
    1b86:	fc 01       	movw	r30, r24
    1b88:	e4 53       	subi	r30, 0x34	; 52
    1b8a:	f9 4f       	sbci	r31, 0xF9	; 249
    1b8c:	01 80       	ldd	r0, Z+1	; 0x01
    1b8e:	f2 81       	ldd	r31, Z+2	; 0x02
    1b90:	e0 2d       	mov	r30, r0
    1b92:	86 81       	ldd	r24, Z+6	; 0x06
    1b94:	97 81       	ldd	r25, Z+7	; 0x07
    1b96:	90 93 f1 06 	sts	0x06F1, r25	; 0x8006f1 <pxCurrentTCB+0x1>
    1b9a:	80 93 f0 06 	sts	0x06F0, r24	; 0x8006f0 <pxCurrentTCB>
    1b9e:	20 93 96 06 	sts	0x0696, r18	; 0x800696 <uxTopReadyPriority>
    1ba2:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1ba6:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1baa:	85 a1       	ldd	r24, Z+37	; 0x25
    1bac:	0c 94 45 02 	jmp	0x48a	; 0x48a <task_switch_in>
    1bb0:	08 95       	ret

00001bb2 <vTaskPlaceOnEventList>:
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	eb 01       	movw	r28, r22
    1bb8:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1bbc:	70 91 f1 06 	lds	r23, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1bc0:	64 5f       	subi	r22, 0xF4	; 244
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	0e 94 aa 02 	call	0x554	; 0x554 <vListInsert>
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	ce 01       	movw	r24, r28
    1bcc:	67 dc       	rcall	.-1842   	; 0x149c <prvAddCurrentTaskToDelayedList>
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	08 95       	ret

00001bd4 <vTaskPlaceOnEventListRestricted>:
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	8b 01       	movw	r16, r22
    1bdc:	c4 2f       	mov	r28, r20
    1bde:	60 91 f0 06 	lds	r22, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1be2:	70 91 f1 06 	lds	r23, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1be6:	64 5f       	subi	r22, 0xF4	; 244
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1bee:	cc 23       	and	r28, r28
    1bf0:	11 f0       	breq	.+4      	; 0x1bf6 <vTaskPlaceOnEventListRestricted+0x22>
    1bf2:	0f ef       	ldi	r16, 0xFF	; 255
    1bf4:	1f ef       	ldi	r17, 0xFF	; 255
    1bf6:	6c 2f       	mov	r22, r28
    1bf8:	c8 01       	movw	r24, r16
    1bfa:	50 dc       	rcall	.-1888   	; 0x149c <prvAddCurrentTaskToDelayedList>
    1bfc:	cf 91       	pop	r28
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	08 95       	ret

00001c04 <xTaskRemoveFromEventList>:
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	15 96       	adiw	r26, 0x05	; 5
    1c10:	ed 91       	ld	r30, X+
    1c12:	fc 91       	ld	r31, X
    1c14:	16 97       	sbiw	r26, 0x06	; 6
    1c16:	c6 81       	ldd	r28, Z+6	; 0x06
    1c18:	d7 81       	ldd	r29, Z+7	; 0x07
    1c1a:	8e 01       	movw	r16, r28
    1c1c:	04 5f       	subi	r16, 0xF4	; 244
    1c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c20:	c8 01       	movw	r24, r16
    1c22:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    1c26:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <__data_end>
    1c2a:	81 11       	cpse	r24, r1
    1c2c:	1c c0       	rjmp	.+56     	; 0x1c66 <xTaskRemoveFromEventList+0x62>
    1c2e:	0a 50       	subi	r16, 0x0A	; 10
    1c30:	11 09       	sbc	r17, r1
    1c32:	c8 01       	movw	r24, r16
    1c34:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    1c38:	8e 89       	ldd	r24, Y+22	; 0x16
    1c3a:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <uxTopReadyPriority>
    1c3e:	98 17       	cp	r25, r24
    1c40:	10 f4       	brcc	.+4      	; 0x1c46 <xTaskRemoveFromEventList+0x42>
    1c42:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <uxTopReadyPriority>
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	9c 01       	movw	r18, r24
    1c4a:	22 0f       	add	r18, r18
    1c4c:	33 1f       	adc	r19, r19
    1c4e:	22 0f       	add	r18, r18
    1c50:	33 1f       	adc	r19, r19
    1c52:	22 0f       	add	r18, r18
    1c54:	33 1f       	adc	r19, r19
    1c56:	82 0f       	add	r24, r18
    1c58:	93 1f       	adc	r25, r19
    1c5a:	b8 01       	movw	r22, r16
    1c5c:	84 53       	subi	r24, 0x34	; 52
    1c5e:	99 4f       	sbci	r25, 0xF9	; 249
    1c60:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <xTaskRemoveFromEventList+0x6c>
    1c66:	b8 01       	movw	r22, r16
    1c68:	8d ea       	ldi	r24, 0xAD	; 173
    1c6a:	96 e0       	ldi	r25, 0x06	; 6
    1c6c:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1c70:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1c74:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1c78:	9e 89       	ldd	r25, Y+22	; 0x16
    1c7a:	86 89       	ldd	r24, Z+22	; 0x16
    1c7c:	89 17       	cp	r24, r25
    1c7e:	20 f4       	brcc	.+8      	; 0x1c88 <xTaskRemoveFromEventList+0x84>
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <xYieldPending>
    1c86:	01 c0       	rjmp	.+2      	; 0x1c8a <xTaskRemoveFromEventList+0x86>
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	08 95       	ret

00001c94 <vTaskInternalSetTimeOutState>:
    1c94:	20 91 92 06 	lds	r18, 0x0692	; 0x800692 <xNumOfOverflows>
    1c98:	fc 01       	movw	r30, r24
    1c9a:	20 83       	st	Z, r18
    1c9c:	20 91 97 06 	lds	r18, 0x0697	; 0x800697 <xTickCount>
    1ca0:	30 91 98 06 	lds	r19, 0x0698	; 0x800698 <xTickCount+0x1>
    1ca4:	32 83       	std	Z+2, r19	; 0x02
    1ca6:	21 83       	std	Z+1, r18	; 0x01
    1ca8:	08 95       	ret

00001caa <xTaskCheckForTimeOut>:
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	0f 92       	push	r0
    1cb4:	20 91 97 06 	lds	r18, 0x0697	; 0x800697 <xTickCount>
    1cb8:	30 91 98 06 	lds	r19, 0x0698	; 0x800698 <xTickCount+0x1>
    1cbc:	db 01       	movw	r26, r22
    1cbe:	4d 91       	ld	r20, X+
    1cc0:	5c 91       	ld	r21, X
    1cc2:	4f 3f       	cpi	r20, 0xFF	; 255
    1cc4:	bf ef       	ldi	r27, 0xFF	; 255
    1cc6:	5b 07       	cpc	r21, r27
    1cc8:	e9 f0       	breq	.+58     	; 0x1d04 <xTaskCheckForTimeOut+0x5a>
    1cca:	ec 01       	movw	r28, r24
    1ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cce:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd0:	a0 91 92 06 	lds	r26, 0x0692	; 0x800692 <xNumOfOverflows>
    1cd4:	b8 81       	ld	r27, Y
    1cd6:	ba 17       	cp	r27, r26
    1cd8:	19 f0       	breq	.+6      	; 0x1ce0 <xTaskCheckForTimeOut+0x36>
    1cda:	2e 17       	cp	r18, r30
    1cdc:	3f 07       	cpc	r19, r31
    1cde:	a0 f4       	brcc	.+40     	; 0x1d08 <xTaskCheckForTimeOut+0x5e>
    1ce0:	2e 1b       	sub	r18, r30
    1ce2:	3f 0b       	sbc	r19, r31
    1ce4:	24 17       	cp	r18, r20
    1ce6:	35 07       	cpc	r19, r21
    1ce8:	40 f4       	brcc	.+16     	; 0x1cfa <xTaskCheckForTimeOut+0x50>
    1cea:	fb 01       	movw	r30, r22
    1cec:	42 1b       	sub	r20, r18
    1cee:	53 0b       	sbc	r21, r19
    1cf0:	51 83       	std	Z+1, r21	; 0x01
    1cf2:	40 83       	st	Z, r20
    1cf4:	cf df       	rcall	.-98     	; 0x1c94 <vTaskInternalSetTimeOutState>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	08 c0       	rjmp	.+16     	; 0x1d0a <xTaskCheckForTimeOut+0x60>
    1cfa:	fb 01       	movw	r30, r22
    1cfc:	11 82       	std	Z+1, r1	; 0x01
    1cfe:	10 82       	st	Z, r1
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	03 c0       	rjmp	.+6      	; 0x1d0a <xTaskCheckForTimeOut+0x60>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	01 c0       	rjmp	.+2      	; 0x1d0a <xTaskCheckForTimeOut+0x60>
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	0f 90       	pop	r0
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <vTaskMissedYield>:
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <xYieldPending>
    1d1a:	08 95       	ret

00001d1c <xTaskGetCurrentTaskHandle>:
    1d1c:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1d20:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1d24:	08 95       	ret

00001d26 <xTaskGetSchedulerState>:
    1d26:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <xSchedulerRunning>
    1d2a:	88 23       	and	r24, r24
    1d2c:	31 f0       	breq	.+12     	; 0x1d3a <xTaskGetSchedulerState+0x14>
    1d2e:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <__data_end>
    1d32:	88 23       	and	r24, r24
    1d34:	21 f0       	breq	.+8      	; 0x1d3e <xTaskGetSchedulerState+0x18>
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	08 95       	ret
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	08 95       	ret
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	08 95       	ret

00001d42 <xTaskPriorityInherit>:
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	89 2b       	or	r24, r25
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <xTaskPriorityInherit+0x10>
    1d50:	64 c0       	rjmp	.+200    	; 0x1e1a <xTaskPriorityInherit+0xd8>
    1d52:	26 89       	ldd	r18, Z+22	; 0x16
    1d54:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1d58:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1d5c:	56 96       	adiw	r26, 0x16	; 22
    1d5e:	8c 91       	ld	r24, X
    1d60:	28 17       	cp	r18, r24
    1d62:	08 f0       	brcs	.+2      	; 0x1d66 <xTaskPriorityInherit+0x24>
    1d64:	4e c0       	rjmp	.+156    	; 0x1e02 <xTaskPriorityInherit+0xc0>
    1d66:	84 85       	ldd	r24, Z+12	; 0x0c
    1d68:	95 85       	ldd	r25, Z+13	; 0x0d
    1d6a:	99 23       	and	r25, r25
    1d6c:	64 f0       	brlt	.+24     	; 0x1d86 <xTaskPriorityInherit+0x44>
    1d6e:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1d72:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1d76:	56 96       	adiw	r26, 0x16	; 22
    1d78:	3c 91       	ld	r19, X
    1d7a:	84 e0       	ldi	r24, 0x04	; 4
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	83 1b       	sub	r24, r19
    1d80:	91 09       	sbc	r25, r1
    1d82:	95 87       	std	Z+13, r25	; 0x0d
    1d84:	84 87       	std	Z+12, r24	; 0x0c
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	c9 01       	movw	r24, r18
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	28 0f       	add	r18, r24
    1d98:	39 1f       	adc	r19, r25
    1d9a:	24 53       	subi	r18, 0x34	; 52
    1d9c:	39 4f       	sbci	r19, 0xF9	; 249
    1d9e:	82 85       	ldd	r24, Z+10	; 0x0a
    1da0:	93 85       	ldd	r25, Z+11	; 0x0b
    1da2:	82 17       	cp	r24, r18
    1da4:	93 07       	cpc	r25, r19
    1da6:	21 f5       	brne	.+72     	; 0x1df0 <xTaskPriorityInherit+0xae>
    1da8:	8f 01       	movw	r16, r30
    1daa:	ef 01       	movw	r28, r30
    1dac:	22 96       	adiw	r28, 0x02	; 2
    1dae:	ce 01       	movw	r24, r28
    1db0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    1db4:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1db8:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1dbc:	86 89       	ldd	r24, Z+22	; 0x16
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	86 8b       	std	Z+22, r24	; 0x16
    1dc2:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <uxTopReadyPriority>
    1dc6:	98 17       	cp	r25, r24
    1dc8:	10 f4       	brcc	.+4      	; 0x1dce <xTaskPriorityInherit+0x8c>
    1dca:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <uxTopReadyPriority>
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9c 01       	movw	r18, r24
    1dd2:	22 0f       	add	r18, r18
    1dd4:	33 1f       	adc	r19, r19
    1dd6:	22 0f       	add	r18, r18
    1dd8:	33 1f       	adc	r19, r19
    1dda:	22 0f       	add	r18, r18
    1ddc:	33 1f       	adc	r19, r19
    1dde:	82 0f       	add	r24, r18
    1de0:	93 1f       	adc	r25, r19
    1de2:	be 01       	movw	r22, r28
    1de4:	84 53       	subi	r24, 0x34	; 52
    1de6:	99 4f       	sbci	r25, 0xF9	; 249
    1de8:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	16 c0       	rjmp	.+44     	; 0x1e1c <xTaskPriorityInherit+0xda>
    1df0:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1df4:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1df8:	56 96       	adiw	r26, 0x16	; 22
    1dfa:	8c 91       	ld	r24, X
    1dfc:	86 8b       	std	Z+22, r24	; 0x16
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	0d c0       	rjmp	.+26     	; 0x1e1c <xTaskPriorityInherit+0xda>
    1e02:	a0 91 f0 06 	lds	r26, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1e06:	b0 91 f1 06 	lds	r27, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	23 a1       	ldd	r18, Z+35	; 0x23
    1e0e:	56 96       	adiw	r26, 0x16	; 22
    1e10:	9c 91       	ld	r25, X
    1e12:	29 17       	cp	r18, r25
    1e14:	18 f0       	brcs	.+6      	; 0x1e1c <xTaskPriorityInherit+0xda>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <xTaskPriorityInherit+0xda>
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	08 95       	ret

00001e26 <xTaskPriorityDisinherit>:
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	fc 01       	movw	r30, r24
    1e30:	89 2b       	or	r24, r25
    1e32:	79 f1       	breq	.+94     	; 0x1e92 <xTaskPriorityDisinherit+0x6c>
    1e34:	84 a1       	ldd	r24, Z+36	; 0x24
    1e36:	81 50       	subi	r24, 0x01	; 1
    1e38:	84 a3       	std	Z+36, r24	; 0x24
    1e3a:	26 89       	ldd	r18, Z+22	; 0x16
    1e3c:	93 a1       	ldd	r25, Z+35	; 0x23
    1e3e:	29 17       	cp	r18, r25
    1e40:	51 f1       	breq	.+84     	; 0x1e96 <xTaskPriorityDisinherit+0x70>
    1e42:	81 11       	cpse	r24, r1
    1e44:	2a c0       	rjmp	.+84     	; 0x1e9a <xTaskPriorityDisinherit+0x74>
    1e46:	ef 01       	movw	r28, r30
    1e48:	8f 01       	movw	r16, r30
    1e4a:	0e 5f       	subi	r16, 0xFE	; 254
    1e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4e:	c8 01       	movw	r24, r16
    1e50:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    1e54:	8b a1       	ldd	r24, Y+35	; 0x23
    1e56:	8e 8b       	std	Y+22, r24	; 0x16
    1e58:	24 e0       	ldi	r18, 0x04	; 4
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	28 1b       	sub	r18, r24
    1e5e:	31 09       	sbc	r19, r1
    1e60:	3d 87       	std	Y+13, r19	; 0x0d
    1e62:	2c 87       	std	Y+12, r18	; 0x0c
    1e64:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <uxTopReadyPriority>
    1e68:	98 17       	cp	r25, r24
    1e6a:	10 f4       	brcc	.+4      	; 0x1e70 <xTaskPriorityDisinherit+0x4a>
    1e6c:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <uxTopReadyPriority>
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9c 01       	movw	r18, r24
    1e74:	22 0f       	add	r18, r18
    1e76:	33 1f       	adc	r19, r19
    1e78:	22 0f       	add	r18, r18
    1e7a:	33 1f       	adc	r19, r19
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	82 0f       	add	r24, r18
    1e82:	93 1f       	adc	r25, r19
    1e84:	b8 01       	movw	r22, r16
    1e86:	84 53       	subi	r24, 0x34	; 52
    1e88:	99 4f       	sbci	r25, 0xF9	; 249
    1e8a:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <xTaskPriorityDisinherit+0x76>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	03 c0       	rjmp	.+6      	; 0x1e9c <xTaskPriorityDisinherit+0x76>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	01 c0       	rjmp	.+2      	; 0x1e9c <xTaskPriorityDisinherit+0x76>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	08 95       	ret

00001ea6 <vTaskPriorityDisinheritAfterTimeout>:
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	fc 01       	movw	r30, r24
    1eb0:	89 2b       	or	r24, r25
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <vTaskPriorityDisinheritAfterTimeout+0x10>
    1eb4:	43 c0       	rjmp	.+134    	; 0x1f3c <vTaskPriorityDisinheritAfterTimeout+0x96>
    1eb6:	93 a1       	ldd	r25, Z+35	; 0x23
    1eb8:	96 17       	cp	r25, r22
    1eba:	08 f4       	brcc	.+2      	; 0x1ebe <vTaskPriorityDisinheritAfterTimeout+0x18>
    1ebc:	96 2f       	mov	r25, r22
    1ebe:	86 89       	ldd	r24, Z+22	; 0x16
    1ec0:	89 17       	cp	r24, r25
    1ec2:	e1 f1       	breq	.+120    	; 0x1f3c <vTaskPriorityDisinheritAfterTimeout+0x96>
    1ec4:	24 a1       	ldd	r18, Z+36	; 0x24
    1ec6:	21 30       	cpi	r18, 0x01	; 1
    1ec8:	c9 f5       	brne	.+114    	; 0x1f3c <vTaskPriorityDisinheritAfterTimeout+0x96>
    1eca:	96 8b       	std	Z+22, r25	; 0x16
    1ecc:	24 85       	ldd	r18, Z+12	; 0x0c
    1ece:	35 85       	ldd	r19, Z+13	; 0x0d
    1ed0:	33 23       	and	r19, r19
    1ed2:	34 f0       	brlt	.+12     	; 0x1ee0 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    1ed4:	24 e0       	ldi	r18, 0x04	; 4
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	29 1b       	sub	r18, r25
    1eda:	31 09       	sbc	r19, r1
    1edc:	35 87       	std	Z+13, r19	; 0x0d
    1ede:	24 87       	std	Z+12, r18	; 0x0c
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9c 01       	movw	r18, r24
    1ee4:	22 0f       	add	r18, r18
    1ee6:	33 1f       	adc	r19, r19
    1ee8:	22 0f       	add	r18, r18
    1eea:	33 1f       	adc	r19, r19
    1eec:	22 0f       	add	r18, r18
    1eee:	33 1f       	adc	r19, r19
    1ef0:	82 0f       	add	r24, r18
    1ef2:	93 1f       	adc	r25, r19
    1ef4:	84 53       	subi	r24, 0x34	; 52
    1ef6:	99 4f       	sbci	r25, 0xF9	; 249
    1ef8:	22 85       	ldd	r18, Z+10	; 0x0a
    1efa:	33 85       	ldd	r19, Z+11	; 0x0b
    1efc:	28 17       	cp	r18, r24
    1efe:	39 07       	cpc	r19, r25
    1f00:	e9 f4       	brne	.+58     	; 0x1f3c <vTaskPriorityDisinheritAfterTimeout+0x96>
    1f02:	ef 01       	movw	r28, r30
    1f04:	8f 01       	movw	r16, r30
    1f06:	0e 5f       	subi	r16, 0xFE	; 254
    1f08:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0a:	c8 01       	movw	r24, r16
    1f0c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    1f10:	8e 89       	ldd	r24, Y+22	; 0x16
    1f12:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <uxTopReadyPriority>
    1f16:	98 17       	cp	r25, r24
    1f18:	10 f4       	brcc	.+4      	; 0x1f1e <vTaskPriorityDisinheritAfterTimeout+0x78>
    1f1a:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <uxTopReadyPriority>
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	9c 01       	movw	r18, r24
    1f22:	22 0f       	add	r18, r18
    1f24:	33 1f       	adc	r19, r19
    1f26:	22 0f       	add	r18, r18
    1f28:	33 1f       	adc	r19, r19
    1f2a:	22 0f       	add	r18, r18
    1f2c:	33 1f       	adc	r19, r19
    1f2e:	82 0f       	add	r24, r18
    1f30:	93 1f       	adc	r25, r19
    1f32:	b8 01       	movw	r22, r16
    1f34:	84 53       	subi	r24, 0x34	; 52
    1f36:	99 4f       	sbci	r25, 0xF9	; 249
    1f38:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	08 95       	ret

00001f46 <pvTaskIncrementMutexHeldCount>:
    1f46:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1f4a:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1f4e:	89 2b       	or	r24, r25
    1f50:	39 f0       	breq	.+14     	; 0x1f60 <pvTaskIncrementMutexHeldCount+0x1a>
    1f52:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1f56:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1f5a:	84 a1       	ldd	r24, Z+36	; 0x24
    1f5c:	8f 5f       	subi	r24, 0xFF	; 255
    1f5e:	84 a3       	std	Z+36, r24	; 0x24
    1f60:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1f64:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1f68:	08 95       	ret

00001f6a <xTaskNotifyWait>:
    1f6a:	4f 92       	push	r4
    1f6c:	5f 92       	push	r5
    1f6e:	6f 92       	push	r6
    1f70:	7f 92       	push	r7
    1f72:	8f 92       	push	r8
    1f74:	9f 92       	push	r9
    1f76:	af 92       	push	r10
    1f78:	bf 92       	push	r11
    1f7a:	ef 92       	push	r14
    1f7c:	ff 92       	push	r15
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	49 01       	movw	r8, r18
    1f84:	5a 01       	movw	r10, r20
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	0f 92       	push	r0
    1f8c:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1f90:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1f94:	23 a5       	ldd	r18, Z+43	; 0x2b
    1f96:	22 30       	cpi	r18, 0x02	; 2
    1f98:	21 f1       	breq	.+72     	; 0x1fe2 <xTaskNotifyWait+0x78>
    1f9a:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1f9e:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1fa2:	47 a0       	ldd	r4, Z+39	; 0x27
    1fa4:	50 a4       	ldd	r5, Z+40	; 0x28
    1fa6:	61 a4       	ldd	r6, Z+41	; 0x29
    1fa8:	72 a4       	ldd	r7, Z+42	; 0x2a
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	80 95       	com	r24
    1fb0:	90 95       	com	r25
    1fb2:	a0 95       	com	r26
    1fb4:	b0 95       	com	r27
    1fb6:	84 21       	and	r24, r4
    1fb8:	95 21       	and	r25, r5
    1fba:	a6 21       	and	r26, r6
    1fbc:	b7 21       	and	r27, r7
    1fbe:	87 a3       	std	Z+39, r24	; 0x27
    1fc0:	90 a7       	std	Z+40, r25	; 0x28
    1fc2:	a1 a7       	std	Z+41, r26	; 0x29
    1fc4:	b2 a7       	std	Z+42, r27	; 0x2a
    1fc6:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1fca:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	83 a7       	std	Z+43, r24	; 0x2b
    1fd2:	e1 14       	cp	r14, r1
    1fd4:	f1 04       	cpc	r15, r1
    1fd6:	29 f0       	breq	.+10     	; 0x1fe2 <xTaskNotifyWait+0x78>
    1fd8:	61 e0       	ldi	r22, 0x01	; 1
    1fda:	c7 01       	movw	r24, r14
    1fdc:	5f da       	rcall	.-2882   	; 0x149c <prvAddCurrentTaskToDelayedList>
    1fde:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    1fe2:	0f 90       	pop	r0
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	0f 92       	push	r0
    1fec:	01 15       	cp	r16, r1
    1fee:	11 05       	cpc	r17, r1
    1ff0:	69 f0       	breq	.+26     	; 0x200c <xTaskNotifyWait+0xa2>
    1ff2:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    1ff6:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    1ffa:	87 a1       	ldd	r24, Z+39	; 0x27
    1ffc:	90 a5       	ldd	r25, Z+40	; 0x28
    1ffe:	a1 a5       	ldd	r26, Z+41	; 0x29
    2000:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2002:	f8 01       	movw	r30, r16
    2004:	80 83       	st	Z, r24
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	a2 83       	std	Z+2, r26	; 0x02
    200a:	b3 83       	std	Z+3, r27	; 0x03
    200c:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2010:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    2014:	83 a5       	ldd	r24, Z+43	; 0x2b
    2016:	82 30       	cpi	r24, 0x02	; 2
    2018:	b1 f4       	brne	.+44     	; 0x2046 <xTaskNotifyWait+0xdc>
    201a:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    201e:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    2022:	87 a1       	ldd	r24, Z+39	; 0x27
    2024:	90 a5       	ldd	r25, Z+40	; 0x28
    2026:	a1 a5       	ldd	r26, Z+41	; 0x29
    2028:	b2 a5       	ldd	r27, Z+42	; 0x2a
    202a:	80 94       	com	r8
    202c:	90 94       	com	r9
    202e:	a0 94       	com	r10
    2030:	b0 94       	com	r11
    2032:	88 22       	and	r8, r24
    2034:	99 22       	and	r9, r25
    2036:	aa 22       	and	r10, r26
    2038:	bb 22       	and	r11, r27
    203a:	87 a2       	std	Z+39, r8	; 0x27
    203c:	90 a6       	std	Z+40, r9	; 0x28
    203e:	a1 a6       	std	Z+41, r10	; 0x29
    2040:	b2 a6       	std	Z+42, r11	; 0x2a
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	01 c0       	rjmp	.+2      	; 0x2048 <xTaskNotifyWait+0xde>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    204c:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    2050:	13 a6       	std	Z+43, r1	; 0x2b
    2052:	0f 90       	pop	r0
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	bf 90       	pop	r11
    2060:	af 90       	pop	r10
    2062:	9f 90       	pop	r9
    2064:	8f 90       	pop	r8
    2066:	7f 90       	pop	r7
    2068:	6f 90       	pop	r6
    206a:	5f 90       	pop	r5
    206c:	4f 90       	pop	r4
    206e:	08 95       	ret

00002070 <xTaskGenericNotify>:
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	fc 01       	movw	r30, r24
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	0f 92       	push	r0
    2080:	01 15       	cp	r16, r1
    2082:	11 05       	cpc	r17, r1
    2084:	49 f0       	breq	.+18     	; 0x2098 <xTaskGenericNotify+0x28>
    2086:	87 a1       	ldd	r24, Z+39	; 0x27
    2088:	90 a5       	ldd	r25, Z+40	; 0x28
    208a:	a1 a5       	ldd	r26, Z+41	; 0x29
    208c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    208e:	e8 01       	movw	r28, r16
    2090:	88 83       	st	Y, r24
    2092:	99 83       	std	Y+1, r25	; 0x01
    2094:	aa 83       	std	Y+2, r26	; 0x02
    2096:	bb 83       	std	Y+3, r27	; 0x03
    2098:	83 a5       	ldd	r24, Z+43	; 0x2b
    209a:	92 e0       	ldi	r25, 0x02	; 2
    209c:	93 a7       	std	Z+43, r25	; 0x2b
    209e:	22 30       	cpi	r18, 0x02	; 2
    20a0:	b1 f0       	breq	.+44     	; 0x20ce <xTaskGenericNotify+0x5e>
    20a2:	18 f4       	brcc	.+6      	; 0x20aa <xTaskGenericNotify+0x3a>
    20a4:	21 30       	cpi	r18, 0x01	; 1
    20a6:	31 f0       	breq	.+12     	; 0x20b4 <xTaskGenericNotify+0x44>
    20a8:	2a c0       	rjmp	.+84     	; 0x20fe <xTaskGenericNotify+0x8e>
    20aa:	23 30       	cpi	r18, 0x03	; 3
    20ac:	e9 f0       	breq	.+58     	; 0x20e8 <xTaskGenericNotify+0x78>
    20ae:	24 30       	cpi	r18, 0x04	; 4
    20b0:	01 f1       	breq	.+64     	; 0x20f2 <xTaskGenericNotify+0x82>
    20b2:	25 c0       	rjmp	.+74     	; 0x20fe <xTaskGenericNotify+0x8e>
    20b4:	07 a1       	ldd	r16, Z+39	; 0x27
    20b6:	10 a5       	ldd	r17, Z+40	; 0x28
    20b8:	21 a5       	ldd	r18, Z+41	; 0x29
    20ba:	32 a5       	ldd	r19, Z+42	; 0x2a
    20bc:	40 2b       	or	r20, r16
    20be:	51 2b       	or	r21, r17
    20c0:	62 2b       	or	r22, r18
    20c2:	73 2b       	or	r23, r19
    20c4:	47 a3       	std	Z+39, r20	; 0x27
    20c6:	50 a7       	std	Z+40, r21	; 0x28
    20c8:	61 a7       	std	Z+41, r22	; 0x29
    20ca:	72 a7       	std	Z+42, r23	; 0x2a
    20cc:	18 c0       	rjmp	.+48     	; 0x20fe <xTaskGenericNotify+0x8e>
    20ce:	47 a1       	ldd	r20, Z+39	; 0x27
    20d0:	50 a5       	ldd	r21, Z+40	; 0x28
    20d2:	61 a5       	ldd	r22, Z+41	; 0x29
    20d4:	72 a5       	ldd	r23, Z+42	; 0x2a
    20d6:	4f 5f       	subi	r20, 0xFF	; 255
    20d8:	5f 4f       	sbci	r21, 0xFF	; 255
    20da:	6f 4f       	sbci	r22, 0xFF	; 255
    20dc:	7f 4f       	sbci	r23, 0xFF	; 255
    20de:	47 a3       	std	Z+39, r20	; 0x27
    20e0:	50 a7       	std	Z+40, r21	; 0x28
    20e2:	61 a7       	std	Z+41, r22	; 0x29
    20e4:	72 a7       	std	Z+42, r23	; 0x2a
    20e6:	0b c0       	rjmp	.+22     	; 0x20fe <xTaskGenericNotify+0x8e>
    20e8:	47 a3       	std	Z+39, r20	; 0x27
    20ea:	50 a7       	std	Z+40, r21	; 0x28
    20ec:	61 a7       	std	Z+41, r22	; 0x29
    20ee:	72 a7       	std	Z+42, r23	; 0x2a
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <xTaskGenericNotify+0x8e>
    20f2:	82 30       	cpi	r24, 0x02	; 2
    20f4:	79 f1       	breq	.+94     	; 0x2154 <xTaskGenericNotify+0xe4>
    20f6:	47 a3       	std	Z+39, r20	; 0x27
    20f8:	50 a7       	std	Z+40, r21	; 0x28
    20fa:	61 a7       	std	Z+41, r22	; 0x29
    20fc:	72 a7       	std	Z+42, r23	; 0x2a
    20fe:	81 30       	cpi	r24, 0x01	; 1
    2100:	59 f5       	brne	.+86     	; 0x2158 <xTaskGenericNotify+0xe8>
    2102:	ef 01       	movw	r28, r30
    2104:	8f 01       	movw	r16, r30
    2106:	0e 5f       	subi	r16, 0xFE	; 254
    2108:	1f 4f       	sbci	r17, 0xFF	; 255
    210a:	c8 01       	movw	r24, r16
    210c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    2110:	8e 89       	ldd	r24, Y+22	; 0x16
    2112:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <uxTopReadyPriority>
    2116:	98 17       	cp	r25, r24
    2118:	10 f4       	brcc	.+4      	; 0x211e <xTaskGenericNotify+0xae>
    211a:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <uxTopReadyPriority>
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9c 01       	movw	r18, r24
    2122:	22 0f       	add	r18, r18
    2124:	33 1f       	adc	r19, r19
    2126:	22 0f       	add	r18, r18
    2128:	33 1f       	adc	r19, r19
    212a:	22 0f       	add	r18, r18
    212c:	33 1f       	adc	r19, r19
    212e:	82 0f       	add	r24, r18
    2130:	93 1f       	adc	r25, r19
    2132:	b8 01       	movw	r22, r16
    2134:	84 53       	subi	r24, 0x34	; 52
    2136:	99 4f       	sbci	r25, 0xF9	; 249
    2138:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    213c:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2140:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    2144:	9e 89       	ldd	r25, Y+22	; 0x16
    2146:	86 89       	ldd	r24, Z+22	; 0x16
    2148:	89 17       	cp	r24, r25
    214a:	40 f4       	brcc	.+16     	; 0x215c <xTaskGenericNotify+0xec>
    214c:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	05 c0       	rjmp	.+10     	; 0x215e <xTaskGenericNotify+0xee>
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	03 c0       	rjmp	.+6      	; 0x215e <xTaskGenericNotify+0xee>
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	01 c0       	rjmp	.+2      	; 0x215e <xTaskGenericNotify+0xee>
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	0f 90       	pop	r0
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	1f 91       	pop	r17
    2168:	0f 91       	pop	r16
    216a:	08 95       	ret

0000216c <xTaskGenericNotifyFromISR>:
    216c:	ef 92       	push	r14
    216e:	ff 92       	push	r15
    2170:	0f 93       	push	r16
    2172:	1f 93       	push	r17
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	fc 01       	movw	r30, r24
    217a:	01 15       	cp	r16, r1
    217c:	11 05       	cpc	r17, r1
    217e:	49 f0       	breq	.+18     	; 0x2192 <xTaskGenericNotifyFromISR+0x26>
    2180:	87 a1       	ldd	r24, Z+39	; 0x27
    2182:	90 a5       	ldd	r25, Z+40	; 0x28
    2184:	a1 a5       	ldd	r26, Z+41	; 0x29
    2186:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2188:	e8 01       	movw	r28, r16
    218a:	88 83       	st	Y, r24
    218c:	99 83       	std	Y+1, r25	; 0x01
    218e:	aa 83       	std	Y+2, r26	; 0x02
    2190:	bb 83       	std	Y+3, r27	; 0x03
    2192:	83 a5       	ldd	r24, Z+43	; 0x2b
    2194:	92 e0       	ldi	r25, 0x02	; 2
    2196:	93 a7       	std	Z+43, r25	; 0x2b
    2198:	22 30       	cpi	r18, 0x02	; 2
    219a:	b1 f0       	breq	.+44     	; 0x21c8 <xTaskGenericNotifyFromISR+0x5c>
    219c:	18 f4       	brcc	.+6      	; 0x21a4 <xTaskGenericNotifyFromISR+0x38>
    219e:	21 30       	cpi	r18, 0x01	; 1
    21a0:	31 f0       	breq	.+12     	; 0x21ae <xTaskGenericNotifyFromISR+0x42>
    21a2:	2b c0       	rjmp	.+86     	; 0x21fa <xTaskGenericNotifyFromISR+0x8e>
    21a4:	23 30       	cpi	r18, 0x03	; 3
    21a6:	e9 f0       	breq	.+58     	; 0x21e2 <xTaskGenericNotifyFromISR+0x76>
    21a8:	24 30       	cpi	r18, 0x04	; 4
    21aa:	01 f1       	breq	.+64     	; 0x21ec <xTaskGenericNotifyFromISR+0x80>
    21ac:	26 c0       	rjmp	.+76     	; 0x21fa <xTaskGenericNotifyFromISR+0x8e>
    21ae:	07 a1       	ldd	r16, Z+39	; 0x27
    21b0:	10 a5       	ldd	r17, Z+40	; 0x28
    21b2:	21 a5       	ldd	r18, Z+41	; 0x29
    21b4:	32 a5       	ldd	r19, Z+42	; 0x2a
    21b6:	40 2b       	or	r20, r16
    21b8:	51 2b       	or	r21, r17
    21ba:	62 2b       	or	r22, r18
    21bc:	73 2b       	or	r23, r19
    21be:	47 a3       	std	Z+39, r20	; 0x27
    21c0:	50 a7       	std	Z+40, r21	; 0x28
    21c2:	61 a7       	std	Z+41, r22	; 0x29
    21c4:	72 a7       	std	Z+42, r23	; 0x2a
    21c6:	19 c0       	rjmp	.+50     	; 0x21fa <xTaskGenericNotifyFromISR+0x8e>
    21c8:	47 a1       	ldd	r20, Z+39	; 0x27
    21ca:	50 a5       	ldd	r21, Z+40	; 0x28
    21cc:	61 a5       	ldd	r22, Z+41	; 0x29
    21ce:	72 a5       	ldd	r23, Z+42	; 0x2a
    21d0:	4f 5f       	subi	r20, 0xFF	; 255
    21d2:	5f 4f       	sbci	r21, 0xFF	; 255
    21d4:	6f 4f       	sbci	r22, 0xFF	; 255
    21d6:	7f 4f       	sbci	r23, 0xFF	; 255
    21d8:	47 a3       	std	Z+39, r20	; 0x27
    21da:	50 a7       	std	Z+40, r21	; 0x28
    21dc:	61 a7       	std	Z+41, r22	; 0x29
    21de:	72 a7       	std	Z+42, r23	; 0x2a
    21e0:	0c c0       	rjmp	.+24     	; 0x21fa <xTaskGenericNotifyFromISR+0x8e>
    21e2:	47 a3       	std	Z+39, r20	; 0x27
    21e4:	50 a7       	std	Z+40, r21	; 0x28
    21e6:	61 a7       	std	Z+41, r22	; 0x29
    21e8:	72 a7       	std	Z+42, r23	; 0x2a
    21ea:	07 c0       	rjmp	.+14     	; 0x21fa <xTaskGenericNotifyFromISR+0x8e>
    21ec:	82 30       	cpi	r24, 0x02	; 2
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <xTaskGenericNotifyFromISR+0x86>
    21f0:	41 c0       	rjmp	.+130    	; 0x2274 <__stack+0x75>
    21f2:	47 a3       	std	Z+39, r20	; 0x27
    21f4:	50 a7       	std	Z+40, r21	; 0x28
    21f6:	61 a7       	std	Z+41, r22	; 0x29
    21f8:	72 a7       	std	Z+42, r23	; 0x2a
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	e9 f5       	brne	.+122    	; 0x2278 <__stack+0x79>
    21fe:	ef 01       	movw	r28, r30
    2200:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <__data_end>
    2204:	81 11       	cpse	r24, r1
    2206:	1d c0       	rjmp	.+58     	; 0x2242 <__stack+0x43>
    2208:	8f 01       	movw	r16, r30
    220a:	0e 5f       	subi	r16, 0xFE	; 254
    220c:	1f 4f       	sbci	r17, 0xFF	; 255
    220e:	c8 01       	movw	r24, r16
    2210:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    2214:	8e 89       	ldd	r24, Y+22	; 0x16
    2216:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <uxTopReadyPriority>
    221a:	98 17       	cp	r25, r24
    221c:	10 f4       	brcc	.+4      	; 0x2222 <__stack+0x23>
    221e:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <uxTopReadyPriority>
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9c 01       	movw	r18, r24
    2226:	22 0f       	add	r18, r18
    2228:	33 1f       	adc	r19, r19
    222a:	22 0f       	add	r18, r18
    222c:	33 1f       	adc	r19, r19
    222e:	22 0f       	add	r18, r18
    2230:	33 1f       	adc	r19, r19
    2232:	82 0f       	add	r24, r18
    2234:	93 1f       	adc	r25, r19
    2236:	b8 01       	movw	r22, r16
    2238:	84 53       	subi	r24, 0x34	; 52
    223a:	99 4f       	sbci	r25, 0xF9	; 249
    223c:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    2240:	07 c0       	rjmp	.+14     	; 0x2250 <__stack+0x51>
    2242:	bf 01       	movw	r22, r30
    2244:	64 5f       	subi	r22, 0xF4	; 244
    2246:	7f 4f       	sbci	r23, 0xFF	; 255
    2248:	8d ea       	ldi	r24, 0xAD	; 173
    224a:	96 e0       	ldi	r25, 0x06	; 6
    224c:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    2250:	e0 91 f0 06 	lds	r30, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2254:	f0 91 f1 06 	lds	r31, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>
    2258:	9e 89       	ldd	r25, Y+22	; 0x16
    225a:	86 89       	ldd	r24, Z+22	; 0x16
    225c:	89 17       	cp	r24, r25
    225e:	70 f4       	brcc	.+28     	; 0x227c <__stack+0x7d>
    2260:	e1 14       	cp	r14, r1
    2262:	f1 04       	cpc	r15, r1
    2264:	19 f0       	breq	.+6      	; 0x226c <__stack+0x6d>
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	f7 01       	movw	r30, r14
    226a:	80 83       	st	Z, r24
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <xYieldPending>
    2272:	05 c0       	rjmp	.+10     	; 0x227e <__stack+0x7f>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	03 c0       	rjmp	.+6      	; 0x227e <__stack+0x7f>
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	01 c0       	rjmp	.+2      	; 0x227e <__stack+0x7f>
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	df 91       	pop	r29
    2280:	cf 91       	pop	r28
    2282:	1f 91       	pop	r17
    2284:	0f 91       	pop	r16
    2286:	ff 90       	pop	r15
    2288:	ef 90       	pop	r14
    228a:	08 95       	ret

0000228c <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	21 f4       	brne	.+8      	; 0x2298 <xTaskNotifyStateClear+0xc>
    2290:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <pxCurrentTCB>
    2294:	90 91 f1 06 	lds	r25, 0x06F1	; 0x8006f1 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    229e:	fc 01       	movw	r30, r24
    22a0:	23 a5       	ldd	r18, Z+43	; 0x2b
    22a2:	22 30       	cpi	r18, 0x02	; 2
    22a4:	19 f4       	brne	.+6      	; 0x22ac <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    22a6:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	01 c0       	rjmp	.+2      	; 0x22ae <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    22ac:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    22ae:	0f 90       	pop	r0
    22b0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    22b2:	08 95       	ret

000022b4 <prvInsertTimerInActiveList>:
    return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    22b4:	fc 01       	movw	r30, r24
BaseType_t xProcessTimerNow = pdFALSE;

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    22b6:	73 83       	std	Z+3, r23	; 0x03
    22b8:	62 83       	std	Z+2, r22	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    22ba:	91 87       	std	Z+9, r25	; 0x09
    22bc:	80 87       	std	Z+8, r24	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    22be:	46 17       	cp	r20, r22
    22c0:	57 07       	cpc	r21, r23
    22c2:	90 f0       	brcs	.+36     	; 0x22e8 <prvInsertTimerInActiveList+0x34>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    22c4:	42 1b       	sub	r20, r18
    22c6:	53 0b       	sbc	r21, r19
    22c8:	84 85       	ldd	r24, Z+12	; 0x0c
    22ca:	95 85       	ldd	r25, Z+13	; 0x0d
    22cc:	48 17       	cp	r20, r24
    22ce:	59 07       	cpc	r21, r25
    22d0:	e0 f4       	brcc	.+56     	; 0x230a <prvInsertTimerInActiveList+0x56>
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    22d2:	bf 01       	movw	r22, r30
    22d4:	6e 5f       	subi	r22, 0xFE	; 254
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255
    22d8:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <pxOverflowTimerList>
    22dc:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <pxOverflowTimerList+0x1>
    22e0:	0e 94 aa 02 	call	0x554	; 0x554 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	08 95       	ret
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    22e8:	42 17       	cp	r20, r18
    22ea:	53 07       	cpc	r21, r19
    22ec:	18 f4       	brcc	.+6      	; 0x22f4 <prvInsertTimerInActiveList+0x40>
    22ee:	62 17       	cp	r22, r18
    22f0:	73 07       	cpc	r23, r19
    22f2:	68 f4       	brcc	.+26     	; 0x230e <prvInsertTimerInActiveList+0x5a>
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    22f4:	bf 01       	movw	r22, r30
    22f6:	6e 5f       	subi	r22, 0xFE	; 254
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <pxCurrentTimerList>
    22fe:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <pxCurrentTimerList+0x1>
    2302:	0e 94 aa 02 	call	0x554	; 0x554 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	08 95       	ret
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	08 95       	ret
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    230e:	81 e0       	ldi	r24, 0x01	; 1
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
        }
    }

    return xProcessTimerNow;
}
    2310:	08 95       	ret

00002312 <prvCheckForValidListAndQueue>:
static void prvCheckForValidListAndQueue( void )
{
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    2318:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xTimerQueue>
    231c:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <xTimerQueue+0x1>
    2320:	89 2b       	or	r24, r25
    2322:	e9 f4       	brne	.+58     	; 0x235e <prvCheckForValidListAndQueue+0x4c>
        {
            vListInitialise( &xActiveTimerList1 );
    2324:	85 e0       	ldi	r24, 0x05	; 5
    2326:	97 e0       	ldi	r25, 0x07	; 7
    2328:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    232c:	8c ef       	ldi	r24, 0xFC	; 252
    232e:	96 e0       	ldi	r25, 0x06	; 6
    2330:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    2334:	85 e0       	ldi	r24, 0x05	; 5
    2336:	97 e0       	ldi	r25, 0x07	; 7
    2338:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <pxCurrentTimerList+0x1>
    233c:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    2340:	8c ef       	ldi	r24, 0xFC	; 252
    2342:	96 e0       	ldi	r25, 0x06	; 6
    2344:	90 93 f9 06 	sts	0x06F9, r25	; 0x8006f9 <pxOverflowTimerList+0x1>
    2348:	80 93 f8 06 	sts	0x06F8, r24	; 0x8006f8 <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    234c:	40 e0       	ldi	r20, 0x00	; 0
    234e:	65 e0       	ldi	r22, 0x05	; 5
    2350:	8a e0       	ldi	r24, 0x0A	; 10
    2352:	0e 94 8b 05 	call	0xb16	; 0xb16 <xQueueGenericCreate>
    2356:	90 93 f7 06 	sts	0x06F7, r25	; 0x8006f7 <xTimerQueue+0x1>
    235a:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    235e:	0f 90       	pop	r0
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	08 95       	ret

00002364 <xTimerCreateTimerTask>:
                                    TimerCallbackFunction_t pxCallbackFunction,
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
    236a:	d3 df       	rcall	.-90     	; 0x2312 <prvCheckForValidListAndQueue>

    if( xTimerQueue != NULL )
    236c:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xTimerQueue>
    2370:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <xTimerQueue+0x1>
    2374:	89 2b       	or	r24, r25
    2376:	89 f0       	breq	.+34     	; 0x239a <xTimerCreateTimerTask+0x36>
                xReturn = pdPASS;
            }
        }
        #else
        {
            xReturn = xTaskCreate(    prvTimerTask,
    2378:	0f 2e       	mov	r0, r31
    237a:	f4 ef       	ldi	r31, 0xF4	; 244
    237c:	ef 2e       	mov	r14, r31
    237e:	f6 e0       	ldi	r31, 0x06	; 6
    2380:	ff 2e       	mov	r15, r31
    2382:	f0 2d       	mov	r31, r0
    2384:	03 e0       	ldi	r16, 0x03	; 3
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	45 e5       	ldi	r20, 0x55	; 85
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	62 e2       	ldi	r22, 0x22	; 34
    2390:	72 e0       	ldi	r23, 0x02	; 2
    2392:	83 e0       	ldi	r24, 0x03	; 3
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	d6 d8       	rcall	.-3668   	; 0x1544 <xTaskCreate>
    2398:	01 c0       	rjmp	.+2      	; 0x239c <xTimerCreateTimerTask+0x38>
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
    239a:	80 e0       	ldi	r24, 0x00	; 0
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT( xReturn );
    return xReturn;
}
    239c:	0f 91       	pop	r16
    239e:	ff 90       	pop	r15
    23a0:	ef 90       	pop	r14
    23a2:	08 95       	ret

000023a4 <xTimerCreate>:
    TimerHandle_t xTimerCreate( const char * const pcTimerName,            /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                const TickType_t xTimerPeriodInTicks,
                                const UBaseType_t uxAutoReload,
                                void * const pvTimerID,
                                TimerCallbackFunction_t pxCallbackFunction )
    {
    23a4:	8f 92       	push	r8
    23a6:	9f 92       	push	r9
    23a8:	af 92       	push	r10
    23aa:	bf 92       	push	r11
    23ac:	cf 92       	push	r12
    23ae:	df 92       	push	r13
    23b0:	ff 92       	push	r15
    23b2:	0f 93       	push	r16
    23b4:	1f 93       	push	r17
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	4c 01       	movw	r8, r24
    23bc:	5b 01       	movw	r10, r22
    23be:	f4 2e       	mov	r15, r20
    23c0:	69 01       	movw	r12, r18
    Timer_t *pxNewTimer;

        pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    23c2:	84 e1       	ldi	r24, 0x14	; 20
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	0e 94 55 02 	call	0x4aa	; 0x4aa <pvPortMalloc>
    23ca:	ec 01       	movw	r28, r24

        if( pxNewTimer != NULL )
    23cc:	89 2b       	or	r24, r25
    23ce:	99 f0       	breq	.+38     	; 0x23f6 <xTimerCreate+0x52>
        {
            /* Status is thus far zero as the timer is not created statically
            and has not been started.  The autoreload bit may get set in
            prvInitialiseNewTimer. */
            pxNewTimer->ucStatus = 0x00;
    23d0:	1b 8a       	std	Y+19, r1	; 0x13

    if( pxNewTimer != NULL )
    {
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
    23d2:	9f df       	rcall	.-194    	; 0x2312 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    23d4:	99 82       	std	Y+1, r9	; 0x01
    23d6:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    23d8:	bd 86       	std	Y+13, r11	; 0x0d
    23da:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    23dc:	df 86       	std	Y+15, r13	; 0x0f
    23de:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    23e0:	19 8b       	std	Y+17, r17	; 0x11
    23e2:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    23e4:	ce 01       	movw	r24, r28
    23e6:	02 96       	adiw	r24, 0x02	; 2
    23e8:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
    23ec:	ff 20       	and	r15, r15
    23ee:	19 f0       	breq	.+6      	; 0x23f6 <xTimerCreate+0x52>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    23f0:	8b 89       	ldd	r24, Y+19	; 0x13
    23f2:	84 60       	ori	r24, 0x04	; 4
    23f4:	8b 8b       	std	Y+19, r24	; 0x13
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    23f6:	ce 01       	movw	r24, r28
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	1f 91       	pop	r17
    23fe:	0f 91       	pop	r16
    2400:	ff 90       	pop	r15
    2402:	df 90       	pop	r13
    2404:	cf 90       	pop	r12
    2406:	bf 90       	pop	r11
    2408:	af 90       	pop	r10
    240a:	9f 90       	pop	r9
    240c:	8f 90       	pop	r8
    240e:	08 95       	ret

00002410 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2410:	0f 93       	push	r16
    2412:	1f 93       	push	r17
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	00 d0       	rcall	.+0      	; 0x241a <xTimerGenericCommand+0xa>
    241a:	1f 92       	push	r1
    241c:	1f 92       	push	r1
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2422:	e0 91 f6 06 	lds	r30, 0x06F6	; 0x8006f6 <xTimerQueue>
    2426:	f0 91 f7 06 	lds	r31, 0x06F7	; 0x8006f7 <xTimerQueue+0x1>
    242a:	30 97       	sbiw	r30, 0x00	; 0
    242c:	69 f1       	breq	.+90     	; 0x2488 <xTimerGenericCommand+0x78>
    242e:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2430:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2432:	5b 83       	std	Y+3, r21	; 0x03
    2434:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2436:	9d 83       	std	Y+5, r25	; 0x05
    2438:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    243a:	66 30       	cpi	r22, 0x06	; 6
    243c:	e4 f4       	brge	.+56     	; 0x2476 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    243e:	73 dc       	rcall	.-1818   	; 0x1d26 <xTaskGetSchedulerState>
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	61 f4       	brne	.+24     	; 0x245c <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	a8 01       	movw	r20, r16
    2448:	be 01       	movw	r22, r28
    244a:	6f 5f       	subi	r22, 0xFF	; 255
    244c:	7f 4f       	sbci	r23, 0xFF	; 255
    244e:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xTimerQueue>
    2452:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <xTimerQueue+0x1>
    2456:	0e 94 b9 05 	call	0xb72	; 0xb72 <xQueueGenericSend>
    245a:	17 c0       	rjmp	.+46     	; 0x248a <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	40 e0       	ldi	r20, 0x00	; 0
    2460:	50 e0       	ldi	r21, 0x00	; 0
    2462:	be 01       	movw	r22, r28
    2464:	6f 5f       	subi	r22, 0xFF	; 255
    2466:	7f 4f       	sbci	r23, 0xFF	; 255
    2468:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <xTimerQueue>
    246c:	90 91 f7 06 	lds	r25, 0x06F7	; 0x8006f7 <xTimerQueue+0x1>
    2470:	0e 94 b9 05 	call	0xb72	; 0xb72 <xQueueGenericSend>
    2474:	0a c0       	rjmp	.+20     	; 0x248a <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	ad 01       	movw	r20, r26
    247a:	be 01       	movw	r22, r28
    247c:	6f 5f       	subi	r22, 0xFF	; 255
    247e:	7f 4f       	sbci	r23, 0xFF	; 255
    2480:	cf 01       	movw	r24, r30
    2482:	0e 94 66 06 	call	0xccc	; 0xccc <xQueueGenericSendFromISR>
    2486:	01 c0       	rjmp	.+2      	; 0x248a <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2488:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	08 95       	ret

0000249e <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    249e:	af 92       	push	r10
    24a0:	bf 92       	push	r11
    24a2:	cf 92       	push	r12
    24a4:	df 92       	push	r13
    24a6:	ef 92       	push	r14
    24a8:	ff 92       	push	r15
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    24b4:	9e d9       	rcall	.-3268   	; 0x17f2 <xTaskGetTickCount>
    24b6:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    24b8:	80 91 f2 06 	lds	r24, 0x06F2	; 0x8006f2 <xLastTime.2432>
    24bc:	90 91 f3 06 	lds	r25, 0x06F3	; 0x8006f3 <xLastTime.2432+0x1>
    24c0:	e8 16       	cp	r14, r24
    24c2:	f9 06       	cpc	r15, r25
    24c4:	08 f0       	brcs	.+2      	; 0x24c8 <prvSampleTimeNow+0x2a>
    24c6:	47 c0       	rjmp	.+142    	; 0x2556 <prvSampleTimeNow+0xb8>
    24c8:	2f c0       	rjmp	.+94     	; 0x2528 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    24ca:	05 80       	ldd	r0, Z+5	; 0x05
    24cc:	f6 81       	ldd	r31, Z+6	; 0x06
    24ce:	e0 2d       	mov	r30, r0
    24d0:	a0 80       	ld	r10, Z
    24d2:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    24d4:	c6 81       	ldd	r28, Z+6	; 0x06
    24d6:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    24d8:	8e 01       	movw	r16, r28
    24da:	0e 5f       	subi	r16, 0xFE	; 254
    24dc:	1f 4f       	sbci	r17, 0xFF	; 255
    24de:	c8 01       	movw	r24, r16
    24e0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    24e4:	e8 89       	ldd	r30, Y+16	; 0x10
    24e6:	f9 89       	ldd	r31, Y+17	; 0x11
    24e8:	ce 01       	movw	r24, r28
    24ea:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    24ec:	8b 89       	ldd	r24, Y+19	; 0x13
    24ee:	82 ff       	sbrs	r24, 2
    24f0:	1b c0       	rjmp	.+54     	; 0x2528 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    24f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    24f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    24f6:	8a 0d       	add	r24, r10
    24f8:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    24fa:	a8 16       	cp	r10, r24
    24fc:	b9 06       	cpc	r11, r25
    24fe:	60 f4       	brcc	.+24     	; 0x2518 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2500:	9b 83       	std	Y+3, r25	; 0x03
    2502:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2504:	d9 87       	std	Y+9, r29	; 0x09
    2506:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2508:	b8 01       	movw	r22, r16
    250a:	80 91 fa 06 	lds	r24, 0x06FA	; 0x8006fa <pxCurrentTimerList>
    250e:	90 91 fb 06 	lds	r25, 0x06FB	; 0x8006fb <pxCurrentTimerList+0x1>
    2512:	0e 94 aa 02 	call	0x554	; 0x554 <vListInsert>
    2516:	08 c0       	rjmp	.+16     	; 0x2528 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2518:	00 e0       	ldi	r16, 0x00	; 0
    251a:	10 e0       	ldi	r17, 0x00	; 0
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	a5 01       	movw	r20, r10
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	ce 01       	movw	r24, r28
    2526:	74 df       	rcall	.-280    	; 0x2410 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2528:	e0 91 fa 06 	lds	r30, 0x06FA	; 0x8006fa <pxCurrentTimerList>
    252c:	f0 91 fb 06 	lds	r31, 0x06FB	; 0x8006fb <pxCurrentTimerList+0x1>
    2530:	80 81       	ld	r24, Z
    2532:	81 11       	cpse	r24, r1
    2534:	ca cf       	rjmp	.-108    	; 0x24ca <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2536:	80 91 f8 06 	lds	r24, 0x06F8	; 0x8006f8 <pxOverflowTimerList>
    253a:	90 91 f9 06 	lds	r25, 0x06F9	; 0x8006f9 <pxOverflowTimerList+0x1>
    253e:	90 93 fb 06 	sts	0x06FB, r25	; 0x8006fb <pxCurrentTimerList+0x1>
    2542:	80 93 fa 06 	sts	0x06FA, r24	; 0x8006fa <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2546:	f0 93 f9 06 	sts	0x06F9, r31	; 0x8006f9 <pxOverflowTimerList+0x1>
    254a:	e0 93 f8 06 	sts	0x06F8, r30	; 0x8006f8 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	f6 01       	movw	r30, r12
    2552:	80 83       	st	Z, r24
    2554:	02 c0       	rjmp	.+4      	; 0x255a <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2556:	f6 01       	movw	r30, r12
    2558:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    255a:	f0 92 f3 06 	sts	0x06F3, r15	; 0x8006f3 <xLastTime.2432+0x1>
    255e:	e0 92 f2 06 	sts	0x06F2, r14	; 0x8006f2 <xLastTime.2432>

    return xTimeNow;
}
    2562:	c7 01       	movw	r24, r14
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	ff 90       	pop	r15
    256e:	ef 90       	pop	r14
    2570:	df 90       	pop	r13
    2572:	cf 90       	pop	r12
    2574:	bf 90       	pop	r11
    2576:	af 90       	pop	r10
    2578:	08 95       	ret

0000257a <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    257a:	08 95       	ret

0000257c <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    257c:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    257e:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2580:	2f ef       	ldi	r18, 0xFF	; 255
    2582:	80 e7       	ldi	r24, 0x70	; 112
    2584:	92 e0       	ldi	r25, 0x02	; 2
    2586:	21 50       	subi	r18, 0x01	; 1
    2588:	80 40       	sbci	r24, 0x00	; 0
    258a:	90 40       	sbci	r25, 0x00	; 0
    258c:	e1 f7       	brne	.-8      	; 0x2586 <vApplicationMallocFailedHook+0xa>
    258e:	00 c0       	rjmp	.+0      	; 0x2590 <vApplicationMallocFailedHook+0x14>
    2590:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2592:	1f 9a       	sbi	0x03, 7	; 3
    2594:	f5 cf       	rjmp	.-22     	; 0x2580 <vApplicationMallocFailedHook+0x4>

00002596 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2596:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2598:	2f 9a       	sbi	0x05, 7	; 5
    259a:	2f ef       	ldi	r18, 0xFF	; 255
    259c:	87 ea       	ldi	r24, 0xA7	; 167
    259e:	91 e6       	ldi	r25, 0x61	; 97
    25a0:	21 50       	subi	r18, 0x01	; 1
    25a2:	80 40       	sbci	r24, 0x00	; 0
    25a4:	90 40       	sbci	r25, 0x00	; 0
    25a6:	e1 f7       	brne	.-8      	; 0x25a0 <vApplicationStackOverflowHook+0xa>
    25a8:	00 c0       	rjmp	.+0      	; 0x25aa <vApplicationStackOverflowHook+0x14>
    25aa:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    25ac:	1f 9a       	sbi	0x03, 7	; 3
    25ae:	f5 cf       	rjmp	.-22     	; 0x259a <vApplicationStackOverflowHook+0x4>

000025b0 <main>:
#include "myLora.h"


int main(void)
{
	DDRA |= _BV(DDA0) | _BV(DDA7);
    25b0:	81 b1       	in	r24, 0x01	; 1
    25b2:	81 68       	ori	r24, 0x81	; 129
    25b4:	81 b9       	out	0x01, r24	; 1
	trace_init();
    25b6:	0e 94 3f 02 	call	0x47e	; 0x47e <trace_init>
	stdioCreate(0);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	0e 94 bd 1c 	call	0x397a	; 0x397a <stdioCreate>

	// initialization of resources
	// semaphores
	semaphores_init();
    25c0:	e4 d0       	rcall	.+456    	; 0x278a <semaphores_init>
	// timers
	timers_init();
    25c2:	98 d1       	rcall	.+816    	; 0x28f4 <timers_init>
    25c4:	0e 94 39 02 	call	0x472	; 0x472 <co2_sensor_init>
	// sensors
	co2_sensor_init();
	// lora
	lora_init();
    25c8:	0f d0       	rcall	.+30     	; 0x25e8 <lora_init>
	
	// tasks
	create_tasks();
    25ca:	22 d1       	rcall	.+580    	; 0x2810 <create_tasks>
    25cc:	12 d9       	rcall	.-3548   	; 0x17f2 <xTaskGetTickCount>
	
	// timers start
	//xTimerStart(TempHumTimer, 0);
	//xTimerStart(CO2Timer, 0);
	xTimerStart(LoRaTimer, 0);
    25ce:	00 e0       	ldi	r16, 0x00	; 0
    25d0:	10 e0       	ldi	r17, 0x00	; 0
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	ac 01       	movw	r20, r24
    25d8:	61 e0       	ldi	r22, 0x01	; 1
    25da:	80 91 79 08 	lds	r24, 0x0879	; 0x800879 <LoRaTimer>
    25de:	90 91 7a 08 	lds	r25, 0x087A	; 0x80087a <LoRaTimer+0x1>
    25e2:	16 df       	rcall	.-468    	; 0x2410 <xTimerGenericCommand>
    25e4:	cd d8       	rcall	.-3686   	; 0x1780 <vTaskStartScheduler>
	
	vTaskStartScheduler(); // initialize and run the freeRTOS scheduler. Execution should never return here.
    25e6:	ff cf       	rjmp	.-2      	; 0x25e6 <main+0x36>

000025e8 <lora_init>:
    25e8:	df 92       	push	r13
    25ea:	ef 92       	push	r14

static lora_payload_t uplink_payload;

//static char _out_buf[100];

void lora_init() {
    25ec:	ff 92       	push	r15
    25ee:	0f 93       	push	r16
    25f0:	1f 93       	push	r17
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
	
	
	
	//hal_create(LORA_INIT_TASK_PRIORITY+1);
	lora_driver_create(ser_USART3);
    25f6:	83 e0       	ldi	r24, 0x03	; 3
    25f8:	88 d2       	rcall	.+1296   	; 0x2b0a <lora_driver_create>
    25fa:	c5 e0       	ldi	r28, 0x05	; 5
    25fc:	d0 e0       	ldi	r29, 0x00	; 0
	
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    25fe:	0f 2e       	mov	r0, r31
    2600:	fa e2       	ldi	r31, 0x2A	; 42
    2602:	ef 2e       	mov	r14, r31
    2604:	f2 e0       	ldi	r31, 0x02	; 2
    2606:	ff 2e       	mov	r15, r31
    2608:	f0 2d       	mov	r31, r0

		if ( rc != LoRa_ACCEPTED)
		{
			printf("waiting 5 sec");
    260a:	0a e4       	ldi	r16, 0x4A	; 74
    260c:	12 e0       	ldi	r17, 0x02	; 2
	
	
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 5;
	do {
		rc = lora_driver_join(LoRa_OTAA);
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	33 d3       	rcall	.+1638   	; 0x2c78 <lora_driver_join>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_map_return_code_to_text(rc));
    2612:	d8 2e       	mov	r13, r24
    2614:	0b d5       	rcall	.+2582   	; 0x302c <lora_driver_map_return_code_to_text>
    2616:	9f 93       	push	r25
    2618:	8f 93       	push	r24
    261a:	df 93       	push	r29
    261c:	cf 93       	push	r28
    261e:	ff 92       	push	r15
    2620:	ef 92       	push	r14
    2622:	0e 94 2a 21 	call	0x4254	; 0x4254 <printf>

		if ( rc != LoRa_ACCEPTED)
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	0f 90       	pop	r0
    2630:	0f 90       	pop	r0
    2632:	88 e0       	ldi	r24, 0x08	; 8
    2634:	d8 16       	cp	r13, r24
    2636:	b1 f0       	breq	.+44     	; 0x2664 <lora_init+0x7c>
		{
			printf("waiting 5 sec");
    2638:	1f 93       	push	r17
    263a:	0f 93       	push	r16
    263c:	0e 94 2a 21 	call	0x4254	; 0x4254 <printf>
			// Wait 5 sec and lets try again
			vTaskDelay(5000/portTICK_PERIOD_MS);
    2640:	88 e3       	ldi	r24, 0x38	; 56
    2642:	91 e0       	ldi	r25, 0x01	; 1
    2644:	17 da       	rcall	.-3026   	; 0x1a74 <vTaskDelay>
    2646:	21 97       	sbiw	r28, 0x01	; 1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    2648:	0f 90       	pop	r0
    264a:	0f 90       	pop	r0
    264c:	01 f7       	brne	.-64     	; 0x260e <lora_init+0x26>
		// Something went wrong

		// Lets stay here
		while (1)
		{
			printf("wtf");
    264e:	c8 e5       	ldi	r28, 0x58	; 88
    2650:	d2 e0       	ldi	r29, 0x02	; 2
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	0e 94 2a 21 	call	0x4254	; 0x4254 <printf>
			taskYIELD();
    265a:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    265e:	0f 90       	pop	r0
    2660:	0f 90       	pop	r0
    2662:	f7 cf       	rjmp	.-18     	; 0x2652 <lora_init+0x6a>
		}
	}
}
    2664:	df 91       	pop	r29
    2666:	cf 91       	pop	r28
    2668:	1f 91       	pop	r17
    266a:	0f 91       	pop	r16
    266c:	ff 90       	pop	r15
    266e:	ef 90       	pop	r14
    2670:	df 90       	pop	r13
    2672:	08 95       	ret

00002674 <lora_start>:


void lora_start(){
    2674:	cf 93       	push	r28
    2676:	df 93       	push	r29
	
	e_LoRa_return_code_t rc;
	
	
		lora_driver_reset_rn2483(1);
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	83 d2       	rcall	.+1286   	; 0x2b82 <lora_driver_reset_rn2483>
		vTaskDelay(2);
    267c:	82 e0       	ldi	r24, 0x02	; 2
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	f9 d9       	rcall	.-3086   	; 0x1a74 <vTaskDelay>
		lora_driver_reset_rn2483(0);
    2682:	80 e0       	ldi	r24, 0x00	; 0
    2684:	7e d2       	rcall	.+1276   	; 0x2b82 <lora_driver_reset_rn2483>
		vTaskDelay(150);
    2686:	86 e9       	ldi	r24, 0x96	; 150
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	f4 d9       	rcall	.-3096   	; 0x1a74 <vTaskDelay>




		if (lora_driver_rn2483_factory_reset() != LoRA_OK)
    268c:	8e d2       	rcall	.+1308   	; 0x2baa <lora_driver_rn2483_factory_reset>
    268e:	88 23       	and	r24, r24
    2690:	21 f0       	breq	.+8      	; 0x269a <lora_start+0x26>
    2692:	8c e5       	ldi	r24, 0x5C	; 92
		{
			printf("FACTORY_RESET_FAILURE \n");
    2694:	92 e0       	ldi	r25, 0x02	; 2
    2696:	0e 94 3d 21 	call	0x427a	; 0x427a <puts>
		}
		vTaskDelay(150);
    269a:	86 e9       	ldi	r24, 0x96	; 150
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	ea d9       	rcall	.-3116   	; 0x1a74 <vTaskDelay>

		if (lora_driver_configure_to_eu868() != LoRA_OK)
    26a0:	cd d3       	rcall	.+1946   	; 0x2e3c <lora_driver_configure_to_eu868>
    26a2:	88 23       	and	r24, r24
    26a4:	21 f0       	breq	.+8      	; 0x26ae <lora_start+0x3a>
		{
			printf("CONFIGURE_BREAK \n");
    26a6:	83 e7       	ldi	r24, 0x73	; 115
    26a8:	92 e0       	ldi	r25, 0x02	; 2
    26aa:	0e 94 3d 21 	call	0x427a	; 0x427a <puts>
		}
		static char dev_eui[17]; // It is static to avoid it to occupy stack space in the task
		if (lora_driver_get_rn2483_hweui(dev_eui) != LoRA_OK)
    26ae:	8e e0       	ldi	r24, 0x0E	; 14
    26b0:	97 e0       	ldi	r25, 0x07	; 7
    26b2:	8d d2       	rcall	.+1306   	; 0x2bce <lora_driver_get_rn2483_hweui>
    26b4:	88 23       	and	r24, r24
    26b6:	29 f0       	breq	.+10     	; 0x26c2 <lora_start+0x4e>
    26b8:	84 e8       	ldi	r24, 0x84	; 132
		{
			printf("HWUI_ERROR \n");
    26ba:	92 e0       	ldi	r25, 0x02	; 2
    26bc:	0e 94 3d 21 	call	0x427a	; 0x427a <puts>
    26c0:	0e c0       	rjmp	.+28     	; 0x26de <lora_start+0x6a>
    26c2:	8e e0       	ldi	r24, 0x0E	; 14
		}	else printf("%s, DEV_EUI \n",dev_eui);
    26c4:	97 e0       	ldi	r25, 0x07	; 7
    26c6:	9f 93       	push	r25
    26c8:	8f 93       	push	r24
    26ca:	80 e9       	ldi	r24, 0x90	; 144
    26cc:	92 e0       	ldi	r25, 0x02	; 2
    26ce:	9f 93       	push	r25
    26d0:	8f 93       	push	r24
    26d2:	0e 94 2a 21 	call	0x4254	; 0x4254 <printf>
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0

		if (lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,dev_eui) != LoRA_OK)
    26de:	4e e0       	ldi	r20, 0x0E	; 14
    26e0:	57 e0       	ldi	r21, 0x07	; 7
    26e2:	6e e9       	ldi	r22, 0x9E	; 158
    26e4:	72 e0       	ldi	r23, 0x02	; 2
    26e6:	8f eb       	ldi	r24, 0xBF	; 191
    26e8:	92 e0       	ldi	r25, 0x02	; 2
    26ea:	7b d4       	rcall	.+2294   	; 0x2fe2 <lora_driver_set_otaa_identity>
    26ec:	88 23       	and	r24, r24
    26ee:	21 f0       	breq	.+8      	; 0x26f8 <lora_start+0x84>
		{
			printf("IDENTITY_BREAK \n");
    26f0:	80 ed       	ldi	r24, 0xD0	; 208
    26f2:	92 e0       	ldi	r25, 0x02	; 2
    26f4:	0e 94 3d 21 	call	0x427a	; 0x427a <puts>
		}
		//e_LoRa_return_code_t rc;
		if ((rc=lora_driver_join(LoRa_OTAA)) == LoRa_ACCEPTED)
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	be d2       	rcall	.+1404   	; 0x2c78 <lora_driver_join>
    26fc:	88 30       	cpi	r24, 0x08	; 8
    26fe:	29 f4       	brne	.+10     	; 0x270a <lora_start+0x96>
    2700:	80 ee       	ldi	r24, 0xE0	; 224
		{
			printf("LORA_ACCEPTED \n");
    2702:	92 e0       	ldi	r25, 0x02	; 2
    2704:	0e 94 3d 21 	call	0x427a	; 0x427a <puts>
    2708:	13 c0       	rjmp	.+38     	; 0x2730 <lora_start+0xbc>
			}else if(rc==7){
    270a:	87 30       	cpi	r24, 0x07	; 7
    270c:	89 f4       	brne	.+34     	; 0x2730 <lora_start+0xbc>
    270e:	c5 e0       	ldi	r28, 0x05	; 5
    2710:	d0 e0       	ldi	r29, 0x00	; 0
			for (int i = 0; i < 5; ++i) {
				rc=lora_driver_join(LoRa_OTAA);
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	b1 d2       	rcall	.+1378   	; 0x2c78 <lora_driver_join>
    2716:	87 30       	cpi	r24, 0x07	; 7
				if(rc==7){
    2718:	39 f4       	brne	.+14     	; 0x2728 <lora_start+0xb4>
    271a:	8f ee       	ldi	r24, 0xEF	; 239
					printf("LORA_DENIED\n");
    271c:	92 e0       	ldi	r25, 0x02	; 2
    271e:	0e 94 3d 21 	call	0x427a	; 0x427a <puts>
    2722:	21 97       	sbiw	r28, 0x01	; 1
    2724:	b1 f7       	brne	.-20     	; 0x2712 <lora_start+0x9e>
		//e_LoRa_return_code_t rc;
		if ((rc=lora_driver_join(LoRa_OTAA)) == LoRa_ACCEPTED)
		{
			printf("LORA_ACCEPTED \n");
			}else if(rc==7){
			for (int i = 0; i < 5; ++i) {
    2726:	04 c0       	rjmp	.+8      	; 0x2730 <lora_start+0xbc>
    2728:	8b ef       	ldi	r24, 0xFB	; 251
				rc=lora_driver_join(LoRa_OTAA);
				if(rc==7){
					printf("LORA_DENIED\n");
					continue;
					}else{
					printf("LORA_ACCEPTED\n");
    272a:	92 e0       	ldi	r25, 0x02	; 2
    272c:	0e 94 3d 21 	call	0x427a	; 0x427a <puts>
    2730:	df 91       	pop	r29
					break;
				}
			}
		
}
			}
    2732:	cf 91       	pop	r28
    2734:	08 95       	ret

00002736 <lora_send_data>:
    2736:	89 e0       	ldi	r24, 0x09	; 9

void lora_send_data() {
	
	printf("lora send");
    2738:	93 e0       	ldi	r25, 0x03	; 3
    273a:	9f 93       	push	r25
    273c:	8f 93       	push	r24
    273e:	0e 94 2a 21 	call	0x4254	; 0x4254 <printf>
	vTaskDelay(pdMS_TO_TICKS(5000UL));
    2742:	8f e2       	ldi	r24, 0x2F	; 47
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	96 d9       	rcall	.-3284   	; 0x1a74 <vTaskDelay>
	// Some dummy payload
	uint16_t hum = 12345; // Dummy humidity
	int16_t temp = 675; // Dummy temp
	uint16_t co2_ppm = 1111;//co2_get_value(); // Dummy CO2

	uplink_payload.bytes[0] = hum >> 8;
    2748:	ef e1       	ldi	r30, 0x1F	; 31
    274a:	f7 e0       	ldi	r31, 0x07	; 7
    274c:	80 e3       	ldi	r24, 0x30	; 48
    274e:	82 83       	std	Z+2, r24	; 0x02
	uplink_payload.bytes[1] = hum & 0xFF;
    2750:	89 e3       	ldi	r24, 0x39	; 57
    2752:	83 83       	std	Z+3, r24	; 0x03
	uplink_payload.bytes[2] = temp >> 8;
    2754:	82 e0       	ldi	r24, 0x02	; 2
    2756:	84 83       	std	Z+4, r24	; 0x04
	uplink_payload.bytes[3] = temp & 0xFF;
    2758:	83 ea       	ldi	r24, 0xA3	; 163
    275a:	85 83       	std	Z+5, r24	; 0x05
	uplink_payload.bytes[4] = co2_ppm >> 8;
    275c:	84 e0       	ldi	r24, 0x04	; 4
    275e:	86 83       	std	Z+6, r24	; 0x06
	uplink_payload.bytes[5] = co2_ppm & 0xFF;
    2760:	87 e5       	ldi	r24, 0x57	; 87
    2762:	87 83       	std	Z+7, r24	; 0x07

	printf("Upload Message >%s<\n", lora_driver_map_return_code_to_text(lora_driver_sent_upload_message(false, &uplink_payload)));
    2764:	bf 01       	movw	r22, r30
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	aa d2       	rcall	.+1364   	; 0x2cbe <lora_driver_sent_upload_message>
    276a:	60 d4       	rcall	.+2240   	; 0x302c <lora_driver_map_return_code_to_text>
    276c:	9f 93       	push	r25
    276e:	8f 93       	push	r24
    2770:	83 e1       	ldi	r24, 0x13	; 19
    2772:	93 e0       	ldi	r25, 0x03	; 3
    2774:	9f 93       	push	r25
    2776:	8f 93       	push	r24
    2778:	0e 94 2a 21 	call	0x4254	; 0x4254 <printf>
    277c:	0f 90       	pop	r0
    277e:	0f 90       	pop	r0
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	08 95       	ret

0000278a <semaphores_init>:
#include "mySemaphores.h"

void semaphores_init() {
		
	/*do {*/
		if(CO2Semaphore == NULL)
    278a:	80 91 75 08 	lds	r24, 0x0875	; 0x800875 <CO2Semaphore>
    278e:	90 91 76 08 	lds	r25, 0x0876	; 0x800876 <CO2Semaphore+0x1>
    2792:	89 2b       	or	r24, r25
    2794:	39 f4       	brne	.+14     	; 0x27a4 <semaphores_init+0x1a>
			CO2Semaphore = xSemaphoreCreateMutex();
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	0e 94 4e 06 	call	0xc9c	; 0xc9c <xQueueCreateMutex>
    279c:	90 93 76 08 	sts	0x0876, r25	; 0x800876 <CO2Semaphore+0x1>
    27a0:	80 93 75 08 	sts	0x0875, r24	; 0x800875 <CO2Semaphore>
		if(TempHumSemaphore == NULL)
    27a4:	80 91 81 08 	lds	r24, 0x0881	; 0x800881 <TempHumSemaphore>
    27a8:	90 91 82 08 	lds	r25, 0x0882	; 0x800882 <TempHumSemaphore+0x1>
    27ac:	89 2b       	or	r24, r25
    27ae:	39 f4       	brne	.+14     	; 0x27be <semaphores_init+0x34>
			TempHumSemaphore = xSemaphoreCreateMutex();
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	0e 94 4e 06 	call	0xc9c	; 0xc9c <xQueueCreateMutex>
    27b6:	90 93 82 08 	sts	0x0882, r25	; 0x800882 <TempHumSemaphore+0x1>
    27ba:	80 93 81 08 	sts	0x0881, r24	; 0x800881 <TempHumSemaphore>
		if(LoRaSemaphore == NULL)
    27be:	80 91 83 08 	lds	r24, 0x0883	; 0x800883 <LoRaSemaphore>
    27c2:	90 91 84 08 	lds	r25, 0x0884	; 0x800884 <LoRaSemaphore+0x1>
    27c6:	89 2b       	or	r24, r25
    27c8:	39 f4       	brne	.+14     	; 0x27d8 <semaphores_init+0x4e>
			LoRaSemaphore = xSemaphoreCreateMutex();
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	0e 94 4e 06 	call	0xc9c	; 0xc9c <xQueueCreateMutex>
    27d0:	90 93 84 08 	sts	0x0884, r25	; 0x800884 <LoRaSemaphore+0x1>
    27d4:	80 93 83 08 	sts	0x0883, r24	; 0x800883 <LoRaSemaphore>
    27d8:	08 95       	ret

000027da <lora_send_data_task>:

void lora_send_data_task(void *pvParameters) {
	
	
	while(1){
			printf("task lora");
    27da:	c8 e2       	ldi	r28, 0x28	; 40
    27dc:	d3 e0       	ldi	r29, 0x03	; 3
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	0e 94 2a 21 	call	0x4254	; 0x4254 <printf>
			vTaskDelay(1000/portTICK_PERIOD_MS);
    27e6:	8e e3       	ldi	r24, 0x3E	; 62
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	44 d9       	rcall	.-3448   	; 0x1a74 <vTaskDelay>
			
		if(xSemaphoreTake(LoRaSemaphore, portMAX_DELAY) == pdTRUE){
    27ec:	6f ef       	ldi	r22, 0xFF	; 255
    27ee:	7f ef       	ldi	r23, 0xFF	; 255
    27f0:	80 91 83 08 	lds	r24, 0x0883	; 0x800883 <LoRaSemaphore>
    27f4:	90 91 84 08 	lds	r25, 0x0884	; 0x800884 <LoRaSemaphore+0x1>
    27f8:	0e 94 27 07 	call	0xe4e	; 0xe4e <xQueueSemaphoreTake>
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	81 30       	cpi	r24, 0x01	; 1
    2802:	69 f7       	brne	.-38     	; 0x27de <lora_send_data_task+0x4>
			vTaskDelay(4000/portTICK_PERIOD_MS);
    2804:	8a ef       	ldi	r24, 0xFA	; 250
    2806:	90 e0       	ldi	r25, 0x00	; 0
			lora_start();
    2808:	35 d9       	rcall	.-3478   	; 0x1a74 <vTaskDelay>
    280a:	34 df       	rcall	.-408    	; 0x2674 <lora_start>
			lora_send_data();
    280c:	94 df       	rcall	.-216    	; 0x2736 <lora_send_data>
    280e:	e7 cf       	rjmp	.-50     	; 0x27de <lora_send_data_task+0x4>

00002810 <create_tasks>:
    2810:	ef 92       	push	r14
#include "myTimers.h"
#include <timers.h>

//int rand_val = 1234;

void create_tasks(void) {
    2812:	ff 92       	push	r15
    2814:	0f 93       	push	r16
		(void*) 1,
		2,
		&TempHumMeasureTask
	);*/
	
	xTaskCreate(
    2816:	0f 2e       	mov	r0, r31
    2818:	f7 e7       	ldi	r31, 0x77	; 119
    281a:	ef 2e       	mov	r14, r31
    281c:	f8 e0       	ldi	r31, 0x08	; 8
    281e:	ff 2e       	mov	r15, r31
    2820:	f0 2d       	mov	r31, r0
    2822:	02 e0       	ldi	r16, 0x02	; 2
    2824:	21 e0       	ldi	r18, 0x01	; 1
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 ec       	ldi	r20, 0xC0	; 192
    282a:	50 e0       	ldi	r21, 0x00	; 0
    282c:	62 e3       	ldi	r22, 0x32	; 50
    282e:	73 e0       	ldi	r23, 0x03	; 3
    2830:	8d ee       	ldi	r24, 0xED	; 237
    2832:	93 e1       	ldi	r25, 0x13	; 19
    2834:	0e 94 a2 0a 	call	0x1544	; 0x1544 <xTaskCreate>
		configMINIMAL_STACK_SIZE,
		(void*) 1,
		2,
		&LoRaSendDataTask
	);
}
    2838:	0f 91       	pop	r16
    283a:	ff 90       	pop	r15
    283c:	ef 90       	pop	r14
    283e:	08 95       	ret

00002840 <co2_timer_callback>:
		lora_timer_callback
	);
}

void co2_timer_callback(TimerHandle_t pxTimer) {
	printf("unblock co2 semaphore");
    2840:	82 e5       	ldi	r24, 0x52	; 82
    2842:	93 e0       	ldi	r25, 0x03	; 3
    2844:	9f 93       	push	r25
    2846:	8f 93       	push	r24
    2848:	0e 94 2a 21 	call	0x4254	; 0x4254 <printf>
	if( xSemaphoreGive( CO2Semaphore ) != pdTRUE )
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	40 e0       	ldi	r20, 0x00	; 0
    2850:	50 e0       	ldi	r21, 0x00	; 0
    2852:	60 e0       	ldi	r22, 0x00	; 0
    2854:	70 e0       	ldi	r23, 0x00	; 0
    2856:	80 91 75 08 	lds	r24, 0x0875	; 0x800875 <CO2Semaphore>
    285a:	90 91 76 08 	lds	r25, 0x0876	; 0x800876 <CO2Semaphore+0x1>
    285e:	0e 94 b9 05 	call	0xb72	; 0xb72 <xQueueGenericSend>
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
    2866:	81 30       	cpi	r24, 0x01	; 1
    2868:	41 f0       	breq	.+16     	; 0x287a <co2_timer_callback+0x3a>
	{
		// We would expect this call to fail because we cannot give
		// a semaphore without first "taking" it!
		printf("we dont have ");
    286a:	88 e6       	ldi	r24, 0x68	; 104
    286c:	93 e0       	ldi	r25, 0x03	; 3
    286e:	9f 93       	push	r25
    2870:	8f 93       	push	r24
    2872:	0e 94 2a 21 	call	0x4254	; 0x4254 <printf>
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	08 95       	ret

0000287c <temp_hum_timer_callback>:
	//vTaskDelay(4000/portTICK_PERIOD_MS);
	//xSemaphoreTake(CO2Semaphore, portMAX_DELAY);
}

void temp_hum_timer_callback(TimerHandle_t pxTimer){
	printf("unblock temphum semaphore");
    287c:	86 e7       	ldi	r24, 0x76	; 118
    287e:	93 e0       	ldi	r25, 0x03	; 3
    2880:	9f 93       	push	r25
    2882:	8f 93       	push	r24
    2884:	0e 94 2a 21 	call	0x4254	; 0x4254 <printf>
	if( xSemaphoreGive( TempHumSemaphore ) != pdTRUE )
    2888:	20 e0       	ldi	r18, 0x00	; 0
    288a:	40 e0       	ldi	r20, 0x00	; 0
    288c:	50 e0       	ldi	r21, 0x00	; 0
    288e:	60 e0       	ldi	r22, 0x00	; 0
    2890:	70 e0       	ldi	r23, 0x00	; 0
    2892:	80 91 81 08 	lds	r24, 0x0881	; 0x800881 <TempHumSemaphore>
    2896:	90 91 82 08 	lds	r25, 0x0882	; 0x800882 <TempHumSemaphore+0x1>
    289a:	0e 94 b9 05 	call	0xb72	; 0xb72 <xQueueGenericSend>
    289e:	0f 90       	pop	r0
    28a0:	0f 90       	pop	r0
    28a2:	81 30       	cpi	r24, 0x01	; 1
    28a4:	41 f0       	breq	.+16     	; 0x28b6 <temp_hum_timer_callback+0x3a>
	{
		// We would expect this call to fail because we cannot give
		// a semaphore without first "taking" it!
		printf("we dont have ");
    28a6:	88 e6       	ldi	r24, 0x68	; 104
    28a8:	93 e0       	ldi	r25, 0x03	; 3
    28aa:	9f 93       	push	r25
    28ac:	8f 93       	push	r24
    28ae:	0e 94 2a 21 	call	0x4254	; 0x4254 <printf>
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	08 95       	ret

000028b8 <lora_timer_callback>:
	//vTaskDelay(6000/portTICK_PERIOD_MS);
	//xSemaphoreTake(TempHumSemaphore, portMAX_DELAY);
}

void lora_timer_callback(TimerHandle_t pxTimer) {
	printf("unblock lora semaphore ");
    28b8:	80 e9       	ldi	r24, 0x90	; 144
    28ba:	93 e0       	ldi	r25, 0x03	; 3
    28bc:	9f 93       	push	r25
    28be:	8f 93       	push	r24
    28c0:	0e 94 2a 21 	call	0x4254	; 0x4254 <printf>
	if( xSemaphoreGive( LoRaSemaphore ) != pdTRUE )
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	40 e0       	ldi	r20, 0x00	; 0
    28c8:	50 e0       	ldi	r21, 0x00	; 0
    28ca:	60 e0       	ldi	r22, 0x00	; 0
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	80 91 83 08 	lds	r24, 0x0883	; 0x800883 <LoRaSemaphore>
    28d2:	90 91 84 08 	lds	r25, 0x0884	; 0x800884 <LoRaSemaphore+0x1>
    28d6:	0e 94 b9 05 	call	0xb72	; 0xb72 <xQueueGenericSend>
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	81 30       	cpi	r24, 0x01	; 1
    28e0:	41 f0       	breq	.+16     	; 0x28f2 <lora_timer_callback+0x3a>
	{
		// We would expect this call to fail because we cannot give
		// a semaphore without first "taking" it!
		printf("we dont have ");
    28e2:	88 e6       	ldi	r24, 0x68	; 104
    28e4:	93 e0       	ldi	r25, 0x03	; 3
    28e6:	9f 93       	push	r25
    28e8:	8f 93       	push	r24
    28ea:	0e 94 2a 21 	call	0x4254	; 0x4254 <printf>
    28ee:	0f 90       	pop	r0
    28f0:	0f 90       	pop	r0
    28f2:	08 95       	ret

000028f4 <timers_init>:
#include "myTimers.h"
#include "mySemaphores.h"

void timers_init() {
    28f4:	0f 93       	push	r16
    28f6:	1f 93       	push	r17
	
	CO2Timer = xTimerCreate(
    28f8:	00 e2       	ldi	r16, 0x20	; 32
    28fa:	14 e1       	ldi	r17, 0x14	; 20
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	30 e0       	ldi	r19, 0x00	; 0
    2900:	41 e0       	ldi	r20, 0x01	; 1
    2902:	6d e7       	ldi	r22, 0x7D	; 125
    2904:	70 e0       	ldi	r23, 0x00	; 0
    2906:	88 ea       	ldi	r24, 0xA8	; 168
    2908:	93 e0       	ldi	r25, 0x03	; 3
    290a:	4c dd       	rcall	.-1384   	; 0x23a4 <xTimerCreate>
    290c:	90 93 80 08 	sts	0x0880, r25	; 0x800880 <CO2Timer+0x1>
    2910:	80 93 7f 08 	sts	0x087F, r24	; 0x80087f <CO2Timer>
		pdTRUE,
		(void*) 0,
		co2_timer_callback
	);
	
	TempHumTimer = xTimerCreate(
    2914:	0e e3       	ldi	r16, 0x3E	; 62
    2916:	14 e1       	ldi	r17, 0x14	; 20
    2918:	21 e0       	ldi	r18, 0x01	; 1
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	41 e0       	ldi	r20, 0x01	; 1
    291e:	6b eb       	ldi	r22, 0xBB	; 187
    2920:	70 e0       	ldi	r23, 0x00	; 0
    2922:	82 eb       	ldi	r24, 0xB2	; 178
    2924:	93 e0       	ldi	r25, 0x03	; 3
    2926:	3e dd       	rcall	.-1412   	; 0x23a4 <xTimerCreate>
    2928:	90 93 86 08 	sts	0x0886, r25	; 0x800886 <TempHumTimer+0x1>
    292c:	80 93 85 08 	sts	0x0885, r24	; 0x800885 <TempHumTimer>
		pdTRUE,
		(void*) 1,
		temp_hum_timer_callback
	);
	
	LoRaTimer = xTimerCreate(
    2930:	0c e5       	ldi	r16, 0x5C	; 92
    2932:	14 e1       	ldi	r17, 0x14	; 20
    2934:	22 e0       	ldi	r18, 0x02	; 2
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	6b eb       	ldi	r22, 0xBB	; 187
    293c:	70 e0       	ldi	r23, 0x00	; 0
    293e:	81 ec       	ldi	r24, 0xC1	; 193
    2940:	93 e0       	ldi	r25, 0x03	; 3
    2942:	30 dd       	rcall	.-1440   	; 0x23a4 <xTimerCreate>
    2944:	90 93 7a 08 	sts	0x087A, r25	; 0x80087a <LoRaTimer+0x1>
    2948:	80 93 79 08 	sts	0x0879, r24	; 0x800879 <LoRaTimer>
		(3000/portTICK_PERIOD_MS),
		pdTRUE,
		(void*) 2,
		lora_timer_callback
	);
}
    294c:	1f 91       	pop	r17
    294e:	0f 91       	pop	r16
    2950:	08 95       	ret

00002952 <_serial_call_back>:
    2952:	0f 93       	push	r16
    2954:	1f 93       	push	r17
    2956:	cf 93       	push	r28
    2958:	df 93       	push	r29
    295a:	1f 92       	push	r1
    295c:	1f 92       	push	r1
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
    2962:	8c 01       	movw	r16, r24
    2964:	19 82       	std	Y+1, r1	; 0x01
    2966:	2d c0       	rjmp	.+90     	; 0x29c2 <_serial_call_back+0x70>
    2968:	e0 91 99 07 	lds	r30, 0x0799	; 0x800799 <rec_buf_inp.2926>
    296c:	ec 32       	cpi	r30, 0x2C	; 44
    296e:	50 f4       	brcc	.+20     	; 0x2984 <_serial_call_back+0x32>
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	8e 0f       	add	r24, r30
    2974:	80 93 99 07 	sts	0x0799, r24	; 0x800799 <rec_buf_inp.2926>
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	e7 53       	subi	r30, 0x37	; 55
    297c:	f8 4f       	sbci	r31, 0xF8	; 248
    297e:	8a 81       	ldd	r24, Y+2	; 0x02
    2980:	80 83       	st	Z, r24
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <_serial_call_back+0x36>
    2984:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <rec_buf_inp.2926>
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	8a 30       	cpi	r24, 0x0A	; 10
    298c:	d1 f4       	brne	.+52     	; 0x29c2 <_serial_call_back+0x70>
    298e:	40 91 99 07 	lds	r20, 0x0799	; 0x800799 <rec_buf_inp.2926>
    2992:	50 e0       	ldi	r21, 0x00	; 0
    2994:	fa 01       	movw	r30, r20
    2996:	e9 53       	subi	r30, 0x39	; 57
    2998:	f8 4f       	sbci	r31, 0xF8	; 248
    299a:	10 82       	st	Z, r1
    299c:	41 50       	subi	r20, 0x01	; 1
    299e:	51 09       	sbc	r21, r1
    29a0:	9e 01       	movw	r18, r28
    29a2:	2f 5f       	subi	r18, 0xFF	; 255
    29a4:	3f 4f       	sbci	r19, 0xFF	; 255
    29a6:	69 ec       	ldi	r22, 0xC9	; 201
    29a8:	77 e0       	ldi	r23, 0x07	; 7
    29aa:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <_reply_buffer_handle>
    29ae:	90 91 9b 07 	lds	r25, 0x079B	; 0x80079b <_reply_buffer_handle+0x1>
    29b2:	0e 94 53 09 	call	0x12a6	; 0x12a6 <xStreamBufferSendFromISR>
    29b6:	89 81       	ldd	r24, Y+1	; 0x01
    29b8:	81 11       	cpse	r24, r1
    29ba:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    29be:	10 92 99 07 	sts	0x0799, r1	; 0x800799 <rec_buf_inp.2926>
    29c2:	be 01       	movw	r22, r28
    29c4:	6e 5f       	subi	r22, 0xFE	; 254
    29c6:	7f 4f       	sbci	r23, 0xFF	; 255
    29c8:	c8 01       	movw	r24, r16
    29ca:	45 d5       	rcall	.+2698   	; 0x3456 <serial_get_byte>
    29cc:	88 23       	and	r24, r24
    29ce:	61 f2       	breq	.-104    	; 0x2968 <_serial_call_back+0x16>
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	df 91       	pop	r29
    29d6:	cf 91       	pop	r28
    29d8:	1f 91       	pop	r17
    29da:	0f 91       	pop	r16
    29dc:	08 95       	ret

000029de <_upload_message>:
    29de:	0f 93       	push	r16
    29e0:	1f 93       	push	r17
    29e2:	cf 93       	push	r28
    29e4:	df 93       	push	r29
    29e6:	8c 01       	movw	r16, r24
    29e8:	eb 01       	movw	r28, r22
    29ea:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <_reply_buffer_handle>
    29ee:	90 91 9b 07 	lds	r25, 0x079B	; 0x80079b <_reply_buffer_handle+0x1>
    29f2:	0e 94 14 09 	call	0x1228	; 0x1228 <xStreamBufferReset>
    29f6:	b8 01       	movw	r22, r16
    29f8:	85 e3       	ldi	r24, 0x35	; 53
    29fa:	97 e0       	ldi	r25, 0x07	; 7
    29fc:	0e 94 0b 21 	call	0x4216	; 0x4216 <strcpy>
    2a00:	20 97       	sbiw	r28, 0x00	; 0
    2a02:	79 f0       	breq	.+30     	; 0x2a22 <_upload_message+0x44>
    2a04:	e5 e3       	ldi	r30, 0x35	; 53
    2a06:	f7 e0       	ldi	r31, 0x07	; 7
    2a08:	01 90       	ld	r0, Z+
    2a0a:	00 20       	and	r0, r0
    2a0c:	e9 f7       	brne	.-6      	; 0x2a08 <_upload_message+0x2a>
    2a0e:	31 97       	sbiw	r30, 0x01	; 1
    2a10:	80 e2       	ldi	r24, 0x20	; 32
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	91 83       	std	Z+1, r25	; 0x01
    2a16:	80 83       	st	Z, r24
    2a18:	be 01       	movw	r22, r28
    2a1a:	85 e3       	ldi	r24, 0x35	; 53
    2a1c:	97 e0       	ldi	r25, 0x07	; 7
    2a1e:	0e 94 00 21 	call	0x4200	; 0x4200 <strcat>
    2a22:	e5 e3       	ldi	r30, 0x35	; 53
    2a24:	f7 e0       	ldi	r31, 0x07	; 7
    2a26:	df 01       	movw	r26, r30
    2a28:	0d 90       	ld	r0, X+
    2a2a:	00 20       	and	r0, r0
    2a2c:	e9 f7       	brne	.-6      	; 0x2a28 <_upload_message+0x4a>
    2a2e:	11 97       	sbiw	r26, 0x01	; 1
    2a30:	8d e0       	ldi	r24, 0x0D	; 13
    2a32:	9a e0       	ldi	r25, 0x0A	; 10
    2a34:	11 96       	adiw	r26, 0x01	; 1
    2a36:	9c 93       	st	X, r25
    2a38:	8e 93       	st	-X, r24
    2a3a:	12 96       	adiw	r26, 0x02	; 2
    2a3c:	1c 92       	st	X, r1
    2a3e:	01 90       	ld	r0, Z+
    2a40:	00 20       	and	r0, r0
    2a42:	e9 f7       	brne	.-6      	; 0x2a3e <_upload_message+0x60>
    2a44:	31 97       	sbiw	r30, 0x01	; 1
    2a46:	e5 53       	subi	r30, 0x35	; 53
    2a48:	f7 40       	sbci	r31, 0x07	; 7
    2a4a:	ae 2f       	mov	r26, r30
    2a4c:	85 e3       	ldi	r24, 0x35	; 53
    2a4e:	97 e0       	ldi	r25, 0x07	; 7
    2a50:	ac 01       	movw	r20, r24
    2a52:	6a 2f       	mov	r22, r26
    2a54:	80 91 9c 07 	lds	r24, 0x079C	; 0x80079c <_rn2483_serial>
    2a58:	90 91 9d 07 	lds	r25, 0x079D	; 0x80079d <_rn2483_serial+0x1>
    2a5c:	ac d4       	rcall	.+2392   	; 0x33b6 <serial_send_bytes>
    2a5e:	81 11       	cpse	r24, r1
    2a60:	0f c0       	rjmp	.+30     	; 0x2a80 <_upload_message+0xa2>
    2a62:	28 e2       	ldi	r18, 0x28	; 40
    2a64:	35 e0       	ldi	r19, 0x05	; 5
    2a66:	4d e2       	ldi	r20, 0x2D	; 45
    2a68:	50 e0       	ldi	r21, 0x00	; 0
    2a6a:	63 e2       	ldi	r22, 0x23	; 35
    2a6c:	78 e0       	ldi	r23, 0x08	; 8
    2a6e:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <_reply_buffer_handle>
    2a72:	90 91 9b 07 	lds	r25, 0x079B	; 0x80079b <_reply_buffer_handle+0x1>
    2a76:	0e 94 95 09 	call	0x132a	; 0x132a <xStreamBufferReceive>
    2a7a:	83 e2       	ldi	r24, 0x23	; 35
    2a7c:	98 e0       	ldi	r25, 0x08	; 8
    2a7e:	02 c0       	rjmp	.+4      	; 0x2a84 <_upload_message+0xa6>
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	1f 91       	pop	r17
    2a8a:	0f 91       	pop	r16
    2a8c:	08 95       	ret

00002a8e <_reply2return_code>:
    2a8e:	af 92       	push	r10
    2a90:	bf 92       	push	r11
    2a92:	cf 92       	push	r12
    2a94:	df 92       	push	r13
    2a96:	ef 92       	push	r14
    2a98:	ff 92       	push	r15
    2a9a:	0f 93       	push	r16
    2a9c:	1f 93       	push	r17
    2a9e:	cf 93       	push	r28
    2aa0:	df 93       	push	r29
    2aa2:	6c 01       	movw	r12, r24
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	01 90       	ld	r0, Z+
    2aa8:	00 20       	and	r0, r0
    2aaa:	e9 f7       	brne	.-6      	; 0x2aa6 <_reply2return_code+0x18>
    2aac:	31 97       	sbiw	r30, 0x01	; 1
    2aae:	7f 01       	movw	r14, r30
    2ab0:	e8 1a       	sub	r14, r24
    2ab2:	f9 0a       	sbc	r15, r25
    2ab4:	09 e5       	ldi	r16, 0x59	; 89
    2ab6:	16 e0       	ldi	r17, 0x06	; 6
    2ab8:	c0 e0       	ldi	r28, 0x00	; 0
    2aba:	d0 e0       	ldi	r29, 0x00	; 0
    2abc:	f8 01       	movw	r30, r16
    2abe:	60 81       	ld	r22, Z
    2ac0:	71 81       	ldd	r23, Z+1	; 0x01
    2ac2:	a7 01       	movw	r20, r14
    2ac4:	c6 01       	movw	r24, r12
    2ac6:	0e 94 12 21 	call	0x4224	; 0x4224 <strncasecmp>
    2aca:	89 2b       	or	r24, r25
    2acc:	49 f4       	brne	.+18     	; 0x2ae0 <_reply2return_code+0x52>
    2ace:	fe 01       	movw	r30, r28
    2ad0:	ee 0f       	add	r30, r30
    2ad2:	ff 1f       	adc	r31, r31
    2ad4:	ec 0f       	add	r30, r28
    2ad6:	fd 1f       	adc	r31, r29
    2ad8:	e8 5a       	subi	r30, 0xA8	; 168
    2ada:	f9 4f       	sbci	r31, 0xF9	; 249
    2adc:	80 81       	ld	r24, Z
    2ade:	07 c0       	rjmp	.+14     	; 0x2aee <_reply2return_code+0x60>
    2ae0:	21 96       	adiw	r28, 0x01	; 1
    2ae2:	0d 5f       	subi	r16, 0xFD	; 253
    2ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae6:	c1 31       	cpi	r28, 0x11	; 17
    2ae8:	d1 05       	cpc	r29, r1
    2aea:	41 f7       	brne	.-48     	; 0x2abc <_reply2return_code+0x2e>
    2aec:	80 e1       	ldi	r24, 0x10	; 16
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	1f 91       	pop	r17
    2af4:	0f 91       	pop	r16
    2af6:	ff 90       	pop	r15
    2af8:	ef 90       	pop	r14
    2afa:	df 90       	pop	r13
    2afc:	cf 90       	pop	r12
    2afe:	bf 90       	pop	r11
    2b00:	af 90       	pop	r10
    2b02:	08 95       	ret

00002b04 <_upload_message_rc>:
    2b04:	6c df       	rcall	.-296    	; 0x29de <_upload_message>
    2b06:	c3 cf       	rjmp	.-122    	; 0x2a8e <_reply2return_code>
    2b08:	08 95       	ret

00002b0a <lora_driver_create>:
    2b0a:	8f 92       	push	r8
    2b0c:	9f 92       	push	r9
    2b0e:	af 92       	push	r10
    2b10:	cf 92       	push	r12
    2b12:	ef 92       	push	r14
    2b14:	0f 93       	push	r16
    2b16:	cf 93       	push	r28
    2b18:	c8 2f       	mov	r28, r24
    2b1a:	41 e0       	ldi	r20, 0x01	; 1
    2b1c:	60 e0       	ldi	r22, 0x00	; 0
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	88 ec       	ldi	r24, 0xC8	; 200
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <xStreamBufferGenericCreate>
    2b28:	90 93 9b 07 	sts	0x079B, r25	; 0x80079b <_reply_buffer_handle+0x1>
    2b2c:	80 93 9a 07 	sts	0x079A, r24	; 0x80079a <_reply_buffer_handle>
    2b30:	0f 2e       	mov	r0, r31
    2b32:	f9 ea       	ldi	r31, 0xA9	; 169
    2b34:	8f 2e       	mov	r8, r31
    2b36:	f4 e1       	ldi	r31, 0x14	; 20
    2b38:	9f 2e       	mov	r9, r31
    2b3a:	f0 2d       	mov	r31, r0
    2b3c:	68 94       	set
    2b3e:	aa 24       	eor	r10, r10
    2b40:	a6 f8       	bld	r10, 6
    2b42:	68 94       	set
    2b44:	cc 24       	eor	r12, r12
    2b46:	c6 f8       	bld	r12, 6
    2b48:	e1 2c       	mov	r14, r1
    2b4a:	00 e0       	ldi	r16, 0x00	; 0
    2b4c:	23 e0       	ldi	r18, 0x03	; 3
    2b4e:	40 e0       	ldi	r20, 0x00	; 0
    2b50:	51 ee       	ldi	r21, 0xE1	; 225
    2b52:	60 e0       	ldi	r22, 0x00	; 0
    2b54:	70 e0       	ldi	r23, 0x00	; 0
    2b56:	8c 2f       	mov	r24, r28
    2b58:	73 d3       	rcall	.+1766   	; 0x3240 <serial_new_instance>
    2b5a:	90 93 9d 07 	sts	0x079D, r25	; 0x80079d <_rn2483_serial+0x1>
    2b5e:	80 93 9c 07 	sts	0x079C, r24	; 0x80079c <_rn2483_serial>
    2b62:	e0 91 8f 08 	lds	r30, 0x088F	; 0x80088f <register_access+0x8>
    2b66:	f0 91 90 08 	lds	r31, 0x0890	; 0x800890 <register_access+0x9>
    2b6a:	64 e0       	ldi	r22, 0x04	; 4
    2b6c:	87 e0       	ldi	r24, 0x07	; 7
    2b6e:	91 e0       	ldi	r25, 0x01	; 1
    2b70:	19 95       	eicall
    2b72:	cf 91       	pop	r28
    2b74:	0f 91       	pop	r16
    2b76:	ef 90       	pop	r14
    2b78:	cf 90       	pop	r12
    2b7a:	af 90       	pop	r10
    2b7c:	9f 90       	pop	r9
    2b7e:	8f 90       	pop	r8
    2b80:	08 95       	ret

00002b82 <lora_driver_reset_rn2483>:
    2b82:	88 23       	and	r24, r24
    2b84:	49 f0       	breq	.+18     	; 0x2b98 <lora_driver_reset_rn2483+0x16>
    2b86:	e0 91 99 08 	lds	r30, 0x0899	; 0x800899 <register_access+0x12>
    2b8a:	f0 91 9a 08 	lds	r31, 0x089A	; 0x80089a <register_access+0x13>
    2b8e:	64 e0       	ldi	r22, 0x04	; 4
    2b90:	88 e0       	ldi	r24, 0x08	; 8
    2b92:	91 e0       	ldi	r25, 0x01	; 1
    2b94:	19 95       	eicall
    2b96:	08 95       	ret
    2b98:	e0 91 8f 08 	lds	r30, 0x088F	; 0x80088f <register_access+0x8>
    2b9c:	f0 91 90 08 	lds	r31, 0x0890	; 0x800890 <register_access+0x9>
    2ba0:	64 e0       	ldi	r22, 0x04	; 4
    2ba2:	88 e0       	ldi	r24, 0x08	; 8
    2ba4:	91 e0       	ldi	r25, 0x01	; 1
    2ba6:	19 95       	eicall
    2ba8:	08 95       	ret

00002baa <lora_driver_rn2483_factory_reset>:
    2baa:	60 e0       	ldi	r22, 0x00	; 0
    2bac:	70 e0       	ldi	r23, 0x00	; 0
    2bae:	8b ee       	ldi	r24, 0xEB	; 235
    2bb0:	93 e0       	ldi	r25, 0x03	; 3
    2bb2:	15 df       	rcall	.-470    	; 0x29de <_upload_message>
    2bb4:	e3 e2       	ldi	r30, 0x23	; 35
    2bb6:	f8 e0       	ldi	r31, 0x08	; 8
    2bb8:	01 90       	ld	r0, Z+
    2bba:	00 20       	and	r0, r0
    2bbc:	e9 f7       	brne	.-6      	; 0x2bb8 <lora_driver_rn2483_factory_reset+0xe>
    2bbe:	31 97       	sbiw	r30, 0x01	; 1
    2bc0:	e3 52       	subi	r30, 0x23	; 35
    2bc2:	f8 40       	sbci	r31, 0x08	; 8
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	75 97       	sbiw	r30, 0x15	; 21
    2bc8:	08 f0       	brcs	.+2      	; 0x2bcc <lora_driver_rn2483_factory_reset+0x22>
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	08 95       	ret

00002bce <lora_driver_get_rn2483_hweui>:
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	ec 01       	movw	r28, r24
    2bd4:	60 e0       	ldi	r22, 0x00	; 0
    2bd6:	70 e0       	ldi	r23, 0x00	; 0
    2bd8:	8c ef       	ldi	r24, 0xFC	; 252
    2bda:	93 e0       	ldi	r25, 0x03	; 3
    2bdc:	00 df       	rcall	.-512    	; 0x29de <_upload_message>
    2bde:	e3 e2       	ldi	r30, 0x23	; 35
    2be0:	f8 e0       	ldi	r31, 0x08	; 8
    2be2:	01 90       	ld	r0, Z+
    2be4:	00 20       	and	r0, r0
    2be6:	e9 f7       	brne	.-6      	; 0x2be2 <lora_driver_get_rn2483_hweui+0x14>
    2be8:	e4 53       	subi	r30, 0x34	; 52
    2bea:	f8 40       	sbci	r31, 0x08	; 8
    2bec:	39 f4       	brne	.+14     	; 0x2bfc <lora_driver_get_rn2483_hweui+0x2e>
    2bee:	63 e2       	ldi	r22, 0x23	; 35
    2bf0:	78 e0       	ldi	r23, 0x08	; 8
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	0e 94 0b 21 	call	0x4216	; 0x4216 <strcpy>
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	02 c0       	rjmp	.+4      	; 0x2c00 <lora_driver_get_rn2483_hweui+0x32>
    2bfc:	18 82       	st	Y, r1
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	df 91       	pop	r29
    2c02:	cf 91       	pop	r28
    2c04:	08 95       	ret

00002c06 <lora_driver_set_device_identifier>:
    2c06:	fc 01       	movw	r30, r24
    2c08:	01 90       	ld	r0, Z+
    2c0a:	00 20       	and	r0, r0
    2c0c:	e9 f7       	brne	.-6      	; 0x2c08 <lora_driver_set_device_identifier+0x2>
    2c0e:	9f 01       	movw	r18, r30
    2c10:	21 51       	subi	r18, 0x11	; 17
    2c12:	31 09       	sbc	r19, r1
    2c14:	28 17       	cp	r18, r24
    2c16:	39 07       	cpc	r19, r25
    2c18:	29 f4       	brne	.+10     	; 0x2c24 <lora_driver_set_device_identifier+0x1e>
    2c1a:	bc 01       	movw	r22, r24
    2c1c:	8a e2       	ldi	r24, 0x2A	; 42
    2c1e:	94 e0       	ldi	r25, 0x04	; 4
    2c20:	71 cf       	rjmp	.-286    	; 0x2b04 <_upload_message_rc>
    2c22:	08 95       	ret
    2c24:	89 e0       	ldi	r24, 0x09	; 9
    2c26:	08 95       	ret

00002c28 <lora_driver_set_application_identifier>:
    2c28:	fc 01       	movw	r30, r24
    2c2a:	01 90       	ld	r0, Z+
    2c2c:	00 20       	and	r0, r0
    2c2e:	e9 f7       	brne	.-6      	; 0x2c2a <lora_driver_set_application_identifier+0x2>
    2c30:	9f 01       	movw	r18, r30
    2c32:	21 51       	subi	r18, 0x11	; 17
    2c34:	31 09       	sbc	r19, r1
    2c36:	28 17       	cp	r18, r24
    2c38:	39 07       	cpc	r19, r25
    2c3a:	29 f4       	brne	.+10     	; 0x2c46 <lora_driver_set_application_identifier+0x1e>
    2c3c:	bc 01       	movw	r22, r24
    2c3e:	89 e3       	ldi	r24, 0x39	; 57
    2c40:	94 e0       	ldi	r25, 0x04	; 4
    2c42:	60 cf       	rjmp	.-320    	; 0x2b04 <_upload_message_rc>
    2c44:	08 95       	ret
    2c46:	89 e0       	ldi	r24, 0x09	; 9
    2c48:	08 95       	ret

00002c4a <lora_driver_set_application_key>:
    2c4a:	fc 01       	movw	r30, r24
    2c4c:	01 90       	ld	r0, Z+
    2c4e:	00 20       	and	r0, r0
    2c50:	e9 f7       	brne	.-6      	; 0x2c4c <lora_driver_set_application_key+0x2>
    2c52:	9f 01       	movw	r18, r30
    2c54:	21 52       	subi	r18, 0x21	; 33
    2c56:	31 09       	sbc	r19, r1
    2c58:	28 17       	cp	r18, r24
    2c5a:	39 07       	cpc	r19, r25
    2c5c:	29 f4       	brne	.+10     	; 0x2c68 <lora_driver_set_application_key+0x1e>
    2c5e:	bc 01       	movw	r22, r24
    2c60:	88 e4       	ldi	r24, 0x48	; 72
    2c62:	94 e0       	ldi	r25, 0x04	; 4
    2c64:	4f cf       	rjmp	.-354    	; 0x2b04 <_upload_message_rc>
    2c66:	08 95       	ret
    2c68:	89 e0       	ldi	r24, 0x09	; 9
    2c6a:	08 95       	ret

00002c6c <lora_driver_save_mac>:
    2c6c:	60 e0       	ldi	r22, 0x00	; 0
    2c6e:	70 e0       	ldi	r23, 0x00	; 0
    2c70:	87 e8       	ldi	r24, 0x87	; 135
    2c72:	94 e0       	ldi	r25, 0x04	; 4
    2c74:	47 cf       	rjmp	.-370    	; 0x2b04 <_upload_message_rc>
    2c76:	08 95       	ret

00002c78 <lora_driver_join>:
    2c78:	e8 2f       	mov	r30, r24
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	ee 0f       	add	r30, r30
    2c7e:	ff 1f       	adc	r31, r31
    2c80:	ec 5a       	subi	r30, 0xAC	; 172
    2c82:	f9 4f       	sbci	r31, 0xF9	; 249
    2c84:	60 81       	ld	r22, Z
    2c86:	71 81       	ldd	r23, Z+1	; 0x01
    2c88:	80 e9       	ldi	r24, 0x90	; 144
    2c8a:	94 e0       	ldi	r25, 0x04	; 4
    2c8c:	3b df       	rcall	.-394    	; 0x2b04 <_upload_message_rc>
    2c8e:	81 11       	cpse	r24, r1
    2c90:	12 c0       	rjmp	.+36     	; 0x2cb6 <lora_driver_join+0x3e>
    2c92:	28 e2       	ldi	r18, 0x28	; 40
    2c94:	35 e0       	ldi	r19, 0x05	; 5
    2c96:	4d e2       	ldi	r20, 0x2D	; 45
    2c98:	50 e0       	ldi	r21, 0x00	; 0
    2c9a:	63 e2       	ldi	r22, 0x23	; 35
    2c9c:	78 e0       	ldi	r23, 0x08	; 8
    2c9e:	80 91 9a 07 	lds	r24, 0x079A	; 0x80079a <_reply_buffer_handle>
    2ca2:	90 91 9b 07 	lds	r25, 0x079B	; 0x80079b <_reply_buffer_handle+0x1>
    2ca6:	0e 94 95 09 	call	0x132a	; 0x132a <xStreamBufferReceive>
    2caa:	88 23       	and	r24, r24
    2cac:	21 f0       	breq	.+8      	; 0x2cb6 <lora_driver_join+0x3e>
    2cae:	83 e2       	ldi	r24, 0x23	; 35
    2cb0:	98 e0       	ldi	r25, 0x08	; 8
    2cb2:	ed ce       	rjmp	.-550    	; 0x2a8e <_reply2return_code>
    2cb4:	08 95       	ret
    2cb6:	83 e2       	ldi	r24, 0x23	; 35
    2cb8:	98 e0       	ldi	r25, 0x08	; 8
    2cba:	e9 ce       	rjmp	.-558    	; 0x2a8e <_reply2return_code>
    2cbc:	08 95       	ret

00002cbe <lora_driver_sent_upload_message>:
    2cbe:	cf 93       	push	r28
    2cc0:	df 93       	push	r29
    2cc2:	1f 92       	push	r1
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	db 01       	movw	r26, r22
    2cca:	11 96       	adiw	r26, 0x01	; 1
    2ccc:	9c 91       	ld	r25, X
    2cce:	11 97       	sbiw	r26, 0x01	; 1
    2cd0:	95 31       	cpi	r25, 0x15	; 21
    2cd2:	08 f0       	brcs	.+2      	; 0x2cd6 <lora_driver_sent_upload_message+0x18>
    2cd4:	87 c0       	rjmp	.+270    	; 0x2de4 <lora_driver_sent_upload_message+0x126>
    2cd6:	99 23       	and	r25, r25
    2cd8:	81 f1       	breq	.+96     	; 0x2d3a <lora_driver_sent_upload_message+0x7c>
    2cda:	60 e0       	ldi	r22, 0x00	; 0
    2cdc:	70 e0       	ldi	r23, 0x00	; 0
    2cde:	27 2f       	mov	r18, r23
    2ce0:	30 e0       	ldi	r19, 0x00	; 0
    2ce2:	46 2f       	mov	r20, r22
    2ce4:	50 e0       	ldi	r21, 0x00	; 0
    2ce6:	fd 01       	movw	r30, r26
    2ce8:	e4 0f       	add	r30, r20
    2cea:	f5 1f       	adc	r31, r21
    2cec:	92 81       	ldd	r25, Z+2	; 0x02
    2cee:	92 95       	swap	r25
    2cf0:	9f 70       	andi	r25, 0x0F	; 15
    2cf2:	9a 30       	cpi	r25, 0x0A	; 10
    2cf4:	10 f0       	brcs	.+4      	; 0x2cfa <lora_driver_sent_upload_message+0x3c>
    2cf6:	99 5c       	subi	r25, 0xC9	; 201
    2cf8:	01 c0       	rjmp	.+2      	; 0x2cfc <lora_driver_sent_upload_message+0x3e>
    2cfa:	90 5d       	subi	r25, 0xD0	; 208
    2cfc:	f9 01       	movw	r30, r18
    2cfe:	ec 54       	subi	r30, 0x4C	; 76
    2d00:	f8 4f       	sbci	r31, 0xF8	; 248
    2d02:	90 83       	st	Z, r25
    2d04:	2f 5f       	subi	r18, 0xFF	; 255
    2d06:	3f 4f       	sbci	r19, 0xFF	; 255
    2d08:	fd 01       	movw	r30, r26
    2d0a:	e4 0f       	add	r30, r20
    2d0c:	f5 1f       	adc	r31, r21
    2d0e:	92 81       	ldd	r25, Z+2	; 0x02
    2d10:	9f 70       	andi	r25, 0x0F	; 15
    2d12:	49 2f       	mov	r20, r25
    2d14:	50 e0       	ldi	r21, 0x00	; 0
    2d16:	4a 30       	cpi	r20, 0x0A	; 10
    2d18:	51 05       	cpc	r21, r1
    2d1a:	14 f0       	brlt	.+4      	; 0x2d20 <lora_driver_sent_upload_message+0x62>
    2d1c:	99 5c       	subi	r25, 0xC9	; 201
    2d1e:	01 c0       	rjmp	.+2      	; 0x2d22 <lora_driver_sent_upload_message+0x64>
    2d20:	90 5d       	subi	r25, 0xD0	; 208
    2d22:	f9 01       	movw	r30, r18
    2d24:	ec 54       	subi	r30, 0x4C	; 76
    2d26:	f8 4f       	sbci	r31, 0xF8	; 248
    2d28:	90 83       	st	Z, r25
    2d2a:	7e 5f       	subi	r23, 0xFE	; 254
    2d2c:	6f 5f       	subi	r22, 0xFF	; 255
    2d2e:	11 96       	adiw	r26, 0x01	; 1
    2d30:	9c 91       	ld	r25, X
    2d32:	11 97       	sbiw	r26, 0x01	; 1
    2d34:	69 17       	cp	r22, r25
    2d36:	98 f2       	brcs	.-90     	; 0x2cde <lora_driver_sent_upload_message+0x20>
    2d38:	01 c0       	rjmp	.+2      	; 0x2d3c <lora_driver_sent_upload_message+0x7e>
    2d3a:	70 e0       	ldi	r23, 0x00	; 0
    2d3c:	e7 2f       	mov	r30, r23
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	ec 54       	subi	r30, 0x4C	; 76
    2d42:	f8 4f       	sbci	r31, 0xF8	; 248
    2d44:	10 82       	st	Z, r1
    2d46:	4c 91       	ld	r20, X
    2d48:	81 11       	cpse	r24, r1
    2d4a:	03 c0       	rjmp	.+6      	; 0x2d52 <lora_driver_sent_upload_message+0x94>
    2d4c:	89 e9       	ldi	r24, 0x99	; 153
    2d4e:	94 e0       	ldi	r25, 0x04	; 4
    2d50:	02 c0       	rjmp	.+4      	; 0x2d56 <lora_driver_sent_upload_message+0x98>
    2d52:	8b e9       	ldi	r24, 0x9B	; 155
    2d54:	94 e0       	ldi	r25, 0x04	; 4
    2d56:	24 eb       	ldi	r18, 0xB4	; 180
    2d58:	37 e0       	ldi	r19, 0x07	; 7
    2d5a:	3f 93       	push	r19
    2d5c:	2f 93       	push	r18
    2d5e:	1f 92       	push	r1
    2d60:	4f 93       	push	r20
    2d62:	9f 93       	push	r25
    2d64:	8f 93       	push	r24
    2d66:	8f e9       	ldi	r24, 0x9F	; 159
    2d68:	94 e0       	ldi	r25, 0x04	; 4
    2d6a:	9f 93       	push	r25
    2d6c:	8f 93       	push	r24
    2d6e:	86 ef       	ldi	r24, 0xF6	; 246
    2d70:	97 e0       	ldi	r25, 0x07	; 7
    2d72:	9f 93       	push	r25
    2d74:	8f 93       	push	r24
    2d76:	0e 94 6d 21 	call	0x42da	; 0x42da <sprintf>
    2d7a:	60 e0       	ldi	r22, 0x00	; 0
    2d7c:	70 e0       	ldi	r23, 0x00	; 0
    2d7e:	86 ef       	ldi	r24, 0xF6	; 246
    2d80:	97 e0       	ldi	r25, 0x07	; 7
    2d82:	c0 de       	rcall	.-640    	; 0x2b04 <_upload_message_rc>
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	de bf       	out	0x3e, r29	; 62
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	cd bf       	out	0x3d, r28	; 61
    2d8e:	8e 30       	cpi	r24, 0x0E	; 14
    2d90:	51 f5       	brne	.+84     	; 0x2de6 <lora_driver_sent_upload_message+0x128>
    2d92:	87 e0       	ldi	r24, 0x07	; 7
    2d94:	89 83       	std	Y+1, r24	; 0x01
    2d96:	be 01       	movw	r22, r28
    2d98:	6f 5f       	subi	r22, 0xFF	; 255
    2d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d9c:	83 e2       	ldi	r24, 0x23	; 35
    2d9e:	98 e0       	ldi	r25, 0x08	; 8
    2da0:	51 d1       	rcall	.+674    	; 0x3044 <decode_port_no>
    2da2:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <_downlink_payload>
    2da6:	e9 81       	ldd	r30, Y+1	; 0x01
    2da8:	f0 e0       	ldi	r31, 0x00	; 0
    2daa:	ed 5d       	subi	r30, 0xDD	; 221
    2dac:	f7 4f       	sbci	r31, 0xF7	; 247
    2dae:	df 01       	movw	r26, r30
    2db0:	0d 90       	ld	r0, X+
    2db2:	00 20       	and	r0, r0
    2db4:	e9 f7       	brne	.-6      	; 0x2db0 <lora_driver_sent_upload_message+0xf2>
    2db6:	11 97       	sbiw	r26, 0x01	; 1
    2db8:	ae 1b       	sub	r26, r30
    2dba:	bf 0b       	sbc	r27, r31
    2dbc:	aa 23       	and	r26, r26
    2dbe:	81 f0       	breq	.+32     	; 0x2de0 <lora_driver_sent_upload_message+0x122>
    2dc0:	bb 27       	eor	r27, r27
    2dc2:	11 97       	sbiw	r26, 0x01	; 1
    2dc4:	cd 01       	movw	r24, r26
    2dc6:	0a f4       	brpl	.+2      	; 0x2dca <lora_driver_sent_upload_message+0x10c>
    2dc8:	01 96       	adiw	r24, 0x01	; 1
    2dca:	95 95       	asr	r25
    2dcc:	87 95       	ror	r24
    2dce:	80 93 9f 07 	sts	0x079F, r24	; 0x80079f <_downlink_payload+0x1>
    2dd2:	af 01       	movw	r20, r30
    2dd4:	4f 5f       	subi	r20, 0xFF	; 255
    2dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    2dd8:	64 e1       	ldi	r22, 0x14	; 20
    2dda:	80 ea       	ldi	r24, 0xA0	; 160
    2ddc:	97 e0       	ldi	r25, 0x07	; 7
    2dde:	5e d1       	rcall	.+700    	; 0x309c <decode_hexadecimal_string_bytes>
    2de0:	8e e0       	ldi	r24, 0x0E	; 14
    2de2:	01 c0       	rjmp	.+2      	; 0x2de6 <lora_driver_sent_upload_message+0x128>
    2de4:	84 e1       	ldi	r24, 0x14	; 20
    2de6:	0f 90       	pop	r0
    2de8:	df 91       	pop	r29
    2dea:	cf 91       	pop	r28
    2dec:	08 95       	ret

00002dee <lora_driver_set_adaptive_data_rate>:
    2dee:	81 30       	cpi	r24, 0x01	; 1
    2df0:	19 f0       	breq	.+6      	; 0x2df8 <lora_driver_set_adaptive_data_rate+0xa>
    2df2:	6f ea       	ldi	r22, 0xAF	; 175
    2df4:	74 e0       	ldi	r23, 0x04	; 4
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <lora_driver_set_adaptive_data_rate+0xe>
    2df8:	68 e8       	ldi	r22, 0x88	; 136
    2dfa:	75 e0       	ldi	r23, 0x05	; 5
    2dfc:	83 eb       	ldi	r24, 0xB3	; 179
    2dfe:	94 e0       	ldi	r25, 0x04	; 4
    2e00:	81 ce       	rjmp	.-766    	; 0x2b04 <_upload_message_rc>
    2e02:	08 95       	ret

00002e04 <lora_driver_set_data_rate>:
    2e04:	88 30       	cpi	r24, 0x08	; 8
    2e06:	c0 f4       	brcc	.+48     	; 0x2e38 <lora_driver_set_data_rate+0x34>
    2e08:	1f 92       	push	r1
    2e0a:	8f 93       	push	r24
    2e0c:	8b ec       	ldi	r24, 0xCB	; 203
    2e0e:	94 e0       	ldi	r25, 0x04	; 4
    2e10:	9f 93       	push	r25
    2e12:	8f 93       	push	r24
    2e14:	86 ef       	ldi	r24, 0xF6	; 246
    2e16:	97 e0       	ldi	r25, 0x07	; 7
    2e18:	9f 93       	push	r25
    2e1a:	8f 93       	push	r24
    2e1c:	0e 94 6d 21 	call	0x42da	; 0x42da <sprintf>
    2e20:	60 e0       	ldi	r22, 0x00	; 0
    2e22:	70 e0       	ldi	r23, 0x00	; 0
    2e24:	86 ef       	ldi	r24, 0xF6	; 246
    2e26:	97 e0       	ldi	r25, 0x07	; 7
    2e28:	6d de       	rcall	.-806    	; 0x2b04 <_upload_message_rc>
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	0f 90       	pop	r0
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	08 95       	ret
    2e38:	89 e0       	ldi	r24, 0x09	; 9
    2e3a:	08 95       	ret

00002e3c <lora_driver_configure_to_eu868>:
    2e3c:	2f 92       	push	r2
    2e3e:	3f 92       	push	r3
    2e40:	4f 92       	push	r4
    2e42:	5f 92       	push	r5
    2e44:	6f 92       	push	r6
    2e46:	7f 92       	push	r7
    2e48:	8f 92       	push	r8
    2e4a:	9f 92       	push	r9
    2e4c:	af 92       	push	r10
    2e4e:	bf 92       	push	r11
    2e50:	cf 92       	push	r12
    2e52:	df 92       	push	r13
    2e54:	ef 92       	push	r14
    2e56:	ff 92       	push	r15
    2e58:	0f 93       	push	r16
    2e5a:	1f 93       	push	r17
    2e5c:	cf 93       	push	r28
    2e5e:	df 93       	push	r29
    2e60:	68 ef       	ldi	r22, 0xF8	; 248
    2e62:	74 e0       	ldi	r23, 0x04	; 4
    2e64:	84 e0       	ldi	r24, 0x04	; 4
    2e66:	95 e0       	ldi	r25, 0x05	; 5
    2e68:	ba dd       	rcall	.-1164   	; 0x29de <_upload_message>
    2e6a:	11 de       	rcall	.-990    	; 0x2a8e <_reply2return_code>
    2e6c:	81 11       	cpse	r24, r1
    2e6e:	a6 c0       	rjmp	.+332    	; 0x2fbc <lora_driver_configure_to_eu868+0x180>
    2e70:	60 e1       	ldi	r22, 0x10	; 16
    2e72:	75 e0       	ldi	r23, 0x05	; 5
    2e74:	86 e1       	ldi	r24, 0x16	; 22
    2e76:	95 e0       	ldi	r25, 0x05	; 5
    2e78:	b2 dd       	rcall	.-1180   	; 0x29de <_upload_message>
    2e7a:	09 de       	rcall	.-1006   	; 0x2a8e <_reply2return_code>
    2e7c:	81 11       	cpse	r24, r1
    2e7e:	9e c0       	rjmp	.+316    	; 0x2fbc <lora_driver_configure_to_eu868+0x180>
    2e80:	c0 e0       	ldi	r28, 0x00	; 0
    2e82:	d0 e0       	ldi	r29, 0x00	; 0
    2e84:	0f 2e       	mov	r0, r31
    2e86:	f0 e6       	ldi	r31, 0x60	; 96
    2e88:	8f 2e       	mov	r8, r31
    2e8a:	f5 ee       	ldi	r31, 0xE5	; 229
    2e8c:	9f 2e       	mov	r9, r31
    2e8e:	fe ea       	ldi	r31, 0xAE	; 174
    2e90:	af 2e       	mov	r10, r31
    2e92:	f3 e3       	ldi	r31, 0x33	; 51
    2e94:	bf 2e       	mov	r11, r31
    2e96:	f0 2d       	mov	r31, r0
    2e98:	0f 2e       	mov	r0, r31
    2e9a:	f9 e2       	ldi	r31, 0x29	; 41
    2e9c:	ef 2e       	mov	r14, r31
    2e9e:	f5 e0       	ldi	r31, 0x05	; 5
    2ea0:	ff 2e       	mov	r15, r31
    2ea2:	f0 2d       	mov	r31, r0
    2ea4:	06 ef       	ldi	r16, 0xF6	; 246
    2ea6:	17 e0       	ldi	r17, 0x07	; 7
    2ea8:	0f 2e       	mov	r0, r31
    2eaa:	f2 e4       	ldi	r31, 0x42	; 66
    2eac:	cf 2e       	mov	r12, r31
    2eae:	f5 e0       	ldi	r31, 0x05	; 5
    2eb0:	df 2e       	mov	r13, r31
    2eb2:	f0 2d       	mov	r31, r0
    2eb4:	0f 2e       	mov	r0, r31
    2eb6:	f9 e5       	ldi	r31, 0x59	; 89
    2eb8:	6f 2e       	mov	r6, r31
    2eba:	f5 e0       	ldi	r31, 0x05	; 5
    2ebc:	7f 2e       	mov	r7, r31
    2ebe:	f0 2d       	mov	r31, r0
    2ec0:	0f 2e       	mov	r0, r31
    2ec2:	f3 e7       	ldi	r31, 0x73	; 115
    2ec4:	4f 2e       	mov	r4, r31
    2ec6:	f5 e0       	ldi	r31, 0x05	; 5
    2ec8:	5f 2e       	mov	r5, r31
    2eca:	f0 2d       	mov	r31, r0
    2ecc:	df 93       	push	r29
    2ece:	cf 93       	push	r28
    2ed0:	ff 92       	push	r15
    2ed2:	ef 92       	push	r14
    2ed4:	1f 93       	push	r17
    2ed6:	0f 93       	push	r16
    2ed8:	0e 94 6d 21 	call	0x42da	; 0x42da <sprintf>
    2edc:	60 e0       	ldi	r22, 0x00	; 0
    2ede:	70 e0       	ldi	r23, 0x00	; 0
    2ee0:	c8 01       	movw	r24, r16
    2ee2:	7d dd       	rcall	.-1286   	; 0x29de <_upload_message>
    2ee4:	d4 dd       	rcall	.-1112   	; 0x2a8e <_reply2return_code>
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	81 11       	cpse	r24, r1
    2ef4:	63 c0       	rjmp	.+198    	; 0x2fbc <lora_driver_configure_to_eu868+0x180>
    2ef6:	c3 30       	cpi	r28, 0x03	; 3
    2ef8:	08 f4       	brcc	.+2      	; 0x2efc <lora_driver_configure_to_eu868+0xc0>
    2efa:	4d c0       	rjmp	.+154    	; 0x2f96 <lora_driver_configure_to_eu868+0x15a>
    2efc:	bf 92       	push	r11
    2efe:	af 92       	push	r10
    2f00:	9f 92       	push	r9
    2f02:	8f 92       	push	r8
    2f04:	df 93       	push	r29
    2f06:	cf 93       	push	r28
    2f08:	df 92       	push	r13
    2f0a:	cf 92       	push	r12
    2f0c:	1f 93       	push	r17
    2f0e:	0f 93       	push	r16
    2f10:	0e 94 6d 21 	call	0x42da	; 0x42da <sprintf>
    2f14:	60 e0       	ldi	r22, 0x00	; 0
    2f16:	70 e0       	ldi	r23, 0x00	; 0
    2f18:	c8 01       	movw	r24, r16
    2f1a:	61 dd       	rcall	.-1342   	; 0x29de <_upload_message>
    2f1c:	b8 dd       	rcall	.-1168   	; 0x2a8e <_reply2return_code>
    2f1e:	2d b7       	in	r18, 0x3d	; 61
    2f20:	3e b7       	in	r19, 0x3e	; 62
    2f22:	26 5f       	subi	r18, 0xF6	; 246
    2f24:	3f 4f       	sbci	r19, 0xFF	; 255
    2f26:	0f b6       	in	r0, 0x3f	; 63
    2f28:	f8 94       	cli
    2f2a:	3e bf       	out	0x3e, r19	; 62
    2f2c:	0f be       	out	0x3f, r0	; 63
    2f2e:	2d bf       	out	0x3d, r18	; 61
    2f30:	81 11       	cpse	r24, r1
    2f32:	44 c0       	rjmp	.+136    	; 0x2fbc <lora_driver_configure_to_eu868+0x180>
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	7f 92       	push	r7
    2f3a:	6f 92       	push	r6
    2f3c:	1f 93       	push	r17
    2f3e:	0f 93       	push	r16
    2f40:	0e 94 6d 21 	call	0x42da	; 0x42da <sprintf>
    2f44:	60 e0       	ldi	r22, 0x00	; 0
    2f46:	70 e0       	ldi	r23, 0x00	; 0
    2f48:	c8 01       	movw	r24, r16
    2f4a:	49 dd       	rcall	.-1390   	; 0x29de <_upload_message>
    2f4c:	a0 dd       	rcall	.-1216   	; 0x2a8e <_reply2return_code>
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	81 11       	cpse	r24, r1
    2f5c:	2f c0       	rjmp	.+94     	; 0x2fbc <lora_driver_configure_to_eu868+0x180>
    2f5e:	df 93       	push	r29
    2f60:	cf 93       	push	r28
    2f62:	5f 92       	push	r5
    2f64:	4f 92       	push	r4
    2f66:	1f 93       	push	r17
    2f68:	0f 93       	push	r16
    2f6a:	0e 94 6d 21 	call	0x42da	; 0x42da <sprintf>
    2f6e:	60 e0       	ldi	r22, 0x00	; 0
    2f70:	70 e0       	ldi	r23, 0x00	; 0
    2f72:	c8 01       	movw	r24, r16
    2f74:	34 dd       	rcall	.-1432   	; 0x29de <_upload_message>
    2f76:	8b dd       	rcall	.-1258   	; 0x2a8e <_reply2return_code>
    2f78:	0f 90       	pop	r0
    2f7a:	0f 90       	pop	r0
    2f7c:	0f 90       	pop	r0
    2f7e:	0f 90       	pop	r0
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	81 11       	cpse	r24, r1
    2f86:	1a c0       	rjmp	.+52     	; 0x2fbc <lora_driver_configure_to_eu868+0x180>
    2f88:	30 e4       	ldi	r19, 0x40	; 64
    2f8a:	83 0e       	add	r8, r19
    2f8c:	3d e0       	ldi	r19, 0x0D	; 13
    2f8e:	93 1e       	adc	r9, r19
    2f90:	33 e0       	ldi	r19, 0x03	; 3
    2f92:	a3 1e       	adc	r10, r19
    2f94:	b1 1c       	adc	r11, r1
    2f96:	21 96       	adiw	r28, 0x01	; 1
    2f98:	c8 30       	cpi	r28, 0x08	; 8
    2f9a:	d1 05       	cpc	r29, r1
    2f9c:	09 f0       	breq	.+2      	; 0x2fa0 <lora_driver_configure_to_eu868+0x164>
    2f9e:	96 cf       	rjmp	.-212    	; 0x2ecc <lora_driver_configure_to_eu868+0x90>
    2fa0:	60 e0       	ldi	r22, 0x00	; 0
    2fa2:	70 e0       	ldi	r23, 0x00	; 0
    2fa4:	8b e8       	ldi	r24, 0x8B	; 139
    2fa6:	95 e0       	ldi	r25, 0x05	; 5
    2fa8:	1a dd       	rcall	.-1484   	; 0x29de <_upload_message>
    2faa:	71 dd       	rcall	.-1310   	; 0x2a8e <_reply2return_code>
    2fac:	81 11       	cpse	r24, r1
    2fae:	06 c0       	rjmp	.+12     	; 0x2fbc <lora_driver_configure_to_eu868+0x180>
    2fb0:	60 e0       	ldi	r22, 0x00	; 0
    2fb2:	70 e0       	ldi	r23, 0x00	; 0
    2fb4:	8c e9       	ldi	r24, 0x9C	; 156
    2fb6:	95 e0       	ldi	r25, 0x05	; 5
    2fb8:	12 dd       	rcall	.-1500   	; 0x29de <_upload_message>
    2fba:	69 dd       	rcall	.-1326   	; 0x2a8e <_reply2return_code>
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	1f 91       	pop	r17
    2fc2:	0f 91       	pop	r16
    2fc4:	ff 90       	pop	r15
    2fc6:	ef 90       	pop	r14
    2fc8:	df 90       	pop	r13
    2fca:	cf 90       	pop	r12
    2fcc:	bf 90       	pop	r11
    2fce:	af 90       	pop	r10
    2fd0:	9f 90       	pop	r9
    2fd2:	8f 90       	pop	r8
    2fd4:	7f 90       	pop	r7
    2fd6:	6f 90       	pop	r6
    2fd8:	5f 90       	pop	r5
    2fda:	4f 90       	pop	r4
    2fdc:	3f 90       	pop	r3
    2fde:	2f 90       	pop	r2
    2fe0:	08 95       	ret

00002fe2 <lora_driver_set_otaa_identity>:
    2fe2:	ef 92       	push	r14
    2fe4:	ff 92       	push	r15
    2fe6:	0f 93       	push	r16
    2fe8:	1f 93       	push	r17
    2fea:	cf 93       	push	r28
    2fec:	df 93       	push	r29
    2fee:	ec 01       	movw	r28, r24
    2ff0:	8b 01       	movw	r16, r22
    2ff2:	7a 01       	movw	r14, r20
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	fb de       	rcall	.-522    	; 0x2dee <lora_driver_set_adaptive_data_rate>
    2ff8:	81 11       	cpse	r24, r1
    2ffa:	11 c0       	rjmp	.+34     	; 0x301e <lora_driver_set_otaa_identity+0x3c>
    2ffc:	ce 01       	movw	r24, r28
    2ffe:	14 de       	rcall	.-984    	; 0x2c28 <lora_driver_set_application_identifier>
    3000:	81 11       	cpse	r24, r1
    3002:	0d c0       	rjmp	.+26     	; 0x301e <lora_driver_set_otaa_identity+0x3c>
    3004:	c8 01       	movw	r24, r16
    3006:	21 de       	rcall	.-958    	; 0x2c4a <lora_driver_set_application_key>
    3008:	81 11       	cpse	r24, r1
    300a:	09 c0       	rjmp	.+18     	; 0x301e <lora_driver_set_otaa_identity+0x3c>
    300c:	c7 01       	movw	r24, r14
    300e:	fb dd       	rcall	.-1034   	; 0x2c06 <lora_driver_set_device_identifier>
    3010:	81 11       	cpse	r24, r1
    3012:	05 c0       	rjmp	.+10     	; 0x301e <lora_driver_set_otaa_identity+0x3c>
    3014:	85 e0       	ldi	r24, 0x05	; 5
    3016:	f6 de       	rcall	.-532    	; 0x2e04 <lora_driver_set_data_rate>
    3018:	81 11       	cpse	r24, r1
    301a:	01 c0       	rjmp	.+2      	; 0x301e <lora_driver_set_otaa_identity+0x3c>
    301c:	27 de       	rcall	.-946    	; 0x2c6c <lora_driver_save_mac>
    301e:	df 91       	pop	r29
    3020:	cf 91       	pop	r28
    3022:	1f 91       	pop	r17
    3024:	0f 91       	pop	r16
    3026:	ff 90       	pop	r15
    3028:	ef 90       	pop	r14
    302a:	08 95       	ret

0000302c <lora_driver_map_return_code_to_text>:
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	fc 01       	movw	r30, r24
    3030:	ee 0f       	add	r30, r30
    3032:	ff 1f       	adc	r31, r31
    3034:	8e 0f       	add	r24, r30
    3036:	9f 1f       	adc	r25, r31
    3038:	fc 01       	movw	r30, r24
    303a:	e8 5a       	subi	r30, 0xA8	; 168
    303c:	f9 4f       	sbci	r31, 0xF9	; 249
    303e:	81 81       	ldd	r24, Z+1	; 0x01
    3040:	92 81       	ldd	r25, Z+2	; 0x02
    3042:	08 95       	ret

00003044 <decode_port_no>:
    3044:	dc 01       	movw	r26, r24
    3046:	00 97       	sbiw	r24, 0x00	; 0
    3048:	29 f1       	breq	.+74     	; 0x3094 <decode_port_no+0x50>
    304a:	fb 01       	movw	r30, r22
    304c:	20 81       	ld	r18, Z
    304e:	fc 01       	movw	r30, r24
    3050:	01 90       	ld	r0, Z+
    3052:	00 20       	and	r0, r0
    3054:	e9 f7       	brne	.-6      	; 0x3050 <decode_port_no+0xc>
    3056:	31 97       	sbiw	r30, 0x01	; 1
    3058:	e8 1b       	sub	r30, r24
    305a:	f9 0b       	sbc	r31, r25
    305c:	82 2f       	mov	r24, r18
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	e8 17       	cp	r30, r24
    3062:	f9 07       	cpc	r31, r25
    3064:	c8 f0       	brcs	.+50     	; 0x3098 <decode_port_no+0x54>
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	08 c0       	rjmp	.+16     	; 0x307a <decode_port_no+0x36>
    306a:	88 0f       	add	r24, r24
    306c:	38 2f       	mov	r19, r24
    306e:	33 0f       	add	r19, r19
    3070:	33 0f       	add	r19, r19
    3072:	83 0f       	add	r24, r19
    3074:	80 53       	subi	r24, 0x30	; 48
    3076:	89 0f       	add	r24, r25
    3078:	2f 5f       	subi	r18, 0xFF	; 255
    307a:	fd 01       	movw	r30, r26
    307c:	e2 0f       	add	r30, r18
    307e:	f1 1d       	adc	r31, r1
    3080:	90 81       	ld	r25, Z
    3082:	30 ed       	ldi	r19, 0xD0	; 208
    3084:	39 0f       	add	r19, r25
    3086:	3a 30       	cpi	r19, 0x0A	; 10
    3088:	10 f4       	brcc	.+4      	; 0x308e <decode_port_no+0x4a>
    308a:	91 11       	cpse	r25, r1
    308c:	ee cf       	rjmp	.-36     	; 0x306a <decode_port_no+0x26>
    308e:	fb 01       	movw	r30, r22
    3090:	20 83       	st	Z, r18
    3092:	08 95       	ret
    3094:	80 e0       	ldi	r24, 0x00	; 0
    3096:	08 95       	ret
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	08 95       	ret

0000309c <decode_hexadecimal_string_bytes>:
    309c:	0f 93       	push	r16
    309e:	1f 93       	push	r17
    30a0:	cf 93       	push	r28
    30a2:	df 93       	push	r29
    30a4:	dc 01       	movw	r26, r24
    30a6:	ea 01       	movw	r28, r20
    30a8:	20 97       	sbiw	r28, 0x00	; 0
    30aa:	e1 f1       	breq	.+120    	; 0x3124 <decode_hexadecimal_string_bytes+0x88>
    30ac:	fa 01       	movw	r30, r20
    30ae:	01 90       	ld	r0, Z+
    30b0:	00 20       	and	r0, r0
    30b2:	e9 f7       	brne	.-6      	; 0x30ae <decode_hexadecimal_string_bytes+0x12>
    30b4:	31 97       	sbiw	r30, 0x01	; 1
    30b6:	e4 1b       	sub	r30, r20
    30b8:	f5 0b       	sbc	r31, r21
    30ba:	32 97       	sbiw	r30, 0x02	; 2
    30bc:	10 f5       	brcc	.+68     	; 0x3102 <decode_hexadecimal_string_bytes+0x66>
    30be:	32 c0       	rjmp	.+100    	; 0x3124 <decode_hexadecimal_string_bytes+0x88>
    30c0:	8d 01       	movw	r16, r26
    30c2:	04 0f       	add	r16, r20
    30c4:	15 1f       	adc	r17, r21
    30c6:	30 e0       	ldi	r19, 0x00	; 0
    30c8:	ae 01       	movw	r20, r28
    30ca:	42 0f       	add	r20, r18
    30cc:	53 1f       	adc	r21, r19
    30ce:	fa 01       	movw	r30, r20
    30d0:	90 81       	ld	r25, Z
    30d2:	91 34       	cpi	r25, 0x41	; 65
    30d4:	28 f0       	brcs	.+10     	; 0x30e0 <decode_hexadecimal_string_bytes+0x44>
    30d6:	97 53       	subi	r25, 0x37	; 55
    30d8:	59 2f       	mov	r21, r25
    30da:	52 95       	swap	r21
    30dc:	50 7f       	andi	r21, 0xF0	; 240
    30de:	03 c0       	rjmp	.+6      	; 0x30e6 <decode_hexadecimal_string_bytes+0x4a>
    30e0:	59 2f       	mov	r21, r25
    30e2:	52 95       	swap	r21
    30e4:	50 7f       	andi	r21, 0xF0	; 240
    30e6:	2c 0f       	add	r18, r28
    30e8:	3d 1f       	adc	r19, r29
    30ea:	f9 01       	movw	r30, r18
    30ec:	91 81       	ldd	r25, Z+1	; 0x01
    30ee:	91 34       	cpi	r25, 0x41	; 65
    30f0:	10 f0       	brcs	.+4      	; 0x30f6 <decode_hexadecimal_string_bytes+0x5a>
    30f2:	97 53       	subi	r25, 0x37	; 55
    30f4:	01 c0       	rjmp	.+2      	; 0x30f8 <decode_hexadecimal_string_bytes+0x5c>
    30f6:	90 53       	subi	r25, 0x30	; 48
    30f8:	95 0f       	add	r25, r21
    30fa:	f8 01       	movw	r30, r16
    30fc:	90 83       	st	Z, r25
    30fe:	8f 5f       	subi	r24, 0xFF	; 255
    3100:	01 c0       	rjmp	.+2      	; 0x3104 <decode_hexadecimal_string_bytes+0x68>
    3102:	80 e0       	ldi	r24, 0x00	; 0
    3104:	28 2f       	mov	r18, r24
    3106:	22 0f       	add	r18, r18
    3108:	48 2f       	mov	r20, r24
    310a:	50 e0       	ldi	r21, 0x00	; 0
    310c:	fe 01       	movw	r30, r28
    310e:	01 90       	ld	r0, Z+
    3110:	00 20       	and	r0, r0
    3112:	e9 f7       	brne	.-6      	; 0x310e <decode_hexadecimal_string_bytes+0x72>
    3114:	31 97       	sbiw	r30, 0x01	; 1
    3116:	ec 1b       	sub	r30, r28
    3118:	fd 0b       	sbc	r31, r29
    311a:	4e 17       	cp	r20, r30
    311c:	5f 07       	cpc	r21, r31
    311e:	10 f4       	brcc	.+4      	; 0x3124 <decode_hexadecimal_string_bytes+0x88>
    3120:	86 13       	cpse	r24, r22
    3122:	ce cf       	rjmp	.-100    	; 0x30c0 <decode_hexadecimal_string_bytes+0x24>
    3124:	df 91       	pop	r29
    3126:	cf 91       	pop	r28
    3128:	1f 91       	pop	r17
    312a:	0f 91       	pop	r16
    312c:	08 95       	ret

0000312e <_serial_call_back>:
    312e:	80 91 53 08 	lds	r24, 0x0853	; 0x800853 <crc_sum.1941>
    3132:	86 0f       	add	r24, r22
    3134:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <crc_sum.1941>
    3138:	90 91 56 08 	lds	r25, 0x0856	; 0x800856 <_mh_state>
    313c:	91 30       	cpi	r25, 0x01	; 1
    313e:	79 f0       	breq	.+30     	; 0x315e <_serial_call_back+0x30>
    3140:	28 f0       	brcs	.+10     	; 0x314c <_serial_call_back+0x1e>
    3142:	92 30       	cpi	r25, 0x02	; 2
    3144:	a9 f0       	breq	.+42     	; 0x3170 <_serial_call_back+0x42>
    3146:	93 30       	cpi	r25, 0x03	; 3
    3148:	19 f1       	breq	.+70     	; 0x3190 <_serial_call_back+0x62>
    314a:	08 95       	ret
    314c:	6f 3f       	cpi	r22, 0xFF	; 255
    314e:	09 f0       	breq	.+2      	; 0x3152 <_serial_call_back+0x24>
    3150:	48 c0       	rjmp	.+144    	; 0x31e2 <_serial_call_back+0xb4>
    3152:	10 92 53 08 	sts	0x0853, r1	; 0x800853 <crc_sum.1941>
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	80 93 56 08 	sts	0x0856, r24	; 0x800856 <_mh_state>
    315c:	08 95       	ret
    315e:	66 38       	cpi	r22, 0x86	; 134
    3160:	09 f0       	breq	.+2      	; 0x3164 <_serial_call_back+0x36>
    3162:	3f c0       	rjmp	.+126    	; 0x31e2 <_serial_call_back+0xb4>
    3164:	10 92 52 08 	sts	0x0852, r1	; 0x800852 <inDex.1939>
    3168:	82 e0       	ldi	r24, 0x02	; 2
    316a:	80 93 56 08 	sts	0x0856, r24	; 0x800856 <_mh_state>
    316e:	08 95       	ret
    3170:	e0 91 52 08 	lds	r30, 0x0852	; 0x800852 <inDex.1939>
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	8e 0f       	add	r24, r30
    3178:	80 93 52 08 	sts	0x0852, r24	; 0x800852 <inDex.1939>
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	e0 5b       	subi	r30, 0xB0	; 176
    3180:	f7 4f       	sbci	r31, 0xF7	; 247
    3182:	60 83       	st	Z, r22
    3184:	82 30       	cpi	r24, 0x02	; 2
    3186:	69 f5       	brne	.+90     	; 0x31e2 <_serial_call_back+0xb4>
    3188:	83 e0       	ldi	r24, 0x03	; 3
    318a:	80 93 56 08 	sts	0x0856, r24	; 0x800856 <_mh_state>
    318e:	08 95       	ret
    3190:	90 91 52 08 	lds	r25, 0x0852	; 0x800852 <inDex.1939>
    3194:	21 e0       	ldi	r18, 0x01	; 1
    3196:	29 0f       	add	r18, r25
    3198:	20 93 52 08 	sts	0x0852, r18	; 0x800852 <inDex.1939>
    319c:	96 30       	cpi	r25, 0x06	; 6
    319e:	09 f5       	brne	.+66     	; 0x31e2 <_serial_call_back+0xb4>
    31a0:	81 11       	cpse	r24, r1
    31a2:	0e c0       	rjmp	.+28     	; 0x31c0 <_serial_call_back+0x92>
    31a4:	e0 e5       	ldi	r30, 0x50	; 80
    31a6:	f8 e0       	ldi	r31, 0x08	; 8
    31a8:	80 81       	ld	r24, Z
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	98 2f       	mov	r25, r24
    31ae:	88 27       	eor	r24, r24
    31b0:	21 81       	ldd	r18, Z+1	; 0x01
    31b2:	82 0f       	add	r24, r18
    31b4:	91 1d       	adc	r25, r1
    31b6:	90 93 58 08 	sts	0x0858, r25	; 0x800858 <_ppm+0x1>
    31ba:	80 93 57 08 	sts	0x0857, r24	; 0x800857 <_ppm>
    31be:	04 c0       	rjmp	.+8      	; 0x31c8 <_serial_call_back+0x9a>
    31c0:	10 92 58 08 	sts	0x0858, r1	; 0x800858 <_ppm+0x1>
    31c4:	10 92 57 08 	sts	0x0857, r1	; 0x800857 <_ppm>
    31c8:	10 92 56 08 	sts	0x0856, r1	; 0x800856 <_mh_state>
    31cc:	e0 91 54 08 	lds	r30, 0x0854	; 0x800854 <_app_call_back>
    31d0:	f0 91 55 08 	lds	r31, 0x0855	; 0x800855 <_app_call_back+0x1>
    31d4:	30 97       	sbiw	r30, 0x00	; 0
    31d6:	29 f0       	breq	.+10     	; 0x31e2 <_serial_call_back+0xb4>
    31d8:	80 91 57 08 	lds	r24, 0x0857	; 0x800857 <_ppm>
    31dc:	90 91 58 08 	lds	r25, 0x0858	; 0x800858 <_ppm+0x1>
    31e0:	19 95       	eicall
    31e2:	08 95       	ret

000031e4 <mh_z19_create>:
    31e4:	8f 92       	push	r8
    31e6:	9f 92       	push	r9
    31e8:	af 92       	push	r10
    31ea:	cf 92       	push	r12
    31ec:	ef 92       	push	r14
    31ee:	0f 93       	push	r16
    31f0:	cf 93       	push	r28
    31f2:	df 93       	push	r29
    31f4:	eb 01       	movw	r28, r22
    31f6:	0f 2e       	mov	r0, r31
    31f8:	f7 e9       	ldi	r31, 0x97	; 151
    31fa:	8f 2e       	mov	r8, r31
    31fc:	f8 e1       	ldi	r31, 0x18	; 24
    31fe:	9f 2e       	mov	r9, r31
    3200:	f0 2d       	mov	r31, r0
    3202:	68 94       	set
    3204:	aa 24       	eor	r10, r10
    3206:	a4 f8       	bld	r10, 4
    3208:	68 94       	set
    320a:	cc 24       	eor	r12, r12
    320c:	c4 f8       	bld	r12, 4
    320e:	e1 2c       	mov	r14, r1
    3210:	00 e0       	ldi	r16, 0x00	; 0
    3212:	23 e0       	ldi	r18, 0x03	; 3
    3214:	40 e8       	ldi	r20, 0x80	; 128
    3216:	55 e2       	ldi	r21, 0x25	; 37
    3218:	60 e0       	ldi	r22, 0x00	; 0
    321a:	70 e0       	ldi	r23, 0x00	; 0
    321c:	11 d0       	rcall	.+34     	; 0x3240 <serial_new_instance>
    321e:	90 93 5a 08 	sts	0x085A, r25	; 0x80085a <_serial+0x1>
    3222:	80 93 59 08 	sts	0x0859, r24	; 0x800859 <_serial>
    3226:	d0 93 55 08 	sts	0x0855, r29	; 0x800855 <_app_call_back+0x1>
    322a:	c0 93 54 08 	sts	0x0854, r28	; 0x800854 <_app_call_back>
    322e:	df 91       	pop	r29
    3230:	cf 91       	pop	r28
    3232:	0f 91       	pop	r16
    3234:	ef 90       	pop	r14
    3236:	cf 90       	pop	r12
    3238:	af 90       	pop	r10
    323a:	9f 90       	pop	r9
    323c:	8f 90       	pop	r8
    323e:	08 95       	ret

00003240 <serial_new_instance>:
    3240:	2f 92       	push	r2
    3242:	3f 92       	push	r3
    3244:	4f 92       	push	r4
    3246:	5f 92       	push	r5
    3248:	6f 92       	push	r6
    324a:	7f 92       	push	r7
    324c:	8f 92       	push	r8
    324e:	9f 92       	push	r9
    3250:	af 92       	push	r10
    3252:	cf 92       	push	r12
    3254:	ef 92       	push	r14
    3256:	ff 92       	push	r15
    3258:	0f 93       	push	r16
    325a:	1f 93       	push	r17
    325c:	cf 93       	push	r28
    325e:	df 93       	push	r29
    3260:	cd b7       	in	r28, 0x3d	; 61
    3262:	de b7       	in	r29, 0x3e	; 62
    3264:	f8 2e       	mov	r15, r24
    3266:	2a 01       	movw	r4, r20
    3268:	3b 01       	movw	r6, r22
    326a:	88 e0       	ldi	r24, 0x08	; 8
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	93 d6       	rcall	.+3366   	; 0x3f96 <malloc>
    3270:	8c 01       	movw	r16, r24
    3272:	8f 2d       	mov	r24, r15
    3274:	90 e0       	ldi	r25, 0x00	; 0
    3276:	88 0f       	add	r24, r24
    3278:	99 1f       	adc	r25, r25
    327a:	fc 01       	movw	r30, r24
    327c:	e5 5a       	subi	r30, 0xA5	; 165
    327e:	f7 4f       	sbci	r31, 0xF7	; 247
    3280:	11 83       	std	Z+1, r17	; 0x01
    3282:	00 83       	st	Z, r16
    3284:	fc 01       	movw	r30, r24
    3286:	ea 5f       	subi	r30, 0xFA	; 250
    3288:	fd 4f       	sbci	r31, 0xFD	; 253
    328a:	80 81       	ld	r24, Z
    328c:	91 81       	ldd	r25, Z+1	; 0x01
    328e:	d8 01       	movw	r26, r16
    3290:	8d 93       	st	X+, r24
    3292:	9c 93       	st	X, r25
    3294:	6c 2d       	mov	r22, r12
    3296:	70 e0       	ldi	r23, 0x00	; 0
    3298:	84 e0       	ldi	r24, 0x04	; 4
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	62 d6       	rcall	.+3268   	; 0x3f62 <calloc>
    329e:	1c 01       	movw	r2, r24
    32a0:	61 e0       	ldi	r22, 0x01	; 1
    32a2:	70 e0       	ldi	r23, 0x00	; 0
    32a4:	86 e0       	ldi	r24, 0x06	; 6
    32a6:	90 e0       	ldi	r25, 0x00	; 0
    32a8:	5c d6       	rcall	.+3256   	; 0x3f62 <calloc>
    32aa:	7c 01       	movw	r14, r24
    32ac:	4c 2d       	mov	r20, r12
    32ae:	b1 01       	movw	r22, r2
    32b0:	4a d4       	rcall	.+2196   	; 0x3b46 <fifo_init>
    32b2:	f8 01       	movw	r30, r16
    32b4:	f5 82       	std	Z+5, r15	; 0x05
    32b6:	e4 82       	std	Z+4, r14	; 0x04
    32b8:	6a 2d       	mov	r22, r10
    32ba:	70 e0       	ldi	r23, 0x00	; 0
    32bc:	84 e0       	ldi	r24, 0x04	; 4
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	50 d6       	rcall	.+3232   	; 0x3f62 <calloc>
    32c2:	1c 01       	movw	r2, r24
    32c4:	61 e0       	ldi	r22, 0x01	; 1
    32c6:	70 e0       	ldi	r23, 0x00	; 0
    32c8:	86 e0       	ldi	r24, 0x06	; 6
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	4a d6       	rcall	.+3220   	; 0x3f62 <calloc>
    32ce:	7c 01       	movw	r14, r24
    32d0:	4a 2d       	mov	r20, r10
    32d2:	b1 01       	movw	r22, r2
    32d4:	38 d4       	rcall	.+2160   	; 0x3b46 <fifo_init>
    32d6:	d8 01       	movw	r26, r16
    32d8:	13 96       	adiw	r26, 0x03	; 3
    32da:	fc 92       	st	X, r15
    32dc:	ee 92       	st	-X, r14
    32de:	12 97       	sbiw	r26, 0x02	; 2
    32e0:	17 96       	adiw	r26, 0x07	; 7
    32e2:	9c 92       	st	X, r9
    32e4:	8e 92       	st	-X, r8
    32e6:	16 97       	sbiw	r26, 0x06	; 6
    32e8:	ff b6       	in	r15, 0x3f	; 63
    32ea:	f8 94       	cli
    32ec:	ed 91       	ld	r30, X+
    32ee:	fc 91       	ld	r31, X
    32f0:	11 97       	sbiw	r26, 0x01	; 1
    32f2:	36 97       	sbiw	r30, 0x06	; 6
    32f4:	80 81       	ld	r24, Z
    32f6:	82 60       	ori	r24, 0x02	; 2
    32f8:	80 83       	st	Z, r24
    32fa:	8d 90       	ld	r8, X+
    32fc:	9c 90       	ld	r9, X
    32fe:	c3 01       	movw	r24, r6
    3300:	b2 01       	movw	r22, r4
    3302:	36 d5       	rcall	.+2668   	; 0x3d70 <__floatunsisf>
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	40 e0       	ldi	r20, 0x00	; 0
    330a:	51 e4       	ldi	r21, 0x41	; 65
    330c:	bf d5       	rcall	.+2942   	; 0x3e8c <__mulsf3>
    330e:	9b 01       	movw	r18, r22
    3310:	ac 01       	movw	r20, r24
    3312:	60 e0       	ldi	r22, 0x00	; 0
    3314:	74 e2       	ldi	r23, 0x24	; 36
    3316:	84 e7       	ldi	r24, 0x74	; 116
    3318:	9b e4       	ldi	r25, 0x4B	; 75
    331a:	96 d4       	rcall	.+2348   	; 0x3c48 <__divsf3>
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	40 e8       	ldi	r20, 0x80	; 128
    3322:	5f e3       	ldi	r21, 0x3F	; 63
    3324:	2c d4       	rcall	.+2136   	; 0x3b7e <__subsf3>
    3326:	f8 d4       	rcall	.+2544   	; 0x3d18 <__fixunssfsi>
    3328:	f4 01       	movw	r30, r8
    332a:	32 97       	sbiw	r30, 0x02	; 2
    332c:	60 83       	st	Z, r22
    332e:	d8 01       	movw	r26, r16
    3330:	ed 91       	ld	r30, X+
    3332:	fc 91       	ld	r31, X
    3334:	11 97       	sbiw	r26, 0x01	; 1
    3336:	35 97       	sbiw	r30, 0x05	; 5
    3338:	88 e9       	ldi	r24, 0x98	; 152
    333a:	80 83       	st	Z, r24
    333c:	ed 91       	ld	r30, X+
    333e:	fc 91       	ld	r31, X
    3340:	34 97       	sbiw	r30, 0x04	; 4
    3342:	86 e0       	ldi	r24, 0x06	; 6
    3344:	80 83       	st	Z, r24
    3346:	ff be       	out	0x3f, r15	; 63
    3348:	c8 01       	movw	r24, r16
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	1f 91       	pop	r17
    3350:	0f 91       	pop	r16
    3352:	ff 90       	pop	r15
    3354:	ef 90       	pop	r14
    3356:	cf 90       	pop	r12
    3358:	af 90       	pop	r10
    335a:	9f 90       	pop	r9
    335c:	8f 90       	pop	r8
    335e:	7f 90       	pop	r7
    3360:	6f 90       	pop	r6
    3362:	5f 90       	pop	r5
    3364:	4f 90       	pop	r4
    3366:	3f 90       	pop	r3
    3368:	2f 90       	pop	r2
    336a:	08 95       	ret

0000336c <serial_send_byte>:
    336c:	cf 93       	push	r28
    336e:	df 93       	push	r29
    3370:	ec 01       	movw	r28, r24
    3372:	ea 81       	ldd	r30, Y+2	; 0x02
    3374:	fb 81       	ldd	r31, Y+3	; 0x03
    3376:	93 81       	ldd	r25, Z+3	; 0x03
    3378:	82 81       	ldd	r24, Z+2	; 0x02
    337a:	25 81       	ldd	r18, Z+5	; 0x05
    337c:	98 1b       	sub	r25, r24
    337e:	92 23       	and	r25, r18
    3380:	84 81       	ldd	r24, Z+4	; 0x04
    3382:	98 17       	cp	r25, r24
    3384:	a1 f0       	breq	.+40     	; 0x33ae <serial_send_byte+0x42>
    3386:	93 81       	ldd	r25, Z+3	; 0x03
    3388:	26 95       	lsr	r18
    338a:	29 23       	and	r18, r25
    338c:	a0 81       	ld	r26, Z
    338e:	b1 81       	ldd	r27, Z+1	; 0x01
    3390:	a2 0f       	add	r26, r18
    3392:	b1 1d       	adc	r27, r1
    3394:	6c 93       	st	X, r22
    3396:	9f 5f       	subi	r25, 0xFF	; 255
    3398:	25 81       	ldd	r18, Z+5	; 0x05
    339a:	92 23       	and	r25, r18
    339c:	93 83       	std	Z+3, r25	; 0x03
    339e:	e8 81       	ld	r30, Y
    33a0:	f9 81       	ldd	r31, Y+1	; 0x01
    33a2:	35 97       	sbiw	r30, 0x05	; 5
    33a4:	80 81       	ld	r24, Z
    33a6:	80 62       	ori	r24, 0x20	; 32
    33a8:	80 83       	st	Z, r24
    33aa:	80 e0       	ldi	r24, 0x00	; 0
    33ac:	01 c0       	rjmp	.+2      	; 0x33b0 <serial_send_byte+0x44>
    33ae:	82 e0       	ldi	r24, 0x02	; 2
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	08 95       	ret

000033b6 <serial_send_bytes>:
    33b6:	ef 92       	push	r14
    33b8:	ff 92       	push	r15
    33ba:	0f 93       	push	r16
    33bc:	1f 93       	push	r17
    33be:	cf 93       	push	r28
    33c0:	df 93       	push	r29
    33c2:	7c 01       	movw	r14, r24
    33c4:	dc 01       	movw	r26, r24
    33c6:	12 96       	adiw	r26, 0x02	; 2
    33c8:	ed 91       	ld	r30, X+
    33ca:	fc 91       	ld	r31, X
    33cc:	13 97       	sbiw	r26, 0x03	; 3
    33ce:	93 81       	ldd	r25, Z+3	; 0x03
    33d0:	82 81       	ldd	r24, Z+2	; 0x02
    33d2:	98 1b       	sub	r25, r24
    33d4:	85 81       	ldd	r24, Z+5	; 0x05
    33d6:	98 23       	and	r25, r24
    33d8:	84 81       	ldd	r24, Z+4	; 0x04
    33da:	89 1b       	sub	r24, r25
    33dc:	86 17       	cp	r24, r22
    33de:	98 f1       	brcs	.+102    	; 0x3446 <serial_send_bytes+0x90>
    33e0:	66 23       	and	r22, r22
    33e2:	41 f1       	breq	.+80     	; 0x3434 <serial_send_bytes+0x7e>
    33e4:	84 2f       	mov	r24, r20
    33e6:	95 2f       	mov	r25, r21
    33e8:	dc 01       	movw	r26, r24
    33ea:	61 50       	subi	r22, 0x01	; 1
    33ec:	46 2f       	mov	r20, r22
    33ee:	50 e0       	ldi	r21, 0x00	; 0
    33f0:	4f 5f       	subi	r20, 0xFF	; 255
    33f2:	5f 4f       	sbci	r21, 0xFF	; 255
    33f4:	48 0f       	add	r20, r24
    33f6:	59 1f       	adc	r21, r25
    33f8:	e7 01       	movw	r28, r14
    33fa:	ea 81       	ldd	r30, Y+2	; 0x02
    33fc:	fb 81       	ldd	r31, Y+3	; 0x03
    33fe:	93 81       	ldd	r25, Z+3	; 0x03
    3400:	82 81       	ldd	r24, Z+2	; 0x02
    3402:	25 81       	ldd	r18, Z+5	; 0x05
    3404:	98 1b       	sub	r25, r24
    3406:	92 23       	and	r25, r18
    3408:	84 81       	ldd	r24, Z+4	; 0x04
    340a:	98 17       	cp	r25, r24
    340c:	79 f0       	breq	.+30     	; 0x342c <serial_send_bytes+0x76>
    340e:	8c 91       	ld	r24, X
    3410:	93 81       	ldd	r25, Z+3	; 0x03
    3412:	26 95       	lsr	r18
    3414:	29 23       	and	r18, r25
    3416:	60 81       	ld	r22, Z
    3418:	71 81       	ldd	r23, Z+1	; 0x01
    341a:	8b 01       	movw	r16, r22
    341c:	02 0f       	add	r16, r18
    341e:	11 1d       	adc	r17, r1
    3420:	e8 01       	movw	r28, r16
    3422:	88 83       	st	Y, r24
    3424:	9f 5f       	subi	r25, 0xFF	; 255
    3426:	85 81       	ldd	r24, Z+5	; 0x05
    3428:	98 23       	and	r25, r24
    342a:	93 83       	std	Z+3, r25	; 0x03
    342c:	11 96       	adiw	r26, 0x01	; 1
    342e:	a4 17       	cp	r26, r20
    3430:	b5 07       	cpc	r27, r21
    3432:	11 f7       	brne	.-60     	; 0x33f8 <serial_send_bytes+0x42>
    3434:	d7 01       	movw	r26, r14
    3436:	ed 91       	ld	r30, X+
    3438:	fc 91       	ld	r31, X
    343a:	35 97       	sbiw	r30, 0x05	; 5
    343c:	80 81       	ld	r24, Z
    343e:	80 62       	ori	r24, 0x20	; 32
    3440:	80 83       	st	Z, r24
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	01 c0       	rjmp	.+2      	; 0x3448 <serial_send_bytes+0x92>
    3446:	82 e0       	ldi	r24, 0x02	; 2
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	1f 91       	pop	r17
    344e:	0f 91       	pop	r16
    3450:	ff 90       	pop	r15
    3452:	ef 90       	pop	r14
    3454:	08 95       	ret

00003456 <serial_get_byte>:
    3456:	dc 01       	movw	r26, r24
    3458:	14 96       	adiw	r26, 0x04	; 4
    345a:	ed 91       	ld	r30, X+
    345c:	fc 91       	ld	r31, X
    345e:	15 97       	sbiw	r26, 0x05	; 5
    3460:	93 81       	ldd	r25, Z+3	; 0x03
    3462:	82 81       	ldd	r24, Z+2	; 0x02
    3464:	98 17       	cp	r25, r24
    3466:	89 f0       	breq	.+34     	; 0x348a <serial_get_byte+0x34>
    3468:	92 81       	ldd	r25, Z+2	; 0x02
    346a:	85 81       	ldd	r24, Z+5	; 0x05
    346c:	86 95       	lsr	r24
    346e:	89 23       	and	r24, r25
    3470:	a0 81       	ld	r26, Z
    3472:	b1 81       	ldd	r27, Z+1	; 0x01
    3474:	a8 0f       	add	r26, r24
    3476:	b1 1d       	adc	r27, r1
    3478:	8c 91       	ld	r24, X
    347a:	db 01       	movw	r26, r22
    347c:	8c 93       	st	X, r24
    347e:	9f 5f       	subi	r25, 0xFF	; 255
    3480:	85 81       	ldd	r24, Z+5	; 0x05
    3482:	98 23       	and	r25, r24
    3484:	92 83       	std	Z+2, r25	; 0x02
    3486:	80 e0       	ldi	r24, 0x00	; 0
    3488:	08 95       	ret
    348a:	83 e0       	ldi	r24, 0x03	; 3
    348c:	08 95       	ret

0000348e <__vector_25>:
    348e:	1f 92       	push	r1
    3490:	0f 92       	push	r0
    3492:	0f b6       	in	r0, 0x3f	; 63
    3494:	0f 92       	push	r0
    3496:	11 24       	eor	r1, r1
    3498:	0b b6       	in	r0, 0x3b	; 59
    349a:	0f 92       	push	r0
    349c:	2f 93       	push	r18
    349e:	3f 93       	push	r19
    34a0:	4f 93       	push	r20
    34a2:	5f 93       	push	r21
    34a4:	6f 93       	push	r22
    34a6:	7f 93       	push	r23
    34a8:	8f 93       	push	r24
    34aa:	9f 93       	push	r25
    34ac:	af 93       	push	r26
    34ae:	bf 93       	push	r27
    34b0:	cf 93       	push	r28
    34b2:	df 93       	push	r29
    34b4:	ef 93       	push	r30
    34b6:	ff 93       	push	r31
    34b8:	a0 91 5b 08 	lds	r26, 0x085B	; 0x80085b <_ser_handle>
    34bc:	b0 91 5c 08 	lds	r27, 0x085C	; 0x80085c <_ser_handle+0x1>
    34c0:	10 97       	sbiw	r26, 0x00	; 0
    34c2:	11 f1       	breq	.+68     	; 0x3508 <__vector_25+0x7a>
    34c4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    34c8:	14 96       	adiw	r26, 0x04	; 4
    34ca:	ed 91       	ld	r30, X+
    34cc:	fc 91       	ld	r31, X
    34ce:	15 97       	sbiw	r26, 0x05	; 5
    34d0:	93 81       	ldd	r25, Z+3	; 0x03
    34d2:	82 81       	ldd	r24, Z+2	; 0x02
    34d4:	25 81       	ldd	r18, Z+5	; 0x05
    34d6:	98 1b       	sub	r25, r24
    34d8:	92 23       	and	r25, r18
    34da:	84 81       	ldd	r24, Z+4	; 0x04
    34dc:	98 17       	cp	r25, r24
    34de:	61 f0       	breq	.+24     	; 0x34f8 <__vector_25+0x6a>
    34e0:	83 81       	ldd	r24, Z+3	; 0x03
    34e2:	26 95       	lsr	r18
    34e4:	28 23       	and	r18, r24
    34e6:	c0 81       	ld	r28, Z
    34e8:	d1 81       	ldd	r29, Z+1	; 0x01
    34ea:	c2 0f       	add	r28, r18
    34ec:	d1 1d       	adc	r29, r1
    34ee:	68 83       	st	Y, r22
    34f0:	8f 5f       	subi	r24, 0xFF	; 255
    34f2:	95 81       	ldd	r25, Z+5	; 0x05
    34f4:	89 23       	and	r24, r25
    34f6:	83 83       	std	Z+3, r24	; 0x03
    34f8:	16 96       	adiw	r26, 0x06	; 6
    34fa:	ed 91       	ld	r30, X+
    34fc:	fc 91       	ld	r31, X
    34fe:	17 97       	sbiw	r26, 0x07	; 7
    3500:	30 97       	sbiw	r30, 0x00	; 0
    3502:	11 f0       	breq	.+4      	; 0x3508 <__vector_25+0x7a>
    3504:	cd 01       	movw	r24, r26
    3506:	19 95       	eicall
    3508:	ff 91       	pop	r31
    350a:	ef 91       	pop	r30
    350c:	df 91       	pop	r29
    350e:	cf 91       	pop	r28
    3510:	bf 91       	pop	r27
    3512:	af 91       	pop	r26
    3514:	9f 91       	pop	r25
    3516:	8f 91       	pop	r24
    3518:	7f 91       	pop	r23
    351a:	6f 91       	pop	r22
    351c:	5f 91       	pop	r21
    351e:	4f 91       	pop	r20
    3520:	3f 91       	pop	r19
    3522:	2f 91       	pop	r18
    3524:	0f 90       	pop	r0
    3526:	0b be       	out	0x3b, r0	; 59
    3528:	0f 90       	pop	r0
    352a:	0f be       	out	0x3f, r0	; 63
    352c:	0f 90       	pop	r0
    352e:	1f 90       	pop	r1
    3530:	18 95       	reti

00003532 <__vector_26>:
    3532:	1f 92       	push	r1
    3534:	0f 92       	push	r0
    3536:	0f b6       	in	r0, 0x3f	; 63
    3538:	0f 92       	push	r0
    353a:	11 24       	eor	r1, r1
    353c:	0b b6       	in	r0, 0x3b	; 59
    353e:	0f 92       	push	r0
    3540:	2f 93       	push	r18
    3542:	8f 93       	push	r24
    3544:	9f 93       	push	r25
    3546:	af 93       	push	r26
    3548:	bf 93       	push	r27
    354a:	ef 93       	push	r30
    354c:	ff 93       	push	r31
    354e:	e0 91 5b 08 	lds	r30, 0x085B	; 0x80085b <_ser_handle>
    3552:	f0 91 5c 08 	lds	r31, 0x085C	; 0x80085c <_ser_handle+0x1>
    3556:	30 97       	sbiw	r30, 0x00	; 0
    3558:	b9 f0       	breq	.+46     	; 0x3588 <__vector_26+0x56>
    355a:	02 80       	ldd	r0, Z+2	; 0x02
    355c:	f3 81       	ldd	r31, Z+3	; 0x03
    355e:	e0 2d       	mov	r30, r0
    3560:	93 81       	ldd	r25, Z+3	; 0x03
    3562:	82 81       	ldd	r24, Z+2	; 0x02
    3564:	98 17       	cp	r25, r24
    3566:	b1 f0       	breq	.+44     	; 0x3594 <__vector_26+0x62>
    3568:	92 81       	ldd	r25, Z+2	; 0x02
    356a:	85 81       	ldd	r24, Z+5	; 0x05
    356c:	28 2f       	mov	r18, r24
    356e:	26 95       	lsr	r18
    3570:	29 23       	and	r18, r25
    3572:	a0 81       	ld	r26, Z
    3574:	b1 81       	ldd	r27, Z+1	; 0x01
    3576:	a2 0f       	add	r26, r18
    3578:	b1 1d       	adc	r27, r1
    357a:	2c 91       	ld	r18, X
    357c:	9f 5f       	subi	r25, 0xFF	; 255
    357e:	89 23       	and	r24, r25
    3580:	82 83       	std	Z+2, r24	; 0x02
    3582:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3586:	0b c0       	rjmp	.+22     	; 0x359e <__vector_26+0x6c>
    3588:	e1 ec       	ldi	r30, 0xC1	; 193
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
    358e:	8f 7d       	andi	r24, 0xDF	; 223
    3590:	80 83       	st	Z, r24
    3592:	05 c0       	rjmp	.+10     	; 0x359e <__vector_26+0x6c>
    3594:	e1 ec       	ldi	r30, 0xC1	; 193
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	80 81       	ld	r24, Z
    359a:	8f 7d       	andi	r24, 0xDF	; 223
    359c:	80 83       	st	Z, r24
    359e:	ff 91       	pop	r31
    35a0:	ef 91       	pop	r30
    35a2:	bf 91       	pop	r27
    35a4:	af 91       	pop	r26
    35a6:	9f 91       	pop	r25
    35a8:	8f 91       	pop	r24
    35aa:	2f 91       	pop	r18
    35ac:	0f 90       	pop	r0
    35ae:	0b be       	out	0x3b, r0	; 59
    35b0:	0f 90       	pop	r0
    35b2:	0f be       	out	0x3f, r0	; 63
    35b4:	0f 90       	pop	r0
    35b6:	1f 90       	pop	r1
    35b8:	18 95       	reti

000035ba <__vector_36>:
    35ba:	1f 92       	push	r1
    35bc:	0f 92       	push	r0
    35be:	0f b6       	in	r0, 0x3f	; 63
    35c0:	0f 92       	push	r0
    35c2:	11 24       	eor	r1, r1
    35c4:	0b b6       	in	r0, 0x3b	; 59
    35c6:	0f 92       	push	r0
    35c8:	2f 93       	push	r18
    35ca:	3f 93       	push	r19
    35cc:	4f 93       	push	r20
    35ce:	5f 93       	push	r21
    35d0:	6f 93       	push	r22
    35d2:	7f 93       	push	r23
    35d4:	8f 93       	push	r24
    35d6:	9f 93       	push	r25
    35d8:	af 93       	push	r26
    35da:	bf 93       	push	r27
    35dc:	cf 93       	push	r28
    35de:	df 93       	push	r29
    35e0:	ef 93       	push	r30
    35e2:	ff 93       	push	r31
    35e4:	a0 91 5d 08 	lds	r26, 0x085D	; 0x80085d <_ser_handle+0x2>
    35e8:	b0 91 5e 08 	lds	r27, 0x085E	; 0x80085e <_ser_handle+0x3>
    35ec:	10 97       	sbiw	r26, 0x00	; 0
    35ee:	11 f1       	breq	.+68     	; 0x3634 <__vector_36+0x7a>
    35f0:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    35f4:	14 96       	adiw	r26, 0x04	; 4
    35f6:	ed 91       	ld	r30, X+
    35f8:	fc 91       	ld	r31, X
    35fa:	15 97       	sbiw	r26, 0x05	; 5
    35fc:	93 81       	ldd	r25, Z+3	; 0x03
    35fe:	82 81       	ldd	r24, Z+2	; 0x02
    3600:	25 81       	ldd	r18, Z+5	; 0x05
    3602:	98 1b       	sub	r25, r24
    3604:	92 23       	and	r25, r18
    3606:	84 81       	ldd	r24, Z+4	; 0x04
    3608:	98 17       	cp	r25, r24
    360a:	61 f0       	breq	.+24     	; 0x3624 <__vector_36+0x6a>
    360c:	83 81       	ldd	r24, Z+3	; 0x03
    360e:	26 95       	lsr	r18
    3610:	28 23       	and	r18, r24
    3612:	c0 81       	ld	r28, Z
    3614:	d1 81       	ldd	r29, Z+1	; 0x01
    3616:	c2 0f       	add	r28, r18
    3618:	d1 1d       	adc	r29, r1
    361a:	68 83       	st	Y, r22
    361c:	8f 5f       	subi	r24, 0xFF	; 255
    361e:	95 81       	ldd	r25, Z+5	; 0x05
    3620:	89 23       	and	r24, r25
    3622:	83 83       	std	Z+3, r24	; 0x03
    3624:	16 96       	adiw	r26, 0x06	; 6
    3626:	ed 91       	ld	r30, X+
    3628:	fc 91       	ld	r31, X
    362a:	17 97       	sbiw	r26, 0x07	; 7
    362c:	30 97       	sbiw	r30, 0x00	; 0
    362e:	11 f0       	breq	.+4      	; 0x3634 <__vector_36+0x7a>
    3630:	cd 01       	movw	r24, r26
    3632:	19 95       	eicall
    3634:	ff 91       	pop	r31
    3636:	ef 91       	pop	r30
    3638:	df 91       	pop	r29
    363a:	cf 91       	pop	r28
    363c:	bf 91       	pop	r27
    363e:	af 91       	pop	r26
    3640:	9f 91       	pop	r25
    3642:	8f 91       	pop	r24
    3644:	7f 91       	pop	r23
    3646:	6f 91       	pop	r22
    3648:	5f 91       	pop	r21
    364a:	4f 91       	pop	r20
    364c:	3f 91       	pop	r19
    364e:	2f 91       	pop	r18
    3650:	0f 90       	pop	r0
    3652:	0b be       	out	0x3b, r0	; 59
    3654:	0f 90       	pop	r0
    3656:	0f be       	out	0x3f, r0	; 63
    3658:	0f 90       	pop	r0
    365a:	1f 90       	pop	r1
    365c:	18 95       	reti

0000365e <__vector_37>:
    365e:	1f 92       	push	r1
    3660:	0f 92       	push	r0
    3662:	0f b6       	in	r0, 0x3f	; 63
    3664:	0f 92       	push	r0
    3666:	11 24       	eor	r1, r1
    3668:	0b b6       	in	r0, 0x3b	; 59
    366a:	0f 92       	push	r0
    366c:	2f 93       	push	r18
    366e:	8f 93       	push	r24
    3670:	9f 93       	push	r25
    3672:	af 93       	push	r26
    3674:	bf 93       	push	r27
    3676:	ef 93       	push	r30
    3678:	ff 93       	push	r31
    367a:	e0 91 5d 08 	lds	r30, 0x085D	; 0x80085d <_ser_handle+0x2>
    367e:	f0 91 5e 08 	lds	r31, 0x085E	; 0x80085e <_ser_handle+0x3>
    3682:	30 97       	sbiw	r30, 0x00	; 0
    3684:	b9 f0       	breq	.+46     	; 0x36b4 <__vector_37+0x56>
    3686:	02 80       	ldd	r0, Z+2	; 0x02
    3688:	f3 81       	ldd	r31, Z+3	; 0x03
    368a:	e0 2d       	mov	r30, r0
    368c:	93 81       	ldd	r25, Z+3	; 0x03
    368e:	82 81       	ldd	r24, Z+2	; 0x02
    3690:	98 17       	cp	r25, r24
    3692:	b1 f0       	breq	.+44     	; 0x36c0 <__vector_37+0x62>
    3694:	92 81       	ldd	r25, Z+2	; 0x02
    3696:	85 81       	ldd	r24, Z+5	; 0x05
    3698:	28 2f       	mov	r18, r24
    369a:	26 95       	lsr	r18
    369c:	29 23       	and	r18, r25
    369e:	a0 81       	ld	r26, Z
    36a0:	b1 81       	ldd	r27, Z+1	; 0x01
    36a2:	a2 0f       	add	r26, r18
    36a4:	b1 1d       	adc	r27, r1
    36a6:	2c 91       	ld	r18, X
    36a8:	9f 5f       	subi	r25, 0xFF	; 255
    36aa:	89 23       	and	r24, r25
    36ac:	82 83       	std	Z+2, r24	; 0x02
    36ae:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    36b2:	0b c0       	rjmp	.+22     	; 0x36ca <__vector_37+0x6c>
    36b4:	e9 ec       	ldi	r30, 0xC9	; 201
    36b6:	f0 e0       	ldi	r31, 0x00	; 0
    36b8:	80 81       	ld	r24, Z
    36ba:	8f 7d       	andi	r24, 0xDF	; 223
    36bc:	80 83       	st	Z, r24
    36be:	05 c0       	rjmp	.+10     	; 0x36ca <__vector_37+0x6c>
    36c0:	e9 ec       	ldi	r30, 0xC9	; 201
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	80 81       	ld	r24, Z
    36c6:	8f 7d       	andi	r24, 0xDF	; 223
    36c8:	80 83       	st	Z, r24
    36ca:	ff 91       	pop	r31
    36cc:	ef 91       	pop	r30
    36ce:	bf 91       	pop	r27
    36d0:	af 91       	pop	r26
    36d2:	9f 91       	pop	r25
    36d4:	8f 91       	pop	r24
    36d6:	2f 91       	pop	r18
    36d8:	0f 90       	pop	r0
    36da:	0b be       	out	0x3b, r0	; 59
    36dc:	0f 90       	pop	r0
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	0f 90       	pop	r0
    36e2:	1f 90       	pop	r1
    36e4:	18 95       	reti

000036e6 <__vector_51>:
    36e6:	1f 92       	push	r1
    36e8:	0f 92       	push	r0
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	0f 92       	push	r0
    36ee:	11 24       	eor	r1, r1
    36f0:	0b b6       	in	r0, 0x3b	; 59
    36f2:	0f 92       	push	r0
    36f4:	2f 93       	push	r18
    36f6:	3f 93       	push	r19
    36f8:	4f 93       	push	r20
    36fa:	5f 93       	push	r21
    36fc:	6f 93       	push	r22
    36fe:	7f 93       	push	r23
    3700:	8f 93       	push	r24
    3702:	9f 93       	push	r25
    3704:	af 93       	push	r26
    3706:	bf 93       	push	r27
    3708:	cf 93       	push	r28
    370a:	df 93       	push	r29
    370c:	ef 93       	push	r30
    370e:	ff 93       	push	r31
    3710:	a0 91 5f 08 	lds	r26, 0x085F	; 0x80085f <_ser_handle+0x4>
    3714:	b0 91 60 08 	lds	r27, 0x0860	; 0x800860 <_ser_handle+0x5>
    3718:	10 97       	sbiw	r26, 0x00	; 0
    371a:	11 f1       	breq	.+68     	; 0x3760 <__vector_51+0x7a>
    371c:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3720:	14 96       	adiw	r26, 0x04	; 4
    3722:	ed 91       	ld	r30, X+
    3724:	fc 91       	ld	r31, X
    3726:	15 97       	sbiw	r26, 0x05	; 5
    3728:	93 81       	ldd	r25, Z+3	; 0x03
    372a:	82 81       	ldd	r24, Z+2	; 0x02
    372c:	25 81       	ldd	r18, Z+5	; 0x05
    372e:	98 1b       	sub	r25, r24
    3730:	92 23       	and	r25, r18
    3732:	84 81       	ldd	r24, Z+4	; 0x04
    3734:	98 17       	cp	r25, r24
    3736:	61 f0       	breq	.+24     	; 0x3750 <__vector_51+0x6a>
    3738:	83 81       	ldd	r24, Z+3	; 0x03
    373a:	26 95       	lsr	r18
    373c:	28 23       	and	r18, r24
    373e:	c0 81       	ld	r28, Z
    3740:	d1 81       	ldd	r29, Z+1	; 0x01
    3742:	c2 0f       	add	r28, r18
    3744:	d1 1d       	adc	r29, r1
    3746:	68 83       	st	Y, r22
    3748:	8f 5f       	subi	r24, 0xFF	; 255
    374a:	95 81       	ldd	r25, Z+5	; 0x05
    374c:	89 23       	and	r24, r25
    374e:	83 83       	std	Z+3, r24	; 0x03
    3750:	16 96       	adiw	r26, 0x06	; 6
    3752:	ed 91       	ld	r30, X+
    3754:	fc 91       	ld	r31, X
    3756:	17 97       	sbiw	r26, 0x07	; 7
    3758:	30 97       	sbiw	r30, 0x00	; 0
    375a:	11 f0       	breq	.+4      	; 0x3760 <__vector_51+0x7a>
    375c:	cd 01       	movw	r24, r26
    375e:	19 95       	eicall
    3760:	ff 91       	pop	r31
    3762:	ef 91       	pop	r30
    3764:	df 91       	pop	r29
    3766:	cf 91       	pop	r28
    3768:	bf 91       	pop	r27
    376a:	af 91       	pop	r26
    376c:	9f 91       	pop	r25
    376e:	8f 91       	pop	r24
    3770:	7f 91       	pop	r23
    3772:	6f 91       	pop	r22
    3774:	5f 91       	pop	r21
    3776:	4f 91       	pop	r20
    3778:	3f 91       	pop	r19
    377a:	2f 91       	pop	r18
    377c:	0f 90       	pop	r0
    377e:	0b be       	out	0x3b, r0	; 59
    3780:	0f 90       	pop	r0
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	0f 90       	pop	r0
    3786:	1f 90       	pop	r1
    3788:	18 95       	reti

0000378a <__vector_52>:
    378a:	1f 92       	push	r1
    378c:	0f 92       	push	r0
    378e:	0f b6       	in	r0, 0x3f	; 63
    3790:	0f 92       	push	r0
    3792:	11 24       	eor	r1, r1
    3794:	0b b6       	in	r0, 0x3b	; 59
    3796:	0f 92       	push	r0
    3798:	2f 93       	push	r18
    379a:	8f 93       	push	r24
    379c:	9f 93       	push	r25
    379e:	af 93       	push	r26
    37a0:	bf 93       	push	r27
    37a2:	ef 93       	push	r30
    37a4:	ff 93       	push	r31
    37a6:	e0 91 5f 08 	lds	r30, 0x085F	; 0x80085f <_ser_handle+0x4>
    37aa:	f0 91 60 08 	lds	r31, 0x0860	; 0x800860 <_ser_handle+0x5>
    37ae:	30 97       	sbiw	r30, 0x00	; 0
    37b0:	b9 f0       	breq	.+46     	; 0x37e0 <__vector_52+0x56>
    37b2:	02 80       	ldd	r0, Z+2	; 0x02
    37b4:	f3 81       	ldd	r31, Z+3	; 0x03
    37b6:	e0 2d       	mov	r30, r0
    37b8:	93 81       	ldd	r25, Z+3	; 0x03
    37ba:	82 81       	ldd	r24, Z+2	; 0x02
    37bc:	98 17       	cp	r25, r24
    37be:	b1 f0       	breq	.+44     	; 0x37ec <__vector_52+0x62>
    37c0:	92 81       	ldd	r25, Z+2	; 0x02
    37c2:	85 81       	ldd	r24, Z+5	; 0x05
    37c4:	28 2f       	mov	r18, r24
    37c6:	26 95       	lsr	r18
    37c8:	29 23       	and	r18, r25
    37ca:	a0 81       	ld	r26, Z
    37cc:	b1 81       	ldd	r27, Z+1	; 0x01
    37ce:	a2 0f       	add	r26, r18
    37d0:	b1 1d       	adc	r27, r1
    37d2:	2c 91       	ld	r18, X
    37d4:	9f 5f       	subi	r25, 0xFF	; 255
    37d6:	89 23       	and	r24, r25
    37d8:	82 83       	std	Z+2, r24	; 0x02
    37da:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    37de:	0b c0       	rjmp	.+22     	; 0x37f6 <__vector_52+0x6c>
    37e0:	e1 ed       	ldi	r30, 0xD1	; 209
    37e2:	f0 e0       	ldi	r31, 0x00	; 0
    37e4:	80 81       	ld	r24, Z
    37e6:	8f 7d       	andi	r24, 0xDF	; 223
    37e8:	80 83       	st	Z, r24
    37ea:	05 c0       	rjmp	.+10     	; 0x37f6 <__vector_52+0x6c>
    37ec:	e1 ed       	ldi	r30, 0xD1	; 209
    37ee:	f0 e0       	ldi	r31, 0x00	; 0
    37f0:	80 81       	ld	r24, Z
    37f2:	8f 7d       	andi	r24, 0xDF	; 223
    37f4:	80 83       	st	Z, r24
    37f6:	ff 91       	pop	r31
    37f8:	ef 91       	pop	r30
    37fa:	bf 91       	pop	r27
    37fc:	af 91       	pop	r26
    37fe:	9f 91       	pop	r25
    3800:	8f 91       	pop	r24
    3802:	2f 91       	pop	r18
    3804:	0f 90       	pop	r0
    3806:	0b be       	out	0x3b, r0	; 59
    3808:	0f 90       	pop	r0
    380a:	0f be       	out	0x3f, r0	; 63
    380c:	0f 90       	pop	r0
    380e:	1f 90       	pop	r1
    3810:	18 95       	reti

00003812 <__vector_54>:
    3812:	1f 92       	push	r1
    3814:	0f 92       	push	r0
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	0f 92       	push	r0
    381a:	11 24       	eor	r1, r1
    381c:	0b b6       	in	r0, 0x3b	; 59
    381e:	0f 92       	push	r0
    3820:	2f 93       	push	r18
    3822:	3f 93       	push	r19
    3824:	4f 93       	push	r20
    3826:	5f 93       	push	r21
    3828:	6f 93       	push	r22
    382a:	7f 93       	push	r23
    382c:	8f 93       	push	r24
    382e:	9f 93       	push	r25
    3830:	af 93       	push	r26
    3832:	bf 93       	push	r27
    3834:	cf 93       	push	r28
    3836:	df 93       	push	r29
    3838:	ef 93       	push	r30
    383a:	ff 93       	push	r31
    383c:	a0 91 61 08 	lds	r26, 0x0861	; 0x800861 <_ser_handle+0x6>
    3840:	b0 91 62 08 	lds	r27, 0x0862	; 0x800862 <_ser_handle+0x7>
    3844:	10 97       	sbiw	r26, 0x00	; 0
    3846:	11 f1       	breq	.+68     	; 0x388c <__vector_54+0x7a>
    3848:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    384c:	14 96       	adiw	r26, 0x04	; 4
    384e:	ed 91       	ld	r30, X+
    3850:	fc 91       	ld	r31, X
    3852:	15 97       	sbiw	r26, 0x05	; 5
    3854:	93 81       	ldd	r25, Z+3	; 0x03
    3856:	82 81       	ldd	r24, Z+2	; 0x02
    3858:	25 81       	ldd	r18, Z+5	; 0x05
    385a:	98 1b       	sub	r25, r24
    385c:	92 23       	and	r25, r18
    385e:	84 81       	ldd	r24, Z+4	; 0x04
    3860:	98 17       	cp	r25, r24
    3862:	61 f0       	breq	.+24     	; 0x387c <__vector_54+0x6a>
    3864:	83 81       	ldd	r24, Z+3	; 0x03
    3866:	26 95       	lsr	r18
    3868:	28 23       	and	r18, r24
    386a:	c0 81       	ld	r28, Z
    386c:	d1 81       	ldd	r29, Z+1	; 0x01
    386e:	c2 0f       	add	r28, r18
    3870:	d1 1d       	adc	r29, r1
    3872:	68 83       	st	Y, r22
    3874:	8f 5f       	subi	r24, 0xFF	; 255
    3876:	95 81       	ldd	r25, Z+5	; 0x05
    3878:	89 23       	and	r24, r25
    387a:	83 83       	std	Z+3, r24	; 0x03
    387c:	16 96       	adiw	r26, 0x06	; 6
    387e:	ed 91       	ld	r30, X+
    3880:	fc 91       	ld	r31, X
    3882:	17 97       	sbiw	r26, 0x07	; 7
    3884:	30 97       	sbiw	r30, 0x00	; 0
    3886:	11 f0       	breq	.+4      	; 0x388c <__vector_54+0x7a>
    3888:	cd 01       	movw	r24, r26
    388a:	19 95       	eicall
    388c:	ff 91       	pop	r31
    388e:	ef 91       	pop	r30
    3890:	df 91       	pop	r29
    3892:	cf 91       	pop	r28
    3894:	bf 91       	pop	r27
    3896:	af 91       	pop	r26
    3898:	9f 91       	pop	r25
    389a:	8f 91       	pop	r24
    389c:	7f 91       	pop	r23
    389e:	6f 91       	pop	r22
    38a0:	5f 91       	pop	r21
    38a2:	4f 91       	pop	r20
    38a4:	3f 91       	pop	r19
    38a6:	2f 91       	pop	r18
    38a8:	0f 90       	pop	r0
    38aa:	0b be       	out	0x3b, r0	; 59
    38ac:	0f 90       	pop	r0
    38ae:	0f be       	out	0x3f, r0	; 63
    38b0:	0f 90       	pop	r0
    38b2:	1f 90       	pop	r1
    38b4:	18 95       	reti

000038b6 <__vector_55>:
    38b6:	1f 92       	push	r1
    38b8:	0f 92       	push	r0
    38ba:	0f b6       	in	r0, 0x3f	; 63
    38bc:	0f 92       	push	r0
    38be:	11 24       	eor	r1, r1
    38c0:	0b b6       	in	r0, 0x3b	; 59
    38c2:	0f 92       	push	r0
    38c4:	2f 93       	push	r18
    38c6:	8f 93       	push	r24
    38c8:	9f 93       	push	r25
    38ca:	af 93       	push	r26
    38cc:	bf 93       	push	r27
    38ce:	ef 93       	push	r30
    38d0:	ff 93       	push	r31
    38d2:	e0 91 61 08 	lds	r30, 0x0861	; 0x800861 <_ser_handle+0x6>
    38d6:	f0 91 62 08 	lds	r31, 0x0862	; 0x800862 <_ser_handle+0x7>
    38da:	30 97       	sbiw	r30, 0x00	; 0
    38dc:	b9 f0       	breq	.+46     	; 0x390c <__vector_55+0x56>
    38de:	02 80       	ldd	r0, Z+2	; 0x02
    38e0:	f3 81       	ldd	r31, Z+3	; 0x03
    38e2:	e0 2d       	mov	r30, r0
    38e4:	93 81       	ldd	r25, Z+3	; 0x03
    38e6:	82 81       	ldd	r24, Z+2	; 0x02
    38e8:	98 17       	cp	r25, r24
    38ea:	b1 f0       	breq	.+44     	; 0x3918 <__vector_55+0x62>
    38ec:	92 81       	ldd	r25, Z+2	; 0x02
    38ee:	85 81       	ldd	r24, Z+5	; 0x05
    38f0:	28 2f       	mov	r18, r24
    38f2:	26 95       	lsr	r18
    38f4:	29 23       	and	r18, r25
    38f6:	a0 81       	ld	r26, Z
    38f8:	b1 81       	ldd	r27, Z+1	; 0x01
    38fa:	a2 0f       	add	r26, r18
    38fc:	b1 1d       	adc	r27, r1
    38fe:	2c 91       	ld	r18, X
    3900:	9f 5f       	subi	r25, 0xFF	; 255
    3902:	89 23       	and	r24, r25
    3904:	82 83       	std	Z+2, r24	; 0x02
    3906:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    390a:	0b c0       	rjmp	.+22     	; 0x3922 <__vector_55+0x6c>
    390c:	e1 e3       	ldi	r30, 0x31	; 49
    390e:	f1 e0       	ldi	r31, 0x01	; 1
    3910:	80 81       	ld	r24, Z
    3912:	8f 7d       	andi	r24, 0xDF	; 223
    3914:	80 83       	st	Z, r24
    3916:	05 c0       	rjmp	.+10     	; 0x3922 <__vector_55+0x6c>
    3918:	e1 e3       	ldi	r30, 0x31	; 49
    391a:	f1 e0       	ldi	r31, 0x01	; 1
    391c:	80 81       	ld	r24, Z
    391e:	8f 7d       	andi	r24, 0xDF	; 223
    3920:	80 83       	st	Z, r24
    3922:	ff 91       	pop	r31
    3924:	ef 91       	pop	r30
    3926:	bf 91       	pop	r27
    3928:	af 91       	pop	r26
    392a:	9f 91       	pop	r25
    392c:	8f 91       	pop	r24
    392e:	2f 91       	pop	r18
    3930:	0f 90       	pop	r0
    3932:	0b be       	out	0x3b, r0	; 59
    3934:	0f 90       	pop	r0
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	0f 90       	pop	r0
    393a:	1f 90       	pop	r1
    393c:	18 95       	reti

0000393e <usart_getchar>:
    393e:	cf 93       	push	r28
    3940:	df 93       	push	r29
    3942:	1f 92       	push	r1
    3944:	cd b7       	in	r28, 0x3d	; 61
    3946:	de b7       	in	r29, 0x3e	; 62
    3948:	be 01       	movw	r22, r28
    394a:	6f 5f       	subi	r22, 0xFF	; 255
    394c:	7f 4f       	sbci	r23, 0xFF	; 255
    394e:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <_com_serial_instance>
    3952:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <_com_serial_instance+0x1>
    3956:	7f dd       	rcall	.-1282   	; 0x3456 <serial_get_byte>
    3958:	81 11       	cpse	r24, r1
    395a:	f6 cf       	rjmp	.-20     	; 0x3948 <usart_getchar+0xa>
    395c:	89 81       	ldd	r24, Y+1	; 0x01
    395e:	90 e0       	ldi	r25, 0x00	; 0
    3960:	0f 90       	pop	r0
    3962:	df 91       	pop	r29
    3964:	cf 91       	pop	r28
    3966:	08 95       	ret

00003968 <usart_putchar>:
    3968:	68 2f       	mov	r22, r24
    396a:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <_com_serial_instance>
    396e:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <_com_serial_instance+0x1>
    3972:	fc dc       	rcall	.-1544   	; 0x336c <serial_send_byte>
    3974:	80 e0       	ldi	r24, 0x00	; 0
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	08 95       	ret

0000397a <stdioCreate>:
    397a:	8f 92       	push	r8
    397c:	9f 92       	push	r9
    397e:	af 92       	push	r10
    3980:	cf 92       	push	r12
    3982:	ef 92       	push	r14
    3984:	0f 93       	push	r16
    3986:	81 2c       	mov	r8, r1
    3988:	91 2c       	mov	r9, r1
    398a:	68 94       	set
    398c:	aa 24       	eor	r10, r10
    398e:	a7 f8       	bld	r10, 7
    3990:	68 94       	set
    3992:	cc 24       	eor	r12, r12
    3994:	c7 f8       	bld	r12, 7
    3996:	e1 2c       	mov	r14, r1
    3998:	00 e0       	ldi	r16, 0x00	; 0
    399a:	23 e0       	ldi	r18, 0x03	; 3
    399c:	40 e0       	ldi	r20, 0x00	; 0
    399e:	51 ee       	ldi	r21, 0xE1	; 225
    39a0:	60 e0       	ldi	r22, 0x00	; 0
    39a2:	70 e0       	ldi	r23, 0x00	; 0
    39a4:	4d dc       	rcall	.-1894   	; 0x3240 <serial_new_instance>
    39a6:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <_com_serial_instance+0x1>
    39aa:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <_com_serial_instance>
    39ae:	e1 ea       	ldi	r30, 0xA1	; 161
    39b0:	f8 e0       	ldi	r31, 0x08	; 8
    39b2:	8e e0       	ldi	r24, 0x0E	; 14
    39b4:	92 e0       	ldi	r25, 0x02	; 2
    39b6:	91 83       	std	Z+1, r25	; 0x01
    39b8:	80 83       	st	Z, r24
    39ba:	93 83       	std	Z+3, r25	; 0x03
    39bc:	82 83       	std	Z+2, r24	; 0x02
    39be:	0f 91       	pop	r16
    39c0:	ef 90       	pop	r14
    39c2:	cf 90       	pop	r12
    39c4:	af 90       	pop	r10
    39c6:	9f 90       	pop	r9
    39c8:	8f 90       	pop	r8
    39ca:	08 95       	ret

000039cc <__vector_39>:
    39cc:	1f 92       	push	r1
    39ce:	0f 92       	push	r0
    39d0:	0f b6       	in	r0, 0x3f	; 63
    39d2:	0f 92       	push	r0
    39d4:	11 24       	eor	r1, r1
    39d6:	0b b6       	in	r0, 0x3b	; 59
    39d8:	0f 92       	push	r0
    39da:	2f 93       	push	r18
    39dc:	3f 93       	push	r19
    39de:	4f 93       	push	r20
    39e0:	5f 93       	push	r21
    39e2:	6f 93       	push	r22
    39e4:	7f 93       	push	r23
    39e6:	8f 93       	push	r24
    39e8:	9f 93       	push	r25
    39ea:	af 93       	push	r26
    39ec:	bf 93       	push	r27
    39ee:	ef 93       	push	r30
    39f0:	ff 93       	push	r31
    39f2:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    39f6:	8e 2f       	mov	r24, r30
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	fc 01       	movw	r30, r24
    39fc:	38 97       	sbiw	r30, 0x08	; 8
    39fe:	e1 35       	cpi	r30, 0x51	; 81
    3a00:	f1 05       	cpc	r31, r1
    3a02:	08 f0       	brcs	.+2      	; 0x3a06 <__vector_39+0x3a>
    3a04:	75 c0       	rjmp	.+234    	; 0x3af0 <__vector_39+0x124>
    3a06:	88 27       	eor	r24, r24
    3a08:	e4 58       	subi	r30, 0x84	; 132
    3a0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0c:	8f 4f       	sbci	r24, 0xFF	; 255
    3a0e:	a1 c2       	rjmp	.+1346   	; 0x3f52 <__tablejump2__>
    3a10:	10 92 65 08 	sts	0x0865, r1	; 0x800865 <_index.1885>
    3a14:	e0 91 65 08 	lds	r30, 0x0865	; 0x800865 <_index.1885>
    3a18:	80 91 68 08 	lds	r24, 0x0868	; 0x800868 <_twiMessageLen>
    3a1c:	e8 17       	cp	r30, r24
    3a1e:	70 f4       	brcc	.+28     	; 0x3a3c <__vector_39+0x70>
    3a20:	81 e0       	ldi	r24, 0x01	; 1
    3a22:	8e 0f       	add	r24, r30
    3a24:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <_index.1885>
    3a28:	f0 e0       	ldi	r31, 0x00	; 0
    3a2a:	e7 59       	subi	r30, 0x97	; 151
    3a2c:	f7 4f       	sbci	r31, 0xF7	; 247
    3a2e:	80 81       	ld	r24, Z
    3a30:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3a34:	85 e8       	ldi	r24, 0x85	; 133
    3a36:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3a3a:	72 c0       	rjmp	.+228    	; 0x3b20 <__vector_39+0x154>
    3a3c:	84 e9       	ldi	r24, 0x94	; 148
    3a3e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3a42:	80 91 66 08 	lds	r24, 0x0866	; 0x800866 <_twiCurrentHandler>
    3a46:	90 91 67 08 	lds	r25, 0x0867	; 0x800867 <_twiCurrentHandler+0x1>
    3a4a:	dc 01       	movw	r26, r24
    3a4c:	12 96       	adiw	r26, 0x02	; 2
    3a4e:	ed 91       	ld	r30, X+
    3a50:	fc 91       	ld	r31, X
    3a52:	13 97       	sbiw	r26, 0x03	; 3
    3a54:	30 97       	sbiw	r30, 0x00	; 0
    3a56:	09 f4       	brne	.+2      	; 0x3a5a <__vector_39+0x8e>
    3a58:	63 c0       	rjmp	.+198    	; 0x3b20 <__vector_39+0x154>
    3a5a:	20 e0       	ldi	r18, 0x00	; 0
    3a5c:	40 e0       	ldi	r20, 0x00	; 0
    3a5e:	50 e0       	ldi	r21, 0x00	; 0
    3a60:	64 e0       	ldi	r22, 0x04	; 4
    3a62:	19 95       	eicall
    3a64:	5d c0       	rjmp	.+186    	; 0x3b20 <__vector_39+0x154>
    3a66:	e0 91 65 08 	lds	r30, 0x0865	; 0x800865 <_index.1885>
    3a6a:	81 e0       	ldi	r24, 0x01	; 1
    3a6c:	8e 0f       	add	r24, r30
    3a6e:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <_index.1885>
    3a72:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3a76:	f0 e0       	ldi	r31, 0x00	; 0
    3a78:	e7 59       	subi	r30, 0x97	; 151
    3a7a:	f7 4f       	sbci	r31, 0xF7	; 247
    3a7c:	80 83       	st	Z, r24
    3a7e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3a82:	80 34       	cpi	r24, 0x40	; 64
    3a84:	11 f4       	brne	.+4      	; 0x3a8a <__vector_39+0xbe>
    3a86:	10 92 65 08 	sts	0x0865, r1	; 0x800865 <_index.1885>
    3a8a:	20 91 65 08 	lds	r18, 0x0865	; 0x800865 <_index.1885>
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	80 91 68 08 	lds	r24, 0x0868	; 0x800868 <_twiMessageLen>
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	28 17       	cp	r18, r24
    3a9a:	39 07       	cpc	r19, r25
    3a9c:	24 f4       	brge	.+8      	; 0x3aa6 <__vector_39+0xda>
    3a9e:	85 ec       	ldi	r24, 0xC5	; 197
    3aa0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3aa4:	3d c0       	rjmp	.+122    	; 0x3b20 <__vector_39+0x154>
    3aa6:	85 e8       	ldi	r24, 0x85	; 133
    3aa8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3aac:	39 c0       	rjmp	.+114    	; 0x3b20 <__vector_39+0x154>
    3aae:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3ab2:	e0 91 65 08 	lds	r30, 0x0865	; 0x800865 <_index.1885>
    3ab6:	f0 e0       	ldi	r31, 0x00	; 0
    3ab8:	e7 59       	subi	r30, 0x97	; 151
    3aba:	f7 4f       	sbci	r31, 0xF7	; 247
    3abc:	80 83       	st	Z, r24
    3abe:	84 e9       	ldi	r24, 0x94	; 148
    3ac0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3ac4:	80 91 66 08 	lds	r24, 0x0866	; 0x800866 <_twiCurrentHandler>
    3ac8:	90 91 67 08 	lds	r25, 0x0867	; 0x800867 <_twiCurrentHandler+0x1>
    3acc:	dc 01       	movw	r26, r24
    3ace:	12 96       	adiw	r26, 0x02	; 2
    3ad0:	ed 91       	ld	r30, X+
    3ad2:	fc 91       	ld	r31, X
    3ad4:	13 97       	sbiw	r26, 0x03	; 3
    3ad6:	30 97       	sbiw	r30, 0x00	; 0
    3ad8:	19 f1       	breq	.+70     	; 0x3b20 <__vector_39+0x154>
    3ada:	20 91 68 08 	lds	r18, 0x0868	; 0x800868 <_twiMessageLen>
    3ade:	49 e6       	ldi	r20, 0x69	; 105
    3ae0:	58 e0       	ldi	r21, 0x08	; 8
    3ae2:	65 e0       	ldi	r22, 0x05	; 5
    3ae4:	19 95       	eicall
    3ae6:	1c c0       	rjmp	.+56     	; 0x3b20 <__vector_39+0x154>
    3ae8:	85 ea       	ldi	r24, 0xA5	; 165
    3aea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3aee:	18 c0       	rjmp	.+48     	; 0x3b20 <__vector_39+0x154>
    3af0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3af4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_twiCurrentState>
    3af8:	84 e0       	ldi	r24, 0x04	; 4
    3afa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3afe:	80 91 66 08 	lds	r24, 0x0866	; 0x800866 <_twiCurrentHandler>
    3b02:	90 91 67 08 	lds	r25, 0x0867	; 0x800867 <_twiCurrentHandler+0x1>
    3b06:	dc 01       	movw	r26, r24
    3b08:	12 96       	adiw	r26, 0x02	; 2
    3b0a:	ed 91       	ld	r30, X+
    3b0c:	fc 91       	ld	r31, X
    3b0e:	13 97       	sbiw	r26, 0x03	; 3
    3b10:	30 97       	sbiw	r30, 0x00	; 0
    3b12:	31 f0       	breq	.+12     	; 0x3b20 <__vector_39+0x154>
    3b14:	20 e0       	ldi	r18, 0x00	; 0
    3b16:	40 e0       	ldi	r20, 0x00	; 0
    3b18:	50 e0       	ldi	r21, 0x00	; 0
    3b1a:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_twiCurrentState>
    3b1e:	19 95       	eicall
    3b20:	ff 91       	pop	r31
    3b22:	ef 91       	pop	r30
    3b24:	bf 91       	pop	r27
    3b26:	af 91       	pop	r26
    3b28:	9f 91       	pop	r25
    3b2a:	8f 91       	pop	r24
    3b2c:	7f 91       	pop	r23
    3b2e:	6f 91       	pop	r22
    3b30:	5f 91       	pop	r21
    3b32:	4f 91       	pop	r20
    3b34:	3f 91       	pop	r19
    3b36:	2f 91       	pop	r18
    3b38:	0f 90       	pop	r0
    3b3a:	0b be       	out	0x3b, r0	; 59
    3b3c:	0f 90       	pop	r0
    3b3e:	0f be       	out	0x3f, r0	; 63
    3b40:	0f 90       	pop	r0
    3b42:	1f 90       	pop	r1
    3b44:	18 95       	reti

00003b46 <fifo_init>:
    3b46:	fc 01       	movw	r30, r24
    3b48:	41 11       	cpse	r20, r1
    3b4a:	01 c0       	rjmp	.+2      	; 0x3b4e <fifo_init+0x8>
    3b4c:	45 d3       	rcall	.+1674   	; 0x41d8 <abort>
    3b4e:	84 2f       	mov	r24, r20
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	9c 01       	movw	r18, r24
    3b54:	21 50       	subi	r18, 0x01	; 1
    3b56:	31 09       	sbc	r19, r1
    3b58:	82 23       	and	r24, r18
    3b5a:	93 23       	and	r25, r19
    3b5c:	89 2b       	or	r24, r25
    3b5e:	09 f0       	breq	.+2      	; 0x3b62 <fifo_init+0x1c>
    3b60:	3b d3       	rcall	.+1654   	; 0x41d8 <abort>
    3b62:	41 38       	cpi	r20, 0x81	; 129
    3b64:	08 f0       	brcs	.+2      	; 0x3b68 <fifo_init+0x22>
    3b66:	38 d3       	rcall	.+1648   	; 0x41d8 <abort>
    3b68:	12 82       	std	Z+2, r1	; 0x02
    3b6a:	13 82       	std	Z+3, r1	; 0x03
    3b6c:	44 83       	std	Z+4, r20	; 0x04
    3b6e:	44 0f       	add	r20, r20
    3b70:	41 50       	subi	r20, 0x01	; 1
    3b72:	45 83       	std	Z+5, r20	; 0x05
    3b74:	71 83       	std	Z+1, r23	; 0x01
    3b76:	60 83       	st	Z, r22
    3b78:	80 e0       	ldi	r24, 0x00	; 0
    3b7a:	90 e0       	ldi	r25, 0x00	; 0
    3b7c:	08 95       	ret

00003b7e <__subsf3>:
    3b7e:	50 58       	subi	r21, 0x80	; 128

00003b80 <__addsf3>:
    3b80:	bb 27       	eor	r27, r27
    3b82:	aa 27       	eor	r26, r26
    3b84:	0e d0       	rcall	.+28     	; 0x3ba2 <__addsf3x>
    3b86:	48 c1       	rjmp	.+656    	; 0x3e18 <__fp_round>
    3b88:	39 d1       	rcall	.+626    	; 0x3dfc <__fp_pscA>
    3b8a:	30 f0       	brcs	.+12     	; 0x3b98 <__addsf3+0x18>
    3b8c:	3e d1       	rcall	.+636    	; 0x3e0a <__fp_pscB>
    3b8e:	20 f0       	brcs	.+8      	; 0x3b98 <__addsf3+0x18>
    3b90:	31 f4       	brne	.+12     	; 0x3b9e <__addsf3+0x1e>
    3b92:	9f 3f       	cpi	r25, 0xFF	; 255
    3b94:	11 f4       	brne	.+4      	; 0x3b9a <__addsf3+0x1a>
    3b96:	1e f4       	brtc	.+6      	; 0x3b9e <__addsf3+0x1e>
    3b98:	2e c1       	rjmp	.+604    	; 0x3df6 <__fp_nan>
    3b9a:	0e f4       	brtc	.+2      	; 0x3b9e <__addsf3+0x1e>
    3b9c:	e0 95       	com	r30
    3b9e:	e7 fb       	bst	r30, 7
    3ba0:	24 c1       	rjmp	.+584    	; 0x3dea <__fp_inf>

00003ba2 <__addsf3x>:
    3ba2:	e9 2f       	mov	r30, r25
    3ba4:	4a d1       	rcall	.+660    	; 0x3e3a <__fp_split3>
    3ba6:	80 f3       	brcs	.-32     	; 0x3b88 <__addsf3+0x8>
    3ba8:	ba 17       	cp	r27, r26
    3baa:	62 07       	cpc	r22, r18
    3bac:	73 07       	cpc	r23, r19
    3bae:	84 07       	cpc	r24, r20
    3bb0:	95 07       	cpc	r25, r21
    3bb2:	18 f0       	brcs	.+6      	; 0x3bba <__addsf3x+0x18>
    3bb4:	71 f4       	brne	.+28     	; 0x3bd2 <__addsf3x+0x30>
    3bb6:	9e f5       	brtc	.+102    	; 0x3c1e <__addsf3x+0x7c>
    3bb8:	62 c1       	rjmp	.+708    	; 0x3e7e <__fp_zero>
    3bba:	0e f4       	brtc	.+2      	; 0x3bbe <__addsf3x+0x1c>
    3bbc:	e0 95       	com	r30
    3bbe:	0b 2e       	mov	r0, r27
    3bc0:	ba 2f       	mov	r27, r26
    3bc2:	a0 2d       	mov	r26, r0
    3bc4:	0b 01       	movw	r0, r22
    3bc6:	b9 01       	movw	r22, r18
    3bc8:	90 01       	movw	r18, r0
    3bca:	0c 01       	movw	r0, r24
    3bcc:	ca 01       	movw	r24, r20
    3bce:	a0 01       	movw	r20, r0
    3bd0:	11 24       	eor	r1, r1
    3bd2:	ff 27       	eor	r31, r31
    3bd4:	59 1b       	sub	r21, r25
    3bd6:	99 f0       	breq	.+38     	; 0x3bfe <__addsf3x+0x5c>
    3bd8:	59 3f       	cpi	r21, 0xF9	; 249
    3bda:	50 f4       	brcc	.+20     	; 0x3bf0 <__addsf3x+0x4e>
    3bdc:	50 3e       	cpi	r21, 0xE0	; 224
    3bde:	68 f1       	brcs	.+90     	; 0x3c3a <__addsf3x+0x98>
    3be0:	1a 16       	cp	r1, r26
    3be2:	f0 40       	sbci	r31, 0x00	; 0
    3be4:	a2 2f       	mov	r26, r18
    3be6:	23 2f       	mov	r18, r19
    3be8:	34 2f       	mov	r19, r20
    3bea:	44 27       	eor	r20, r20
    3bec:	58 5f       	subi	r21, 0xF8	; 248
    3bee:	f3 cf       	rjmp	.-26     	; 0x3bd6 <__addsf3x+0x34>
    3bf0:	46 95       	lsr	r20
    3bf2:	37 95       	ror	r19
    3bf4:	27 95       	ror	r18
    3bf6:	a7 95       	ror	r26
    3bf8:	f0 40       	sbci	r31, 0x00	; 0
    3bfa:	53 95       	inc	r21
    3bfc:	c9 f7       	brne	.-14     	; 0x3bf0 <__addsf3x+0x4e>
    3bfe:	7e f4       	brtc	.+30     	; 0x3c1e <__addsf3x+0x7c>
    3c00:	1f 16       	cp	r1, r31
    3c02:	ba 0b       	sbc	r27, r26
    3c04:	62 0b       	sbc	r22, r18
    3c06:	73 0b       	sbc	r23, r19
    3c08:	84 0b       	sbc	r24, r20
    3c0a:	ba f0       	brmi	.+46     	; 0x3c3a <__addsf3x+0x98>
    3c0c:	91 50       	subi	r25, 0x01	; 1
    3c0e:	a1 f0       	breq	.+40     	; 0x3c38 <__addsf3x+0x96>
    3c10:	ff 0f       	add	r31, r31
    3c12:	bb 1f       	adc	r27, r27
    3c14:	66 1f       	adc	r22, r22
    3c16:	77 1f       	adc	r23, r23
    3c18:	88 1f       	adc	r24, r24
    3c1a:	c2 f7       	brpl	.-16     	; 0x3c0c <__addsf3x+0x6a>
    3c1c:	0e c0       	rjmp	.+28     	; 0x3c3a <__addsf3x+0x98>
    3c1e:	ba 0f       	add	r27, r26
    3c20:	62 1f       	adc	r22, r18
    3c22:	73 1f       	adc	r23, r19
    3c24:	84 1f       	adc	r24, r20
    3c26:	48 f4       	brcc	.+18     	; 0x3c3a <__addsf3x+0x98>
    3c28:	87 95       	ror	r24
    3c2a:	77 95       	ror	r23
    3c2c:	67 95       	ror	r22
    3c2e:	b7 95       	ror	r27
    3c30:	f7 95       	ror	r31
    3c32:	9e 3f       	cpi	r25, 0xFE	; 254
    3c34:	08 f0       	brcs	.+2      	; 0x3c38 <__addsf3x+0x96>
    3c36:	b3 cf       	rjmp	.-154    	; 0x3b9e <__addsf3+0x1e>
    3c38:	93 95       	inc	r25
    3c3a:	88 0f       	add	r24, r24
    3c3c:	08 f0       	brcs	.+2      	; 0x3c40 <__addsf3x+0x9e>
    3c3e:	99 27       	eor	r25, r25
    3c40:	ee 0f       	add	r30, r30
    3c42:	97 95       	ror	r25
    3c44:	87 95       	ror	r24
    3c46:	08 95       	ret

00003c48 <__divsf3>:
    3c48:	0c d0       	rcall	.+24     	; 0x3c62 <__divsf3x>
    3c4a:	e6 c0       	rjmp	.+460    	; 0x3e18 <__fp_round>
    3c4c:	de d0       	rcall	.+444    	; 0x3e0a <__fp_pscB>
    3c4e:	40 f0       	brcs	.+16     	; 0x3c60 <__divsf3+0x18>
    3c50:	d5 d0       	rcall	.+426    	; 0x3dfc <__fp_pscA>
    3c52:	30 f0       	brcs	.+12     	; 0x3c60 <__divsf3+0x18>
    3c54:	21 f4       	brne	.+8      	; 0x3c5e <__divsf3+0x16>
    3c56:	5f 3f       	cpi	r21, 0xFF	; 255
    3c58:	19 f0       	breq	.+6      	; 0x3c60 <__divsf3+0x18>
    3c5a:	c7 c0       	rjmp	.+398    	; 0x3dea <__fp_inf>
    3c5c:	51 11       	cpse	r21, r1
    3c5e:	10 c1       	rjmp	.+544    	; 0x3e80 <__fp_szero>
    3c60:	ca c0       	rjmp	.+404    	; 0x3df6 <__fp_nan>

00003c62 <__divsf3x>:
    3c62:	eb d0       	rcall	.+470    	; 0x3e3a <__fp_split3>
    3c64:	98 f3       	brcs	.-26     	; 0x3c4c <__divsf3+0x4>

00003c66 <__divsf3_pse>:
    3c66:	99 23       	and	r25, r25
    3c68:	c9 f3       	breq	.-14     	; 0x3c5c <__divsf3+0x14>
    3c6a:	55 23       	and	r21, r21
    3c6c:	b1 f3       	breq	.-20     	; 0x3c5a <__divsf3+0x12>
    3c6e:	95 1b       	sub	r25, r21
    3c70:	55 0b       	sbc	r21, r21
    3c72:	bb 27       	eor	r27, r27
    3c74:	aa 27       	eor	r26, r26
    3c76:	62 17       	cp	r22, r18
    3c78:	73 07       	cpc	r23, r19
    3c7a:	84 07       	cpc	r24, r20
    3c7c:	38 f0       	brcs	.+14     	; 0x3c8c <__divsf3_pse+0x26>
    3c7e:	9f 5f       	subi	r25, 0xFF	; 255
    3c80:	5f 4f       	sbci	r21, 0xFF	; 255
    3c82:	22 0f       	add	r18, r18
    3c84:	33 1f       	adc	r19, r19
    3c86:	44 1f       	adc	r20, r20
    3c88:	aa 1f       	adc	r26, r26
    3c8a:	a9 f3       	breq	.-22     	; 0x3c76 <__divsf3_pse+0x10>
    3c8c:	33 d0       	rcall	.+102    	; 0x3cf4 <__divsf3_pse+0x8e>
    3c8e:	0e 2e       	mov	r0, r30
    3c90:	3a f0       	brmi	.+14     	; 0x3ca0 <__divsf3_pse+0x3a>
    3c92:	e0 e8       	ldi	r30, 0x80	; 128
    3c94:	30 d0       	rcall	.+96     	; 0x3cf6 <__divsf3_pse+0x90>
    3c96:	91 50       	subi	r25, 0x01	; 1
    3c98:	50 40       	sbci	r21, 0x00	; 0
    3c9a:	e6 95       	lsr	r30
    3c9c:	00 1c       	adc	r0, r0
    3c9e:	ca f7       	brpl	.-14     	; 0x3c92 <__divsf3_pse+0x2c>
    3ca0:	29 d0       	rcall	.+82     	; 0x3cf4 <__divsf3_pse+0x8e>
    3ca2:	fe 2f       	mov	r31, r30
    3ca4:	27 d0       	rcall	.+78     	; 0x3cf4 <__divsf3_pse+0x8e>
    3ca6:	66 0f       	add	r22, r22
    3ca8:	77 1f       	adc	r23, r23
    3caa:	88 1f       	adc	r24, r24
    3cac:	bb 1f       	adc	r27, r27
    3cae:	26 17       	cp	r18, r22
    3cb0:	37 07       	cpc	r19, r23
    3cb2:	48 07       	cpc	r20, r24
    3cb4:	ab 07       	cpc	r26, r27
    3cb6:	b0 e8       	ldi	r27, 0x80	; 128
    3cb8:	09 f0       	breq	.+2      	; 0x3cbc <__divsf3_pse+0x56>
    3cba:	bb 0b       	sbc	r27, r27
    3cbc:	80 2d       	mov	r24, r0
    3cbe:	bf 01       	movw	r22, r30
    3cc0:	ff 27       	eor	r31, r31
    3cc2:	93 58       	subi	r25, 0x83	; 131
    3cc4:	5f 4f       	sbci	r21, 0xFF	; 255
    3cc6:	2a f0       	brmi	.+10     	; 0x3cd2 <__divsf3_pse+0x6c>
    3cc8:	9e 3f       	cpi	r25, 0xFE	; 254
    3cca:	51 05       	cpc	r21, r1
    3ccc:	68 f0       	brcs	.+26     	; 0x3ce8 <__divsf3_pse+0x82>
    3cce:	8d c0       	rjmp	.+282    	; 0x3dea <__fp_inf>
    3cd0:	d7 c0       	rjmp	.+430    	; 0x3e80 <__fp_szero>
    3cd2:	5f 3f       	cpi	r21, 0xFF	; 255
    3cd4:	ec f3       	brlt	.-6      	; 0x3cd0 <__divsf3_pse+0x6a>
    3cd6:	98 3e       	cpi	r25, 0xE8	; 232
    3cd8:	dc f3       	brlt	.-10     	; 0x3cd0 <__divsf3_pse+0x6a>
    3cda:	86 95       	lsr	r24
    3cdc:	77 95       	ror	r23
    3cde:	67 95       	ror	r22
    3ce0:	b7 95       	ror	r27
    3ce2:	f7 95       	ror	r31
    3ce4:	9f 5f       	subi	r25, 0xFF	; 255
    3ce6:	c9 f7       	brne	.-14     	; 0x3cda <__divsf3_pse+0x74>
    3ce8:	88 0f       	add	r24, r24
    3cea:	91 1d       	adc	r25, r1
    3cec:	96 95       	lsr	r25
    3cee:	87 95       	ror	r24
    3cf0:	97 f9       	bld	r25, 7
    3cf2:	08 95       	ret
    3cf4:	e1 e0       	ldi	r30, 0x01	; 1
    3cf6:	66 0f       	add	r22, r22
    3cf8:	77 1f       	adc	r23, r23
    3cfa:	88 1f       	adc	r24, r24
    3cfc:	bb 1f       	adc	r27, r27
    3cfe:	62 17       	cp	r22, r18
    3d00:	73 07       	cpc	r23, r19
    3d02:	84 07       	cpc	r24, r20
    3d04:	ba 07       	cpc	r27, r26
    3d06:	20 f0       	brcs	.+8      	; 0x3d10 <__divsf3_pse+0xaa>
    3d08:	62 1b       	sub	r22, r18
    3d0a:	73 0b       	sbc	r23, r19
    3d0c:	84 0b       	sbc	r24, r20
    3d0e:	ba 0b       	sbc	r27, r26
    3d10:	ee 1f       	adc	r30, r30
    3d12:	88 f7       	brcc	.-30     	; 0x3cf6 <__divsf3_pse+0x90>
    3d14:	e0 95       	com	r30
    3d16:	08 95       	ret

00003d18 <__fixunssfsi>:
    3d18:	98 d0       	rcall	.+304    	; 0x3e4a <__fp_splitA>
    3d1a:	88 f0       	brcs	.+34     	; 0x3d3e <__fixunssfsi+0x26>
    3d1c:	9f 57       	subi	r25, 0x7F	; 127
    3d1e:	90 f0       	brcs	.+36     	; 0x3d44 <__fixunssfsi+0x2c>
    3d20:	b9 2f       	mov	r27, r25
    3d22:	99 27       	eor	r25, r25
    3d24:	b7 51       	subi	r27, 0x17	; 23
    3d26:	a0 f0       	brcs	.+40     	; 0x3d50 <__fixunssfsi+0x38>
    3d28:	d1 f0       	breq	.+52     	; 0x3d5e <__fixunssfsi+0x46>
    3d2a:	66 0f       	add	r22, r22
    3d2c:	77 1f       	adc	r23, r23
    3d2e:	88 1f       	adc	r24, r24
    3d30:	99 1f       	adc	r25, r25
    3d32:	1a f0       	brmi	.+6      	; 0x3d3a <__fixunssfsi+0x22>
    3d34:	ba 95       	dec	r27
    3d36:	c9 f7       	brne	.-14     	; 0x3d2a <__fixunssfsi+0x12>
    3d38:	12 c0       	rjmp	.+36     	; 0x3d5e <__fixunssfsi+0x46>
    3d3a:	b1 30       	cpi	r27, 0x01	; 1
    3d3c:	81 f0       	breq	.+32     	; 0x3d5e <__fixunssfsi+0x46>
    3d3e:	9f d0       	rcall	.+318    	; 0x3e7e <__fp_zero>
    3d40:	b1 e0       	ldi	r27, 0x01	; 1
    3d42:	08 95       	ret
    3d44:	9c c0       	rjmp	.+312    	; 0x3e7e <__fp_zero>
    3d46:	67 2f       	mov	r22, r23
    3d48:	78 2f       	mov	r23, r24
    3d4a:	88 27       	eor	r24, r24
    3d4c:	b8 5f       	subi	r27, 0xF8	; 248
    3d4e:	39 f0       	breq	.+14     	; 0x3d5e <__fixunssfsi+0x46>
    3d50:	b9 3f       	cpi	r27, 0xF9	; 249
    3d52:	cc f3       	brlt	.-14     	; 0x3d46 <__fixunssfsi+0x2e>
    3d54:	86 95       	lsr	r24
    3d56:	77 95       	ror	r23
    3d58:	67 95       	ror	r22
    3d5a:	b3 95       	inc	r27
    3d5c:	d9 f7       	brne	.-10     	; 0x3d54 <__fixunssfsi+0x3c>
    3d5e:	3e f4       	brtc	.+14     	; 0x3d6e <__fixunssfsi+0x56>
    3d60:	90 95       	com	r25
    3d62:	80 95       	com	r24
    3d64:	70 95       	com	r23
    3d66:	61 95       	neg	r22
    3d68:	7f 4f       	sbci	r23, 0xFF	; 255
    3d6a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6e:	08 95       	ret

00003d70 <__floatunsisf>:
    3d70:	e8 94       	clt
    3d72:	09 c0       	rjmp	.+18     	; 0x3d86 <__floatsisf+0x12>

00003d74 <__floatsisf>:
    3d74:	97 fb       	bst	r25, 7
    3d76:	3e f4       	brtc	.+14     	; 0x3d86 <__floatsisf+0x12>
    3d78:	90 95       	com	r25
    3d7a:	80 95       	com	r24
    3d7c:	70 95       	com	r23
    3d7e:	61 95       	neg	r22
    3d80:	7f 4f       	sbci	r23, 0xFF	; 255
    3d82:	8f 4f       	sbci	r24, 0xFF	; 255
    3d84:	9f 4f       	sbci	r25, 0xFF	; 255
    3d86:	99 23       	and	r25, r25
    3d88:	a9 f0       	breq	.+42     	; 0x3db4 <__floatsisf+0x40>
    3d8a:	f9 2f       	mov	r31, r25
    3d8c:	96 e9       	ldi	r25, 0x96	; 150
    3d8e:	bb 27       	eor	r27, r27
    3d90:	93 95       	inc	r25
    3d92:	f6 95       	lsr	r31
    3d94:	87 95       	ror	r24
    3d96:	77 95       	ror	r23
    3d98:	67 95       	ror	r22
    3d9a:	b7 95       	ror	r27
    3d9c:	f1 11       	cpse	r31, r1
    3d9e:	f8 cf       	rjmp	.-16     	; 0x3d90 <__floatsisf+0x1c>
    3da0:	fa f4       	brpl	.+62     	; 0x3de0 <__floatsisf+0x6c>
    3da2:	bb 0f       	add	r27, r27
    3da4:	11 f4       	brne	.+4      	; 0x3daa <__floatsisf+0x36>
    3da6:	60 ff       	sbrs	r22, 0
    3da8:	1b c0       	rjmp	.+54     	; 0x3de0 <__floatsisf+0x6c>
    3daa:	6f 5f       	subi	r22, 0xFF	; 255
    3dac:	7f 4f       	sbci	r23, 0xFF	; 255
    3dae:	8f 4f       	sbci	r24, 0xFF	; 255
    3db0:	9f 4f       	sbci	r25, 0xFF	; 255
    3db2:	16 c0       	rjmp	.+44     	; 0x3de0 <__floatsisf+0x6c>
    3db4:	88 23       	and	r24, r24
    3db6:	11 f0       	breq	.+4      	; 0x3dbc <__floatsisf+0x48>
    3db8:	96 e9       	ldi	r25, 0x96	; 150
    3dba:	11 c0       	rjmp	.+34     	; 0x3dde <__floatsisf+0x6a>
    3dbc:	77 23       	and	r23, r23
    3dbe:	21 f0       	breq	.+8      	; 0x3dc8 <__floatsisf+0x54>
    3dc0:	9e e8       	ldi	r25, 0x8E	; 142
    3dc2:	87 2f       	mov	r24, r23
    3dc4:	76 2f       	mov	r23, r22
    3dc6:	05 c0       	rjmp	.+10     	; 0x3dd2 <__floatsisf+0x5e>
    3dc8:	66 23       	and	r22, r22
    3dca:	71 f0       	breq	.+28     	; 0x3de8 <__floatsisf+0x74>
    3dcc:	96 e8       	ldi	r25, 0x86	; 134
    3dce:	86 2f       	mov	r24, r22
    3dd0:	70 e0       	ldi	r23, 0x00	; 0
    3dd2:	60 e0       	ldi	r22, 0x00	; 0
    3dd4:	2a f0       	brmi	.+10     	; 0x3de0 <__floatsisf+0x6c>
    3dd6:	9a 95       	dec	r25
    3dd8:	66 0f       	add	r22, r22
    3dda:	77 1f       	adc	r23, r23
    3ddc:	88 1f       	adc	r24, r24
    3dde:	da f7       	brpl	.-10     	; 0x3dd6 <__floatsisf+0x62>
    3de0:	88 0f       	add	r24, r24
    3de2:	96 95       	lsr	r25
    3de4:	87 95       	ror	r24
    3de6:	97 f9       	bld	r25, 7
    3de8:	08 95       	ret

00003dea <__fp_inf>:
    3dea:	97 f9       	bld	r25, 7
    3dec:	9f 67       	ori	r25, 0x7F	; 127
    3dee:	80 e8       	ldi	r24, 0x80	; 128
    3df0:	70 e0       	ldi	r23, 0x00	; 0
    3df2:	60 e0       	ldi	r22, 0x00	; 0
    3df4:	08 95       	ret

00003df6 <__fp_nan>:
    3df6:	9f ef       	ldi	r25, 0xFF	; 255
    3df8:	80 ec       	ldi	r24, 0xC0	; 192
    3dfa:	08 95       	ret

00003dfc <__fp_pscA>:
    3dfc:	00 24       	eor	r0, r0
    3dfe:	0a 94       	dec	r0
    3e00:	16 16       	cp	r1, r22
    3e02:	17 06       	cpc	r1, r23
    3e04:	18 06       	cpc	r1, r24
    3e06:	09 06       	cpc	r0, r25
    3e08:	08 95       	ret

00003e0a <__fp_pscB>:
    3e0a:	00 24       	eor	r0, r0
    3e0c:	0a 94       	dec	r0
    3e0e:	12 16       	cp	r1, r18
    3e10:	13 06       	cpc	r1, r19
    3e12:	14 06       	cpc	r1, r20
    3e14:	05 06       	cpc	r0, r21
    3e16:	08 95       	ret

00003e18 <__fp_round>:
    3e18:	09 2e       	mov	r0, r25
    3e1a:	03 94       	inc	r0
    3e1c:	00 0c       	add	r0, r0
    3e1e:	11 f4       	brne	.+4      	; 0x3e24 <__fp_round+0xc>
    3e20:	88 23       	and	r24, r24
    3e22:	52 f0       	brmi	.+20     	; 0x3e38 <__fp_round+0x20>
    3e24:	bb 0f       	add	r27, r27
    3e26:	40 f4       	brcc	.+16     	; 0x3e38 <__fp_round+0x20>
    3e28:	bf 2b       	or	r27, r31
    3e2a:	11 f4       	brne	.+4      	; 0x3e30 <__fp_round+0x18>
    3e2c:	60 ff       	sbrs	r22, 0
    3e2e:	04 c0       	rjmp	.+8      	; 0x3e38 <__fp_round+0x20>
    3e30:	6f 5f       	subi	r22, 0xFF	; 255
    3e32:	7f 4f       	sbci	r23, 0xFF	; 255
    3e34:	8f 4f       	sbci	r24, 0xFF	; 255
    3e36:	9f 4f       	sbci	r25, 0xFF	; 255
    3e38:	08 95       	ret

00003e3a <__fp_split3>:
    3e3a:	57 fd       	sbrc	r21, 7
    3e3c:	90 58       	subi	r25, 0x80	; 128
    3e3e:	44 0f       	add	r20, r20
    3e40:	55 1f       	adc	r21, r21
    3e42:	59 f0       	breq	.+22     	; 0x3e5a <__fp_splitA+0x10>
    3e44:	5f 3f       	cpi	r21, 0xFF	; 255
    3e46:	71 f0       	breq	.+28     	; 0x3e64 <__fp_splitA+0x1a>
    3e48:	47 95       	ror	r20

00003e4a <__fp_splitA>:
    3e4a:	88 0f       	add	r24, r24
    3e4c:	97 fb       	bst	r25, 7
    3e4e:	99 1f       	adc	r25, r25
    3e50:	61 f0       	breq	.+24     	; 0x3e6a <__fp_splitA+0x20>
    3e52:	9f 3f       	cpi	r25, 0xFF	; 255
    3e54:	79 f0       	breq	.+30     	; 0x3e74 <__fp_splitA+0x2a>
    3e56:	87 95       	ror	r24
    3e58:	08 95       	ret
    3e5a:	12 16       	cp	r1, r18
    3e5c:	13 06       	cpc	r1, r19
    3e5e:	14 06       	cpc	r1, r20
    3e60:	55 1f       	adc	r21, r21
    3e62:	f2 cf       	rjmp	.-28     	; 0x3e48 <__fp_split3+0xe>
    3e64:	46 95       	lsr	r20
    3e66:	f1 df       	rcall	.-30     	; 0x3e4a <__fp_splitA>
    3e68:	08 c0       	rjmp	.+16     	; 0x3e7a <__fp_splitA+0x30>
    3e6a:	16 16       	cp	r1, r22
    3e6c:	17 06       	cpc	r1, r23
    3e6e:	18 06       	cpc	r1, r24
    3e70:	99 1f       	adc	r25, r25
    3e72:	f1 cf       	rjmp	.-30     	; 0x3e56 <__fp_splitA+0xc>
    3e74:	86 95       	lsr	r24
    3e76:	71 05       	cpc	r23, r1
    3e78:	61 05       	cpc	r22, r1
    3e7a:	08 94       	sec
    3e7c:	08 95       	ret

00003e7e <__fp_zero>:
    3e7e:	e8 94       	clt

00003e80 <__fp_szero>:
    3e80:	bb 27       	eor	r27, r27
    3e82:	66 27       	eor	r22, r22
    3e84:	77 27       	eor	r23, r23
    3e86:	cb 01       	movw	r24, r22
    3e88:	97 f9       	bld	r25, 7
    3e8a:	08 95       	ret

00003e8c <__mulsf3>:
    3e8c:	0b d0       	rcall	.+22     	; 0x3ea4 <__mulsf3x>
    3e8e:	c4 cf       	rjmp	.-120    	; 0x3e18 <__fp_round>
    3e90:	b5 df       	rcall	.-150    	; 0x3dfc <__fp_pscA>
    3e92:	28 f0       	brcs	.+10     	; 0x3e9e <__mulsf3+0x12>
    3e94:	ba df       	rcall	.-140    	; 0x3e0a <__fp_pscB>
    3e96:	18 f0       	brcs	.+6      	; 0x3e9e <__mulsf3+0x12>
    3e98:	95 23       	and	r25, r21
    3e9a:	09 f0       	breq	.+2      	; 0x3e9e <__mulsf3+0x12>
    3e9c:	a6 cf       	rjmp	.-180    	; 0x3dea <__fp_inf>
    3e9e:	ab cf       	rjmp	.-170    	; 0x3df6 <__fp_nan>
    3ea0:	11 24       	eor	r1, r1
    3ea2:	ee cf       	rjmp	.-36     	; 0x3e80 <__fp_szero>

00003ea4 <__mulsf3x>:
    3ea4:	ca df       	rcall	.-108    	; 0x3e3a <__fp_split3>
    3ea6:	a0 f3       	brcs	.-24     	; 0x3e90 <__mulsf3+0x4>

00003ea8 <__mulsf3_pse>:
    3ea8:	95 9f       	mul	r25, r21
    3eaa:	d1 f3       	breq	.-12     	; 0x3ea0 <__mulsf3+0x14>
    3eac:	95 0f       	add	r25, r21
    3eae:	50 e0       	ldi	r21, 0x00	; 0
    3eb0:	55 1f       	adc	r21, r21
    3eb2:	62 9f       	mul	r22, r18
    3eb4:	f0 01       	movw	r30, r0
    3eb6:	72 9f       	mul	r23, r18
    3eb8:	bb 27       	eor	r27, r27
    3eba:	f0 0d       	add	r31, r0
    3ebc:	b1 1d       	adc	r27, r1
    3ebe:	63 9f       	mul	r22, r19
    3ec0:	aa 27       	eor	r26, r26
    3ec2:	f0 0d       	add	r31, r0
    3ec4:	b1 1d       	adc	r27, r1
    3ec6:	aa 1f       	adc	r26, r26
    3ec8:	64 9f       	mul	r22, r20
    3eca:	66 27       	eor	r22, r22
    3ecc:	b0 0d       	add	r27, r0
    3ece:	a1 1d       	adc	r26, r1
    3ed0:	66 1f       	adc	r22, r22
    3ed2:	82 9f       	mul	r24, r18
    3ed4:	22 27       	eor	r18, r18
    3ed6:	b0 0d       	add	r27, r0
    3ed8:	a1 1d       	adc	r26, r1
    3eda:	62 1f       	adc	r22, r18
    3edc:	73 9f       	mul	r23, r19
    3ede:	b0 0d       	add	r27, r0
    3ee0:	a1 1d       	adc	r26, r1
    3ee2:	62 1f       	adc	r22, r18
    3ee4:	83 9f       	mul	r24, r19
    3ee6:	a0 0d       	add	r26, r0
    3ee8:	61 1d       	adc	r22, r1
    3eea:	22 1f       	adc	r18, r18
    3eec:	74 9f       	mul	r23, r20
    3eee:	33 27       	eor	r19, r19
    3ef0:	a0 0d       	add	r26, r0
    3ef2:	61 1d       	adc	r22, r1
    3ef4:	23 1f       	adc	r18, r19
    3ef6:	84 9f       	mul	r24, r20
    3ef8:	60 0d       	add	r22, r0
    3efa:	21 1d       	adc	r18, r1
    3efc:	82 2f       	mov	r24, r18
    3efe:	76 2f       	mov	r23, r22
    3f00:	6a 2f       	mov	r22, r26
    3f02:	11 24       	eor	r1, r1
    3f04:	9f 57       	subi	r25, 0x7F	; 127
    3f06:	50 40       	sbci	r21, 0x00	; 0
    3f08:	8a f0       	brmi	.+34     	; 0x3f2c <__mulsf3_pse+0x84>
    3f0a:	e1 f0       	breq	.+56     	; 0x3f44 <__mulsf3_pse+0x9c>
    3f0c:	88 23       	and	r24, r24
    3f0e:	4a f0       	brmi	.+18     	; 0x3f22 <__mulsf3_pse+0x7a>
    3f10:	ee 0f       	add	r30, r30
    3f12:	ff 1f       	adc	r31, r31
    3f14:	bb 1f       	adc	r27, r27
    3f16:	66 1f       	adc	r22, r22
    3f18:	77 1f       	adc	r23, r23
    3f1a:	88 1f       	adc	r24, r24
    3f1c:	91 50       	subi	r25, 0x01	; 1
    3f1e:	50 40       	sbci	r21, 0x00	; 0
    3f20:	a9 f7       	brne	.-22     	; 0x3f0c <__mulsf3_pse+0x64>
    3f22:	9e 3f       	cpi	r25, 0xFE	; 254
    3f24:	51 05       	cpc	r21, r1
    3f26:	70 f0       	brcs	.+28     	; 0x3f44 <__mulsf3_pse+0x9c>
    3f28:	60 cf       	rjmp	.-320    	; 0x3dea <__fp_inf>
    3f2a:	aa cf       	rjmp	.-172    	; 0x3e80 <__fp_szero>
    3f2c:	5f 3f       	cpi	r21, 0xFF	; 255
    3f2e:	ec f3       	brlt	.-6      	; 0x3f2a <__mulsf3_pse+0x82>
    3f30:	98 3e       	cpi	r25, 0xE8	; 232
    3f32:	dc f3       	brlt	.-10     	; 0x3f2a <__mulsf3_pse+0x82>
    3f34:	86 95       	lsr	r24
    3f36:	77 95       	ror	r23
    3f38:	67 95       	ror	r22
    3f3a:	b7 95       	ror	r27
    3f3c:	f7 95       	ror	r31
    3f3e:	e7 95       	ror	r30
    3f40:	9f 5f       	subi	r25, 0xFF	; 255
    3f42:	c1 f7       	brne	.-16     	; 0x3f34 <__mulsf3_pse+0x8c>
    3f44:	fe 2b       	or	r31, r30
    3f46:	88 0f       	add	r24, r24
    3f48:	91 1d       	adc	r25, r1
    3f4a:	96 95       	lsr	r25
    3f4c:	87 95       	ror	r24
    3f4e:	97 f9       	bld	r25, 7
    3f50:	08 95       	ret

00003f52 <__tablejump2__>:
    3f52:	ee 0f       	add	r30, r30
    3f54:	ff 1f       	adc	r31, r31
    3f56:	88 1f       	adc	r24, r24
    3f58:	8b bf       	out	0x3b, r24	; 59
    3f5a:	07 90       	elpm	r0, Z+
    3f5c:	f6 91       	elpm	r31, Z
    3f5e:	e0 2d       	mov	r30, r0
    3f60:	19 94       	eijmp

00003f62 <calloc>:
    3f62:	0f 93       	push	r16
    3f64:	1f 93       	push	r17
    3f66:	cf 93       	push	r28
    3f68:	df 93       	push	r29
    3f6a:	86 9f       	mul	r24, r22
    3f6c:	80 01       	movw	r16, r0
    3f6e:	87 9f       	mul	r24, r23
    3f70:	10 0d       	add	r17, r0
    3f72:	96 9f       	mul	r25, r22
    3f74:	10 0d       	add	r17, r0
    3f76:	11 24       	eor	r1, r1
    3f78:	c8 01       	movw	r24, r16
    3f7a:	0d d0       	rcall	.+26     	; 0x3f96 <malloc>
    3f7c:	ec 01       	movw	r28, r24
    3f7e:	00 97       	sbiw	r24, 0x00	; 0
    3f80:	21 f0       	breq	.+8      	; 0x3f8a <calloc+0x28>
    3f82:	a8 01       	movw	r20, r16
    3f84:	60 e0       	ldi	r22, 0x00	; 0
    3f86:	70 e0       	ldi	r23, 0x00	; 0
    3f88:	34 d1       	rcall	.+616    	; 0x41f2 <memset>
    3f8a:	ce 01       	movw	r24, r28
    3f8c:	df 91       	pop	r29
    3f8e:	cf 91       	pop	r28
    3f90:	1f 91       	pop	r17
    3f92:	0f 91       	pop	r16
    3f94:	08 95       	ret

00003f96 <malloc>:
    3f96:	0f 93       	push	r16
    3f98:	1f 93       	push	r17
    3f9a:	cf 93       	push	r28
    3f9c:	df 93       	push	r29
    3f9e:	82 30       	cpi	r24, 0x02	; 2
    3fa0:	91 05       	cpc	r25, r1
    3fa2:	10 f4       	brcc	.+4      	; 0x3fa8 <malloc+0x12>
    3fa4:	82 e0       	ldi	r24, 0x02	; 2
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	e0 91 9f 08 	lds	r30, 0x089F	; 0x80089f <__flp>
    3fac:	f0 91 a0 08 	lds	r31, 0x08A0	; 0x8008a0 <__flp+0x1>
    3fb0:	20 e0       	ldi	r18, 0x00	; 0
    3fb2:	30 e0       	ldi	r19, 0x00	; 0
    3fb4:	a0 e0       	ldi	r26, 0x00	; 0
    3fb6:	b0 e0       	ldi	r27, 0x00	; 0
    3fb8:	30 97       	sbiw	r30, 0x00	; 0
    3fba:	19 f1       	breq	.+70     	; 0x4002 <malloc+0x6c>
    3fbc:	40 81       	ld	r20, Z
    3fbe:	51 81       	ldd	r21, Z+1	; 0x01
    3fc0:	02 81       	ldd	r16, Z+2	; 0x02
    3fc2:	13 81       	ldd	r17, Z+3	; 0x03
    3fc4:	48 17       	cp	r20, r24
    3fc6:	59 07       	cpc	r21, r25
    3fc8:	c8 f0       	brcs	.+50     	; 0x3ffc <malloc+0x66>
    3fca:	84 17       	cp	r24, r20
    3fcc:	95 07       	cpc	r25, r21
    3fce:	69 f4       	brne	.+26     	; 0x3fea <malloc+0x54>
    3fd0:	10 97       	sbiw	r26, 0x00	; 0
    3fd2:	31 f0       	breq	.+12     	; 0x3fe0 <malloc+0x4a>
    3fd4:	12 96       	adiw	r26, 0x02	; 2
    3fd6:	0c 93       	st	X, r16
    3fd8:	12 97       	sbiw	r26, 0x02	; 2
    3fda:	13 96       	adiw	r26, 0x03	; 3
    3fdc:	1c 93       	st	X, r17
    3fde:	27 c0       	rjmp	.+78     	; 0x402e <malloc+0x98>
    3fe0:	00 93 9f 08 	sts	0x089F, r16	; 0x80089f <__flp>
    3fe4:	10 93 a0 08 	sts	0x08A0, r17	; 0x8008a0 <__flp+0x1>
    3fe8:	22 c0       	rjmp	.+68     	; 0x402e <malloc+0x98>
    3fea:	21 15       	cp	r18, r1
    3fec:	31 05       	cpc	r19, r1
    3fee:	19 f0       	breq	.+6      	; 0x3ff6 <malloc+0x60>
    3ff0:	42 17       	cp	r20, r18
    3ff2:	53 07       	cpc	r21, r19
    3ff4:	18 f4       	brcc	.+6      	; 0x3ffc <malloc+0x66>
    3ff6:	9a 01       	movw	r18, r20
    3ff8:	bd 01       	movw	r22, r26
    3ffa:	ef 01       	movw	r28, r30
    3ffc:	df 01       	movw	r26, r30
    3ffe:	f8 01       	movw	r30, r16
    4000:	db cf       	rjmp	.-74     	; 0x3fb8 <malloc+0x22>
    4002:	21 15       	cp	r18, r1
    4004:	31 05       	cpc	r19, r1
    4006:	f9 f0       	breq	.+62     	; 0x4046 <malloc+0xb0>
    4008:	28 1b       	sub	r18, r24
    400a:	39 0b       	sbc	r19, r25
    400c:	24 30       	cpi	r18, 0x04	; 4
    400e:	31 05       	cpc	r19, r1
    4010:	80 f4       	brcc	.+32     	; 0x4032 <malloc+0x9c>
    4012:	8a 81       	ldd	r24, Y+2	; 0x02
    4014:	9b 81       	ldd	r25, Y+3	; 0x03
    4016:	61 15       	cp	r22, r1
    4018:	71 05       	cpc	r23, r1
    401a:	21 f0       	breq	.+8      	; 0x4024 <malloc+0x8e>
    401c:	fb 01       	movw	r30, r22
    401e:	93 83       	std	Z+3, r25	; 0x03
    4020:	82 83       	std	Z+2, r24	; 0x02
    4022:	04 c0       	rjmp	.+8      	; 0x402c <malloc+0x96>
    4024:	90 93 a0 08 	sts	0x08A0, r25	; 0x8008a0 <__flp+0x1>
    4028:	80 93 9f 08 	sts	0x089F, r24	; 0x80089f <__flp>
    402c:	fe 01       	movw	r30, r28
    402e:	32 96       	adiw	r30, 0x02	; 2
    4030:	44 c0       	rjmp	.+136    	; 0x40ba <malloc+0x124>
    4032:	fe 01       	movw	r30, r28
    4034:	e2 0f       	add	r30, r18
    4036:	f3 1f       	adc	r31, r19
    4038:	81 93       	st	Z+, r24
    403a:	91 93       	st	Z+, r25
    403c:	22 50       	subi	r18, 0x02	; 2
    403e:	31 09       	sbc	r19, r1
    4040:	39 83       	std	Y+1, r19	; 0x01
    4042:	28 83       	st	Y, r18
    4044:	3a c0       	rjmp	.+116    	; 0x40ba <malloc+0x124>
    4046:	20 91 9d 08 	lds	r18, 0x089D	; 0x80089d <__brkval>
    404a:	30 91 9e 08 	lds	r19, 0x089E	; 0x80089e <__brkval+0x1>
    404e:	23 2b       	or	r18, r19
    4050:	41 f4       	brne	.+16     	; 0x4062 <malloc+0xcc>
    4052:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4056:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    405a:	30 93 9e 08 	sts	0x089E, r19	; 0x80089e <__brkval+0x1>
    405e:	20 93 9d 08 	sts	0x089D, r18	; 0x80089d <__brkval>
    4062:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4066:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    406a:	21 15       	cp	r18, r1
    406c:	31 05       	cpc	r19, r1
    406e:	41 f4       	brne	.+16     	; 0x4080 <malloc+0xea>
    4070:	2d b7       	in	r18, 0x3d	; 61
    4072:	3e b7       	in	r19, 0x3e	; 62
    4074:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4078:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    407c:	24 1b       	sub	r18, r20
    407e:	35 0b       	sbc	r19, r21
    4080:	e0 91 9d 08 	lds	r30, 0x089D	; 0x80089d <__brkval>
    4084:	f0 91 9e 08 	lds	r31, 0x089E	; 0x80089e <__brkval+0x1>
    4088:	e2 17       	cp	r30, r18
    408a:	f3 07       	cpc	r31, r19
    408c:	a0 f4       	brcc	.+40     	; 0x40b6 <malloc+0x120>
    408e:	2e 1b       	sub	r18, r30
    4090:	3f 0b       	sbc	r19, r31
    4092:	28 17       	cp	r18, r24
    4094:	39 07       	cpc	r19, r25
    4096:	78 f0       	brcs	.+30     	; 0x40b6 <malloc+0x120>
    4098:	ac 01       	movw	r20, r24
    409a:	4e 5f       	subi	r20, 0xFE	; 254
    409c:	5f 4f       	sbci	r21, 0xFF	; 255
    409e:	24 17       	cp	r18, r20
    40a0:	35 07       	cpc	r19, r21
    40a2:	48 f0       	brcs	.+18     	; 0x40b6 <malloc+0x120>
    40a4:	4e 0f       	add	r20, r30
    40a6:	5f 1f       	adc	r21, r31
    40a8:	50 93 9e 08 	sts	0x089E, r21	; 0x80089e <__brkval+0x1>
    40ac:	40 93 9d 08 	sts	0x089D, r20	; 0x80089d <__brkval>
    40b0:	81 93       	st	Z+, r24
    40b2:	91 93       	st	Z+, r25
    40b4:	02 c0       	rjmp	.+4      	; 0x40ba <malloc+0x124>
    40b6:	e0 e0       	ldi	r30, 0x00	; 0
    40b8:	f0 e0       	ldi	r31, 0x00	; 0
    40ba:	cf 01       	movw	r24, r30
    40bc:	df 91       	pop	r29
    40be:	cf 91       	pop	r28
    40c0:	1f 91       	pop	r17
    40c2:	0f 91       	pop	r16
    40c4:	08 95       	ret

000040c6 <free>:
    40c6:	cf 93       	push	r28
    40c8:	df 93       	push	r29
    40ca:	00 97       	sbiw	r24, 0x00	; 0
    40cc:	09 f4       	brne	.+2      	; 0x40d0 <free+0xa>
    40ce:	81 c0       	rjmp	.+258    	; 0x41d2 <free+0x10c>
    40d0:	fc 01       	movw	r30, r24
    40d2:	32 97       	sbiw	r30, 0x02	; 2
    40d4:	13 82       	std	Z+3, r1	; 0x03
    40d6:	12 82       	std	Z+2, r1	; 0x02
    40d8:	a0 91 9f 08 	lds	r26, 0x089F	; 0x80089f <__flp>
    40dc:	b0 91 a0 08 	lds	r27, 0x08A0	; 0x8008a0 <__flp+0x1>
    40e0:	10 97       	sbiw	r26, 0x00	; 0
    40e2:	81 f4       	brne	.+32     	; 0x4104 <free+0x3e>
    40e4:	20 81       	ld	r18, Z
    40e6:	31 81       	ldd	r19, Z+1	; 0x01
    40e8:	82 0f       	add	r24, r18
    40ea:	93 1f       	adc	r25, r19
    40ec:	20 91 9d 08 	lds	r18, 0x089D	; 0x80089d <__brkval>
    40f0:	30 91 9e 08 	lds	r19, 0x089E	; 0x80089e <__brkval+0x1>
    40f4:	28 17       	cp	r18, r24
    40f6:	39 07       	cpc	r19, r25
    40f8:	51 f5       	brne	.+84     	; 0x414e <free+0x88>
    40fa:	f0 93 9e 08 	sts	0x089E, r31	; 0x80089e <__brkval+0x1>
    40fe:	e0 93 9d 08 	sts	0x089D, r30	; 0x80089d <__brkval>
    4102:	67 c0       	rjmp	.+206    	; 0x41d2 <free+0x10c>
    4104:	ed 01       	movw	r28, r26
    4106:	20 e0       	ldi	r18, 0x00	; 0
    4108:	30 e0       	ldi	r19, 0x00	; 0
    410a:	ce 17       	cp	r28, r30
    410c:	df 07       	cpc	r29, r31
    410e:	40 f4       	brcc	.+16     	; 0x4120 <free+0x5a>
    4110:	4a 81       	ldd	r20, Y+2	; 0x02
    4112:	5b 81       	ldd	r21, Y+3	; 0x03
    4114:	9e 01       	movw	r18, r28
    4116:	41 15       	cp	r20, r1
    4118:	51 05       	cpc	r21, r1
    411a:	f1 f0       	breq	.+60     	; 0x4158 <free+0x92>
    411c:	ea 01       	movw	r28, r20
    411e:	f5 cf       	rjmp	.-22     	; 0x410a <free+0x44>
    4120:	d3 83       	std	Z+3, r29	; 0x03
    4122:	c2 83       	std	Z+2, r28	; 0x02
    4124:	40 81       	ld	r20, Z
    4126:	51 81       	ldd	r21, Z+1	; 0x01
    4128:	84 0f       	add	r24, r20
    412a:	95 1f       	adc	r25, r21
    412c:	c8 17       	cp	r28, r24
    412e:	d9 07       	cpc	r29, r25
    4130:	59 f4       	brne	.+22     	; 0x4148 <free+0x82>
    4132:	88 81       	ld	r24, Y
    4134:	99 81       	ldd	r25, Y+1	; 0x01
    4136:	84 0f       	add	r24, r20
    4138:	95 1f       	adc	r25, r21
    413a:	02 96       	adiw	r24, 0x02	; 2
    413c:	91 83       	std	Z+1, r25	; 0x01
    413e:	80 83       	st	Z, r24
    4140:	8a 81       	ldd	r24, Y+2	; 0x02
    4142:	9b 81       	ldd	r25, Y+3	; 0x03
    4144:	93 83       	std	Z+3, r25	; 0x03
    4146:	82 83       	std	Z+2, r24	; 0x02
    4148:	21 15       	cp	r18, r1
    414a:	31 05       	cpc	r19, r1
    414c:	29 f4       	brne	.+10     	; 0x4158 <free+0x92>
    414e:	f0 93 a0 08 	sts	0x08A0, r31	; 0x8008a0 <__flp+0x1>
    4152:	e0 93 9f 08 	sts	0x089F, r30	; 0x80089f <__flp>
    4156:	3d c0       	rjmp	.+122    	; 0x41d2 <free+0x10c>
    4158:	e9 01       	movw	r28, r18
    415a:	fb 83       	std	Y+3, r31	; 0x03
    415c:	ea 83       	std	Y+2, r30	; 0x02
    415e:	49 91       	ld	r20, Y+
    4160:	59 91       	ld	r21, Y+
    4162:	c4 0f       	add	r28, r20
    4164:	d5 1f       	adc	r29, r21
    4166:	ec 17       	cp	r30, r28
    4168:	fd 07       	cpc	r31, r29
    416a:	61 f4       	brne	.+24     	; 0x4184 <free+0xbe>
    416c:	80 81       	ld	r24, Z
    416e:	91 81       	ldd	r25, Z+1	; 0x01
    4170:	84 0f       	add	r24, r20
    4172:	95 1f       	adc	r25, r21
    4174:	02 96       	adiw	r24, 0x02	; 2
    4176:	e9 01       	movw	r28, r18
    4178:	99 83       	std	Y+1, r25	; 0x01
    417a:	88 83       	st	Y, r24
    417c:	82 81       	ldd	r24, Z+2	; 0x02
    417e:	93 81       	ldd	r25, Z+3	; 0x03
    4180:	9b 83       	std	Y+3, r25	; 0x03
    4182:	8a 83       	std	Y+2, r24	; 0x02
    4184:	e0 e0       	ldi	r30, 0x00	; 0
    4186:	f0 e0       	ldi	r31, 0x00	; 0
    4188:	12 96       	adiw	r26, 0x02	; 2
    418a:	8d 91       	ld	r24, X+
    418c:	9c 91       	ld	r25, X
    418e:	13 97       	sbiw	r26, 0x03	; 3
    4190:	00 97       	sbiw	r24, 0x00	; 0
    4192:	19 f0       	breq	.+6      	; 0x419a <free+0xd4>
    4194:	fd 01       	movw	r30, r26
    4196:	dc 01       	movw	r26, r24
    4198:	f7 cf       	rjmp	.-18     	; 0x4188 <free+0xc2>
    419a:	8d 91       	ld	r24, X+
    419c:	9c 91       	ld	r25, X
    419e:	11 97       	sbiw	r26, 0x01	; 1
    41a0:	9d 01       	movw	r18, r26
    41a2:	2e 5f       	subi	r18, 0xFE	; 254
    41a4:	3f 4f       	sbci	r19, 0xFF	; 255
    41a6:	82 0f       	add	r24, r18
    41a8:	93 1f       	adc	r25, r19
    41aa:	20 91 9d 08 	lds	r18, 0x089D	; 0x80089d <__brkval>
    41ae:	30 91 9e 08 	lds	r19, 0x089E	; 0x80089e <__brkval+0x1>
    41b2:	28 17       	cp	r18, r24
    41b4:	39 07       	cpc	r19, r25
    41b6:	69 f4       	brne	.+26     	; 0x41d2 <free+0x10c>
    41b8:	30 97       	sbiw	r30, 0x00	; 0
    41ba:	29 f4       	brne	.+10     	; 0x41c6 <free+0x100>
    41bc:	10 92 a0 08 	sts	0x08A0, r1	; 0x8008a0 <__flp+0x1>
    41c0:	10 92 9f 08 	sts	0x089F, r1	; 0x80089f <__flp>
    41c4:	02 c0       	rjmp	.+4      	; 0x41ca <free+0x104>
    41c6:	13 82       	std	Z+3, r1	; 0x03
    41c8:	12 82       	std	Z+2, r1	; 0x02
    41ca:	b0 93 9e 08 	sts	0x089E, r27	; 0x80089e <__brkval+0x1>
    41ce:	a0 93 9d 08 	sts	0x089D, r26	; 0x80089d <__brkval>
    41d2:	df 91       	pop	r29
    41d4:	cf 91       	pop	r28
    41d6:	08 95       	ret

000041d8 <abort>:
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	f8 94       	cli
    41de:	58 c3       	rjmp	.+1712   	; 0x4890 <_exit>

000041e0 <memcpy>:
    41e0:	fb 01       	movw	r30, r22
    41e2:	dc 01       	movw	r26, r24
    41e4:	02 c0       	rjmp	.+4      	; 0x41ea <memcpy+0xa>
    41e6:	01 90       	ld	r0, Z+
    41e8:	0d 92       	st	X+, r0
    41ea:	41 50       	subi	r20, 0x01	; 1
    41ec:	50 40       	sbci	r21, 0x00	; 0
    41ee:	d8 f7       	brcc	.-10     	; 0x41e6 <memcpy+0x6>
    41f0:	08 95       	ret

000041f2 <memset>:
    41f2:	dc 01       	movw	r26, r24
    41f4:	01 c0       	rjmp	.+2      	; 0x41f8 <memset+0x6>
    41f6:	6d 93       	st	X+, r22
    41f8:	41 50       	subi	r20, 0x01	; 1
    41fa:	50 40       	sbci	r21, 0x00	; 0
    41fc:	e0 f7       	brcc	.-8      	; 0x41f6 <memset+0x4>
    41fe:	08 95       	ret

00004200 <strcat>:
    4200:	fb 01       	movw	r30, r22
    4202:	dc 01       	movw	r26, r24
    4204:	0d 90       	ld	r0, X+
    4206:	00 20       	and	r0, r0
    4208:	e9 f7       	brne	.-6      	; 0x4204 <strcat+0x4>
    420a:	11 97       	sbiw	r26, 0x01	; 1
    420c:	01 90       	ld	r0, Z+
    420e:	0d 92       	st	X+, r0
    4210:	00 20       	and	r0, r0
    4212:	e1 f7       	brne	.-8      	; 0x420c <strcat+0xc>
    4214:	08 95       	ret

00004216 <strcpy>:
    4216:	fb 01       	movw	r30, r22
    4218:	dc 01       	movw	r26, r24
    421a:	01 90       	ld	r0, Z+
    421c:	0d 92       	st	X+, r0
    421e:	00 20       	and	r0, r0
    4220:	e1 f7       	brne	.-8      	; 0x421a <strcpy+0x4>
    4222:	08 95       	ret

00004224 <strncasecmp>:
    4224:	fb 01       	movw	r30, r22
    4226:	dc 01       	movw	r26, r24
    4228:	41 50       	subi	r20, 0x01	; 1
    422a:	50 40       	sbci	r21, 0x00	; 0
    422c:	88 f0       	brcs	.+34     	; 0x4250 <strncasecmp+0x2c>
    422e:	8d 91       	ld	r24, X+
    4230:	81 34       	cpi	r24, 0x41	; 65
    4232:	1c f0       	brlt	.+6      	; 0x423a <strncasecmp+0x16>
    4234:	8b 35       	cpi	r24, 0x5B	; 91
    4236:	0c f4       	brge	.+2      	; 0x423a <strncasecmp+0x16>
    4238:	80 5e       	subi	r24, 0xE0	; 224
    423a:	61 91       	ld	r22, Z+
    423c:	61 34       	cpi	r22, 0x41	; 65
    423e:	1c f0       	brlt	.+6      	; 0x4246 <strncasecmp+0x22>
    4240:	6b 35       	cpi	r22, 0x5B	; 91
    4242:	0c f4       	brge	.+2      	; 0x4246 <strncasecmp+0x22>
    4244:	60 5e       	subi	r22, 0xE0	; 224
    4246:	86 1b       	sub	r24, r22
    4248:	61 11       	cpse	r22, r1
    424a:	71 f3       	breq	.-36     	; 0x4228 <strncasecmp+0x4>
    424c:	99 0b       	sbc	r25, r25
    424e:	08 95       	ret
    4250:	88 1b       	sub	r24, r24
    4252:	fc cf       	rjmp	.-8      	; 0x424c <strncasecmp+0x28>

00004254 <printf>:
    4254:	cf 93       	push	r28
    4256:	df 93       	push	r29
    4258:	cd b7       	in	r28, 0x3d	; 61
    425a:	de b7       	in	r29, 0x3e	; 62
    425c:	ae 01       	movw	r20, r28
    425e:	4a 5f       	subi	r20, 0xFA	; 250
    4260:	5f 4f       	sbci	r21, 0xFF	; 255
    4262:	fa 01       	movw	r30, r20
    4264:	61 91       	ld	r22, Z+
    4266:	71 91       	ld	r23, Z+
    4268:	af 01       	movw	r20, r30
    426a:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <__iob+0x2>
    426e:	90 91 a4 08 	lds	r25, 0x08A4	; 0x8008a4 <__iob+0x3>
    4272:	61 d0       	rcall	.+194    	; 0x4336 <vfprintf>
    4274:	df 91       	pop	r29
    4276:	cf 91       	pop	r28
    4278:	08 95       	ret

0000427a <puts>:
    427a:	0f 93       	push	r16
    427c:	1f 93       	push	r17
    427e:	cf 93       	push	r28
    4280:	df 93       	push	r29
    4282:	e0 91 a3 08 	lds	r30, 0x08A3	; 0x8008a3 <__iob+0x2>
    4286:	f0 91 a4 08 	lds	r31, 0x08A4	; 0x8008a4 <__iob+0x3>
    428a:	23 81       	ldd	r18, Z+3	; 0x03
    428c:	21 ff       	sbrs	r18, 1
    428e:	1b c0       	rjmp	.+54     	; 0x42c6 <puts+0x4c>
    4290:	8c 01       	movw	r16, r24
    4292:	d0 e0       	ldi	r29, 0x00	; 0
    4294:	c0 e0       	ldi	r28, 0x00	; 0
    4296:	f8 01       	movw	r30, r16
    4298:	81 91       	ld	r24, Z+
    429a:	8f 01       	movw	r16, r30
    429c:	60 91 a3 08 	lds	r22, 0x08A3	; 0x8008a3 <__iob+0x2>
    42a0:	70 91 a4 08 	lds	r23, 0x08A4	; 0x8008a4 <__iob+0x3>
    42a4:	db 01       	movw	r26, r22
    42a6:	18 96       	adiw	r26, 0x08	; 8
    42a8:	ed 91       	ld	r30, X+
    42aa:	fc 91       	ld	r31, X
    42ac:	19 97       	sbiw	r26, 0x09	; 9
    42ae:	88 23       	and	r24, r24
    42b0:	31 f0       	breq	.+12     	; 0x42be <puts+0x44>
    42b2:	19 95       	eicall
    42b4:	89 2b       	or	r24, r25
    42b6:	79 f3       	breq	.-34     	; 0x4296 <puts+0x1c>
    42b8:	df ef       	ldi	r29, 0xFF	; 255
    42ba:	cf ef       	ldi	r28, 0xFF	; 255
    42bc:	ec cf       	rjmp	.-40     	; 0x4296 <puts+0x1c>
    42be:	8a e0       	ldi	r24, 0x0A	; 10
    42c0:	19 95       	eicall
    42c2:	89 2b       	or	r24, r25
    42c4:	19 f0       	breq	.+6      	; 0x42cc <puts+0x52>
    42c6:	8f ef       	ldi	r24, 0xFF	; 255
    42c8:	9f ef       	ldi	r25, 0xFF	; 255
    42ca:	02 c0       	rjmp	.+4      	; 0x42d0 <puts+0x56>
    42cc:	8d 2f       	mov	r24, r29
    42ce:	9c 2f       	mov	r25, r28
    42d0:	df 91       	pop	r29
    42d2:	cf 91       	pop	r28
    42d4:	1f 91       	pop	r17
    42d6:	0f 91       	pop	r16
    42d8:	08 95       	ret

000042da <sprintf>:
    42da:	0f 93       	push	r16
    42dc:	1f 93       	push	r17
    42de:	cf 93       	push	r28
    42e0:	df 93       	push	r29
    42e2:	cd b7       	in	r28, 0x3d	; 61
    42e4:	de b7       	in	r29, 0x3e	; 62
    42e6:	2e 97       	sbiw	r28, 0x0e	; 14
    42e8:	0f b6       	in	r0, 0x3f	; 63
    42ea:	f8 94       	cli
    42ec:	de bf       	out	0x3e, r29	; 62
    42ee:	0f be       	out	0x3f, r0	; 63
    42f0:	cd bf       	out	0x3d, r28	; 61
    42f2:	0e 89       	ldd	r16, Y+22	; 0x16
    42f4:	1f 89       	ldd	r17, Y+23	; 0x17
    42f6:	86 e0       	ldi	r24, 0x06	; 6
    42f8:	8c 83       	std	Y+4, r24	; 0x04
    42fa:	1a 83       	std	Y+2, r17	; 0x02
    42fc:	09 83       	std	Y+1, r16	; 0x01
    42fe:	8f ef       	ldi	r24, 0xFF	; 255
    4300:	9f e7       	ldi	r25, 0x7F	; 127
    4302:	9e 83       	std	Y+6, r25	; 0x06
    4304:	8d 83       	std	Y+5, r24	; 0x05
    4306:	ae 01       	movw	r20, r28
    4308:	46 5e       	subi	r20, 0xE6	; 230
    430a:	5f 4f       	sbci	r21, 0xFF	; 255
    430c:	68 8d       	ldd	r22, Y+24	; 0x18
    430e:	79 8d       	ldd	r23, Y+25	; 0x19
    4310:	ce 01       	movw	r24, r28
    4312:	01 96       	adiw	r24, 0x01	; 1
    4314:	10 d0       	rcall	.+32     	; 0x4336 <vfprintf>
    4316:	ef 81       	ldd	r30, Y+7	; 0x07
    4318:	f8 85       	ldd	r31, Y+8	; 0x08
    431a:	e0 0f       	add	r30, r16
    431c:	f1 1f       	adc	r31, r17
    431e:	10 82       	st	Z, r1
    4320:	2e 96       	adiw	r28, 0x0e	; 14
    4322:	0f b6       	in	r0, 0x3f	; 63
    4324:	f8 94       	cli
    4326:	de bf       	out	0x3e, r29	; 62
    4328:	0f be       	out	0x3f, r0	; 63
    432a:	cd bf       	out	0x3d, r28	; 61
    432c:	df 91       	pop	r29
    432e:	cf 91       	pop	r28
    4330:	1f 91       	pop	r17
    4332:	0f 91       	pop	r16
    4334:	08 95       	ret

00004336 <vfprintf>:
    4336:	2f 92       	push	r2
    4338:	3f 92       	push	r3
    433a:	4f 92       	push	r4
    433c:	5f 92       	push	r5
    433e:	6f 92       	push	r6
    4340:	7f 92       	push	r7
    4342:	8f 92       	push	r8
    4344:	9f 92       	push	r9
    4346:	af 92       	push	r10
    4348:	bf 92       	push	r11
    434a:	cf 92       	push	r12
    434c:	df 92       	push	r13
    434e:	ef 92       	push	r14
    4350:	ff 92       	push	r15
    4352:	0f 93       	push	r16
    4354:	1f 93       	push	r17
    4356:	cf 93       	push	r28
    4358:	df 93       	push	r29
    435a:	cd b7       	in	r28, 0x3d	; 61
    435c:	de b7       	in	r29, 0x3e	; 62
    435e:	2b 97       	sbiw	r28, 0x0b	; 11
    4360:	0f b6       	in	r0, 0x3f	; 63
    4362:	f8 94       	cli
    4364:	de bf       	out	0x3e, r29	; 62
    4366:	0f be       	out	0x3f, r0	; 63
    4368:	cd bf       	out	0x3d, r28	; 61
    436a:	6c 01       	movw	r12, r24
    436c:	7b 01       	movw	r14, r22
    436e:	8a 01       	movw	r16, r20
    4370:	fc 01       	movw	r30, r24
    4372:	17 82       	std	Z+7, r1	; 0x07
    4374:	16 82       	std	Z+6, r1	; 0x06
    4376:	83 81       	ldd	r24, Z+3	; 0x03
    4378:	81 ff       	sbrs	r24, 1
    437a:	bf c1       	rjmp	.+894    	; 0x46fa <vfprintf+0x3c4>
    437c:	ce 01       	movw	r24, r28
    437e:	01 96       	adiw	r24, 0x01	; 1
    4380:	3c 01       	movw	r6, r24
    4382:	f6 01       	movw	r30, r12
    4384:	93 81       	ldd	r25, Z+3	; 0x03
    4386:	f7 01       	movw	r30, r14
    4388:	93 fd       	sbrc	r25, 3
    438a:	85 91       	lpm	r24, Z+
    438c:	93 ff       	sbrs	r25, 3
    438e:	81 91       	ld	r24, Z+
    4390:	7f 01       	movw	r14, r30
    4392:	88 23       	and	r24, r24
    4394:	09 f4       	brne	.+2      	; 0x4398 <vfprintf+0x62>
    4396:	ad c1       	rjmp	.+858    	; 0x46f2 <vfprintf+0x3bc>
    4398:	85 32       	cpi	r24, 0x25	; 37
    439a:	39 f4       	brne	.+14     	; 0x43aa <vfprintf+0x74>
    439c:	93 fd       	sbrc	r25, 3
    439e:	85 91       	lpm	r24, Z+
    43a0:	93 ff       	sbrs	r25, 3
    43a2:	81 91       	ld	r24, Z+
    43a4:	7f 01       	movw	r14, r30
    43a6:	85 32       	cpi	r24, 0x25	; 37
    43a8:	21 f4       	brne	.+8      	; 0x43b2 <vfprintf+0x7c>
    43aa:	b6 01       	movw	r22, r12
    43ac:	90 e0       	ldi	r25, 0x00	; 0
    43ae:	d6 d1       	rcall	.+940    	; 0x475c <fputc>
    43b0:	e8 cf       	rjmp	.-48     	; 0x4382 <vfprintf+0x4c>
    43b2:	91 2c       	mov	r9, r1
    43b4:	21 2c       	mov	r2, r1
    43b6:	31 2c       	mov	r3, r1
    43b8:	ff e1       	ldi	r31, 0x1F	; 31
    43ba:	f3 15       	cp	r31, r3
    43bc:	d8 f0       	brcs	.+54     	; 0x43f4 <vfprintf+0xbe>
    43be:	8b 32       	cpi	r24, 0x2B	; 43
    43c0:	79 f0       	breq	.+30     	; 0x43e0 <vfprintf+0xaa>
    43c2:	38 f4       	brcc	.+14     	; 0x43d2 <vfprintf+0x9c>
    43c4:	80 32       	cpi	r24, 0x20	; 32
    43c6:	79 f0       	breq	.+30     	; 0x43e6 <vfprintf+0xb0>
    43c8:	83 32       	cpi	r24, 0x23	; 35
    43ca:	a1 f4       	brne	.+40     	; 0x43f4 <vfprintf+0xbe>
    43cc:	23 2d       	mov	r18, r3
    43ce:	20 61       	ori	r18, 0x10	; 16
    43d0:	1d c0       	rjmp	.+58     	; 0x440c <vfprintf+0xd6>
    43d2:	8d 32       	cpi	r24, 0x2D	; 45
    43d4:	61 f0       	breq	.+24     	; 0x43ee <vfprintf+0xb8>
    43d6:	80 33       	cpi	r24, 0x30	; 48
    43d8:	69 f4       	brne	.+26     	; 0x43f4 <vfprintf+0xbe>
    43da:	23 2d       	mov	r18, r3
    43dc:	21 60       	ori	r18, 0x01	; 1
    43de:	16 c0       	rjmp	.+44     	; 0x440c <vfprintf+0xd6>
    43e0:	83 2d       	mov	r24, r3
    43e2:	82 60       	ori	r24, 0x02	; 2
    43e4:	38 2e       	mov	r3, r24
    43e6:	e3 2d       	mov	r30, r3
    43e8:	e4 60       	ori	r30, 0x04	; 4
    43ea:	3e 2e       	mov	r3, r30
    43ec:	2a c0       	rjmp	.+84     	; 0x4442 <vfprintf+0x10c>
    43ee:	f3 2d       	mov	r31, r3
    43f0:	f8 60       	ori	r31, 0x08	; 8
    43f2:	1d c0       	rjmp	.+58     	; 0x442e <vfprintf+0xf8>
    43f4:	37 fc       	sbrc	r3, 7
    43f6:	2d c0       	rjmp	.+90     	; 0x4452 <vfprintf+0x11c>
    43f8:	20 ed       	ldi	r18, 0xD0	; 208
    43fa:	28 0f       	add	r18, r24
    43fc:	2a 30       	cpi	r18, 0x0A	; 10
    43fe:	40 f0       	brcs	.+16     	; 0x4410 <vfprintf+0xda>
    4400:	8e 32       	cpi	r24, 0x2E	; 46
    4402:	b9 f4       	brne	.+46     	; 0x4432 <vfprintf+0xfc>
    4404:	36 fc       	sbrc	r3, 6
    4406:	75 c1       	rjmp	.+746    	; 0x46f2 <vfprintf+0x3bc>
    4408:	23 2d       	mov	r18, r3
    440a:	20 64       	ori	r18, 0x40	; 64
    440c:	32 2e       	mov	r3, r18
    440e:	19 c0       	rjmp	.+50     	; 0x4442 <vfprintf+0x10c>
    4410:	36 fe       	sbrs	r3, 6
    4412:	06 c0       	rjmp	.+12     	; 0x4420 <vfprintf+0xea>
    4414:	8a e0       	ldi	r24, 0x0A	; 10
    4416:	98 9e       	mul	r9, r24
    4418:	20 0d       	add	r18, r0
    441a:	11 24       	eor	r1, r1
    441c:	92 2e       	mov	r9, r18
    441e:	11 c0       	rjmp	.+34     	; 0x4442 <vfprintf+0x10c>
    4420:	ea e0       	ldi	r30, 0x0A	; 10
    4422:	2e 9e       	mul	r2, r30
    4424:	20 0d       	add	r18, r0
    4426:	11 24       	eor	r1, r1
    4428:	22 2e       	mov	r2, r18
    442a:	f3 2d       	mov	r31, r3
    442c:	f0 62       	ori	r31, 0x20	; 32
    442e:	3f 2e       	mov	r3, r31
    4430:	08 c0       	rjmp	.+16     	; 0x4442 <vfprintf+0x10c>
    4432:	8c 36       	cpi	r24, 0x6C	; 108
    4434:	21 f4       	brne	.+8      	; 0x443e <vfprintf+0x108>
    4436:	83 2d       	mov	r24, r3
    4438:	80 68       	ori	r24, 0x80	; 128
    443a:	38 2e       	mov	r3, r24
    443c:	02 c0       	rjmp	.+4      	; 0x4442 <vfprintf+0x10c>
    443e:	88 36       	cpi	r24, 0x68	; 104
    4440:	41 f4       	brne	.+16     	; 0x4452 <vfprintf+0x11c>
    4442:	f7 01       	movw	r30, r14
    4444:	93 fd       	sbrc	r25, 3
    4446:	85 91       	lpm	r24, Z+
    4448:	93 ff       	sbrs	r25, 3
    444a:	81 91       	ld	r24, Z+
    444c:	7f 01       	movw	r14, r30
    444e:	81 11       	cpse	r24, r1
    4450:	b3 cf       	rjmp	.-154    	; 0x43b8 <vfprintf+0x82>
    4452:	98 2f       	mov	r25, r24
    4454:	9f 7d       	andi	r25, 0xDF	; 223
    4456:	95 54       	subi	r25, 0x45	; 69
    4458:	93 30       	cpi	r25, 0x03	; 3
    445a:	28 f4       	brcc	.+10     	; 0x4466 <vfprintf+0x130>
    445c:	0c 5f       	subi	r16, 0xFC	; 252
    445e:	1f 4f       	sbci	r17, 0xFF	; 255
    4460:	9f e3       	ldi	r25, 0x3F	; 63
    4462:	99 83       	std	Y+1, r25	; 0x01
    4464:	0d c0       	rjmp	.+26     	; 0x4480 <vfprintf+0x14a>
    4466:	83 36       	cpi	r24, 0x63	; 99
    4468:	31 f0       	breq	.+12     	; 0x4476 <vfprintf+0x140>
    446a:	83 37       	cpi	r24, 0x73	; 115
    446c:	71 f0       	breq	.+28     	; 0x448a <vfprintf+0x154>
    446e:	83 35       	cpi	r24, 0x53	; 83
    4470:	09 f0       	breq	.+2      	; 0x4474 <vfprintf+0x13e>
    4472:	55 c0       	rjmp	.+170    	; 0x451e <vfprintf+0x1e8>
    4474:	20 c0       	rjmp	.+64     	; 0x44b6 <vfprintf+0x180>
    4476:	f8 01       	movw	r30, r16
    4478:	80 81       	ld	r24, Z
    447a:	89 83       	std	Y+1, r24	; 0x01
    447c:	0e 5f       	subi	r16, 0xFE	; 254
    447e:	1f 4f       	sbci	r17, 0xFF	; 255
    4480:	88 24       	eor	r8, r8
    4482:	83 94       	inc	r8
    4484:	91 2c       	mov	r9, r1
    4486:	53 01       	movw	r10, r6
    4488:	12 c0       	rjmp	.+36     	; 0x44ae <vfprintf+0x178>
    448a:	28 01       	movw	r4, r16
    448c:	f2 e0       	ldi	r31, 0x02	; 2
    448e:	4f 0e       	add	r4, r31
    4490:	51 1c       	adc	r5, r1
    4492:	f8 01       	movw	r30, r16
    4494:	a0 80       	ld	r10, Z
    4496:	b1 80       	ldd	r11, Z+1	; 0x01
    4498:	36 fe       	sbrs	r3, 6
    449a:	03 c0       	rjmp	.+6      	; 0x44a2 <vfprintf+0x16c>
    449c:	69 2d       	mov	r22, r9
    449e:	70 e0       	ldi	r23, 0x00	; 0
    44a0:	02 c0       	rjmp	.+4      	; 0x44a6 <vfprintf+0x170>
    44a2:	6f ef       	ldi	r22, 0xFF	; 255
    44a4:	7f ef       	ldi	r23, 0xFF	; 255
    44a6:	c5 01       	movw	r24, r10
    44a8:	4e d1       	rcall	.+668    	; 0x4746 <strnlen>
    44aa:	4c 01       	movw	r8, r24
    44ac:	82 01       	movw	r16, r4
    44ae:	f3 2d       	mov	r31, r3
    44b0:	ff 77       	andi	r31, 0x7F	; 127
    44b2:	3f 2e       	mov	r3, r31
    44b4:	15 c0       	rjmp	.+42     	; 0x44e0 <vfprintf+0x1aa>
    44b6:	28 01       	movw	r4, r16
    44b8:	22 e0       	ldi	r18, 0x02	; 2
    44ba:	42 0e       	add	r4, r18
    44bc:	51 1c       	adc	r5, r1
    44be:	f8 01       	movw	r30, r16
    44c0:	a0 80       	ld	r10, Z
    44c2:	b1 80       	ldd	r11, Z+1	; 0x01
    44c4:	36 fe       	sbrs	r3, 6
    44c6:	03 c0       	rjmp	.+6      	; 0x44ce <vfprintf+0x198>
    44c8:	69 2d       	mov	r22, r9
    44ca:	70 e0       	ldi	r23, 0x00	; 0
    44cc:	02 c0       	rjmp	.+4      	; 0x44d2 <vfprintf+0x19c>
    44ce:	6f ef       	ldi	r22, 0xFF	; 255
    44d0:	7f ef       	ldi	r23, 0xFF	; 255
    44d2:	c5 01       	movw	r24, r10
    44d4:	2d d1       	rcall	.+602    	; 0x4730 <strnlen_P>
    44d6:	4c 01       	movw	r8, r24
    44d8:	f3 2d       	mov	r31, r3
    44da:	f0 68       	ori	r31, 0x80	; 128
    44dc:	3f 2e       	mov	r3, r31
    44de:	82 01       	movw	r16, r4
    44e0:	33 fc       	sbrc	r3, 3
    44e2:	19 c0       	rjmp	.+50     	; 0x4516 <vfprintf+0x1e0>
    44e4:	82 2d       	mov	r24, r2
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	88 16       	cp	r8, r24
    44ea:	99 06       	cpc	r9, r25
    44ec:	a0 f4       	brcc	.+40     	; 0x4516 <vfprintf+0x1e0>
    44ee:	b6 01       	movw	r22, r12
    44f0:	80 e2       	ldi	r24, 0x20	; 32
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	33 d1       	rcall	.+614    	; 0x475c <fputc>
    44f6:	2a 94       	dec	r2
    44f8:	f5 cf       	rjmp	.-22     	; 0x44e4 <vfprintf+0x1ae>
    44fa:	f5 01       	movw	r30, r10
    44fc:	37 fc       	sbrc	r3, 7
    44fe:	85 91       	lpm	r24, Z+
    4500:	37 fe       	sbrs	r3, 7
    4502:	81 91       	ld	r24, Z+
    4504:	5f 01       	movw	r10, r30
    4506:	b6 01       	movw	r22, r12
    4508:	90 e0       	ldi	r25, 0x00	; 0
    450a:	28 d1       	rcall	.+592    	; 0x475c <fputc>
    450c:	21 10       	cpse	r2, r1
    450e:	2a 94       	dec	r2
    4510:	21 e0       	ldi	r18, 0x01	; 1
    4512:	82 1a       	sub	r8, r18
    4514:	91 08       	sbc	r9, r1
    4516:	81 14       	cp	r8, r1
    4518:	91 04       	cpc	r9, r1
    451a:	79 f7       	brne	.-34     	; 0x44fa <vfprintf+0x1c4>
    451c:	e1 c0       	rjmp	.+450    	; 0x46e0 <vfprintf+0x3aa>
    451e:	84 36       	cpi	r24, 0x64	; 100
    4520:	11 f0       	breq	.+4      	; 0x4526 <vfprintf+0x1f0>
    4522:	89 36       	cpi	r24, 0x69	; 105
    4524:	39 f5       	brne	.+78     	; 0x4574 <vfprintf+0x23e>
    4526:	f8 01       	movw	r30, r16
    4528:	37 fe       	sbrs	r3, 7
    452a:	07 c0       	rjmp	.+14     	; 0x453a <vfprintf+0x204>
    452c:	60 81       	ld	r22, Z
    452e:	71 81       	ldd	r23, Z+1	; 0x01
    4530:	82 81       	ldd	r24, Z+2	; 0x02
    4532:	93 81       	ldd	r25, Z+3	; 0x03
    4534:	0c 5f       	subi	r16, 0xFC	; 252
    4536:	1f 4f       	sbci	r17, 0xFF	; 255
    4538:	08 c0       	rjmp	.+16     	; 0x454a <vfprintf+0x214>
    453a:	60 81       	ld	r22, Z
    453c:	71 81       	ldd	r23, Z+1	; 0x01
    453e:	07 2e       	mov	r0, r23
    4540:	00 0c       	add	r0, r0
    4542:	88 0b       	sbc	r24, r24
    4544:	99 0b       	sbc	r25, r25
    4546:	0e 5f       	subi	r16, 0xFE	; 254
    4548:	1f 4f       	sbci	r17, 0xFF	; 255
    454a:	f3 2d       	mov	r31, r3
    454c:	ff 76       	andi	r31, 0x6F	; 111
    454e:	3f 2e       	mov	r3, r31
    4550:	97 ff       	sbrs	r25, 7
    4552:	09 c0       	rjmp	.+18     	; 0x4566 <vfprintf+0x230>
    4554:	90 95       	com	r25
    4556:	80 95       	com	r24
    4558:	70 95       	com	r23
    455a:	61 95       	neg	r22
    455c:	7f 4f       	sbci	r23, 0xFF	; 255
    455e:	8f 4f       	sbci	r24, 0xFF	; 255
    4560:	9f 4f       	sbci	r25, 0xFF	; 255
    4562:	f0 68       	ori	r31, 0x80	; 128
    4564:	3f 2e       	mov	r3, r31
    4566:	2a e0       	ldi	r18, 0x0A	; 10
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	a3 01       	movw	r20, r6
    456c:	33 d1       	rcall	.+614    	; 0x47d4 <__ultoa_invert>
    456e:	88 2e       	mov	r8, r24
    4570:	86 18       	sub	r8, r6
    4572:	44 c0       	rjmp	.+136    	; 0x45fc <vfprintf+0x2c6>
    4574:	85 37       	cpi	r24, 0x75	; 117
    4576:	31 f4       	brne	.+12     	; 0x4584 <vfprintf+0x24e>
    4578:	23 2d       	mov	r18, r3
    457a:	2f 7e       	andi	r18, 0xEF	; 239
    457c:	b2 2e       	mov	r11, r18
    457e:	2a e0       	ldi	r18, 0x0A	; 10
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	25 c0       	rjmp	.+74     	; 0x45ce <vfprintf+0x298>
    4584:	93 2d       	mov	r25, r3
    4586:	99 7f       	andi	r25, 0xF9	; 249
    4588:	b9 2e       	mov	r11, r25
    458a:	8f 36       	cpi	r24, 0x6F	; 111
    458c:	c1 f0       	breq	.+48     	; 0x45be <vfprintf+0x288>
    458e:	18 f4       	brcc	.+6      	; 0x4596 <vfprintf+0x260>
    4590:	88 35       	cpi	r24, 0x58	; 88
    4592:	79 f0       	breq	.+30     	; 0x45b2 <vfprintf+0x27c>
    4594:	ae c0       	rjmp	.+348    	; 0x46f2 <vfprintf+0x3bc>
    4596:	80 37       	cpi	r24, 0x70	; 112
    4598:	19 f0       	breq	.+6      	; 0x45a0 <vfprintf+0x26a>
    459a:	88 37       	cpi	r24, 0x78	; 120
    459c:	21 f0       	breq	.+8      	; 0x45a6 <vfprintf+0x270>
    459e:	a9 c0       	rjmp	.+338    	; 0x46f2 <vfprintf+0x3bc>
    45a0:	e9 2f       	mov	r30, r25
    45a2:	e0 61       	ori	r30, 0x10	; 16
    45a4:	be 2e       	mov	r11, r30
    45a6:	b4 fe       	sbrs	r11, 4
    45a8:	0d c0       	rjmp	.+26     	; 0x45c4 <vfprintf+0x28e>
    45aa:	fb 2d       	mov	r31, r11
    45ac:	f4 60       	ori	r31, 0x04	; 4
    45ae:	bf 2e       	mov	r11, r31
    45b0:	09 c0       	rjmp	.+18     	; 0x45c4 <vfprintf+0x28e>
    45b2:	34 fe       	sbrs	r3, 4
    45b4:	0a c0       	rjmp	.+20     	; 0x45ca <vfprintf+0x294>
    45b6:	29 2f       	mov	r18, r25
    45b8:	26 60       	ori	r18, 0x06	; 6
    45ba:	b2 2e       	mov	r11, r18
    45bc:	06 c0       	rjmp	.+12     	; 0x45ca <vfprintf+0x294>
    45be:	28 e0       	ldi	r18, 0x08	; 8
    45c0:	30 e0       	ldi	r19, 0x00	; 0
    45c2:	05 c0       	rjmp	.+10     	; 0x45ce <vfprintf+0x298>
    45c4:	20 e1       	ldi	r18, 0x10	; 16
    45c6:	30 e0       	ldi	r19, 0x00	; 0
    45c8:	02 c0       	rjmp	.+4      	; 0x45ce <vfprintf+0x298>
    45ca:	20 e1       	ldi	r18, 0x10	; 16
    45cc:	32 e0       	ldi	r19, 0x02	; 2
    45ce:	f8 01       	movw	r30, r16
    45d0:	b7 fe       	sbrs	r11, 7
    45d2:	07 c0       	rjmp	.+14     	; 0x45e2 <vfprintf+0x2ac>
    45d4:	60 81       	ld	r22, Z
    45d6:	71 81       	ldd	r23, Z+1	; 0x01
    45d8:	82 81       	ldd	r24, Z+2	; 0x02
    45da:	93 81       	ldd	r25, Z+3	; 0x03
    45dc:	0c 5f       	subi	r16, 0xFC	; 252
    45de:	1f 4f       	sbci	r17, 0xFF	; 255
    45e0:	06 c0       	rjmp	.+12     	; 0x45ee <vfprintf+0x2b8>
    45e2:	60 81       	ld	r22, Z
    45e4:	71 81       	ldd	r23, Z+1	; 0x01
    45e6:	80 e0       	ldi	r24, 0x00	; 0
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	0e 5f       	subi	r16, 0xFE	; 254
    45ec:	1f 4f       	sbci	r17, 0xFF	; 255
    45ee:	a3 01       	movw	r20, r6
    45f0:	f1 d0       	rcall	.+482    	; 0x47d4 <__ultoa_invert>
    45f2:	88 2e       	mov	r8, r24
    45f4:	86 18       	sub	r8, r6
    45f6:	fb 2d       	mov	r31, r11
    45f8:	ff 77       	andi	r31, 0x7F	; 127
    45fa:	3f 2e       	mov	r3, r31
    45fc:	36 fe       	sbrs	r3, 6
    45fe:	0d c0       	rjmp	.+26     	; 0x461a <vfprintf+0x2e4>
    4600:	23 2d       	mov	r18, r3
    4602:	2e 7f       	andi	r18, 0xFE	; 254
    4604:	a2 2e       	mov	r10, r18
    4606:	89 14       	cp	r8, r9
    4608:	58 f4       	brcc	.+22     	; 0x4620 <vfprintf+0x2ea>
    460a:	34 fe       	sbrs	r3, 4
    460c:	0b c0       	rjmp	.+22     	; 0x4624 <vfprintf+0x2ee>
    460e:	32 fc       	sbrc	r3, 2
    4610:	09 c0       	rjmp	.+18     	; 0x4624 <vfprintf+0x2ee>
    4612:	83 2d       	mov	r24, r3
    4614:	8e 7e       	andi	r24, 0xEE	; 238
    4616:	a8 2e       	mov	r10, r24
    4618:	05 c0       	rjmp	.+10     	; 0x4624 <vfprintf+0x2ee>
    461a:	b8 2c       	mov	r11, r8
    461c:	a3 2c       	mov	r10, r3
    461e:	03 c0       	rjmp	.+6      	; 0x4626 <vfprintf+0x2f0>
    4620:	b8 2c       	mov	r11, r8
    4622:	01 c0       	rjmp	.+2      	; 0x4626 <vfprintf+0x2f0>
    4624:	b9 2c       	mov	r11, r9
    4626:	a4 fe       	sbrs	r10, 4
    4628:	0f c0       	rjmp	.+30     	; 0x4648 <vfprintf+0x312>
    462a:	fe 01       	movw	r30, r28
    462c:	e8 0d       	add	r30, r8
    462e:	f1 1d       	adc	r31, r1
    4630:	80 81       	ld	r24, Z
    4632:	80 33       	cpi	r24, 0x30	; 48
    4634:	21 f4       	brne	.+8      	; 0x463e <vfprintf+0x308>
    4636:	9a 2d       	mov	r25, r10
    4638:	99 7e       	andi	r25, 0xE9	; 233
    463a:	a9 2e       	mov	r10, r25
    463c:	09 c0       	rjmp	.+18     	; 0x4650 <vfprintf+0x31a>
    463e:	a2 fe       	sbrs	r10, 2
    4640:	06 c0       	rjmp	.+12     	; 0x464e <vfprintf+0x318>
    4642:	b3 94       	inc	r11
    4644:	b3 94       	inc	r11
    4646:	04 c0       	rjmp	.+8      	; 0x4650 <vfprintf+0x31a>
    4648:	8a 2d       	mov	r24, r10
    464a:	86 78       	andi	r24, 0x86	; 134
    464c:	09 f0       	breq	.+2      	; 0x4650 <vfprintf+0x31a>
    464e:	b3 94       	inc	r11
    4650:	a3 fc       	sbrc	r10, 3
    4652:	10 c0       	rjmp	.+32     	; 0x4674 <vfprintf+0x33e>
    4654:	a0 fe       	sbrs	r10, 0
    4656:	06 c0       	rjmp	.+12     	; 0x4664 <vfprintf+0x32e>
    4658:	b2 14       	cp	r11, r2
    465a:	80 f4       	brcc	.+32     	; 0x467c <vfprintf+0x346>
    465c:	28 0c       	add	r2, r8
    465e:	92 2c       	mov	r9, r2
    4660:	9b 18       	sub	r9, r11
    4662:	0d c0       	rjmp	.+26     	; 0x467e <vfprintf+0x348>
    4664:	b2 14       	cp	r11, r2
    4666:	58 f4       	brcc	.+22     	; 0x467e <vfprintf+0x348>
    4668:	b6 01       	movw	r22, r12
    466a:	80 e2       	ldi	r24, 0x20	; 32
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	76 d0       	rcall	.+236    	; 0x475c <fputc>
    4670:	b3 94       	inc	r11
    4672:	f8 cf       	rjmp	.-16     	; 0x4664 <vfprintf+0x32e>
    4674:	b2 14       	cp	r11, r2
    4676:	18 f4       	brcc	.+6      	; 0x467e <vfprintf+0x348>
    4678:	2b 18       	sub	r2, r11
    467a:	02 c0       	rjmp	.+4      	; 0x4680 <vfprintf+0x34a>
    467c:	98 2c       	mov	r9, r8
    467e:	21 2c       	mov	r2, r1
    4680:	a4 fe       	sbrs	r10, 4
    4682:	0f c0       	rjmp	.+30     	; 0x46a2 <vfprintf+0x36c>
    4684:	b6 01       	movw	r22, r12
    4686:	80 e3       	ldi	r24, 0x30	; 48
    4688:	90 e0       	ldi	r25, 0x00	; 0
    468a:	68 d0       	rcall	.+208    	; 0x475c <fputc>
    468c:	a2 fe       	sbrs	r10, 2
    468e:	16 c0       	rjmp	.+44     	; 0x46bc <vfprintf+0x386>
    4690:	a1 fc       	sbrc	r10, 1
    4692:	03 c0       	rjmp	.+6      	; 0x469a <vfprintf+0x364>
    4694:	88 e7       	ldi	r24, 0x78	; 120
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	02 c0       	rjmp	.+4      	; 0x469e <vfprintf+0x368>
    469a:	88 e5       	ldi	r24, 0x58	; 88
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	b6 01       	movw	r22, r12
    46a0:	0c c0       	rjmp	.+24     	; 0x46ba <vfprintf+0x384>
    46a2:	8a 2d       	mov	r24, r10
    46a4:	86 78       	andi	r24, 0x86	; 134
    46a6:	51 f0       	breq	.+20     	; 0x46bc <vfprintf+0x386>
    46a8:	a1 fe       	sbrs	r10, 1
    46aa:	02 c0       	rjmp	.+4      	; 0x46b0 <vfprintf+0x37a>
    46ac:	8b e2       	ldi	r24, 0x2B	; 43
    46ae:	01 c0       	rjmp	.+2      	; 0x46b2 <vfprintf+0x37c>
    46b0:	80 e2       	ldi	r24, 0x20	; 32
    46b2:	a7 fc       	sbrc	r10, 7
    46b4:	8d e2       	ldi	r24, 0x2D	; 45
    46b6:	b6 01       	movw	r22, r12
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	50 d0       	rcall	.+160    	; 0x475c <fputc>
    46bc:	89 14       	cp	r8, r9
    46be:	30 f4       	brcc	.+12     	; 0x46cc <vfprintf+0x396>
    46c0:	b6 01       	movw	r22, r12
    46c2:	80 e3       	ldi	r24, 0x30	; 48
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	4a d0       	rcall	.+148    	; 0x475c <fputc>
    46c8:	9a 94       	dec	r9
    46ca:	f8 cf       	rjmp	.-16     	; 0x46bc <vfprintf+0x386>
    46cc:	8a 94       	dec	r8
    46ce:	f3 01       	movw	r30, r6
    46d0:	e8 0d       	add	r30, r8
    46d2:	f1 1d       	adc	r31, r1
    46d4:	80 81       	ld	r24, Z
    46d6:	b6 01       	movw	r22, r12
    46d8:	90 e0       	ldi	r25, 0x00	; 0
    46da:	40 d0       	rcall	.+128    	; 0x475c <fputc>
    46dc:	81 10       	cpse	r8, r1
    46de:	f6 cf       	rjmp	.-20     	; 0x46cc <vfprintf+0x396>
    46e0:	22 20       	and	r2, r2
    46e2:	09 f4       	brne	.+2      	; 0x46e6 <vfprintf+0x3b0>
    46e4:	4e ce       	rjmp	.-868    	; 0x4382 <vfprintf+0x4c>
    46e6:	b6 01       	movw	r22, r12
    46e8:	80 e2       	ldi	r24, 0x20	; 32
    46ea:	90 e0       	ldi	r25, 0x00	; 0
    46ec:	37 d0       	rcall	.+110    	; 0x475c <fputc>
    46ee:	2a 94       	dec	r2
    46f0:	f7 cf       	rjmp	.-18     	; 0x46e0 <vfprintf+0x3aa>
    46f2:	f6 01       	movw	r30, r12
    46f4:	86 81       	ldd	r24, Z+6	; 0x06
    46f6:	97 81       	ldd	r25, Z+7	; 0x07
    46f8:	02 c0       	rjmp	.+4      	; 0x46fe <vfprintf+0x3c8>
    46fa:	8f ef       	ldi	r24, 0xFF	; 255
    46fc:	9f ef       	ldi	r25, 0xFF	; 255
    46fe:	2b 96       	adiw	r28, 0x0b	; 11
    4700:	0f b6       	in	r0, 0x3f	; 63
    4702:	f8 94       	cli
    4704:	de bf       	out	0x3e, r29	; 62
    4706:	0f be       	out	0x3f, r0	; 63
    4708:	cd bf       	out	0x3d, r28	; 61
    470a:	df 91       	pop	r29
    470c:	cf 91       	pop	r28
    470e:	1f 91       	pop	r17
    4710:	0f 91       	pop	r16
    4712:	ff 90       	pop	r15
    4714:	ef 90       	pop	r14
    4716:	df 90       	pop	r13
    4718:	cf 90       	pop	r12
    471a:	bf 90       	pop	r11
    471c:	af 90       	pop	r10
    471e:	9f 90       	pop	r9
    4720:	8f 90       	pop	r8
    4722:	7f 90       	pop	r7
    4724:	6f 90       	pop	r6
    4726:	5f 90       	pop	r5
    4728:	4f 90       	pop	r4
    472a:	3f 90       	pop	r3
    472c:	2f 90       	pop	r2
    472e:	08 95       	ret

00004730 <strnlen_P>:
    4730:	fc 01       	movw	r30, r24
    4732:	05 90       	lpm	r0, Z+
    4734:	61 50       	subi	r22, 0x01	; 1
    4736:	70 40       	sbci	r23, 0x00	; 0
    4738:	01 10       	cpse	r0, r1
    473a:	d8 f7       	brcc	.-10     	; 0x4732 <strnlen_P+0x2>
    473c:	80 95       	com	r24
    473e:	90 95       	com	r25
    4740:	8e 0f       	add	r24, r30
    4742:	9f 1f       	adc	r25, r31
    4744:	08 95       	ret

00004746 <strnlen>:
    4746:	fc 01       	movw	r30, r24
    4748:	61 50       	subi	r22, 0x01	; 1
    474a:	70 40       	sbci	r23, 0x00	; 0
    474c:	01 90       	ld	r0, Z+
    474e:	01 10       	cpse	r0, r1
    4750:	d8 f7       	brcc	.-10     	; 0x4748 <strnlen+0x2>
    4752:	80 95       	com	r24
    4754:	90 95       	com	r25
    4756:	8e 0f       	add	r24, r30
    4758:	9f 1f       	adc	r25, r31
    475a:	08 95       	ret

0000475c <fputc>:
    475c:	0f 93       	push	r16
    475e:	1f 93       	push	r17
    4760:	cf 93       	push	r28
    4762:	df 93       	push	r29
    4764:	fb 01       	movw	r30, r22
    4766:	23 81       	ldd	r18, Z+3	; 0x03
    4768:	21 fd       	sbrc	r18, 1
    476a:	03 c0       	rjmp	.+6      	; 0x4772 <fputc+0x16>
    476c:	8f ef       	ldi	r24, 0xFF	; 255
    476e:	9f ef       	ldi	r25, 0xFF	; 255
    4770:	2c c0       	rjmp	.+88     	; 0x47ca <fputc+0x6e>
    4772:	22 ff       	sbrs	r18, 2
    4774:	16 c0       	rjmp	.+44     	; 0x47a2 <fputc+0x46>
    4776:	46 81       	ldd	r20, Z+6	; 0x06
    4778:	57 81       	ldd	r21, Z+7	; 0x07
    477a:	24 81       	ldd	r18, Z+4	; 0x04
    477c:	35 81       	ldd	r19, Z+5	; 0x05
    477e:	42 17       	cp	r20, r18
    4780:	53 07       	cpc	r21, r19
    4782:	44 f4       	brge	.+16     	; 0x4794 <fputc+0x38>
    4784:	a0 81       	ld	r26, Z
    4786:	b1 81       	ldd	r27, Z+1	; 0x01
    4788:	9d 01       	movw	r18, r26
    478a:	2f 5f       	subi	r18, 0xFF	; 255
    478c:	3f 4f       	sbci	r19, 0xFF	; 255
    478e:	31 83       	std	Z+1, r19	; 0x01
    4790:	20 83       	st	Z, r18
    4792:	8c 93       	st	X, r24
    4794:	26 81       	ldd	r18, Z+6	; 0x06
    4796:	37 81       	ldd	r19, Z+7	; 0x07
    4798:	2f 5f       	subi	r18, 0xFF	; 255
    479a:	3f 4f       	sbci	r19, 0xFF	; 255
    479c:	37 83       	std	Z+7, r19	; 0x07
    479e:	26 83       	std	Z+6, r18	; 0x06
    47a0:	14 c0       	rjmp	.+40     	; 0x47ca <fputc+0x6e>
    47a2:	8b 01       	movw	r16, r22
    47a4:	ec 01       	movw	r28, r24
    47a6:	fb 01       	movw	r30, r22
    47a8:	00 84       	ldd	r0, Z+8	; 0x08
    47aa:	f1 85       	ldd	r31, Z+9	; 0x09
    47ac:	e0 2d       	mov	r30, r0
    47ae:	19 95       	eicall
    47b0:	89 2b       	or	r24, r25
    47b2:	e1 f6       	brne	.-72     	; 0x476c <fputc+0x10>
    47b4:	d8 01       	movw	r26, r16
    47b6:	16 96       	adiw	r26, 0x06	; 6
    47b8:	8d 91       	ld	r24, X+
    47ba:	9c 91       	ld	r25, X
    47bc:	17 97       	sbiw	r26, 0x07	; 7
    47be:	01 96       	adiw	r24, 0x01	; 1
    47c0:	17 96       	adiw	r26, 0x07	; 7
    47c2:	9c 93       	st	X, r25
    47c4:	8e 93       	st	-X, r24
    47c6:	16 97       	sbiw	r26, 0x06	; 6
    47c8:	ce 01       	movw	r24, r28
    47ca:	df 91       	pop	r29
    47cc:	cf 91       	pop	r28
    47ce:	1f 91       	pop	r17
    47d0:	0f 91       	pop	r16
    47d2:	08 95       	ret

000047d4 <__ultoa_invert>:
    47d4:	fa 01       	movw	r30, r20
    47d6:	aa 27       	eor	r26, r26
    47d8:	28 30       	cpi	r18, 0x08	; 8
    47da:	51 f1       	breq	.+84     	; 0x4830 <__ultoa_invert+0x5c>
    47dc:	20 31       	cpi	r18, 0x10	; 16
    47de:	81 f1       	breq	.+96     	; 0x4840 <__ultoa_invert+0x6c>
    47e0:	e8 94       	clt
    47e2:	6f 93       	push	r22
    47e4:	6e 7f       	andi	r22, 0xFE	; 254
    47e6:	6e 5f       	subi	r22, 0xFE	; 254
    47e8:	7f 4f       	sbci	r23, 0xFF	; 255
    47ea:	8f 4f       	sbci	r24, 0xFF	; 255
    47ec:	9f 4f       	sbci	r25, 0xFF	; 255
    47ee:	af 4f       	sbci	r26, 0xFF	; 255
    47f0:	b1 e0       	ldi	r27, 0x01	; 1
    47f2:	3e d0       	rcall	.+124    	; 0x4870 <__ultoa_invert+0x9c>
    47f4:	b4 e0       	ldi	r27, 0x04	; 4
    47f6:	3c d0       	rcall	.+120    	; 0x4870 <__ultoa_invert+0x9c>
    47f8:	67 0f       	add	r22, r23
    47fa:	78 1f       	adc	r23, r24
    47fc:	89 1f       	adc	r24, r25
    47fe:	9a 1f       	adc	r25, r26
    4800:	a1 1d       	adc	r26, r1
    4802:	68 0f       	add	r22, r24
    4804:	79 1f       	adc	r23, r25
    4806:	8a 1f       	adc	r24, r26
    4808:	91 1d       	adc	r25, r1
    480a:	a1 1d       	adc	r26, r1
    480c:	6a 0f       	add	r22, r26
    480e:	71 1d       	adc	r23, r1
    4810:	81 1d       	adc	r24, r1
    4812:	91 1d       	adc	r25, r1
    4814:	a1 1d       	adc	r26, r1
    4816:	20 d0       	rcall	.+64     	; 0x4858 <__ultoa_invert+0x84>
    4818:	09 f4       	brne	.+2      	; 0x481c <__ultoa_invert+0x48>
    481a:	68 94       	set
    481c:	3f 91       	pop	r19
    481e:	2a e0       	ldi	r18, 0x0A	; 10
    4820:	26 9f       	mul	r18, r22
    4822:	11 24       	eor	r1, r1
    4824:	30 19       	sub	r19, r0
    4826:	30 5d       	subi	r19, 0xD0	; 208
    4828:	31 93       	st	Z+, r19
    482a:	de f6       	brtc	.-74     	; 0x47e2 <__ultoa_invert+0xe>
    482c:	cf 01       	movw	r24, r30
    482e:	08 95       	ret
    4830:	46 2f       	mov	r20, r22
    4832:	47 70       	andi	r20, 0x07	; 7
    4834:	40 5d       	subi	r20, 0xD0	; 208
    4836:	41 93       	st	Z+, r20
    4838:	b3 e0       	ldi	r27, 0x03	; 3
    483a:	0f d0       	rcall	.+30     	; 0x485a <__ultoa_invert+0x86>
    483c:	c9 f7       	brne	.-14     	; 0x4830 <__ultoa_invert+0x5c>
    483e:	f6 cf       	rjmp	.-20     	; 0x482c <__ultoa_invert+0x58>
    4840:	46 2f       	mov	r20, r22
    4842:	4f 70       	andi	r20, 0x0F	; 15
    4844:	40 5d       	subi	r20, 0xD0	; 208
    4846:	4a 33       	cpi	r20, 0x3A	; 58
    4848:	18 f0       	brcs	.+6      	; 0x4850 <__ultoa_invert+0x7c>
    484a:	49 5d       	subi	r20, 0xD9	; 217
    484c:	31 fd       	sbrc	r19, 1
    484e:	40 52       	subi	r20, 0x20	; 32
    4850:	41 93       	st	Z+, r20
    4852:	02 d0       	rcall	.+4      	; 0x4858 <__ultoa_invert+0x84>
    4854:	a9 f7       	brne	.-22     	; 0x4840 <__ultoa_invert+0x6c>
    4856:	ea cf       	rjmp	.-44     	; 0x482c <__ultoa_invert+0x58>
    4858:	b4 e0       	ldi	r27, 0x04	; 4
    485a:	a6 95       	lsr	r26
    485c:	97 95       	ror	r25
    485e:	87 95       	ror	r24
    4860:	77 95       	ror	r23
    4862:	67 95       	ror	r22
    4864:	ba 95       	dec	r27
    4866:	c9 f7       	brne	.-14     	; 0x485a <__ultoa_invert+0x86>
    4868:	00 97       	sbiw	r24, 0x00	; 0
    486a:	61 05       	cpc	r22, r1
    486c:	71 05       	cpc	r23, r1
    486e:	08 95       	ret
    4870:	9b 01       	movw	r18, r22
    4872:	ac 01       	movw	r20, r24
    4874:	0a 2e       	mov	r0, r26
    4876:	06 94       	lsr	r0
    4878:	57 95       	ror	r21
    487a:	47 95       	ror	r20
    487c:	37 95       	ror	r19
    487e:	27 95       	ror	r18
    4880:	ba 95       	dec	r27
    4882:	c9 f7       	brne	.-14     	; 0x4876 <__ultoa_invert+0xa2>
    4884:	62 0f       	add	r22, r18
    4886:	73 1f       	adc	r23, r19
    4888:	84 1f       	adc	r24, r20
    488a:	95 1f       	adc	r25, r21
    488c:	a0 1d       	adc	r26, r0
    488e:	08 95       	ret

00004890 <_exit>:
    4890:	f8 94       	cli

00004892 <__stop_program>:
    4892:	ff cf       	rjmp	.-2      	; 0x4892 <__stop_program>
