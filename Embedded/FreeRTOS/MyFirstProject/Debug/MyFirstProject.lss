
MyFirstProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800200  00001b6c  00001c00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000086  00800214  00800214  00001c14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004a0  00000000  00000000  00001c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006734  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019d2  00000000  00000000  00008858  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000339a  00000000  00000000  0000a22a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e28  00000000  00000000  0000d5c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ff6  00000000  00000000  0000e3ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005e13  00000000  00000000  000103e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000578  00000000  00000000  000161f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c1       	rjmp	.+868    	; 0x366 <__ctors_end>
       2:	00 00       	nop
       4:	d1 c1       	rjmp	.+930    	; 0x3a8 <__bad_interrupt>
       6:	00 00       	nop
       8:	cf c1       	rjmp	.+926    	; 0x3a8 <__bad_interrupt>
       a:	00 00       	nop
       c:	cd c1       	rjmp	.+922    	; 0x3a8 <__bad_interrupt>
       e:	00 00       	nop
      10:	cb c1       	rjmp	.+918    	; 0x3a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	c9 c1       	rjmp	.+914    	; 0x3a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	c7 c1       	rjmp	.+910    	; 0x3a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c5 c1       	rjmp	.+906    	; 0x3a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c3 c1       	rjmp	.+902    	; 0x3a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	c1 c1       	rjmp	.+898    	; 0x3a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	bf c1       	rjmp	.+894    	; 0x3a8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bd c1       	rjmp	.+890    	; 0x3a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ec c3       	rjmp	.+2008   	; 0x80a <__vector_12>
      32:	00 00       	nop
      34:	b9 c1       	rjmp	.+882    	; 0x3a8 <__bad_interrupt>
      36:	00 00       	nop
      38:	b7 c1       	rjmp	.+878    	; 0x3a8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b5 c1       	rjmp	.+874    	; 0x3a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b3 c1       	rjmp	.+870    	; 0x3a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	b1 c1       	rjmp	.+866    	; 0x3a8 <__bad_interrupt>
      46:	00 00       	nop
      48:	af c1       	rjmp	.+862    	; 0x3a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ad c1       	rjmp	.+858    	; 0x3a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ab c1       	rjmp	.+854    	; 0x3a8 <__bad_interrupt>
      52:	00 00       	nop
      54:	a9 c1       	rjmp	.+850    	; 0x3a8 <__bad_interrupt>
      56:	00 00       	nop
      58:	a7 c1       	rjmp	.+846    	; 0x3a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a5 c1       	rjmp	.+842    	; 0x3a8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a3 c1       	rjmp	.+838    	; 0x3a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	a1 c1       	rjmp	.+834    	; 0x3a8 <__bad_interrupt>
      66:	00 00       	nop
      68:	9f c1       	rjmp	.+830    	; 0x3a8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9d c1       	rjmp	.+826    	; 0x3a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9b c1       	rjmp	.+822    	; 0x3a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	99 c1       	rjmp	.+818    	; 0x3a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	97 c1       	rjmp	.+814    	; 0x3a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	95 c1       	rjmp	.+810    	; 0x3a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	93 c1       	rjmp	.+806    	; 0x3a8 <__bad_interrupt>
      82:	00 00       	nop
      84:	91 c1       	rjmp	.+802    	; 0x3a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	8f c1       	rjmp	.+798    	; 0x3a8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8d c1       	rjmp	.+794    	; 0x3a8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	8b c1       	rjmp	.+790    	; 0x3a8 <__bad_interrupt>
      92:	00 00       	nop
      94:	89 c1       	rjmp	.+786    	; 0x3a8 <__bad_interrupt>
      96:	00 00       	nop
      98:	87 c1       	rjmp	.+782    	; 0x3a8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	85 c1       	rjmp	.+778    	; 0x3a8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	83 c1       	rjmp	.+774    	; 0x3a8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	81 c1       	rjmp	.+770    	; 0x3a8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7f c1       	rjmp	.+766    	; 0x3a8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7d c1       	rjmp	.+762    	; 0x3a8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7b c1       	rjmp	.+758    	; 0x3a8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	79 c1       	rjmp	.+754    	; 0x3a8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	77 c1       	rjmp	.+750    	; 0x3a8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	75 c1       	rjmp	.+746    	; 0x3a8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	73 c1       	rjmp	.+742    	; 0x3a8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	71 c1       	rjmp	.+738    	; 0x3a8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6f c1       	rjmp	.+734    	; 0x3a8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	6d c1       	rjmp	.+730    	; 0x3a8 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	6b c1       	rjmp	.+726    	; 0x3a8 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	69 c1       	rjmp	.+722    	; 0x3a8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	67 c1       	rjmp	.+718    	; 0x3a8 <__bad_interrupt>
      da:	00 00       	nop
      dc:	65 c1       	rjmp	.+714    	; 0x3a8 <__bad_interrupt>
      de:	00 00       	nop
      e0:	63 c1       	rjmp	.+710    	; 0x3a8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	43 01       	movw	r8, r6
      e6:	43 01       	movw	r8, r6
      e8:	43 01       	movw	r8, r6
      ea:	72 01       	movw	r14, r4
      ec:	7a 01       	movw	r14, r20
      ee:	89 01       	movw	r16, r18
      f0:	43 01       	movw	r8, r6
      f2:	43 01       	movw	r8, r6
      f4:	72 01       	movw	r14, r4
      f6:	7a 01       	movw	r14, r20

000000f8 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
      f8:	0c e2       	ldi	r16, 0x2C	; 44
      fa:	12 e0       	ldi	r17, 0x02	; 2
      fc:	0f 2e       	mov	r0, r31
      fe:	f4 e5       	ldi	r31, 0x54	; 84
     100:	ef 2e       	mov	r14, r31
     102:	f2 e0       	ldi	r31, 0x02	; 2
     104:	ff 2e       	mov	r15, r31
     106:	f0 2d       	mov	r31, r0
     108:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <uxDeletedTasksWaitingCleanUp>
     10c:	88 23       	and	r24, r24
     10e:	11 f1       	breq	.+68     	; 0x154 <prvIdleTask+0x5c>
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	0f 92       	push	r0
     116:	d8 01       	movw	r26, r16
     118:	15 96       	adiw	r26, 0x05	; 5
     11a:	ed 91       	ld	r30, X+
     11c:	fc 91       	ld	r31, X
     11e:	16 97       	sbiw	r26, 0x06	; 6
     120:	c6 81       	ldd	r28, Z+6	; 0x06
     122:	d7 81       	ldd	r29, Z+7	; 0x07
     124:	ce 01       	movw	r24, r28
     126:	02 96       	adiw	r24, 0x02	; 2
     128:	d8 d1       	rcall	.+944    	; 0x4da <uxListRemove>
     12a:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <uxCurrentNumberOfTasks>
     12e:	81 50       	subi	r24, 0x01	; 1
     130:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <uxCurrentNumberOfTasks>
     134:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <uxDeletedTasksWaitingCleanUp>
     138:	81 50       	subi	r24, 0x01	; 1
     13a:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <uxDeletedTasksWaitingCleanUp>
     13e:	0f 90       	pop	r0
     140:	0f be       	out	0x3f, r0	; 63
     142:	8f 89       	ldd	r24, Y+23	; 0x17
     144:	98 8d       	ldd	r25, Y+24	; 0x18
     146:	58 d1       	rcall	.+688    	; 0x3f8 <vPortFree>
     148:	ce 01       	movw	r24, r28
     14a:	56 d1       	rcall	.+684    	; 0x3f8 <vPortFree>
     14c:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <uxDeletedTasksWaitingCleanUp>
     150:	81 11       	cpse	r24, r1
     152:	de cf       	rjmp	.-68     	; 0x110 <prvIdleTask+0x18>
     154:	f7 01       	movw	r30, r14
     156:	80 81       	ld	r24, Z
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	08 f0       	brcs	.+2      	; 0x15e <prvIdleTask+0x66>
     15c:	93 d2       	rcall	.+1318   	; 0x684 <vPortYield>
     15e:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <vApplicationIdleHook>
     162:	d2 cf       	rjmp	.-92     	; 0x108 <prvIdleTask+0x10>

00000164 <prvTimerTask>:
     164:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     166:	df 93       	push	r29
     168:	00 d0       	rcall	.+0      	; 0x16a <prvTimerTask+0x6>
     16a:	00 d0       	rcall	.+0      	; 0x16c <prvTimerTask+0x8>
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
     170:	ce 01       	movw	r24, r28
     172:	01 96       	adiw	r24, 0x01	; 1
     174:	4c 01       	movw	r8, r24
     176:	44 24       	eor	r4, r4
     178:	43 94       	inc	r4
     17a:	e1 2c       	mov	r14, r1
     17c:	f1 2c       	mov	r15, r1
     17e:	51 2c       	mov	r5, r1
     180:	c8 2e       	mov	r12, r24
     182:	d9 2c       	mov	r13, r9
     184:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <pxCurrentTimerList>
     188:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <pxCurrentTimerList+0x1>
     18c:	80 81       	ld	r24, Z
     18e:	88 23       	and	r24, r24
     190:	09 f4       	brne	.+2      	; 0x194 <prvTimerTask+0x30>
     192:	d6 c0       	rjmp	.+428    	; 0x340 <prvTimerTask+0x1dc>
     194:	05 80       	ldd	r0, Z+5	; 0x05
     196:	f6 81       	ldd	r31, Z+6	; 0x06
     198:	e0 2d       	mov	r30, r0
     19a:	a0 80       	ld	r10, Z
     19c:	b1 80       	ldd	r11, Z+1	; 0x01
     19e:	92 d7       	rcall	.+3876   	; 0x10c4 <vTaskSuspendAll>
     1a0:	c4 01       	movw	r24, r8
     1a2:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <prvSampleTimeNow>
     1a6:	8c 01       	movw	r16, r24
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	81 11       	cpse	r24, r1
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <prvTimerTask+0xda>
     1ae:	0a 15       	cp	r16, r10
     1b0:	1b 05       	cpc	r17, r11
     1b2:	b0 f1       	brcs	.+108    	; 0x220 <prvTimerTask+0xbc>
     1b4:	0e 94 29 09 	call	0x1252	; 0x1252 <xTaskResumeAll>
     1b8:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <pxCurrentTimerList>
     1bc:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <pxCurrentTimerList+0x1>
     1c0:	05 80       	ldd	r0, Z+5	; 0x05
     1c2:	f6 81       	ldd	r31, Z+6	; 0x06
     1c4:	e0 2d       	mov	r30, r0
     1c6:	66 80       	ldd	r6, Z+6	; 0x06
     1c8:	77 80       	ldd	r7, Z+7	; 0x07
     1ca:	c3 01       	movw	r24, r6
     1cc:	02 96       	adiw	r24, 0x02	; 2
     1ce:	85 d1       	rcall	.+778    	; 0x4da <uxListRemove>
     1d0:	d3 01       	movw	r26, r6
     1d2:	53 96       	adiw	r26, 0x13	; 19
     1d4:	8c 91       	ld	r24, X
     1d6:	53 97       	sbiw	r26, 0x13	; 19
     1d8:	82 ff       	sbrs	r24, 2
     1da:	17 c0       	rjmp	.+46     	; 0x20a <prvTimerTask+0xa6>
     1dc:	1c 96       	adiw	r26, 0x0c	; 12
     1de:	6d 91       	ld	r22, X+
     1e0:	7c 91       	ld	r23, X
     1e2:	1d 97       	sbiw	r26, 0x0d	; 13
     1e4:	6a 0d       	add	r22, r10
     1e6:	7b 1d       	adc	r23, r11
     1e8:	95 01       	movw	r18, r10
     1ea:	a8 01       	movw	r20, r16
     1ec:	c3 01       	movw	r24, r6
     1ee:	0e 94 30 0b 	call	0x1660	; 0x1660 <prvInsertTimerInActiveList>
     1f2:	88 23       	and	r24, r24
     1f4:	69 f0       	breq	.+26     	; 0x210 <prvTimerTask+0xac>
     1f6:	0e 2d       	mov	r16, r14
     1f8:	1f 2d       	mov	r17, r15
     1fa:	2e 2d       	mov	r18, r14
     1fc:	3f 2d       	mov	r19, r15
     1fe:	a5 01       	movw	r20, r10
     200:	65 2d       	mov	r22, r5
     202:	c3 01       	movw	r24, r6
     204:	0e 94 a7 0b 	call	0x174e	; 0x174e <xTimerGenericCommand>
     208:	03 c0       	rjmp	.+6      	; 0x210 <prvTimerTask+0xac>
     20a:	8e 7f       	andi	r24, 0xFE	; 254
     20c:	f3 01       	movw	r30, r6
     20e:	83 8b       	std	Z+19, r24	; 0x13
     210:	d3 01       	movw	r26, r6
     212:	50 96       	adiw	r26, 0x10	; 16
     214:	ed 91       	ld	r30, X+
     216:	fc 91       	ld	r31, X
     218:	51 97       	sbiw	r26, 0x11	; 17
     21a:	c3 01       	movw	r24, r6
     21c:	19 95       	eicall
     21e:	84 c0       	rjmp	.+264    	; 0x328 <prvTimerTask+0x1c4>
     220:	45 2d       	mov	r20, r5
     222:	b5 01       	movw	r22, r10
     224:	60 1b       	sub	r22, r16
     226:	71 0b       	sbc	r23, r17
     228:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <xTimerQueue>
     22c:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <xTimerQueue+0x1>
     230:	7d d5       	rcall	.+2810   	; 0xd2c <vQueueWaitForMessageRestricted>
     232:	0e 94 29 09 	call	0x1252	; 0x1252 <xTaskResumeAll>
     236:	81 11       	cpse	r24, r1
     238:	77 c0       	rjmp	.+238    	; 0x328 <prvTimerTask+0x1c4>
     23a:	24 d2       	rcall	.+1096   	; 0x684 <vPortYield>
     23c:	75 c0       	rjmp	.+234    	; 0x328 <prvTimerTask+0x1c4>
     23e:	0e 94 29 09 	call	0x1252	; 0x1252 <xTaskResumeAll>
     242:	72 c0       	rjmp	.+228    	; 0x328 <prvTimerTask+0x1c4>
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	88 23       	and	r24, r24
     248:	0c f4       	brge	.+2      	; 0x24c <prvTimerTask+0xe8>
     24a:	6e c0       	rjmp	.+220    	; 0x328 <prvTimerTask+0x1c4>
     24c:	ac 80       	ldd	r10, Y+4	; 0x04
     24e:	bd 80       	ldd	r11, Y+5	; 0x05
     250:	f5 01       	movw	r30, r10
     252:	82 85       	ldd	r24, Z+10	; 0x0a
     254:	93 85       	ldd	r25, Z+11	; 0x0b
     256:	89 2b       	or	r24, r25
     258:	19 f0       	breq	.+6      	; 0x260 <prvTimerTask+0xfc>
     25a:	c5 01       	movw	r24, r10
     25c:	02 96       	adiw	r24, 0x02	; 2
     25e:	3d d1       	rcall	.+634    	; 0x4da <uxListRemove>
     260:	ce 01       	movw	r24, r28
     262:	06 96       	adiw	r24, 0x06	; 6
     264:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <prvSampleTimeNow>
     268:	ac 01       	movw	r20, r24
     26a:	e9 81       	ldd	r30, Y+1	; 0x01
     26c:	0e 2e       	mov	r0, r30
     26e:	00 0c       	add	r0, r0
     270:	ff 0b       	sbc	r31, r31
     272:	ea 30       	cpi	r30, 0x0A	; 10
     274:	f1 05       	cpc	r31, r1
     276:	08 f0       	brcs	.+2      	; 0x27a <prvTimerTask+0x116>
     278:	57 c0       	rjmp	.+174    	; 0x328 <prvTimerTask+0x1c4>
     27a:	88 27       	eor	r24, r24
     27c:	ee 58       	subi	r30, 0x8E	; 142
     27e:	ff 4f       	sbci	r31, 0xFF	; 255
     280:	8f 4f       	sbci	r24, 0xFF	; 255
     282:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <__tablejump2__>
     286:	d5 01       	movw	r26, r10
     288:	53 96       	adiw	r26, 0x13	; 19
     28a:	8c 91       	ld	r24, X
     28c:	53 97       	sbiw	r26, 0x13	; 19
     28e:	81 60       	ori	r24, 0x01	; 1
     290:	53 96       	adiw	r26, 0x13	; 19
     292:	8c 93       	st	X, r24
     294:	53 97       	sbiw	r26, 0x13	; 19
     296:	2a 81       	ldd	r18, Y+2	; 0x02
     298:	3b 81       	ldd	r19, Y+3	; 0x03
     29a:	1c 96       	adiw	r26, 0x0c	; 12
     29c:	6d 91       	ld	r22, X+
     29e:	7c 91       	ld	r23, X
     2a0:	1d 97       	sbiw	r26, 0x0d	; 13
     2a2:	62 0f       	add	r22, r18
     2a4:	73 1f       	adc	r23, r19
     2a6:	c5 01       	movw	r24, r10
     2a8:	0e 94 30 0b 	call	0x1660	; 0x1660 <prvInsertTimerInActiveList>
     2ac:	88 23       	and	r24, r24
     2ae:	e1 f1       	breq	.+120    	; 0x328 <prvTimerTask+0x1c4>
     2b0:	d5 01       	movw	r26, r10
     2b2:	50 96       	adiw	r26, 0x10	; 16
     2b4:	ed 91       	ld	r30, X+
     2b6:	fc 91       	ld	r31, X
     2b8:	51 97       	sbiw	r26, 0x11	; 17
     2ba:	c5 01       	movw	r24, r10
     2bc:	19 95       	eicall
     2be:	f5 01       	movw	r30, r10
     2c0:	83 89       	ldd	r24, Z+19	; 0x13
     2c2:	82 ff       	sbrs	r24, 2
     2c4:	31 c0       	rjmp	.+98     	; 0x328 <prvTimerTask+0x1c4>
     2c6:	4a 81       	ldd	r20, Y+2	; 0x02
     2c8:	5b 81       	ldd	r21, Y+3	; 0x03
     2ca:	84 85       	ldd	r24, Z+12	; 0x0c
     2cc:	95 85       	ldd	r25, Z+13	; 0x0d
     2ce:	48 0f       	add	r20, r24
     2d0:	59 1f       	adc	r21, r25
     2d2:	0e 2d       	mov	r16, r14
     2d4:	1f 2d       	mov	r17, r15
     2d6:	2e 2d       	mov	r18, r14
     2d8:	3f 2d       	mov	r19, r15
     2da:	65 2d       	mov	r22, r5
     2dc:	c5 01       	movw	r24, r10
     2de:	0e 94 a7 0b 	call	0x174e	; 0x174e <xTimerGenericCommand>
     2e2:	22 c0       	rjmp	.+68     	; 0x328 <prvTimerTask+0x1c4>
     2e4:	d5 01       	movw	r26, r10
     2e6:	53 96       	adiw	r26, 0x13	; 19
     2e8:	8c 91       	ld	r24, X
     2ea:	53 97       	sbiw	r26, 0x13	; 19
     2ec:	8e 7f       	andi	r24, 0xFE	; 254
     2ee:	53 96       	adiw	r26, 0x13	; 19
     2f0:	8c 93       	st	X, r24
     2f2:	1a c0       	rjmp	.+52     	; 0x328 <prvTimerTask+0x1c4>
     2f4:	f5 01       	movw	r30, r10
     2f6:	83 89       	ldd	r24, Z+19	; 0x13
     2f8:	81 60       	ori	r24, 0x01	; 1
     2fa:	83 8b       	std	Z+19, r24	; 0x13
     2fc:	6a 81       	ldd	r22, Y+2	; 0x02
     2fe:	7b 81       	ldd	r23, Y+3	; 0x03
     300:	75 87       	std	Z+13, r23	; 0x0d
     302:	64 87       	std	Z+12, r22	; 0x0c
     304:	64 0f       	add	r22, r20
     306:	75 1f       	adc	r23, r21
     308:	9a 01       	movw	r18, r20
     30a:	c5 01       	movw	r24, r10
     30c:	0e 94 30 0b 	call	0x1660	; 0x1660 <prvInsertTimerInActiveList>
     310:	0b c0       	rjmp	.+22     	; 0x328 <prvTimerTask+0x1c4>
     312:	d5 01       	movw	r26, r10
     314:	53 96       	adiw	r26, 0x13	; 19
     316:	8c 91       	ld	r24, X
     318:	81 fd       	sbrc	r24, 1
     31a:	03 c0       	rjmp	.+6      	; 0x322 <prvTimerTask+0x1be>
     31c:	c5 01       	movw	r24, r10
     31e:	6c d0       	rcall	.+216    	; 0x3f8 <vPortFree>
     320:	03 c0       	rjmp	.+6      	; 0x328 <prvTimerTask+0x1c4>
     322:	8e 7f       	andi	r24, 0xFE	; 254
     324:	f5 01       	movw	r30, r10
     326:	83 8b       	std	Z+19, r24	; 0x13
     328:	4e 2d       	mov	r20, r14
     32a:	5f 2d       	mov	r21, r15
     32c:	6c 2d       	mov	r22, r12
     32e:	7d 2d       	mov	r23, r13
     330:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <xTimerQueue>
     334:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <xTimerQueue+0x1>
     338:	70 d4       	rcall	.+2272   	; 0xc1a <xQueueReceive>
     33a:	81 11       	cpse	r24, r1
     33c:	83 cf       	rjmp	.-250    	; 0x244 <prvTimerTask+0xe0>
     33e:	22 cf       	rjmp	.-444    	; 0x184 <prvTimerTask+0x20>
     340:	c1 d6       	rcall	.+3458   	; 0x10c4 <vTaskSuspendAll>
     342:	c4 01       	movw	r24, r8
     344:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <prvSampleTimeNow>
     348:	8c 01       	movw	r16, r24
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	81 11       	cpse	r24, r1
     34e:	77 cf       	rjmp	.-274    	; 0x23e <prvTimerTask+0xda>
     350:	e0 91 80 02 	lds	r30, 0x0280	; 0x800280 <pxOverflowTimerList>
     354:	f0 91 81 02 	lds	r31, 0x0281	; 0x800281 <pxOverflowTimerList+0x1>
     358:	80 81       	ld	r24, Z
     35a:	44 2d       	mov	r20, r4
     35c:	81 11       	cpse	r24, r1
     35e:	45 2d       	mov	r20, r5
     360:	ae 2c       	mov	r10, r14
     362:	bf 2c       	mov	r11, r15
     364:	5e cf       	rjmp	.-324    	; 0x222 <prvTimerTask+0xbe>

00000366 <__ctors_end>:
     366:	11 24       	eor	r1, r1
     368:	1f be       	out	0x3f, r1	; 63
     36a:	cf ef       	ldi	r28, 0xFF	; 255
     36c:	d1 e2       	ldi	r29, 0x21	; 33
     36e:	de bf       	out	0x3e, r29	; 62
     370:	cd bf       	out	0x3d, r28	; 61
     372:	00 e0       	ldi	r16, 0x00	; 0
     374:	0c bf       	out	0x3c, r16	; 60

00000376 <__do_copy_data>:
     376:	12 e0       	ldi	r17, 0x02	; 2
     378:	a0 e0       	ldi	r26, 0x00	; 0
     37a:	b2 e0       	ldi	r27, 0x02	; 2
     37c:	ec e6       	ldi	r30, 0x6C	; 108
     37e:	fb e1       	ldi	r31, 0x1B	; 27
     380:	00 e0       	ldi	r16, 0x00	; 0
     382:	0b bf       	out	0x3b, r16	; 59
     384:	02 c0       	rjmp	.+4      	; 0x38a <__do_copy_data+0x14>
     386:	07 90       	elpm	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	a4 31       	cpi	r26, 0x14	; 20
     38c:	b1 07       	cpc	r27, r17
     38e:	d9 f7       	brne	.-10     	; 0x386 <__do_copy_data+0x10>

00000390 <__do_clear_bss>:
     390:	22 e0       	ldi	r18, 0x02	; 2
     392:	a4 e1       	ldi	r26, 0x14	; 20
     394:	b2 e0       	ldi	r27, 0x02	; 2
     396:	01 c0       	rjmp	.+2      	; 0x39a <.do_clear_bss_start>

00000398 <.do_clear_bss_loop>:
     398:	1d 92       	st	X+, r1

0000039a <.do_clear_bss_start>:
     39a:	aa 39       	cpi	r26, 0x9A	; 154
     39c:	b2 07       	cpc	r27, r18
     39e:	e1 f7       	brne	.-8      	; 0x398 <.do_clear_bss_loop>
     3a0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <main>
     3a4:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <_exit>

000003a8 <__bad_interrupt>:
     3a8:	2b ce       	rjmp	.-938    	; 0x0 <__vectors>

000003aa <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     3aa:	e7 e0       	ldi	r30, 0x07	; 7
     3ac:	f1 e0       	ldi	r31, 0x01	; 1
     3ae:	80 81       	ld	r24, Z
     3b0:	8f 60       	ori	r24, 0x0F	; 15
     3b2:	80 83       	st	Z, r24
     3b4:	08 95       	ret

000003b6 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     3b6:	e8 e0       	ldi	r30, 0x08	; 8
     3b8:	f1 e0       	ldi	r31, 0x01	; 1
     3ba:	90 81       	ld	r25, Z
     3bc:	90 7f       	andi	r25, 0xF0	; 240
     3be:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     3c0:	90 81       	ld	r25, Z
     3c2:	8f 70       	andi	r24, 0x0F	; 15
     3c4:	98 2b       	or	r25, r24
     3c6:	90 83       	st	Z, r25
     3c8:	08 95       	ret

000003ca <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     3ca:	e8 e0       	ldi	r30, 0x08	; 8
     3cc:	f1 e0       	ldi	r31, 0x01	; 1
     3ce:	80 81       	ld	r24, Z
     3d0:	80 7f       	andi	r24, 0xF0	; 240
     3d2:	80 83       	st	Z, r24
     3d4:	08 95       	ret

000003d6 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     3dc:	73 d6       	rcall	.+3302   	; 0x10c4 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     3de:	ce 01       	movw	r24, r28
     3e0:	0e 94 83 0c 	call	0x1906	; 0x1906 <malloc>
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     3e4:	ec 01       	movw	r28, r24
     3e6:	35 d7       	rcall	.+3690   	; 0x1252 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     3e8:	20 97       	sbiw	r28, 0x00	; 0
     3ea:	11 f4       	brne	.+4      	; 0x3f0 <pvPortMalloc+0x1a>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     3ec:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     3f0:	ce 01       	movw	r24, r28
     3f2:	df 91       	pop	r29
     3f4:	cf 91       	pop	r28
     3f6:	08 95       	ret

000003f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
    if( pv )
     3fc:	00 97       	sbiw	r24, 0x00	; 0
     3fe:	31 f0       	breq	.+12     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     400:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     402:	60 d6       	rcall	.+3264   	; 0x10c4 <vTaskSuspendAll>
        {
            free( pv );
     404:	ce 01       	movw	r24, r28
     406:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     40a:	23 d7       	rcall	.+3654   	; 0x1252 <xTaskResumeAll>
    }
}
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	08 95       	ret

00000412 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     412:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     414:	03 96       	adiw	r24, 0x03	; 3
     416:	92 83       	std	Z+2, r25	; 0x02
     418:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     41a:	2f ef       	ldi	r18, 0xFF	; 255
     41c:	3f ef       	ldi	r19, 0xFF	; 255
     41e:	34 83       	std	Z+4, r19	; 0x04
     420:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     422:	96 83       	std	Z+6, r25	; 0x06
     424:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     426:	90 87       	std	Z+8, r25	; 0x08
     428:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     42a:	10 82       	st	Z, r1
     42c:	08 95       	ret

0000042e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     42e:	fc 01       	movw	r30, r24
     430:	11 86       	std	Z+9, r1	; 0x09
     432:	10 86       	std	Z+8, r1	; 0x08
     434:	08 95       	ret

00000436 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	9c 01       	movw	r18, r24
     43c:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     43e:	dc 01       	movw	r26, r24
     440:	11 96       	adiw	r26, 0x01	; 1
     442:	cd 91       	ld	r28, X+
     444:	dc 91       	ld	r29, X
     446:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     448:	d3 83       	std	Z+3, r29	; 0x03
     44a:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     44c:	8c 81       	ldd	r24, Y+4	; 0x04
     44e:	9d 81       	ldd	r25, Y+5	; 0x05
     450:	95 83       	std	Z+5, r25	; 0x05
     452:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     454:	8c 81       	ldd	r24, Y+4	; 0x04
     456:	9d 81       	ldd	r25, Y+5	; 0x05
     458:	dc 01       	movw	r26, r24
     45a:	13 96       	adiw	r26, 0x03	; 3
     45c:	7c 93       	st	X, r23
     45e:	6e 93       	st	-X, r22
     460:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     462:	7d 83       	std	Y+5, r23	; 0x05
     464:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     466:	31 87       	std	Z+9, r19	; 0x09
     468:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     46a:	f9 01       	movw	r30, r18
     46c:	80 81       	ld	r24, Z
     46e:	8f 5f       	subi	r24, 0xFF	; 255
     470:	80 83       	st	Z, r24
}
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     478:	cf 93       	push	r28
     47a:	df 93       	push	r29
     47c:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     47e:	48 81       	ld	r20, Y
     480:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     482:	4f 3f       	cpi	r20, 0xFF	; 255
     484:	2f ef       	ldi	r18, 0xFF	; 255
     486:	52 07       	cpc	r21, r18
     488:	21 f4       	brne	.+8      	; 0x492 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     48a:	fc 01       	movw	r30, r24
     48c:	a7 81       	ldd	r26, Z+7	; 0x07
     48e:	b0 85       	ldd	r27, Z+8	; 0x08
     490:	0d c0       	rjmp	.+26     	; 0x4ac <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     492:	dc 01       	movw	r26, r24
     494:	13 96       	adiw	r26, 0x03	; 3
     496:	01 c0       	rjmp	.+2      	; 0x49a <vListInsert+0x22>
     498:	df 01       	movw	r26, r30
     49a:	12 96       	adiw	r26, 0x02	; 2
     49c:	ed 91       	ld	r30, X+
     49e:	fc 91       	ld	r31, X
     4a0:	13 97       	sbiw	r26, 0x03	; 3
     4a2:	20 81       	ld	r18, Z
     4a4:	31 81       	ldd	r19, Z+1	; 0x01
     4a6:	42 17       	cp	r20, r18
     4a8:	53 07       	cpc	r21, r19
     4aa:	b0 f7       	brcc	.-20     	; 0x498 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     4ac:	12 96       	adiw	r26, 0x02	; 2
     4ae:	ed 91       	ld	r30, X+
     4b0:	fc 91       	ld	r31, X
     4b2:	13 97       	sbiw	r26, 0x03	; 3
     4b4:	fb 83       	std	Y+3, r31	; 0x03
     4b6:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     4b8:	d5 83       	std	Z+5, r29	; 0x05
     4ba:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     4bc:	bd 83       	std	Y+5, r27	; 0x05
     4be:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     4c0:	13 96       	adiw	r26, 0x03	; 3
     4c2:	dc 93       	st	X, r29
     4c4:	ce 93       	st	-X, r28
     4c6:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     4c8:	99 87       	std	Y+9, r25	; 0x09
     4ca:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     4cc:	fc 01       	movw	r30, r24
     4ce:	20 81       	ld	r18, Z
     4d0:	2f 5f       	subi	r18, 0xFF	; 255
     4d2:	20 83       	st	Z, r18
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	08 95       	ret

000004da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     4da:	cf 93       	push	r28
     4dc:	df 93       	push	r29
     4de:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     4e0:	a0 85       	ldd	r26, Z+8	; 0x08
     4e2:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     4e4:	c2 81       	ldd	r28, Z+2	; 0x02
     4e6:	d3 81       	ldd	r29, Z+3	; 0x03
     4e8:	84 81       	ldd	r24, Z+4	; 0x04
     4ea:	95 81       	ldd	r25, Z+5	; 0x05
     4ec:	9d 83       	std	Y+5, r25	; 0x05
     4ee:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     4f0:	c4 81       	ldd	r28, Z+4	; 0x04
     4f2:	d5 81       	ldd	r29, Z+5	; 0x05
     4f4:	82 81       	ldd	r24, Z+2	; 0x02
     4f6:	93 81       	ldd	r25, Z+3	; 0x03
     4f8:	9b 83       	std	Y+3, r25	; 0x03
     4fa:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     4fc:	11 96       	adiw	r26, 0x01	; 1
     4fe:	8d 91       	ld	r24, X+
     500:	9c 91       	ld	r25, X
     502:	12 97       	sbiw	r26, 0x02	; 2
     504:	e8 17       	cp	r30, r24
     506:	f9 07       	cpc	r31, r25
     508:	31 f4       	brne	.+12     	; 0x516 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     50a:	84 81       	ldd	r24, Z+4	; 0x04
     50c:	95 81       	ldd	r25, Z+5	; 0x05
     50e:	12 96       	adiw	r26, 0x02	; 2
     510:	9c 93       	st	X, r25
     512:	8e 93       	st	-X, r24
     514:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     516:	11 86       	std	Z+9, r1	; 0x09
     518:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     51a:	8c 91       	ld	r24, X
     51c:	81 50       	subi	r24, 0x01	; 1
     51e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     520:	8c 91       	ld	r24, X
}
     522:	df 91       	pop	r29
     524:	cf 91       	pop	r28
     526:	08 95       	ret

00000528 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     528:	31 e1       	ldi	r19, 0x11	; 17
     52a:	fc 01       	movw	r30, r24
     52c:	30 83       	st	Z, r19
     52e:	31 97       	sbiw	r30, 0x01	; 1
     530:	22 e2       	ldi	r18, 0x22	; 34
     532:	20 83       	st	Z, r18
     534:	31 97       	sbiw	r30, 0x01	; 1
     536:	a3 e3       	ldi	r26, 0x33	; 51
     538:	a0 83       	st	Z, r26
     53a:	31 97       	sbiw	r30, 0x01	; 1
     53c:	60 83       	st	Z, r22
     53e:	31 97       	sbiw	r30, 0x01	; 1
     540:	70 83       	st	Z, r23
     542:	31 97       	sbiw	r30, 0x01	; 1
     544:	10 82       	st	Z, r1
     546:	31 97       	sbiw	r30, 0x01	; 1
     548:	10 82       	st	Z, r1
     54a:	31 97       	sbiw	r30, 0x01	; 1
     54c:	60 e8       	ldi	r22, 0x80	; 128
     54e:	60 83       	st	Z, r22
     550:	31 97       	sbiw	r30, 0x01	; 1
     552:	10 82       	st	Z, r1
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	10 82       	st	Z, r1
     558:	31 97       	sbiw	r30, 0x01	; 1
     55a:	10 82       	st	Z, r1
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	62 e0       	ldi	r22, 0x02	; 2
     560:	60 83       	st	Z, r22
     562:	31 97       	sbiw	r30, 0x01	; 1
     564:	63 e0       	ldi	r22, 0x03	; 3
     566:	60 83       	st	Z, r22
     568:	31 97       	sbiw	r30, 0x01	; 1
     56a:	64 e0       	ldi	r22, 0x04	; 4
     56c:	60 83       	st	Z, r22
     56e:	31 97       	sbiw	r30, 0x01	; 1
     570:	65 e0       	ldi	r22, 0x05	; 5
     572:	60 83       	st	Z, r22
     574:	31 97       	sbiw	r30, 0x01	; 1
     576:	66 e0       	ldi	r22, 0x06	; 6
     578:	60 83       	st	Z, r22
     57a:	31 97       	sbiw	r30, 0x01	; 1
     57c:	67 e0       	ldi	r22, 0x07	; 7
     57e:	60 83       	st	Z, r22
     580:	31 97       	sbiw	r30, 0x01	; 1
     582:	68 e0       	ldi	r22, 0x08	; 8
     584:	60 83       	st	Z, r22
     586:	31 97       	sbiw	r30, 0x01	; 1
     588:	69 e0       	ldi	r22, 0x09	; 9
     58a:	60 83       	st	Z, r22
     58c:	31 97       	sbiw	r30, 0x01	; 1
     58e:	60 e1       	ldi	r22, 0x10	; 16
     590:	60 83       	st	Z, r22
     592:	31 97       	sbiw	r30, 0x01	; 1
     594:	30 83       	st	Z, r19
     596:	31 97       	sbiw	r30, 0x01	; 1
     598:	32 e1       	ldi	r19, 0x12	; 18
     59a:	30 83       	st	Z, r19
     59c:	31 97       	sbiw	r30, 0x01	; 1
     59e:	33 e1       	ldi	r19, 0x13	; 19
     5a0:	30 83       	st	Z, r19
     5a2:	31 97       	sbiw	r30, 0x01	; 1
     5a4:	34 e1       	ldi	r19, 0x14	; 20
     5a6:	30 83       	st	Z, r19
     5a8:	31 97       	sbiw	r30, 0x01	; 1
     5aa:	35 e1       	ldi	r19, 0x15	; 21
     5ac:	30 83       	st	Z, r19
     5ae:	31 97       	sbiw	r30, 0x01	; 1
     5b0:	36 e1       	ldi	r19, 0x16	; 22
     5b2:	30 83       	st	Z, r19
     5b4:	31 97       	sbiw	r30, 0x01	; 1
     5b6:	37 e1       	ldi	r19, 0x17	; 23
     5b8:	30 83       	st	Z, r19
     5ba:	31 97       	sbiw	r30, 0x01	; 1
     5bc:	38 e1       	ldi	r19, 0x18	; 24
     5be:	30 83       	st	Z, r19
     5c0:	31 97       	sbiw	r30, 0x01	; 1
     5c2:	39 e1       	ldi	r19, 0x19	; 25
     5c4:	30 83       	st	Z, r19
     5c6:	31 97       	sbiw	r30, 0x01	; 1
     5c8:	30 e2       	ldi	r19, 0x20	; 32
     5ca:	30 83       	st	Z, r19
     5cc:	31 97       	sbiw	r30, 0x01	; 1
     5ce:	31 e2       	ldi	r19, 0x21	; 33
     5d0:	30 83       	st	Z, r19
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	20 83       	st	Z, r18
     5d6:	31 97       	sbiw	r30, 0x01	; 1
     5d8:	23 e2       	ldi	r18, 0x23	; 35
     5da:	20 83       	st	Z, r18
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	40 83       	st	Z, r20
     5e0:	31 97       	sbiw	r30, 0x01	; 1
     5e2:	50 83       	st	Z, r21
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	26 e2       	ldi	r18, 0x26	; 38
     5e8:	20 83       	st	Z, r18
     5ea:	31 97       	sbiw	r30, 0x01	; 1
     5ec:	27 e2       	ldi	r18, 0x27	; 39
     5ee:	20 83       	st	Z, r18
     5f0:	31 97       	sbiw	r30, 0x01	; 1
     5f2:	28 e2       	ldi	r18, 0x28	; 40
     5f4:	20 83       	st	Z, r18
     5f6:	31 97       	sbiw	r30, 0x01	; 1
     5f8:	29 e2       	ldi	r18, 0x29	; 41
     5fa:	20 83       	st	Z, r18
     5fc:	31 97       	sbiw	r30, 0x01	; 1
     5fe:	20 e3       	ldi	r18, 0x30	; 48
     600:	20 83       	st	Z, r18
     602:	31 97       	sbiw	r30, 0x01	; 1
     604:	21 e3       	ldi	r18, 0x31	; 49
     606:	20 83       	st	Z, r18
     608:	89 97       	sbiw	r24, 0x29	; 41
     60a:	08 95       	ret

0000060c <xPortStartScheduler>:
     60c:	a8 95       	wdr
     60e:	90 ec       	ldi	r25, 0xC0	; 192
     610:	88 e1       	ldi	r24, 0x18	; 24
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	a8 95       	wdr
     618:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     622:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <pxCurrentTCB>
     626:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
     62a:	cd 91       	ld	r28, X+
     62c:	cd bf       	out	0x3d, r28	; 61
     62e:	dd 91       	ld	r29, X+
     630:	de bf       	out	0x3e, r29	; 62
     632:	ff 91       	pop	r31
     634:	ef 91       	pop	r30
     636:	df 91       	pop	r29
     638:	cf 91       	pop	r28
     63a:	bf 91       	pop	r27
     63c:	af 91       	pop	r26
     63e:	9f 91       	pop	r25
     640:	8f 91       	pop	r24
     642:	7f 91       	pop	r23
     644:	6f 91       	pop	r22
     646:	5f 91       	pop	r21
     648:	4f 91       	pop	r20
     64a:	3f 91       	pop	r19
     64c:	2f 91       	pop	r18
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	df 90       	pop	r13
     658:	cf 90       	pop	r12
     65a:	bf 90       	pop	r11
     65c:	af 90       	pop	r10
     65e:	9f 90       	pop	r9
     660:	8f 90       	pop	r8
     662:	7f 90       	pop	r7
     664:	6f 90       	pop	r6
     666:	5f 90       	pop	r5
     668:	4f 90       	pop	r4
     66a:	3f 90       	pop	r3
     66c:	2f 90       	pop	r2
     66e:	1f 90       	pop	r1
     670:	0f 90       	pop	r0
     672:	0c be       	out	0x3c, r0	; 60
     674:	0f 90       	pop	r0
     676:	0b be       	out	0x3b, r0	; 59
     678:	0f 90       	pop	r0
     67a:	0f be       	out	0x3f, r0	; 63
     67c:	0f 90       	pop	r0
     67e:	08 95       	ret
     680:	81 e0       	ldi	r24, 0x01	; 1
     682:	08 95       	ret

00000684 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     684:	0f 92       	push	r0
     686:	0f b6       	in	r0, 0x3f	; 63
     688:	f8 94       	cli
     68a:	0f 92       	push	r0
     68c:	0b b6       	in	r0, 0x3b	; 59
     68e:	0f 92       	push	r0
     690:	0c b6       	in	r0, 0x3c	; 60
     692:	0f 92       	push	r0
     694:	1f 92       	push	r1
     696:	11 24       	eor	r1, r1
     698:	2f 92       	push	r2
     69a:	3f 92       	push	r3
     69c:	4f 92       	push	r4
     69e:	5f 92       	push	r5
     6a0:	6f 92       	push	r6
     6a2:	7f 92       	push	r7
     6a4:	8f 92       	push	r8
     6a6:	9f 92       	push	r9
     6a8:	af 92       	push	r10
     6aa:	bf 92       	push	r11
     6ac:	cf 92       	push	r12
     6ae:	df 92       	push	r13
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	2f 93       	push	r18
     6ba:	3f 93       	push	r19
     6bc:	4f 93       	push	r20
     6be:	5f 93       	push	r21
     6c0:	6f 93       	push	r22
     6c2:	7f 93       	push	r23
     6c4:	8f 93       	push	r24
     6c6:	9f 93       	push	r25
     6c8:	af 93       	push	r26
     6ca:	bf 93       	push	r27
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	ef 93       	push	r30
     6d2:	ff 93       	push	r31
     6d4:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <pxCurrentTCB>
     6d8:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
     6dc:	0d b6       	in	r0, 0x3d	; 61
     6de:	0d 92       	st	X+, r0
     6e0:	0e b6       	in	r0, 0x3e	; 62
     6e2:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     6e4:	2f d6       	rcall	.+3166   	; 0x1344 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     6e6:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <pxCurrentTCB>
     6ea:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
     6ee:	cd 91       	ld	r28, X+
     6f0:	cd bf       	out	0x3d, r28	; 61
     6f2:	dd 91       	ld	r29, X+
     6f4:	de bf       	out	0x3e, r29	; 62
     6f6:	ff 91       	pop	r31
     6f8:	ef 91       	pop	r30
     6fa:	df 91       	pop	r29
     6fc:	cf 91       	pop	r28
     6fe:	bf 91       	pop	r27
     700:	af 91       	pop	r26
     702:	9f 91       	pop	r25
     704:	8f 91       	pop	r24
     706:	7f 91       	pop	r23
     708:	6f 91       	pop	r22
     70a:	5f 91       	pop	r21
     70c:	4f 91       	pop	r20
     70e:	3f 91       	pop	r19
     710:	2f 91       	pop	r18
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	df 90       	pop	r13
     71c:	cf 90       	pop	r12
     71e:	bf 90       	pop	r11
     720:	af 90       	pop	r10
     722:	9f 90       	pop	r9
     724:	8f 90       	pop	r8
     726:	7f 90       	pop	r7
     728:	6f 90       	pop	r6
     72a:	5f 90       	pop	r5
     72c:	4f 90       	pop	r4
     72e:	3f 90       	pop	r3
     730:	2f 90       	pop	r2
     732:	1f 90       	pop	r1
     734:	0f 90       	pop	r0
     736:	0c be       	out	0x3c, r0	; 60
     738:	0f 90       	pop	r0
     73a:	0b be       	out	0x3b, r0	; 59
     73c:	0f 90       	pop	r0
     73e:	0f be       	out	0x3f, r0	; 63
     740:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     742:	08 95       	ret

00000744 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	f8 94       	cli
     74a:	0f 92       	push	r0
     74c:	0b b6       	in	r0, 0x3b	; 59
     74e:	0f 92       	push	r0
     750:	0c b6       	in	r0, 0x3c	; 60
     752:	0f 92       	push	r0
     754:	1f 92       	push	r1
     756:	11 24       	eor	r1, r1
     758:	2f 92       	push	r2
     75a:	3f 92       	push	r3
     75c:	4f 92       	push	r4
     75e:	5f 92       	push	r5
     760:	6f 92       	push	r6
     762:	7f 92       	push	r7
     764:	8f 92       	push	r8
     766:	9f 92       	push	r9
     768:	af 92       	push	r10
     76a:	bf 92       	push	r11
     76c:	cf 92       	push	r12
     76e:	df 92       	push	r13
     770:	ef 92       	push	r14
     772:	ff 92       	push	r15
     774:	0f 93       	push	r16
     776:	1f 93       	push	r17
     778:	2f 93       	push	r18
     77a:	3f 93       	push	r19
     77c:	4f 93       	push	r20
     77e:	5f 93       	push	r21
     780:	6f 93       	push	r22
     782:	7f 93       	push	r23
     784:	8f 93       	push	r24
     786:	9f 93       	push	r25
     788:	af 93       	push	r26
     78a:	bf 93       	push	r27
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	ef 93       	push	r30
     792:	ff 93       	push	r31
     794:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <pxCurrentTCB>
     798:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
     79c:	0d b6       	in	r0, 0x3d	; 61
     79e:	0d 92       	st	X+, r0
     7a0:	0e b6       	in	r0, 0x3e	; 62
     7a2:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     7a4:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     7a6:	9e d4       	rcall	.+2364   	; 0x10e4 <xTaskIncrementTick>
     7a8:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     7aa:	cc d5       	rcall	.+2968   	; 0x1344 <vTaskSwitchContext>
     7ac:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <pxCurrentTCB>
    }

    portRESTORE_CONTEXT();
     7b0:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
     7b4:	cd 91       	ld	r28, X+
     7b6:	cd bf       	out	0x3d, r28	; 61
     7b8:	dd 91       	ld	r29, X+
     7ba:	de bf       	out	0x3e, r29	; 62
     7bc:	ff 91       	pop	r31
     7be:	ef 91       	pop	r30
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	bf 91       	pop	r27
     7c6:	af 91       	pop	r26
     7c8:	9f 91       	pop	r25
     7ca:	8f 91       	pop	r24
     7cc:	7f 91       	pop	r23
     7ce:	6f 91       	pop	r22
     7d0:	5f 91       	pop	r21
     7d2:	4f 91       	pop	r20
     7d4:	3f 91       	pop	r19
     7d6:	2f 91       	pop	r18
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	ef 90       	pop	r14
     7e0:	df 90       	pop	r13
     7e2:	cf 90       	pop	r12
     7e4:	bf 90       	pop	r11
     7e6:	af 90       	pop	r10
     7e8:	9f 90       	pop	r9
     7ea:	8f 90       	pop	r8
     7ec:	7f 90       	pop	r7
     7ee:	6f 90       	pop	r6
     7f0:	5f 90       	pop	r5
     7f2:	4f 90       	pop	r4
     7f4:	3f 90       	pop	r3
     7f6:	2f 90       	pop	r2
     7f8:	1f 90       	pop	r1
     7fa:	0f 90       	pop	r0
     7fc:	0c be       	out	0x3c, r0	; 60
     7fe:	0f 90       	pop	r0
     800:	0b be       	out	0x3b, r0	; 59
     802:	0f 90       	pop	r0
     804:	0f be       	out	0x3f, r0	; 63
     806:	0f 90       	pop	r0
     808:	08 95       	ret

0000080a <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     80a:	9c df       	rcall	.-200    	; 0x744 <vPortYieldFromTick>
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     80c:	18 95       	reti

0000080e <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	f8 94       	cli
     812:	0f 92       	push	r0
     814:	fc 01       	movw	r30, r24
     816:	92 8d       	ldd	r25, Z+26	; 0x1a
     818:	0f 90       	pop	r0
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	91 11       	cpse	r25, r1
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	08 95       	ret

00000824 <prvCopyDataToQueue>:
     824:	0f 93       	push	r16
     826:	1f 93       	push	r17
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	ec 01       	movw	r28, r24
     82e:	04 2f       	mov	r16, r20
     830:	1a 8d       	ldd	r17, Y+26	; 0x1a
     832:	4c 8d       	ldd	r20, Y+28	; 0x1c
     834:	41 11       	cpse	r20, r1
     836:	0b c0       	rjmp	.+22     	; 0x84e <prvCopyDataToQueue+0x2a>
     838:	88 81       	ld	r24, Y
     83a:	99 81       	ldd	r25, Y+1	; 0x01
     83c:	89 2b       	or	r24, r25
     83e:	09 f0       	breq	.+2      	; 0x842 <prvCopyDataToQueue+0x1e>
     840:	41 c0       	rjmp	.+130    	; 0x8c4 <prvCopyDataToQueue+0xa0>
     842:	8c 81       	ldd	r24, Y+4	; 0x04
     844:	9d 81       	ldd	r25, Y+5	; 0x05
     846:	cc d6       	rcall	.+3480   	; 0x15e0 <xTaskPriorityDisinherit>
     848:	1d 82       	std	Y+5, r1	; 0x05
     84a:	1c 82       	std	Y+4, r1	; 0x04
     84c:	42 c0       	rjmp	.+132    	; 0x8d2 <prvCopyDataToQueue+0xae>
     84e:	01 11       	cpse	r16, r1
     850:	17 c0       	rjmp	.+46     	; 0x880 <prvCopyDataToQueue+0x5c>
     852:	50 e0       	ldi	r21, 0x00	; 0
     854:	8a 81       	ldd	r24, Y+2	; 0x02
     856:	9b 81       	ldd	r25, Y+3	; 0x03
     858:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <memcpy>
     85c:	2c 8d       	ldd	r18, Y+28	; 0x1c
     85e:	8a 81       	ldd	r24, Y+2	; 0x02
     860:	9b 81       	ldd	r25, Y+3	; 0x03
     862:	82 0f       	add	r24, r18
     864:	91 1d       	adc	r25, r1
     866:	9b 83       	std	Y+3, r25	; 0x03
     868:	8a 83       	std	Y+2, r24	; 0x02
     86a:	2c 81       	ldd	r18, Y+4	; 0x04
     86c:	3d 81       	ldd	r19, Y+5	; 0x05
     86e:	82 17       	cp	r24, r18
     870:	93 07       	cpc	r25, r19
     872:	50 f1       	brcs	.+84     	; 0x8c8 <prvCopyDataToQueue+0xa4>
     874:	88 81       	ld	r24, Y
     876:	99 81       	ldd	r25, Y+1	; 0x01
     878:	9b 83       	std	Y+3, r25	; 0x03
     87a:	8a 83       	std	Y+2, r24	; 0x02
     87c:	80 e0       	ldi	r24, 0x00	; 0
     87e:	29 c0       	rjmp	.+82     	; 0x8d2 <prvCopyDataToQueue+0xae>
     880:	50 e0       	ldi	r21, 0x00	; 0
     882:	8e 81       	ldd	r24, Y+6	; 0x06
     884:	9f 81       	ldd	r25, Y+7	; 0x07
     886:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <memcpy>
     88a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	91 95       	neg	r25
     890:	81 95       	neg	r24
     892:	91 09       	sbc	r25, r1
     894:	2e 81       	ldd	r18, Y+6	; 0x06
     896:	3f 81       	ldd	r19, Y+7	; 0x07
     898:	28 0f       	add	r18, r24
     89a:	39 1f       	adc	r19, r25
     89c:	3f 83       	std	Y+7, r19	; 0x07
     89e:	2e 83       	std	Y+6, r18	; 0x06
     8a0:	48 81       	ld	r20, Y
     8a2:	59 81       	ldd	r21, Y+1	; 0x01
     8a4:	24 17       	cp	r18, r20
     8a6:	35 07       	cpc	r19, r21
     8a8:	30 f4       	brcc	.+12     	; 0x8b6 <prvCopyDataToQueue+0x92>
     8aa:	2c 81       	ldd	r18, Y+4	; 0x04
     8ac:	3d 81       	ldd	r19, Y+5	; 0x05
     8ae:	82 0f       	add	r24, r18
     8b0:	93 1f       	adc	r25, r19
     8b2:	9f 83       	std	Y+7, r25	; 0x07
     8b4:	8e 83       	std	Y+6, r24	; 0x06
     8b6:	02 30       	cpi	r16, 0x02	; 2
     8b8:	49 f4       	brne	.+18     	; 0x8cc <prvCopyDataToQueue+0xa8>
     8ba:	11 23       	and	r17, r17
     8bc:	49 f0       	breq	.+18     	; 0x8d0 <prvCopyDataToQueue+0xac>
     8be:	11 50       	subi	r17, 0x01	; 1
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	07 c0       	rjmp	.+14     	; 0x8d2 <prvCopyDataToQueue+0xae>
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <prvCopyDataToQueue+0xae>
     8c8:	80 e0       	ldi	r24, 0x00	; 0
     8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <prvCopyDataToQueue+0xae>
     8cc:	80 e0       	ldi	r24, 0x00	; 0
     8ce:	01 c0       	rjmp	.+2      	; 0x8d2 <prvCopyDataToQueue+0xae>
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	1f 5f       	subi	r17, 0xFF	; 255
     8d4:	1a 8f       	std	Y+26, r17	; 0x1a
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	08 95       	ret

000008e0 <prvCopyDataFromQueue>:
     8e0:	fc 01       	movw	r30, r24
     8e2:	44 8d       	ldd	r20, Z+28	; 0x1c
     8e4:	44 23       	and	r20, r20
     8e6:	a9 f0       	breq	.+42     	; 0x912 <prvCopyDataFromQueue+0x32>
     8e8:	50 e0       	ldi	r21, 0x00	; 0
     8ea:	26 81       	ldd	r18, Z+6	; 0x06
     8ec:	37 81       	ldd	r19, Z+7	; 0x07
     8ee:	24 0f       	add	r18, r20
     8f0:	35 1f       	adc	r19, r21
     8f2:	37 83       	std	Z+7, r19	; 0x07
     8f4:	26 83       	std	Z+6, r18	; 0x06
     8f6:	84 81       	ldd	r24, Z+4	; 0x04
     8f8:	95 81       	ldd	r25, Z+5	; 0x05
     8fa:	28 17       	cp	r18, r24
     8fc:	39 07       	cpc	r19, r25
     8fe:	20 f0       	brcs	.+8      	; 0x908 <prvCopyDataFromQueue+0x28>
     900:	80 81       	ld	r24, Z
     902:	91 81       	ldd	r25, Z+1	; 0x01
     904:	97 83       	std	Z+7, r25	; 0x07
     906:	86 83       	std	Z+6, r24	; 0x06
     908:	cb 01       	movw	r24, r22
     90a:	66 81       	ldd	r22, Z+6	; 0x06
     90c:	77 81       	ldd	r23, Z+7	; 0x07
     90e:	0c 94 a4 0d 	jmp	0x1b48	; 0x1b48 <memcpy>
     912:	08 95       	ret

00000914 <prvUnlockQueue>:
     914:	ef 92       	push	r14
     916:	ff 92       	push	r15
     918:	0f 93       	push	r16
     91a:	1f 93       	push	r17
     91c:	cf 93       	push	r28
     91e:	8c 01       	movw	r16, r24
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	f8 94       	cli
     924:	0f 92       	push	r0
     926:	fc 01       	movw	r30, r24
     928:	c6 8d       	ldd	r28, Z+30	; 0x1e
     92a:	1c 16       	cp	r1, r28
     92c:	9c f4       	brge	.+38     	; 0x954 <prvUnlockQueue+0x40>
     92e:	81 89       	ldd	r24, Z+17	; 0x11
     930:	81 11       	cpse	r24, r1
     932:	06 c0       	rjmp	.+12     	; 0x940 <prvUnlockQueue+0x2c>
     934:	0f c0       	rjmp	.+30     	; 0x954 <prvUnlockQueue+0x40>
     936:	f8 01       	movw	r30, r16
     938:	81 89       	ldd	r24, Z+17	; 0x11
     93a:	81 11       	cpse	r24, r1
     93c:	05 c0       	rjmp	.+10     	; 0x948 <prvUnlockQueue+0x34>
     93e:	0a c0       	rjmp	.+20     	; 0x954 <prvUnlockQueue+0x40>
     940:	78 01       	movw	r14, r16
     942:	f1 e1       	ldi	r31, 0x11	; 17
     944:	ef 0e       	add	r14, r31
     946:	f1 1c       	adc	r15, r1
     948:	c7 01       	movw	r24, r14
     94a:	b1 d5       	rcall	.+2914   	; 0x14ae <xTaskRemoveFromEventList>
     94c:	81 11       	cpse	r24, r1
     94e:	36 d6       	rcall	.+3180   	; 0x15bc <vTaskMissedYield>
     950:	c1 50       	subi	r28, 0x01	; 1
     952:	89 f7       	brne	.-30     	; 0x936 <prvUnlockQueue+0x22>
     954:	8f ef       	ldi	r24, 0xFF	; 255
     956:	f8 01       	movw	r30, r16
     958:	86 8f       	std	Z+30, r24	; 0x1e
     95a:	0f 90       	pop	r0
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	0f b6       	in	r0, 0x3f	; 63
     960:	f8 94       	cli
     962:	0f 92       	push	r0
     964:	c5 8d       	ldd	r28, Z+29	; 0x1d
     966:	1c 16       	cp	r1, r28
     968:	9c f4       	brge	.+38     	; 0x990 <prvUnlockQueue+0x7c>
     96a:	80 85       	ldd	r24, Z+8	; 0x08
     96c:	81 11       	cpse	r24, r1
     96e:	06 c0       	rjmp	.+12     	; 0x97c <prvUnlockQueue+0x68>
     970:	0f c0       	rjmp	.+30     	; 0x990 <prvUnlockQueue+0x7c>
     972:	f8 01       	movw	r30, r16
     974:	80 85       	ldd	r24, Z+8	; 0x08
     976:	81 11       	cpse	r24, r1
     978:	05 c0       	rjmp	.+10     	; 0x984 <prvUnlockQueue+0x70>
     97a:	0a c0       	rjmp	.+20     	; 0x990 <prvUnlockQueue+0x7c>
     97c:	78 01       	movw	r14, r16
     97e:	f8 e0       	ldi	r31, 0x08	; 8
     980:	ef 0e       	add	r14, r31
     982:	f1 1c       	adc	r15, r1
     984:	c7 01       	movw	r24, r14
     986:	93 d5       	rcall	.+2854   	; 0x14ae <xTaskRemoveFromEventList>
     988:	81 11       	cpse	r24, r1
     98a:	18 d6       	rcall	.+3120   	; 0x15bc <vTaskMissedYield>
     98c:	c1 50       	subi	r28, 0x01	; 1
     98e:	89 f7       	brne	.-30     	; 0x972 <prvUnlockQueue+0x5e>
     990:	8f ef       	ldi	r24, 0xFF	; 255
     992:	f8 01       	movw	r30, r16
     994:	85 8f       	std	Z+29, r24	; 0x1d
     996:	0f 90       	pop	r0
     998:	0f be       	out	0x3f, r0	; 63
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	ff 90       	pop	r15
     9a2:	ef 90       	pop	r14
     9a4:	08 95       	ret

000009a6 <xQueueGenericReset>:
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	ec 01       	movw	r28, r24
     9ac:	0f b6       	in	r0, 0x3f	; 63
     9ae:	f8 94       	cli
     9b0:	0f 92       	push	r0
     9b2:	e8 81       	ld	r30, Y
     9b4:	f9 81       	ldd	r31, Y+1	; 0x01
     9b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     9b8:	2c 8d       	ldd	r18, Y+28	; 0x1c
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	82 9f       	mul	r24, r18
     9c0:	a0 01       	movw	r20, r0
     9c2:	83 9f       	mul	r24, r19
     9c4:	50 0d       	add	r21, r0
     9c6:	92 9f       	mul	r25, r18
     9c8:	50 0d       	add	r21, r0
     9ca:	11 24       	eor	r1, r1
     9cc:	4e 0f       	add	r20, r30
     9ce:	5f 1f       	adc	r21, r31
     9d0:	5d 83       	std	Y+5, r21	; 0x05
     9d2:	4c 83       	std	Y+4, r20	; 0x04
     9d4:	1a 8e       	std	Y+26, r1	; 0x1a
     9d6:	fb 83       	std	Y+3, r31	; 0x03
     9d8:	ea 83       	std	Y+2, r30	; 0x02
     9da:	01 97       	sbiw	r24, 0x01	; 1
     9dc:	82 9f       	mul	r24, r18
     9de:	a0 01       	movw	r20, r0
     9e0:	83 9f       	mul	r24, r19
     9e2:	50 0d       	add	r21, r0
     9e4:	92 9f       	mul	r25, r18
     9e6:	50 0d       	add	r21, r0
     9e8:	11 24       	eor	r1, r1
     9ea:	cf 01       	movw	r24, r30
     9ec:	84 0f       	add	r24, r20
     9ee:	95 1f       	adc	r25, r21
     9f0:	9f 83       	std	Y+7, r25	; 0x07
     9f2:	8e 83       	std	Y+6, r24	; 0x06
     9f4:	8f ef       	ldi	r24, 0xFF	; 255
     9f6:	8d 8f       	std	Y+29, r24	; 0x1d
     9f8:	8e 8f       	std	Y+30, r24	; 0x1e
     9fa:	61 11       	cpse	r22, r1
     9fc:	0a c0       	rjmp	.+20     	; 0xa12 <xQueueGenericReset+0x6c>
     9fe:	88 85       	ldd	r24, Y+8	; 0x08
     a00:	88 23       	and	r24, r24
     a02:	69 f0       	breq	.+26     	; 0xa1e <xQueueGenericReset+0x78>
     a04:	ce 01       	movw	r24, r28
     a06:	08 96       	adiw	r24, 0x08	; 8
     a08:	52 d5       	rcall	.+2724   	; 0x14ae <xTaskRemoveFromEventList>
     a0a:	88 23       	and	r24, r24
     a0c:	41 f0       	breq	.+16     	; 0xa1e <xQueueGenericReset+0x78>
     a0e:	3a de       	rcall	.-908    	; 0x684 <vPortYield>
     a10:	06 c0       	rjmp	.+12     	; 0xa1e <xQueueGenericReset+0x78>
     a12:	ce 01       	movw	r24, r28
     a14:	08 96       	adiw	r24, 0x08	; 8
     a16:	fd dc       	rcall	.-1542   	; 0x412 <vListInitialise>
     a18:	ce 01       	movw	r24, r28
     a1a:	41 96       	adiw	r24, 0x11	; 17
     a1c:	fa dc       	rcall	.-1548   	; 0x412 <vListInitialise>
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <xQueueGenericCreate>:
     a2a:	ff 92       	push	r15
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	08 2f       	mov	r16, r24
     a36:	16 2f       	mov	r17, r22
     a38:	f4 2e       	mov	r15, r20
     a3a:	66 23       	and	r22, r22
     a3c:	b9 f0       	breq	.+46     	; 0xa6c <xQueueGenericCreate+0x42>
     a3e:	86 9f       	mul	r24, r22
     a40:	c0 01       	movw	r24, r0
     a42:	11 24       	eor	r1, r1
     a44:	81 96       	adiw	r24, 0x21	; 33
     a46:	c7 dc       	rcall	.-1650   	; 0x3d6 <pvPortMalloc>
     a48:	ec 01       	movw	r28, r24
     a4a:	00 97       	sbiw	r24, 0x00	; 0
     a4c:	41 f4       	brne	.+16     	; 0xa5e <xQueueGenericCreate+0x34>
     a4e:	14 c0       	rjmp	.+40     	; 0xa78 <xQueueGenericCreate+0x4e>
     a50:	0b 8f       	std	Y+27, r16	; 0x1b
     a52:	1c 8f       	std	Y+28, r17	; 0x1c
     a54:	61 e0       	ldi	r22, 0x01	; 1
     a56:	ce 01       	movw	r24, r28
     a58:	a6 df       	rcall	.-180    	; 0x9a6 <xQueueGenericReset>
     a5a:	f8 a2       	std	Y+32, r15	; 0x20
     a5c:	0d c0       	rjmp	.+26     	; 0xa78 <xQueueGenericCreate+0x4e>
     a5e:	81 96       	adiw	r24, 0x21	; 33
     a60:	99 83       	std	Y+1, r25	; 0x01
     a62:	88 83       	st	Y, r24
     a64:	f5 cf       	rjmp	.-22     	; 0xa50 <xQueueGenericCreate+0x26>
     a66:	d9 83       	std	Y+1, r29	; 0x01
     a68:	c8 83       	st	Y, r28
     a6a:	f2 cf       	rjmp	.-28     	; 0xa50 <xQueueGenericCreate+0x26>
     a6c:	81 e2       	ldi	r24, 0x21	; 33
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	b2 dc       	rcall	.-1692   	; 0x3d6 <pvPortMalloc>
     a72:	ec 01       	movw	r28, r24
     a74:	89 2b       	or	r24, r25
     a76:	b9 f7       	brne	.-18     	; 0xa66 <xQueueGenericCreate+0x3c>
     a78:	ce 01       	movw	r24, r28
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	1f 91       	pop	r17
     a80:	0f 91       	pop	r16
     a82:	ff 90       	pop	r15
     a84:	08 95       	ret

00000a86 <xQueueGenericSend>:
     a86:	9f 92       	push	r9
     a88:	af 92       	push	r10
     a8a:	bf 92       	push	r11
     a8c:	cf 92       	push	r12
     a8e:	df 92       	push	r13
     a90:	ef 92       	push	r14
     a92:	ff 92       	push	r15
     a94:	0f 93       	push	r16
     a96:	1f 93       	push	r17
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	00 d0       	rcall	.+0      	; 0xa9e <xQueueGenericSend+0x18>
     a9e:	1f 92       	push	r1
     aa0:	1f 92       	push	r1
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
     aa6:	8c 01       	movw	r16, r24
     aa8:	6b 01       	movw	r12, r22
     aaa:	5d 83       	std	Y+5, r21	; 0x05
     aac:	4c 83       	std	Y+4, r20	; 0x04
     aae:	a2 2e       	mov	r10, r18
     ab0:	b1 2c       	mov	r11, r1
     ab2:	99 24       	eor	r9, r9
     ab4:	93 94       	inc	r9
     ab6:	7c 01       	movw	r14, r24
     ab8:	88 e0       	ldi	r24, 0x08	; 8
     aba:	e8 0e       	add	r14, r24
     abc:	f1 1c       	adc	r15, r1
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	0f 92       	push	r0
     ac4:	f8 01       	movw	r30, r16
     ac6:	92 8d       	ldd	r25, Z+26	; 0x1a
     ac8:	83 8d       	ldd	r24, Z+27	; 0x1b
     aca:	98 17       	cp	r25, r24
     acc:	18 f0       	brcs	.+6      	; 0xad4 <xQueueGenericSend+0x4e>
     ace:	f2 e0       	ldi	r31, 0x02	; 2
     ad0:	af 12       	cpse	r10, r31
     ad2:	15 c0       	rjmp	.+42     	; 0xafe <xQueueGenericSend+0x78>
     ad4:	4a 2d       	mov	r20, r10
     ad6:	b6 01       	movw	r22, r12
     ad8:	c8 01       	movw	r24, r16
     ada:	a4 de       	rcall	.-696    	; 0x824 <prvCopyDataToQueue>
     adc:	f8 01       	movw	r30, r16
     ade:	91 89       	ldd	r25, Z+17	; 0x11
     ae0:	99 23       	and	r25, r25
     ae2:	39 f0       	breq	.+14     	; 0xaf2 <xQueueGenericSend+0x6c>
     ae4:	c8 01       	movw	r24, r16
     ae6:	41 96       	adiw	r24, 0x11	; 17
     ae8:	e2 d4       	rcall	.+2500   	; 0x14ae <xTaskRemoveFromEventList>
     aea:	88 23       	and	r24, r24
     aec:	21 f0       	breq	.+8      	; 0xaf6 <xQueueGenericSend+0x70>
     aee:	ca dd       	rcall	.-1132   	; 0x684 <vPortYield>
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <xQueueGenericSend+0x70>
     af2:	81 11       	cpse	r24, r1
     af4:	c7 dd       	rcall	.-1138   	; 0x684 <vPortYield>
     af6:	0f 90       	pop	r0
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	45 c0       	rjmp	.+138    	; 0xb88 <xQueueGenericSend+0x102>
     afe:	8c 81       	ldd	r24, Y+4	; 0x04
     b00:	9d 81       	ldd	r25, Y+5	; 0x05
     b02:	89 2b       	or	r24, r25
     b04:	21 f4       	brne	.+8      	; 0xb0e <xQueueGenericSend+0x88>
     b06:	0f 90       	pop	r0
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	3d c0       	rjmp	.+122    	; 0xb88 <xQueueGenericSend+0x102>
     b0e:	b1 10       	cpse	r11, r1
     b10:	04 c0       	rjmp	.+8      	; 0xb1a <xQueueGenericSend+0x94>
     b12:	ce 01       	movw	r24, r28
     b14:	01 96       	adiw	r24, 0x01	; 1
     b16:	12 d5       	rcall	.+2596   	; 0x153c <vTaskInternalSetTimeOutState>
     b18:	b9 2c       	mov	r11, r9
     b1a:	0f 90       	pop	r0
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	d2 d2       	rcall	.+1444   	; 0x10c4 <vTaskSuspendAll>
     b20:	0f b6       	in	r0, 0x3f	; 63
     b22:	f8 94       	cli
     b24:	0f 92       	push	r0
     b26:	f8 01       	movw	r30, r16
     b28:	85 8d       	ldd	r24, Z+29	; 0x1d
     b2a:	8f 3f       	cpi	r24, 0xFF	; 255
     b2c:	09 f4       	brne	.+2      	; 0xb30 <xQueueGenericSend+0xaa>
     b2e:	15 8e       	std	Z+29, r1	; 0x1d
     b30:	f8 01       	movw	r30, r16
     b32:	86 8d       	ldd	r24, Z+30	; 0x1e
     b34:	8f 3f       	cpi	r24, 0xFF	; 255
     b36:	09 f4       	brne	.+2      	; 0xb3a <xQueueGenericSend+0xb4>
     b38:	16 8e       	std	Z+30, r1	; 0x1e
     b3a:	0f 90       	pop	r0
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	be 01       	movw	r22, r28
     b40:	6c 5f       	subi	r22, 0xFC	; 252
     b42:	7f 4f       	sbci	r23, 0xFF	; 255
     b44:	ce 01       	movw	r24, r28
     b46:	01 96       	adiw	r24, 0x01	; 1
     b48:	04 d5       	rcall	.+2568   	; 0x1552 <xTaskCheckForTimeOut>
     b4a:	81 11       	cpse	r24, r1
     b4c:	19 c0       	rjmp	.+50     	; 0xb80 <xQueueGenericSend+0xfa>
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	0f 92       	push	r0
     b54:	f8 01       	movw	r30, r16
     b56:	92 8d       	ldd	r25, Z+26	; 0x1a
     b58:	83 8d       	ldd	r24, Z+27	; 0x1b
     b5a:	0f 90       	pop	r0
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	98 13       	cpse	r25, r24
     b60:	0b c0       	rjmp	.+22     	; 0xb78 <xQueueGenericSend+0xf2>
     b62:	6c 81       	ldd	r22, Y+4	; 0x04
     b64:	7d 81       	ldd	r23, Y+5	; 0x05
     b66:	c7 01       	movw	r24, r14
     b68:	7a d4       	rcall	.+2292   	; 0x145e <vTaskPlaceOnEventList>
     b6a:	c8 01       	movw	r24, r16
     b6c:	d3 de       	rcall	.-602    	; 0x914 <prvUnlockQueue>
     b6e:	71 d3       	rcall	.+1762   	; 0x1252 <xTaskResumeAll>
     b70:	81 11       	cpse	r24, r1
     b72:	a5 cf       	rjmp	.-182    	; 0xabe <xQueueGenericSend+0x38>
     b74:	87 dd       	rcall	.-1266   	; 0x684 <vPortYield>
     b76:	a3 cf       	rjmp	.-186    	; 0xabe <xQueueGenericSend+0x38>
     b78:	c8 01       	movw	r24, r16
     b7a:	cc de       	rcall	.-616    	; 0x914 <prvUnlockQueue>
     b7c:	6a d3       	rcall	.+1748   	; 0x1252 <xTaskResumeAll>
     b7e:	9f cf       	rjmp	.-194    	; 0xabe <xQueueGenericSend+0x38>
     b80:	c8 01       	movw	r24, r16
     b82:	c8 de       	rcall	.-624    	; 0x914 <prvUnlockQueue>
     b84:	66 d3       	rcall	.+1740   	; 0x1252 <xTaskResumeAll>
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	df 91       	pop	r29
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
     b9c:	ef 90       	pop	r14
     b9e:	df 90       	pop	r13
     ba0:	cf 90       	pop	r12
     ba2:	bf 90       	pop	r11
     ba4:	af 90       	pop	r10
     ba6:	9f 90       	pop	r9
     ba8:	08 95       	ret

00000baa <xQueueGenericSendFromISR>:
     baa:	ef 92       	push	r14
     bac:	ff 92       	push	r15
     bae:	0f 93       	push	r16
     bb0:	1f 93       	push	r17
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	8a 01       	movw	r16, r20
     bb8:	fc 01       	movw	r30, r24
     bba:	52 8d       	ldd	r21, Z+26	; 0x1a
     bbc:	33 8d       	ldd	r19, Z+27	; 0x1b
     bbe:	53 17       	cp	r21, r19
     bc0:	10 f0       	brcs	.+4      	; 0xbc6 <xQueueGenericSendFromISR+0x1c>
     bc2:	22 30       	cpi	r18, 0x02	; 2
     bc4:	e1 f4       	brne	.+56     	; 0xbfe <xQueueGenericSendFromISR+0x54>
     bc6:	42 2f       	mov	r20, r18
     bc8:	78 01       	movw	r14, r16
     bca:	ec 01       	movw	r28, r24
     bcc:	1e 8d       	ldd	r17, Y+30	; 0x1e
     bce:	2a de       	rcall	.-940    	; 0x824 <prvCopyDataToQueue>
     bd0:	1f 3f       	cpi	r17, 0xFF	; 255
     bd2:	79 f4       	brne	.+30     	; 0xbf2 <xQueueGenericSendFromISR+0x48>
     bd4:	89 89       	ldd	r24, Y+17	; 0x11
     bd6:	88 23       	and	r24, r24
     bd8:	a1 f0       	breq	.+40     	; 0xc02 <xQueueGenericSendFromISR+0x58>
     bda:	ce 01       	movw	r24, r28
     bdc:	41 96       	adiw	r24, 0x11	; 17
     bde:	67 d4       	rcall	.+2254   	; 0x14ae <xTaskRemoveFromEventList>
     be0:	88 23       	and	r24, r24
     be2:	89 f0       	breq	.+34     	; 0xc06 <xQueueGenericSendFromISR+0x5c>
     be4:	e1 14       	cp	r14, r1
     be6:	f1 04       	cpc	r15, r1
     be8:	81 f0       	breq	.+32     	; 0xc0a <xQueueGenericSendFromISR+0x60>
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	f7 01       	movw	r30, r14
     bee:	80 83       	st	Z, r24
     bf0:	0d c0       	rjmp	.+26     	; 0xc0c <xQueueGenericSendFromISR+0x62>
     bf2:	ff 24       	eor	r15, r15
     bf4:	f3 94       	inc	r15
     bf6:	f1 0e       	add	r15, r17
     bf8:	fe 8e       	std	Y+30, r15	; 0x1e
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	07 c0       	rjmp	.+14     	; 0xc0c <xQueueGenericSendFromISR+0x62>
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	05 c0       	rjmp	.+10     	; 0xc0c <xQueueGenericSendFromISR+0x62>
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	03 c0       	rjmp	.+6      	; 0xc0c <xQueueGenericSendFromISR+0x62>
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	01 c0       	rjmp	.+2      	; 0xc0c <xQueueGenericSendFromISR+0x62>
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	1f 91       	pop	r17
     c12:	0f 91       	pop	r16
     c14:	ff 90       	pop	r15
     c16:	ef 90       	pop	r14
     c18:	08 95       	ret

00000c1a <xQueueReceive>:
     c1a:	9f 92       	push	r9
     c1c:	af 92       	push	r10
     c1e:	bf 92       	push	r11
     c20:	cf 92       	push	r12
     c22:	df 92       	push	r13
     c24:	ef 92       	push	r14
     c26:	ff 92       	push	r15
     c28:	0f 93       	push	r16
     c2a:	1f 93       	push	r17
     c2c:	cf 93       	push	r28
     c2e:	df 93       	push	r29
     c30:	00 d0       	rcall	.+0      	; 0xc32 <xQueueReceive+0x18>
     c32:	1f 92       	push	r1
     c34:	1f 92       	push	r1
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62
     c3a:	8c 01       	movw	r16, r24
     c3c:	5b 01       	movw	r10, r22
     c3e:	5d 83       	std	Y+5, r21	; 0x05
     c40:	4c 83       	std	Y+4, r20	; 0x04
     c42:	e1 2c       	mov	r14, r1
     c44:	99 24       	eor	r9, r9
     c46:	93 94       	inc	r9
     c48:	6c 01       	movw	r12, r24
     c4a:	81 e1       	ldi	r24, 0x11	; 17
     c4c:	c8 0e       	add	r12, r24
     c4e:	d1 1c       	adc	r13, r1
     c50:	0f b6       	in	r0, 0x3f	; 63
     c52:	f8 94       	cli
     c54:	0f 92       	push	r0
     c56:	f8 01       	movw	r30, r16
     c58:	f2 8c       	ldd	r15, Z+26	; 0x1a
     c5a:	ff 20       	and	r15, r15
     c5c:	91 f0       	breq	.+36     	; 0xc82 <xQueueReceive+0x68>
     c5e:	b5 01       	movw	r22, r10
     c60:	c8 01       	movw	r24, r16
     c62:	3e de       	rcall	.-900    	; 0x8e0 <prvCopyDataFromQueue>
     c64:	fa 94       	dec	r15
     c66:	f8 01       	movw	r30, r16
     c68:	f2 8e       	std	Z+26, r15	; 0x1a
     c6a:	80 85       	ldd	r24, Z+8	; 0x08
     c6c:	88 23       	and	r24, r24
     c6e:	29 f0       	breq	.+10     	; 0xc7a <xQueueReceive+0x60>
     c70:	c8 01       	movw	r24, r16
     c72:	08 96       	adiw	r24, 0x08	; 8
     c74:	1c d4       	rcall	.+2104   	; 0x14ae <xTaskRemoveFromEventList>
     c76:	81 11       	cpse	r24, r1
     c78:	05 dd       	rcall	.-1526   	; 0x684 <vPortYield>
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	44 c0       	rjmp	.+136    	; 0xd0a <xQueueReceive+0xf0>
     c82:	8c 81       	ldd	r24, Y+4	; 0x04
     c84:	9d 81       	ldd	r25, Y+5	; 0x05
     c86:	89 2b       	or	r24, r25
     c88:	21 f4       	brne	.+8      	; 0xc92 <xQueueReceive+0x78>
     c8a:	0f 90       	pop	r0
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	3c c0       	rjmp	.+120    	; 0xd0a <xQueueReceive+0xf0>
     c92:	e1 10       	cpse	r14, r1
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <xQueueReceive+0x84>
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	50 d4       	rcall	.+2208   	; 0x153c <vTaskInternalSetTimeOutState>
     c9c:	e9 2c       	mov	r14, r9
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	10 d2       	rcall	.+1056   	; 0x10c4 <vTaskSuspendAll>
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	0f 92       	push	r0
     caa:	f8 01       	movw	r30, r16
     cac:	85 8d       	ldd	r24, Z+29	; 0x1d
     cae:	8f 3f       	cpi	r24, 0xFF	; 255
     cb0:	09 f4       	brne	.+2      	; 0xcb4 <xQueueReceive+0x9a>
     cb2:	15 8e       	std	Z+29, r1	; 0x1d
     cb4:	f8 01       	movw	r30, r16
     cb6:	86 8d       	ldd	r24, Z+30	; 0x1e
     cb8:	8f 3f       	cpi	r24, 0xFF	; 255
     cba:	09 f4       	brne	.+2      	; 0xcbe <xQueueReceive+0xa4>
     cbc:	16 8e       	std	Z+30, r1	; 0x1e
     cbe:	0f 90       	pop	r0
     cc0:	0f be       	out	0x3f, r0	; 63
     cc2:	be 01       	movw	r22, r28
     cc4:	6c 5f       	subi	r22, 0xFC	; 252
     cc6:	7f 4f       	sbci	r23, 0xFF	; 255
     cc8:	ce 01       	movw	r24, r28
     cca:	01 96       	adiw	r24, 0x01	; 1
     ccc:	42 d4       	rcall	.+2180   	; 0x1552 <xTaskCheckForTimeOut>
     cce:	81 11       	cpse	r24, r1
     cd0:	13 c0       	rjmp	.+38     	; 0xcf8 <xQueueReceive+0xde>
     cd2:	c8 01       	movw	r24, r16
     cd4:	9c dd       	rcall	.-1224   	; 0x80e <prvIsQueueEmpty>
     cd6:	88 23       	and	r24, r24
     cd8:	59 f0       	breq	.+22     	; 0xcf0 <xQueueReceive+0xd6>
     cda:	6c 81       	ldd	r22, Y+4	; 0x04
     cdc:	7d 81       	ldd	r23, Y+5	; 0x05
     cde:	c6 01       	movw	r24, r12
     ce0:	be d3       	rcall	.+1916   	; 0x145e <vTaskPlaceOnEventList>
     ce2:	c8 01       	movw	r24, r16
     ce4:	17 de       	rcall	.-978    	; 0x914 <prvUnlockQueue>
     ce6:	b5 d2       	rcall	.+1386   	; 0x1252 <xTaskResumeAll>
     ce8:	81 11       	cpse	r24, r1
     cea:	b2 cf       	rjmp	.-156    	; 0xc50 <xQueueReceive+0x36>
     cec:	cb dc       	rcall	.-1642   	; 0x684 <vPortYield>
     cee:	b0 cf       	rjmp	.-160    	; 0xc50 <xQueueReceive+0x36>
     cf0:	c8 01       	movw	r24, r16
     cf2:	10 de       	rcall	.-992    	; 0x914 <prvUnlockQueue>
     cf4:	ae d2       	rcall	.+1372   	; 0x1252 <xTaskResumeAll>
     cf6:	ac cf       	rjmp	.-168    	; 0xc50 <xQueueReceive+0x36>
     cf8:	c8 01       	movw	r24, r16
     cfa:	0c de       	rcall	.-1000   	; 0x914 <prvUnlockQueue>
     cfc:	aa d2       	rcall	.+1364   	; 0x1252 <xTaskResumeAll>
     cfe:	c8 01       	movw	r24, r16
     d00:	86 dd       	rcall	.-1268   	; 0x80e <prvIsQueueEmpty>
     d02:	88 23       	and	r24, r24
     d04:	09 f4       	brne	.+2      	; 0xd08 <xQueueReceive+0xee>
     d06:	a4 cf       	rjmp	.-184    	; 0xc50 <xQueueReceive+0x36>
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	df 90       	pop	r13
     d22:	cf 90       	pop	r12
     d24:	bf 90       	pop	r11
     d26:	af 90       	pop	r10
     d28:	9f 90       	pop	r9
     d2a:	08 95       	ret

00000d2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
     d2c:	cf 93       	push	r28
     d2e:	df 93       	push	r29
     d30:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	0f 92       	push	r0
     d38:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d3a:	8f 3f       	cpi	r24, 0xFF	; 255
     d3c:	09 f4       	brne	.+2      	; 0xd40 <vQueueWaitForMessageRestricted+0x14>
     d3e:	1d 8e       	std	Y+29, r1	; 0x1d
     d40:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d42:	8f 3f       	cpi	r24, 0xFF	; 255
     d44:	09 f4       	brne	.+2      	; 0xd48 <vQueueWaitForMessageRestricted+0x1c>
     d46:	1e 8e       	std	Y+30, r1	; 0x1e
     d48:	0f 90       	pop	r0
     d4a:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     d4c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d4e:	81 11       	cpse	r24, r1
     d50:	03 c0       	rjmp	.+6      	; 0xd58 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     d52:	ce 01       	movw	r24, r28
     d54:	41 96       	adiw	r24, 0x11	; 17
     d56:	93 d3       	rcall	.+1830   	; 0x147e <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
     d58:	ce 01       	movw	r24, r28
     d5a:	dc dd       	rcall	.-1096   	; 0x914 <prvUnlockQueue>
    }
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <prvResetNextTaskUnblockTime>:
     d62:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <pxDelayedTaskList>
     d66:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <pxDelayedTaskList+0x1>
     d6a:	80 81       	ld	r24, Z
     d6c:	81 11       	cpse	r24, r1
     d6e:	07 c0       	rjmp	.+14     	; 0xd7e <prvResetNextTaskUnblockTime+0x1c>
     d70:	8f ef       	ldi	r24, 0xFF	; 255
     d72:	9f ef       	ldi	r25, 0xFF	; 255
     d74:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <xNextTaskUnblockTime+0x1>
     d78:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <xNextTaskUnblockTime>
     d7c:	08 95       	ret
     d7e:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <pxDelayedTaskList>
     d82:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <pxDelayedTaskList+0x1>
     d86:	05 80       	ldd	r0, Z+5	; 0x05
     d88:	f6 81       	ldd	r31, Z+6	; 0x06
     d8a:	e0 2d       	mov	r30, r0
     d8c:	06 80       	ldd	r0, Z+6	; 0x06
     d8e:	f7 81       	ldd	r31, Z+7	; 0x07
     d90:	e0 2d       	mov	r30, r0
     d92:	82 81       	ldd	r24, Z+2	; 0x02
     d94:	93 81       	ldd	r25, Z+3	; 0x03
     d96:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <xNextTaskUnblockTime+0x1>
     d9a:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <xNextTaskUnblockTime>
     d9e:	08 95       	ret

00000da0 <prvAddCurrentTaskToDelayedList>:
     da0:	ff 92       	push	r15
     da2:	0f 93       	push	r16
     da4:	1f 93       	push	r17
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	ec 01       	movw	r28, r24
     dac:	f6 2e       	mov	r15, r22
     dae:	00 91 1f 02 	lds	r16, 0x021F	; 0x80021f <xTickCount>
     db2:	10 91 20 02 	lds	r17, 0x0220	; 0x800220 <xTickCount+0x1>
     db6:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <pxCurrentTCB>
     dba:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
     dbe:	02 96       	adiw	r24, 0x02	; 2
     dc0:	8c db       	rcall	.-2280   	; 0x4da <uxListRemove>
     dc2:	cf 3f       	cpi	r28, 0xFF	; 255
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
     dc6:	d8 07       	cpc	r29, r24
     dc8:	61 f4       	brne	.+24     	; 0xde2 <prvAddCurrentTaskToDelayedList+0x42>
     dca:	ff 20       	and	r15, r15
     dcc:	51 f0       	breq	.+20     	; 0xde2 <prvAddCurrentTaskToDelayedList+0x42>
     dce:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <pxCurrentTCB>
     dd2:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
     dd6:	6e 5f       	subi	r22, 0xFE	; 254
     dd8:	7f 4f       	sbci	r23, 0xFF	; 255
     dda:	82 e2       	ldi	r24, 0x22	; 34
     ddc:	92 e0       	ldi	r25, 0x02	; 2
     dde:	2b db       	rcall	.-2474   	; 0x436 <vListInsertEnd>
     de0:	2d c0       	rjmp	.+90     	; 0xe3c <prvAddCurrentTaskToDelayedList+0x9c>
     de2:	c0 0f       	add	r28, r16
     de4:	d1 1f       	adc	r29, r17
     de6:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <pxCurrentTCB>
     dea:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
     dee:	d3 83       	std	Z+3, r29	; 0x03
     df0:	c2 83       	std	Z+2, r28	; 0x02
     df2:	c0 17       	cp	r28, r16
     df4:	d1 07       	cpc	r29, r17
     df6:	60 f4       	brcc	.+24     	; 0xe10 <prvAddCurrentTaskToDelayedList+0x70>
     df8:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <pxCurrentTCB>
     dfc:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
     e00:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <pxOverflowDelayedTaskList>
     e04:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <pxOverflowDelayedTaskList+0x1>
     e08:	6e 5f       	subi	r22, 0xFE	; 254
     e0a:	7f 4f       	sbci	r23, 0xFF	; 255
     e0c:	35 db       	rcall	.-2454   	; 0x478 <vListInsert>
     e0e:	16 c0       	rjmp	.+44     	; 0xe3c <prvAddCurrentTaskToDelayedList+0x9c>
     e10:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <pxCurrentTCB>
     e14:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
     e18:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <pxDelayedTaskList>
     e1c:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <pxDelayedTaskList+0x1>
     e20:	6e 5f       	subi	r22, 0xFE	; 254
     e22:	7f 4f       	sbci	r23, 0xFF	; 255
     e24:	29 db       	rcall	.-2478   	; 0x478 <vListInsert>
     e26:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <xNextTaskUnblockTime>
     e2a:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <xNextTaskUnblockTime+0x1>
     e2e:	c8 17       	cp	r28, r24
     e30:	d9 07       	cpc	r29, r25
     e32:	20 f4       	brcc	.+8      	; 0xe3c <prvAddCurrentTaskToDelayedList+0x9c>
     e34:	d0 93 18 02 	sts	0x0218, r29	; 0x800218 <xNextTaskUnblockTime+0x1>
     e38:	c0 93 17 02 	sts	0x0217, r28	; 0x800217 <xNextTaskUnblockTime>
     e3c:	df 91       	pop	r29
     e3e:	cf 91       	pop	r28
     e40:	1f 91       	pop	r17
     e42:	0f 91       	pop	r16
     e44:	ff 90       	pop	r15
     e46:	08 95       	ret

00000e48 <xTaskCreate>:
     e48:	4f 92       	push	r4
     e4a:	5f 92       	push	r5
     e4c:	6f 92       	push	r6
     e4e:	7f 92       	push	r7
     e50:	8f 92       	push	r8
     e52:	9f 92       	push	r9
     e54:	af 92       	push	r10
     e56:	bf 92       	push	r11
     e58:	cf 92       	push	r12
     e5a:	df 92       	push	r13
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	4c 01       	movw	r8, r24
     e68:	6b 01       	movw	r12, r22
     e6a:	5a 01       	movw	r10, r20
     e6c:	29 01       	movw	r4, r18
     e6e:	ca 01       	movw	r24, r20
     e70:	b2 da       	rcall	.-2716   	; 0x3d6 <pvPortMalloc>
     e72:	3c 01       	movw	r6, r24
     e74:	89 2b       	or	r24, r25
     e76:	09 f4       	brne	.+2      	; 0xe7a <xTaskCreate+0x32>
     e78:	e3 c0       	rjmp	.+454    	; 0x1040 <xTaskCreate+0x1f8>
     e7a:	8c e2       	ldi	r24, 0x2C	; 44
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	ab da       	rcall	.-2730   	; 0x3d6 <pvPortMalloc>
     e80:	ec 01       	movw	r28, r24
     e82:	89 2b       	or	r24, r25
     e84:	91 f0       	breq	.+36     	; 0xeaa <xTaskCreate+0x62>
     e86:	78 8e       	std	Y+24, r7	; 0x18
     e88:	6f 8a       	std	Y+23, r6	; 0x17
     e8a:	a5 01       	movw	r20, r10
     e8c:	65 ea       	ldi	r22, 0xA5	; 165
     e8e:	70 e0       	ldi	r23, 0x00	; 0
     e90:	c3 01       	movw	r24, r6
     e92:	63 d6       	rcall	.+3270   	; 0x1b5a <memset>
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	a8 1a       	sub	r10, r24
     e98:	b1 08       	sbc	r11, r1
     e9a:	8f 89       	ldd	r24, Y+23	; 0x17
     e9c:	98 8d       	ldd	r25, Y+24	; 0x18
     e9e:	a8 0e       	add	r10, r24
     ea0:	b9 1e       	adc	r11, r25
     ea2:	c1 14       	cp	r12, r1
     ea4:	d1 04       	cpc	r13, r1
     ea6:	21 f4       	brne	.+8      	; 0xeb0 <xTaskCreate+0x68>
     ea8:	1f c0       	rjmp	.+62     	; 0xee8 <xTaskCreate+0xa0>
     eaa:	c3 01       	movw	r24, r6
     eac:	a5 da       	rcall	.-2742   	; 0x3f8 <vPortFree>
     eae:	c8 c0       	rjmp	.+400    	; 0x1040 <xTaskCreate+0x1f8>
     eb0:	d6 01       	movw	r26, r12
     eb2:	8c 91       	ld	r24, X
     eb4:	89 8f       	std	Y+25, r24	; 0x19
     eb6:	8c 91       	ld	r24, X
     eb8:	88 23       	and	r24, r24
     eba:	a1 f0       	breq	.+40     	; 0xee4 <xTaskCreate+0x9c>
     ebc:	ae 01       	movw	r20, r28
     ebe:	46 5e       	subi	r20, 0xE6	; 230
     ec0:	5f 4f       	sbci	r21, 0xFF	; 255
     ec2:	f6 01       	movw	r30, r12
     ec4:	31 96       	adiw	r30, 0x01	; 1
     ec6:	b8 e0       	ldi	r27, 0x08	; 8
     ec8:	cb 0e       	add	r12, r27
     eca:	d1 1c       	adc	r13, r1
     ecc:	cf 01       	movw	r24, r30
     ece:	21 91       	ld	r18, Z+
     ed0:	da 01       	movw	r26, r20
     ed2:	2d 93       	st	X+, r18
     ed4:	ad 01       	movw	r20, r26
     ed6:	dc 01       	movw	r26, r24
     ed8:	8c 91       	ld	r24, X
     eda:	88 23       	and	r24, r24
     edc:	19 f0       	breq	.+6      	; 0xee4 <xTaskCreate+0x9c>
     ede:	ec 15       	cp	r30, r12
     ee0:	fd 05       	cpc	r31, r13
     ee2:	a1 f7       	brne	.-24     	; 0xecc <xTaskCreate+0x84>
     ee4:	18 a2       	std	Y+32, r1	; 0x20
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <xTaskCreate+0xa2>
     ee8:	19 8e       	std	Y+25, r1	; 0x19
     eea:	04 30       	cpi	r16, 0x04	; 4
     eec:	08 f0       	brcs	.+2      	; 0xef0 <xTaskCreate+0xa8>
     eee:	03 e0       	ldi	r16, 0x03	; 3
     ef0:	0e 8b       	std	Y+22, r16	; 0x16
     ef2:	0b a3       	std	Y+35, r16	; 0x23
     ef4:	1c a2       	std	Y+36, r1	; 0x24
     ef6:	6e 01       	movw	r12, r28
     ef8:	b2 e0       	ldi	r27, 0x02	; 2
     efa:	cb 0e       	add	r12, r27
     efc:	d1 1c       	adc	r13, r1
     efe:	c6 01       	movw	r24, r12
     f00:	96 da       	rcall	.-2772   	; 0x42e <vListInitialiseItem>
     f02:	ce 01       	movw	r24, r28
     f04:	0c 96       	adiw	r24, 0x0c	; 12
     f06:	93 da       	rcall	.-2778   	; 0x42e <vListInitialiseItem>
     f08:	d9 87       	std	Y+9, r29	; 0x09
     f0a:	c8 87       	std	Y+8, r28	; 0x08
     f0c:	84 e0       	ldi	r24, 0x04	; 4
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	80 1b       	sub	r24, r16
     f12:	91 09       	sbc	r25, r1
     f14:	9d 87       	std	Y+13, r25	; 0x0d
     f16:	8c 87       	std	Y+12, r24	; 0x0c
     f18:	db 8b       	std	Y+19, r29	; 0x13
     f1a:	ca 8b       	std	Y+18, r28	; 0x12
     f1c:	1e a2       	std	Y+38, r1	; 0x26
     f1e:	1d a2       	std	Y+37, r1	; 0x25
     f20:	1f a2       	std	Y+39, r1	; 0x27
     f22:	18 a6       	std	Y+40, r1	; 0x28
     f24:	19 a6       	std	Y+41, r1	; 0x29
     f26:	1a a6       	std	Y+42, r1	; 0x2a
     f28:	1b a6       	std	Y+43, r1	; 0x2b
     f2a:	a2 01       	movw	r20, r4
     f2c:	b4 01       	movw	r22, r8
     f2e:	c5 01       	movw	r24, r10
     f30:	fb da       	rcall	.-2570   	; 0x528 <pxPortInitialiseStack>
     f32:	99 83       	std	Y+1, r25	; 0x01
     f34:	88 83       	st	Y, r24
     f36:	e1 14       	cp	r14, r1
     f38:	f1 04       	cpc	r15, r1
     f3a:	19 f0       	breq	.+6      	; 0xf42 <xTaskCreate+0xfa>
     f3c:	f7 01       	movw	r30, r14
     f3e:	d1 83       	std	Z+1, r29	; 0x01
     f40:	c0 83       	st	Z, r28
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	0f 92       	push	r0
     f48:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <uxCurrentNumberOfTasks>
     f4c:	8f 5f       	subi	r24, 0xFF	; 255
     f4e:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <uxCurrentNumberOfTasks>
     f52:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <pxCurrentTCB>
     f56:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
     f5a:	89 2b       	or	r24, r25
     f5c:	89 f5       	brne	.+98     	; 0xfc0 <xTaskCreate+0x178>
     f5e:	d0 93 79 02 	sts	0x0279, r29	; 0x800279 <pxCurrentTCB+0x1>
     f62:	c0 93 78 02 	sts	0x0278, r28	; 0x800278 <pxCurrentTCB>
     f66:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <uxCurrentNumberOfTasks>
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	09 f0       	breq	.+2      	; 0xf70 <xTaskCreate+0x128>
     f6e:	38 c0       	rjmp	.+112    	; 0xfe0 <xTaskCreate+0x198>
     f70:	84 e5       	ldi	r24, 0x54	; 84
     f72:	92 e0       	ldi	r25, 0x02	; 2
     f74:	4e da       	rcall	.-2916   	; 0x412 <vListInitialise>
     f76:	8d e5       	ldi	r24, 0x5D	; 93
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	4b da       	rcall	.-2922   	; 0x412 <vListInitialise>
     f7c:	86 e6       	ldi	r24, 0x66	; 102
     f7e:	92 e0       	ldi	r25, 0x02	; 2
     f80:	48 da       	rcall	.-2928   	; 0x412 <vListInitialise>
     f82:	8f e6       	ldi	r24, 0x6F	; 111
     f84:	92 e0       	ldi	r25, 0x02	; 2
     f86:	45 da       	rcall	.-2934   	; 0x412 <vListInitialise>
     f88:	8b e4       	ldi	r24, 0x4B	; 75
     f8a:	92 e0       	ldi	r25, 0x02	; 2
     f8c:	42 da       	rcall	.-2940   	; 0x412 <vListInitialise>
     f8e:	82 e4       	ldi	r24, 0x42	; 66
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	3f da       	rcall	.-2946   	; 0x412 <vListInitialise>
     f94:	85 e3       	ldi	r24, 0x35	; 53
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	3c da       	rcall	.-2952   	; 0x412 <vListInitialise>
     f9a:	8c e2       	ldi	r24, 0x2C	; 44
     f9c:	92 e0       	ldi	r25, 0x02	; 2
     f9e:	39 da       	rcall	.-2958   	; 0x412 <vListInitialise>
     fa0:	82 e2       	ldi	r24, 0x22	; 34
     fa2:	92 e0       	ldi	r25, 0x02	; 2
     fa4:	36 da       	rcall	.-2964   	; 0x412 <vListInitialise>
     fa6:	8b e4       	ldi	r24, 0x4B	; 75
     fa8:	92 e0       	ldi	r25, 0x02	; 2
     faa:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <pxDelayedTaskList+0x1>
     fae:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <pxDelayedTaskList>
     fb2:	82 e4       	ldi	r24, 0x42	; 66
     fb4:	92 e0       	ldi	r25, 0x02	; 2
     fb6:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <pxOverflowDelayedTaskList+0x1>
     fba:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <pxOverflowDelayedTaskList>
     fbe:	10 c0       	rjmp	.+32     	; 0xfe0 <xTaskCreate+0x198>
     fc0:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <xSchedulerRunning>
     fc4:	81 11       	cpse	r24, r1
     fc6:	0c c0       	rjmp	.+24     	; 0xfe0 <xTaskCreate+0x198>
     fc8:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <pxCurrentTCB>
     fcc:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
     fd0:	96 89       	ldd	r25, Z+22	; 0x16
     fd2:	8e 89       	ldd	r24, Y+22	; 0x16
     fd4:	89 17       	cp	r24, r25
     fd6:	20 f0       	brcs	.+8      	; 0xfe0 <xTaskCreate+0x198>
     fd8:	d0 93 79 02 	sts	0x0279, r29	; 0x800279 <pxCurrentTCB+0x1>
     fdc:	c0 93 78 02 	sts	0x0278, r28	; 0x800278 <pxCurrentTCB>
     fe0:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <uxTaskNumber>
     fe4:	8f 5f       	subi	r24, 0xFF	; 255
     fe6:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <uxTaskNumber>
     fea:	89 a3       	std	Y+33, r24	; 0x21
     fec:	8e 89       	ldd	r24, Y+22	; 0x16
     fee:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <uxTopReadyPriority>
     ff2:	98 17       	cp	r25, r24
     ff4:	10 f4       	brcc	.+4      	; 0xffa <xTaskCreate+0x1b2>
     ff6:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <uxTopReadyPriority>
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	9c 01       	movw	r18, r24
     ffe:	22 0f       	add	r18, r18
    1000:	33 1f       	adc	r19, r19
    1002:	22 0f       	add	r18, r18
    1004:	33 1f       	adc	r19, r19
    1006:	22 0f       	add	r18, r18
    1008:	33 1f       	adc	r19, r19
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	b6 01       	movw	r22, r12
    1010:	8c 5a       	subi	r24, 0xAC	; 172
    1012:	9d 4f       	sbci	r25, 0xFD	; 253
    1014:	10 da       	rcall	.-3040   	; 0x436 <vListInsertEnd>
    1016:	0f 90       	pop	r0
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <xSchedulerRunning>
    101e:	88 23       	and	r24, r24
    1020:	59 f0       	breq	.+22     	; 0x1038 <xTaskCreate+0x1f0>
    1022:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <pxCurrentTCB>
    1026:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
    102a:	96 89       	ldd	r25, Z+22	; 0x16
    102c:	8e 89       	ldd	r24, Y+22	; 0x16
    102e:	98 17       	cp	r25, r24
    1030:	28 f4       	brcc	.+10     	; 0x103c <xTaskCreate+0x1f4>
    1032:	28 db       	rcall	.-2480   	; 0x684 <vPortYield>
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	05 c0       	rjmp	.+10     	; 0x1042 <xTaskCreate+0x1fa>
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <xTaskCreate+0x1fa>
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <xTaskCreate+0x1fa>
    1040:	8f ef       	ldi	r24, 0xFF	; 255
    1042:	df 91       	pop	r29
    1044:	cf 91       	pop	r28
    1046:	0f 91       	pop	r16
    1048:	ff 90       	pop	r15
    104a:	ef 90       	pop	r14
    104c:	df 90       	pop	r13
    104e:	cf 90       	pop	r12
    1050:	bf 90       	pop	r11
    1052:	af 90       	pop	r10
    1054:	9f 90       	pop	r9
    1056:	8f 90       	pop	r8
    1058:	7f 90       	pop	r7
    105a:	6f 90       	pop	r6
    105c:	5f 90       	pop	r5
    105e:	4f 90       	pop	r4
    1060:	08 95       	ret

00001062 <vTaskStartScheduler>:
    1062:	ef 92       	push	r14
    1064:	ff 92       	push	r15
    1066:	0f 93       	push	r16
    1068:	0f 2e       	mov	r0, r31
    106a:	f5 e1       	ldi	r31, 0x15	; 21
    106c:	ef 2e       	mov	r14, r31
    106e:	f2 e0       	ldi	r31, 0x02	; 2
    1070:	ff 2e       	mov	r15, r31
    1072:	f0 2d       	mov	r31, r0
    1074:	00 e0       	ldi	r16, 0x00	; 0
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 ec       	ldi	r20, 0xC0	; 192
    107c:	50 e0       	ldi	r21, 0x00	; 0
    107e:	66 e0       	ldi	r22, 0x06	; 6
    1080:	72 e0       	ldi	r23, 0x02	; 2
    1082:	8c e7       	ldi	r24, 0x7C	; 124
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	e0 de       	rcall	.-576    	; 0xe48 <xTaskCreate>
    1088:	81 30       	cpi	r24, 0x01	; 1
    108a:	c1 f4       	brne	.+48     	; 0x10bc <vTaskStartScheduler+0x5a>
    108c:	40 d3       	rcall	.+1664   	; 0x170e <xTimerCreateTimerTask>
    108e:	81 30       	cpi	r24, 0x01	; 1
    1090:	a9 f4       	brne	.+42     	; 0x10bc <vTaskStartScheduler+0x5a>
    1092:	f8 94       	cli
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	9f ef       	ldi	r25, 0xFF	; 255
    1098:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <xNextTaskUnblockTime+0x1>
    109c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <xNextTaskUnblockTime>
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	80 93 1d 02 	sts	0x021D, r24	; 0x80021d <xSchedulerRunning>
    10a6:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <xTickCount+0x1>
    10aa:	10 92 1f 02 	sts	0x021F, r1	; 0x80021f <xTickCount>
    10ae:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <pxCurrentTCB>
    10b2:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
    10b6:	85 a1       	ldd	r24, Z+37	; 0x25
    10b8:	7e d9       	rcall	.-3332   	; 0x3b6 <task_switch_in>
    10ba:	a8 da       	rcall	.-2736   	; 0x60c <xPortStartScheduler>
    10bc:	0f 91       	pop	r16
    10be:	ff 90       	pop	r15
    10c0:	ef 90       	pop	r14
    10c2:	08 95       	ret

000010c4 <vTaskSuspendAll>:
    10c4:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
    10c8:	8f 5f       	subi	r24, 0xFF	; 255
    10ca:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
    10ce:	08 95       	ret

000010d0 <xTaskGetTickCount>:
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	0f 92       	push	r0
    10d6:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <xTickCount>
    10da:	90 91 20 02 	lds	r25, 0x0220	; 0x800220 <xTickCount+0x1>
    10de:	0f 90       	pop	r0
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	08 95       	ret

000010e4 <xTaskIncrementTick>:
    10e4:	cf 92       	push	r12
    10e6:	df 92       	push	r13
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
    10f8:	81 11       	cpse	r24, r1
    10fa:	95 c0       	rjmp	.+298    	; 0x1226 <xTaskIncrementTick+0x142>
    10fc:	e0 90 1f 02 	lds	r14, 0x021F	; 0x80021f <xTickCount>
    1100:	f0 90 20 02 	lds	r15, 0x0220	; 0x800220 <xTickCount+0x1>
    1104:	8f ef       	ldi	r24, 0xFF	; 255
    1106:	e8 1a       	sub	r14, r24
    1108:	f8 0a       	sbc	r15, r24
    110a:	f0 92 20 02 	sts	0x0220, r15	; 0x800220 <xTickCount+0x1>
    110e:	e0 92 1f 02 	sts	0x021F, r14	; 0x80021f <xTickCount>
    1112:	e1 14       	cp	r14, r1
    1114:	f1 04       	cpc	r15, r1
    1116:	b1 f4       	brne	.+44     	; 0x1144 <xTaskIncrementTick+0x60>
    1118:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <pxDelayedTaskList>
    111c:	90 91 41 02 	lds	r25, 0x0241	; 0x800241 <pxDelayedTaskList+0x1>
    1120:	20 91 3e 02 	lds	r18, 0x023E	; 0x80023e <pxOverflowDelayedTaskList>
    1124:	30 91 3f 02 	lds	r19, 0x023F	; 0x80023f <pxOverflowDelayedTaskList+0x1>
    1128:	30 93 41 02 	sts	0x0241, r19	; 0x800241 <pxDelayedTaskList+0x1>
    112c:	20 93 40 02 	sts	0x0240, r18	; 0x800240 <pxDelayedTaskList>
    1130:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <pxOverflowDelayedTaskList+0x1>
    1134:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <pxOverflowDelayedTaskList>
    1138:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <xNumOfOverflows>
    113c:	8f 5f       	subi	r24, 0xFF	; 255
    113e:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <xNumOfOverflows>
    1142:	0f de       	rcall	.-994    	; 0xd62 <prvResetNextTaskUnblockTime>
    1144:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <xNextTaskUnblockTime>
    1148:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <xNextTaskUnblockTime+0x1>
    114c:	e8 16       	cp	r14, r24
    114e:	f9 06       	cpc	r15, r25
    1150:	10 f4       	brcc	.+4      	; 0x1156 <xTaskIncrementTick+0x72>
    1152:	d1 2c       	mov	r13, r1
    1154:	50 c0       	rjmp	.+160    	; 0x11f6 <xTaskIncrementTick+0x112>
    1156:	d1 2c       	mov	r13, r1
    1158:	cc 24       	eor	r12, r12
    115a:	c3 94       	inc	r12
    115c:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <pxDelayedTaskList>
    1160:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <pxDelayedTaskList+0x1>
    1164:	80 81       	ld	r24, Z
    1166:	81 11       	cpse	r24, r1
    1168:	07 c0       	rjmp	.+14     	; 0x1178 <xTaskIncrementTick+0x94>
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	9f ef       	ldi	r25, 0xFF	; 255
    116e:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <xNextTaskUnblockTime+0x1>
    1172:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <xNextTaskUnblockTime>
    1176:	3f c0       	rjmp	.+126    	; 0x11f6 <xTaskIncrementTick+0x112>
    1178:	e0 91 40 02 	lds	r30, 0x0240	; 0x800240 <pxDelayedTaskList>
    117c:	f0 91 41 02 	lds	r31, 0x0241	; 0x800241 <pxDelayedTaskList+0x1>
    1180:	05 80       	ldd	r0, Z+5	; 0x05
    1182:	f6 81       	ldd	r31, Z+6	; 0x06
    1184:	e0 2d       	mov	r30, r0
    1186:	c6 81       	ldd	r28, Z+6	; 0x06
    1188:	d7 81       	ldd	r29, Z+7	; 0x07
    118a:	8a 81       	ldd	r24, Y+2	; 0x02
    118c:	9b 81       	ldd	r25, Y+3	; 0x03
    118e:	e8 16       	cp	r14, r24
    1190:	f9 06       	cpc	r15, r25
    1192:	28 f4       	brcc	.+10     	; 0x119e <xTaskIncrementTick+0xba>
    1194:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <xNextTaskUnblockTime+0x1>
    1198:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <xNextTaskUnblockTime>
    119c:	2c c0       	rjmp	.+88     	; 0x11f6 <xTaskIncrementTick+0x112>
    119e:	8e 01       	movw	r16, r28
    11a0:	0e 5f       	subi	r16, 0xFE	; 254
    11a2:	1f 4f       	sbci	r17, 0xFF	; 255
    11a4:	c8 01       	movw	r24, r16
    11a6:	99 d9       	rcall	.-3278   	; 0x4da <uxListRemove>
    11a8:	8c 89       	ldd	r24, Y+20	; 0x14
    11aa:	9d 89       	ldd	r25, Y+21	; 0x15
    11ac:	89 2b       	or	r24, r25
    11ae:	19 f0       	breq	.+6      	; 0x11b6 <xTaskIncrementTick+0xd2>
    11b0:	ce 01       	movw	r24, r28
    11b2:	0c 96       	adiw	r24, 0x0c	; 12
    11b4:	92 d9       	rcall	.-3292   	; 0x4da <uxListRemove>
    11b6:	8e 89       	ldd	r24, Y+22	; 0x16
    11b8:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <uxTopReadyPriority>
    11bc:	98 17       	cp	r25, r24
    11be:	10 f4       	brcc	.+4      	; 0x11c4 <xTaskIncrementTick+0xe0>
    11c0:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <uxTopReadyPriority>
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	9c 01       	movw	r18, r24
    11c8:	22 0f       	add	r18, r18
    11ca:	33 1f       	adc	r19, r19
    11cc:	22 0f       	add	r18, r18
    11ce:	33 1f       	adc	r19, r19
    11d0:	22 0f       	add	r18, r18
    11d2:	33 1f       	adc	r19, r19
    11d4:	82 0f       	add	r24, r18
    11d6:	93 1f       	adc	r25, r19
    11d8:	b8 01       	movw	r22, r16
    11da:	8c 5a       	subi	r24, 0xAC	; 172
    11dc:	9d 4f       	sbci	r25, 0xFD	; 253
    11de:	2b d9       	rcall	.-3498   	; 0x436 <vListInsertEnd>
    11e0:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <pxCurrentTCB>
    11e4:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
    11e8:	9e 89       	ldd	r25, Y+22	; 0x16
    11ea:	86 89       	ldd	r24, Z+22	; 0x16
    11ec:	98 17       	cp	r25, r24
    11ee:	08 f4       	brcc	.+2      	; 0x11f2 <xTaskIncrementTick+0x10e>
    11f0:	b5 cf       	rjmp	.-150    	; 0x115c <xTaskIncrementTick+0x78>
    11f2:	dc 2c       	mov	r13, r12
    11f4:	b3 cf       	rjmp	.-154    	; 0x115c <xTaskIncrementTick+0x78>
    11f6:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <pxCurrentTCB>
    11fa:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
    11fe:	86 89       	ldd	r24, Z+22	; 0x16
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	fc 01       	movw	r30, r24
    1204:	ee 0f       	add	r30, r30
    1206:	ff 1f       	adc	r31, r31
    1208:	ee 0f       	add	r30, r30
    120a:	ff 1f       	adc	r31, r31
    120c:	ee 0f       	add	r30, r30
    120e:	ff 1f       	adc	r31, r31
    1210:	8e 0f       	add	r24, r30
    1212:	9f 1f       	adc	r25, r31
    1214:	fc 01       	movw	r30, r24
    1216:	ec 5a       	subi	r30, 0xAC	; 172
    1218:	fd 4f       	sbci	r31, 0xFD	; 253
    121a:	80 81       	ld	r24, Z
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	48 f0       	brcs	.+18     	; 0x1232 <xTaskIncrementTick+0x14e>
    1220:	dd 24       	eor	r13, r13
    1222:	d3 94       	inc	r13
    1224:	06 c0       	rjmp	.+12     	; 0x1232 <xTaskIncrementTick+0x14e>
    1226:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <uxPendedTicks>
    122a:	8f 5f       	subi	r24, 0xFF	; 255
    122c:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <uxPendedTicks>
    1230:	d1 2c       	mov	r13, r1
    1232:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <xYieldPending>
    1236:	88 23       	and	r24, r24
    1238:	11 f0       	breq	.+4      	; 0x123e <xTaskIncrementTick+0x15a>
    123a:	dd 24       	eor	r13, r13
    123c:	d3 94       	inc	r13
    123e:	8d 2d       	mov	r24, r13
    1240:	df 91       	pop	r29
    1242:	cf 91       	pop	r28
    1244:	1f 91       	pop	r17
    1246:	0f 91       	pop	r16
    1248:	ff 90       	pop	r15
    124a:	ef 90       	pop	r14
    124c:	df 90       	pop	r13
    124e:	cf 90       	pop	r12
    1250:	08 95       	ret

00001252 <xTaskResumeAll>:
    1252:	df 92       	push	r13
    1254:	ef 92       	push	r14
    1256:	ff 92       	push	r15
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	cf 93       	push	r28
    125e:	df 93       	push	r29
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	0f 92       	push	r0
    1266:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
    126a:	81 50       	subi	r24, 0x01	; 1
    126c:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
    1270:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
    1274:	81 11       	cpse	r24, r1
    1276:	59 c0       	rjmp	.+178    	; 0x132a <xTaskResumeAll+0xd8>
    1278:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <uxCurrentNumberOfTasks>
    127c:	81 11       	cpse	r24, r1
    127e:	30 c0       	rjmp	.+96     	; 0x12e0 <xTaskResumeAll+0x8e>
    1280:	57 c0       	rjmp	.+174    	; 0x1330 <xTaskResumeAll+0xde>
    1282:	d7 01       	movw	r26, r14
    1284:	15 96       	adiw	r26, 0x05	; 5
    1286:	ed 91       	ld	r30, X+
    1288:	fc 91       	ld	r31, X
    128a:	16 97       	sbiw	r26, 0x06	; 6
    128c:	c6 81       	ldd	r28, Z+6	; 0x06
    128e:	d7 81       	ldd	r29, Z+7	; 0x07
    1290:	ce 01       	movw	r24, r28
    1292:	0c 96       	adiw	r24, 0x0c	; 12
    1294:	22 d9       	rcall	.-3516   	; 0x4da <uxListRemove>
    1296:	8e 01       	movw	r16, r28
    1298:	0e 5f       	subi	r16, 0xFE	; 254
    129a:	1f 4f       	sbci	r17, 0xFF	; 255
    129c:	c8 01       	movw	r24, r16
    129e:	1d d9       	rcall	.-3526   	; 0x4da <uxListRemove>
    12a0:	8e 89       	ldd	r24, Y+22	; 0x16
    12a2:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <uxTopReadyPriority>
    12a6:	98 17       	cp	r25, r24
    12a8:	10 f4       	brcc	.+4      	; 0x12ae <xTaskResumeAll+0x5c>
    12aa:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <uxTopReadyPriority>
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	9c 01       	movw	r18, r24
    12b2:	22 0f       	add	r18, r18
    12b4:	33 1f       	adc	r19, r19
    12b6:	22 0f       	add	r18, r18
    12b8:	33 1f       	adc	r19, r19
    12ba:	22 0f       	add	r18, r18
    12bc:	33 1f       	adc	r19, r19
    12be:	82 0f       	add	r24, r18
    12c0:	93 1f       	adc	r25, r19
    12c2:	b8 01       	movw	r22, r16
    12c4:	8c 5a       	subi	r24, 0xAC	; 172
    12c6:	9d 4f       	sbci	r25, 0xFD	; 253
    12c8:	b6 d8       	rcall	.-3732   	; 0x436 <vListInsertEnd>
    12ca:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <pxCurrentTCB>
    12ce:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
    12d2:	9e 89       	ldd	r25, Y+22	; 0x16
    12d4:	86 89       	ldd	r24, Z+22	; 0x16
    12d6:	98 17       	cp	r25, r24
    12d8:	68 f0       	brcs	.+26     	; 0x12f4 <xTaskResumeAll+0xa2>
    12da:	d0 92 1b 02 	sts	0x021B, r13	; 0x80021b <xYieldPending>
    12de:	0a c0       	rjmp	.+20     	; 0x12f4 <xTaskResumeAll+0xa2>
    12e0:	c0 e0       	ldi	r28, 0x00	; 0
    12e2:	d0 e0       	ldi	r29, 0x00	; 0
    12e4:	0f 2e       	mov	r0, r31
    12e6:	f5 e3       	ldi	r31, 0x35	; 53
    12e8:	ef 2e       	mov	r14, r31
    12ea:	f2 e0       	ldi	r31, 0x02	; 2
    12ec:	ff 2e       	mov	r15, r31
    12ee:	f0 2d       	mov	r31, r0
    12f0:	dd 24       	eor	r13, r13
    12f2:	d3 94       	inc	r13
    12f4:	f7 01       	movw	r30, r14
    12f6:	80 81       	ld	r24, Z
    12f8:	81 11       	cpse	r24, r1
    12fa:	c3 cf       	rjmp	.-122    	; 0x1282 <xTaskResumeAll+0x30>
    12fc:	cd 2b       	or	r28, r29
    12fe:	09 f0       	breq	.+2      	; 0x1302 <xTaskResumeAll+0xb0>
    1300:	30 dd       	rcall	.-1440   	; 0xd62 <prvResetNextTaskUnblockTime>
    1302:	c0 91 1c 02 	lds	r28, 0x021C	; 0x80021c <uxPendedTicks>
    1306:	cc 23       	and	r28, r28
    1308:	49 f0       	breq	.+18     	; 0x131c <xTaskResumeAll+0xca>
    130a:	d1 e0       	ldi	r29, 0x01	; 1
    130c:	eb de       	rcall	.-554    	; 0x10e4 <xTaskIncrementTick>
    130e:	81 11       	cpse	r24, r1
    1310:	d0 93 1b 02 	sts	0x021B, r29	; 0x80021b <xYieldPending>
    1314:	c1 50       	subi	r28, 0x01	; 1
    1316:	d1 f7       	brne	.-12     	; 0x130c <xTaskResumeAll+0xba>
    1318:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <uxPendedTicks>
    131c:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <xYieldPending>
    1320:	88 23       	and	r24, r24
    1322:	29 f0       	breq	.+10     	; 0x132e <xTaskResumeAll+0xdc>
    1324:	af d9       	rcall	.-3234   	; 0x684 <vPortYield>
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	03 c0       	rjmp	.+6      	; 0x1330 <xTaskResumeAll+0xde>
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <xTaskResumeAll+0xde>
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	0f 90       	pop	r0
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	df 90       	pop	r13
    1342:	08 95       	ret

00001344 <vTaskSwitchContext>:
    1344:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
    1348:	88 23       	and	r24, r24
    134a:	21 f0       	breq	.+8      	; 0x1354 <vTaskSwitchContext+0x10>
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <xYieldPending>
    1352:	08 95       	ret
    1354:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <xYieldPending>
    1358:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <pxCurrentTCB>
    135c:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
    1360:	85 a1       	ldd	r24, Z+37	; 0x25
    1362:	33 d8       	rcall	.-3994   	; 0x3ca <task_switch_out>
    1364:	a0 91 78 02 	lds	r26, 0x0278	; 0x800278 <pxCurrentTCB>
    1368:	b0 91 79 02 	lds	r27, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
    136c:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <pxCurrentTCB>
    1370:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
    1374:	2d 91       	ld	r18, X+
    1376:	3c 91       	ld	r19, X
    1378:	87 89       	ldd	r24, Z+23	; 0x17
    137a:	90 8d       	ldd	r25, Z+24	; 0x18
    137c:	82 17       	cp	r24, r18
    137e:	93 07       	cpc	r25, r19
    1380:	58 f0       	brcs	.+22     	; 0x1398 <vTaskSwitchContext+0x54>
    1382:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <pxCurrentTCB>
    1386:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
    138a:	80 91 78 02 	lds	r24, 0x0278	; 0x800278 <pxCurrentTCB>
    138e:	90 91 79 02 	lds	r25, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
    1392:	67 5e       	subi	r22, 0xE7	; 231
    1394:	7f 4f       	sbci	r23, 0xFF	; 255
    1396:	9b d2       	rcall	.+1334   	; 0x18ce <vApplicationStackOverflowHook>
    1398:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <uxTopReadyPriority>
    139c:	82 2f       	mov	r24, r18
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	fc 01       	movw	r30, r24
    13a2:	ee 0f       	add	r30, r30
    13a4:	ff 1f       	adc	r31, r31
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	ee 0f       	add	r30, r30
    13ac:	ff 1f       	adc	r31, r31
    13ae:	e8 0f       	add	r30, r24
    13b0:	f9 1f       	adc	r31, r25
    13b2:	ec 5a       	subi	r30, 0xAC	; 172
    13b4:	fd 4f       	sbci	r31, 0xFD	; 253
    13b6:	30 81       	ld	r19, Z
    13b8:	31 11       	cpse	r19, r1
    13ba:	11 c0       	rjmp	.+34     	; 0x13de <vTaskSwitchContext+0x9a>
    13bc:	21 50       	subi	r18, 0x01	; 1
    13be:	82 2f       	mov	r24, r18
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	fc 01       	movw	r30, r24
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	ee 0f       	add	r30, r30
    13ca:	ff 1f       	adc	r31, r31
    13cc:	ee 0f       	add	r30, r30
    13ce:	ff 1f       	adc	r31, r31
    13d0:	e8 0f       	add	r30, r24
    13d2:	f9 1f       	adc	r31, r25
    13d4:	ec 5a       	subi	r30, 0xAC	; 172
    13d6:	fd 4f       	sbci	r31, 0xFD	; 253
    13d8:	30 81       	ld	r19, Z
    13da:	33 23       	and	r19, r19
    13dc:	79 f3       	breq	.-34     	; 0x13bc <vTaskSwitchContext+0x78>
    13de:	ac 01       	movw	r20, r24
    13e0:	44 0f       	add	r20, r20
    13e2:	55 1f       	adc	r21, r21
    13e4:	44 0f       	add	r20, r20
    13e6:	55 1f       	adc	r21, r21
    13e8:	44 0f       	add	r20, r20
    13ea:	55 1f       	adc	r21, r21
    13ec:	48 0f       	add	r20, r24
    13ee:	59 1f       	adc	r21, r25
    13f0:	da 01       	movw	r26, r20
    13f2:	ac 5a       	subi	r26, 0xAC	; 172
    13f4:	bd 4f       	sbci	r27, 0xFD	; 253
    13f6:	11 96       	adiw	r26, 0x01	; 1
    13f8:	ed 91       	ld	r30, X+
    13fa:	fc 91       	ld	r31, X
    13fc:	12 97       	sbiw	r26, 0x02	; 2
    13fe:	02 80       	ldd	r0, Z+2	; 0x02
    1400:	f3 81       	ldd	r31, Z+3	; 0x03
    1402:	e0 2d       	mov	r30, r0
    1404:	12 96       	adiw	r26, 0x02	; 2
    1406:	fc 93       	st	X, r31
    1408:	ee 93       	st	-X, r30
    140a:	11 97       	sbiw	r26, 0x01	; 1
    140c:	49 5a       	subi	r20, 0xA9	; 169
    140e:	5d 4f       	sbci	r21, 0xFD	; 253
    1410:	e4 17       	cp	r30, r20
    1412:	f5 07       	cpc	r31, r21
    1414:	29 f4       	brne	.+10     	; 0x1420 <vTaskSwitchContext+0xdc>
    1416:	42 81       	ldd	r20, Z+2	; 0x02
    1418:	53 81       	ldd	r21, Z+3	; 0x03
    141a:	fd 01       	movw	r30, r26
    141c:	52 83       	std	Z+2, r21	; 0x02
    141e:	41 83       	std	Z+1, r20	; 0x01
    1420:	fc 01       	movw	r30, r24
    1422:	ee 0f       	add	r30, r30
    1424:	ff 1f       	adc	r31, r31
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	ee 0f       	add	r30, r30
    142c:	ff 1f       	adc	r31, r31
    142e:	8e 0f       	add	r24, r30
    1430:	9f 1f       	adc	r25, r31
    1432:	fc 01       	movw	r30, r24
    1434:	ec 5a       	subi	r30, 0xAC	; 172
    1436:	fd 4f       	sbci	r31, 0xFD	; 253
    1438:	01 80       	ldd	r0, Z+1	; 0x01
    143a:	f2 81       	ldd	r31, Z+2	; 0x02
    143c:	e0 2d       	mov	r30, r0
    143e:	86 81       	ldd	r24, Z+6	; 0x06
    1440:	97 81       	ldd	r25, Z+7	; 0x07
    1442:	90 93 79 02 	sts	0x0279, r25	; 0x800279 <pxCurrentTCB+0x1>
    1446:	80 93 78 02 	sts	0x0278, r24	; 0x800278 <pxCurrentTCB>
    144a:	20 93 1e 02 	sts	0x021E, r18	; 0x80021e <uxTopReadyPriority>
    144e:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <pxCurrentTCB>
    1452:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
    1456:	85 a1       	ldd	r24, Z+37	; 0x25
    1458:	0c 94 db 01 	jmp	0x3b6	; 0x3b6 <task_switch_in>
    145c:	08 95       	ret

0000145e <vTaskPlaceOnEventList>:
    145e:	cf 93       	push	r28
    1460:	df 93       	push	r29
    1462:	eb 01       	movw	r28, r22
    1464:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <pxCurrentTCB>
    1468:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
    146c:	64 5f       	subi	r22, 0xF4	; 244
    146e:	7f 4f       	sbci	r23, 0xFF	; 255
    1470:	03 d8       	rcall	.-4090   	; 0x478 <vListInsert>
    1472:	61 e0       	ldi	r22, 0x01	; 1
    1474:	ce 01       	movw	r24, r28
    1476:	94 dc       	rcall	.-1752   	; 0xda0 <prvAddCurrentTaskToDelayedList>
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <vTaskPlaceOnEventListRestricted>:
    147e:	0f 93       	push	r16
    1480:	1f 93       	push	r17
    1482:	cf 93       	push	r28
    1484:	8b 01       	movw	r16, r22
    1486:	c4 2f       	mov	r28, r20
    1488:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <pxCurrentTCB>
    148c:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
    1490:	64 5f       	subi	r22, 0xF4	; 244
    1492:	7f 4f       	sbci	r23, 0xFF	; 255
    1494:	0e 94 1b 02 	call	0x436	; 0x436 <vListInsertEnd>
    1498:	cc 23       	and	r28, r28
    149a:	11 f0       	breq	.+4      	; 0x14a0 <vTaskPlaceOnEventListRestricted+0x22>
    149c:	0f ef       	ldi	r16, 0xFF	; 255
    149e:	1f ef       	ldi	r17, 0xFF	; 255
    14a0:	6c 2f       	mov	r22, r28
    14a2:	c8 01       	movw	r24, r16
    14a4:	7d dc       	rcall	.-1798   	; 0xda0 <prvAddCurrentTaskToDelayedList>
    14a6:	cf 91       	pop	r28
    14a8:	1f 91       	pop	r17
    14aa:	0f 91       	pop	r16
    14ac:	08 95       	ret

000014ae <xTaskRemoveFromEventList>:
    14ae:	0f 93       	push	r16
    14b0:	1f 93       	push	r17
    14b2:	cf 93       	push	r28
    14b4:	df 93       	push	r29
    14b6:	dc 01       	movw	r26, r24
    14b8:	15 96       	adiw	r26, 0x05	; 5
    14ba:	ed 91       	ld	r30, X+
    14bc:	fc 91       	ld	r31, X
    14be:	16 97       	sbiw	r26, 0x06	; 6
    14c0:	c6 81       	ldd	r28, Z+6	; 0x06
    14c2:	d7 81       	ldd	r29, Z+7	; 0x07
    14c4:	8e 01       	movw	r16, r28
    14c6:	04 5f       	subi	r16, 0xF4	; 244
    14c8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ca:	c8 01       	movw	r24, r16
    14cc:	06 d8       	rcall	.-4084   	; 0x4da <uxListRemove>
    14ce:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
    14d2:	81 11       	cpse	r24, r1
    14d4:	1c c0       	rjmp	.+56     	; 0x150e <xTaskRemoveFromEventList+0x60>
    14d6:	0a 50       	subi	r16, 0x0A	; 10
    14d8:	11 09       	sbc	r17, r1
    14da:	c8 01       	movw	r24, r16
    14dc:	0e 94 6d 02 	call	0x4da	; 0x4da <uxListRemove>
    14e0:	8e 89       	ldd	r24, Y+22	; 0x16
    14e2:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <uxTopReadyPriority>
    14e6:	98 17       	cp	r25, r24
    14e8:	10 f4       	brcc	.+4      	; 0x14ee <xTaskRemoveFromEventList+0x40>
    14ea:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <uxTopReadyPriority>
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	9c 01       	movw	r18, r24
    14f2:	22 0f       	add	r18, r18
    14f4:	33 1f       	adc	r19, r19
    14f6:	22 0f       	add	r18, r18
    14f8:	33 1f       	adc	r19, r19
    14fa:	22 0f       	add	r18, r18
    14fc:	33 1f       	adc	r19, r19
    14fe:	82 0f       	add	r24, r18
    1500:	93 1f       	adc	r25, r19
    1502:	b8 01       	movw	r22, r16
    1504:	8c 5a       	subi	r24, 0xAC	; 172
    1506:	9d 4f       	sbci	r25, 0xFD	; 253
    1508:	0e 94 1b 02 	call	0x436	; 0x436 <vListInsertEnd>
    150c:	05 c0       	rjmp	.+10     	; 0x1518 <xTaskRemoveFromEventList+0x6a>
    150e:	b8 01       	movw	r22, r16
    1510:	85 e3       	ldi	r24, 0x35	; 53
    1512:	92 e0       	ldi	r25, 0x02	; 2
    1514:	0e 94 1b 02 	call	0x436	; 0x436 <vListInsertEnd>
    1518:	e0 91 78 02 	lds	r30, 0x0278	; 0x800278 <pxCurrentTCB>
    151c:	f0 91 79 02 	lds	r31, 0x0279	; 0x800279 <pxCurrentTCB+0x1>
    1520:	9e 89       	ldd	r25, Y+22	; 0x16
    1522:	86 89       	ldd	r24, Z+22	; 0x16
    1524:	89 17       	cp	r24, r25
    1526:	20 f4       	brcc	.+8      	; 0x1530 <xTaskRemoveFromEventList+0x82>
    1528:	81 e0       	ldi	r24, 0x01	; 1
    152a:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <xYieldPending>
    152e:	01 c0       	rjmp	.+2      	; 0x1532 <xTaskRemoveFromEventList+0x84>
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	08 95       	ret

0000153c <vTaskInternalSetTimeOutState>:
    153c:	20 91 1a 02 	lds	r18, 0x021A	; 0x80021a <xNumOfOverflows>
    1540:	fc 01       	movw	r30, r24
    1542:	20 83       	st	Z, r18
    1544:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <xTickCount>
    1548:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <xTickCount+0x1>
    154c:	32 83       	std	Z+2, r19	; 0x02
    154e:	21 83       	std	Z+1, r18	; 0x01
    1550:	08 95       	ret

00001552 <xTaskCheckForTimeOut>:
    1552:	cf 93       	push	r28
    1554:	df 93       	push	r29
    1556:	0f b6       	in	r0, 0x3f	; 63
    1558:	f8 94       	cli
    155a:	0f 92       	push	r0
    155c:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <xTickCount>
    1560:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <xTickCount+0x1>
    1564:	db 01       	movw	r26, r22
    1566:	4d 91       	ld	r20, X+
    1568:	5c 91       	ld	r21, X
    156a:	4f 3f       	cpi	r20, 0xFF	; 255
    156c:	bf ef       	ldi	r27, 0xFF	; 255
    156e:	5b 07       	cpc	r21, r27
    1570:	e9 f0       	breq	.+58     	; 0x15ac <xTaskCheckForTimeOut+0x5a>
    1572:	ec 01       	movw	r28, r24
    1574:	e9 81       	ldd	r30, Y+1	; 0x01
    1576:	fa 81       	ldd	r31, Y+2	; 0x02
    1578:	a0 91 1a 02 	lds	r26, 0x021A	; 0x80021a <xNumOfOverflows>
    157c:	b8 81       	ld	r27, Y
    157e:	ba 17       	cp	r27, r26
    1580:	19 f0       	breq	.+6      	; 0x1588 <xTaskCheckForTimeOut+0x36>
    1582:	2e 17       	cp	r18, r30
    1584:	3f 07       	cpc	r19, r31
    1586:	a0 f4       	brcc	.+40     	; 0x15b0 <xTaskCheckForTimeOut+0x5e>
    1588:	2e 1b       	sub	r18, r30
    158a:	3f 0b       	sbc	r19, r31
    158c:	24 17       	cp	r18, r20
    158e:	35 07       	cpc	r19, r21
    1590:	40 f4       	brcc	.+16     	; 0x15a2 <xTaskCheckForTimeOut+0x50>
    1592:	fb 01       	movw	r30, r22
    1594:	42 1b       	sub	r20, r18
    1596:	53 0b       	sbc	r21, r19
    1598:	51 83       	std	Z+1, r21	; 0x01
    159a:	40 83       	st	Z, r20
    159c:	cf df       	rcall	.-98     	; 0x153c <vTaskInternalSetTimeOutState>
    159e:	80 e0       	ldi	r24, 0x00	; 0
    15a0:	08 c0       	rjmp	.+16     	; 0x15b2 <xTaskCheckForTimeOut+0x60>
    15a2:	fb 01       	movw	r30, r22
    15a4:	11 82       	std	Z+1, r1	; 0x01
    15a6:	10 82       	st	Z, r1
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <xTaskCheckForTimeOut+0x60>
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <xTaskCheckForTimeOut+0x60>
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	0f 90       	pop	r0
    15b4:	0f be       	out	0x3f, r0	; 63
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <vTaskMissedYield>:
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <xYieldPending>
    15c2:	08 95       	ret

000015c4 <xTaskGetSchedulerState>:
    15c4:	80 91 1d 02 	lds	r24, 0x021D	; 0x80021d <xSchedulerRunning>
    15c8:	88 23       	and	r24, r24
    15ca:	31 f0       	breq	.+12     	; 0x15d8 <xTaskGetSchedulerState+0x14>
    15cc:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
    15d0:	88 23       	and	r24, r24
    15d2:	21 f0       	breq	.+8      	; 0x15dc <xTaskGetSchedulerState+0x18>
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	08 95       	ret
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	08 95       	ret
    15dc:	82 e0       	ldi	r24, 0x02	; 2
    15de:	08 95       	ret

000015e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    15ea:	89 2b       	or	r24, r25
    15ec:	79 f1       	breq	.+94     	; 0x164c <xTaskPriorityDisinherit+0x6c>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    15ee:	84 a1       	ldd	r24, Z+36	; 0x24
    15f0:	81 50       	subi	r24, 0x01	; 1
    15f2:	84 a3       	std	Z+36, r24	; 0x24

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    15f4:	26 89       	ldd	r18, Z+22	; 0x16
    15f6:	93 a1       	ldd	r25, Z+35	; 0x23
    15f8:	29 17       	cp	r18, r25
    15fa:	51 f1       	breq	.+84     	; 0x1650 <xTaskPriorityDisinherit+0x70>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    15fc:	81 11       	cpse	r24, r1
    15fe:	2a c0       	rjmp	.+84     	; 0x1654 <xTaskPriorityDisinherit+0x74>
    1600:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1602:	8f 01       	movw	r16, r30
    1604:	0e 5f       	subi	r16, 0xFE	; 254
    1606:	1f 4f       	sbci	r17, 0xFF	; 255
    1608:	c8 01       	movw	r24, r16
    160a:	0e 94 6d 02 	call	0x4da	; 0x4da <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    160e:	8b a1       	ldd	r24, Y+35	; 0x23
    1610:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1612:	24 e0       	ldi	r18, 0x04	; 4
    1614:	30 e0       	ldi	r19, 0x00	; 0
    1616:	28 1b       	sub	r18, r24
    1618:	31 09       	sbc	r19, r1
    161a:	3d 87       	std	Y+13, r19	; 0x0d
    161c:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    161e:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <uxTopReadyPriority>
    1622:	98 17       	cp	r25, r24
    1624:	10 f4       	brcc	.+4      	; 0x162a <xTaskPriorityDisinherit+0x4a>
    1626:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <uxTopReadyPriority>
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9c 01       	movw	r18, r24
    162e:	22 0f       	add	r18, r18
    1630:	33 1f       	adc	r19, r19
    1632:	22 0f       	add	r18, r18
    1634:	33 1f       	adc	r19, r19
    1636:	22 0f       	add	r18, r18
    1638:	33 1f       	adc	r19, r19
    163a:	82 0f       	add	r24, r18
    163c:	93 1f       	adc	r25, r19
    163e:	b8 01       	movw	r22, r16
    1640:	8c 5a       	subi	r24, 0xAC	; 172
    1642:	9d 4f       	sbci	r25, 0xFD	; 253
    1644:	0e 94 1b 02 	call	0x436	; 0x436 <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	05 c0       	rjmp	.+10     	; 0x1656 <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	03 c0       	rjmp	.+6      	; 0x1656 <xTaskPriorityDisinherit+0x76>
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	01 c0       	rjmp	.+2      	; 0x1656 <xTaskPriorityDisinherit+0x76>
    1654:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	08 95       	ret

00001660 <prvInsertTimerInActiveList>:
    1660:	fc 01       	movw	r30, r24
    1662:	73 83       	std	Z+3, r23	; 0x03
    1664:	62 83       	std	Z+2, r22	; 0x02
    1666:	91 87       	std	Z+9, r25	; 0x09
    1668:	80 87       	std	Z+8, r24	; 0x08
    166a:	46 17       	cp	r20, r22
    166c:	57 07       	cpc	r21, r23
    166e:	90 f0       	brcs	.+36     	; 0x1694 <prvInsertTimerInActiveList+0x34>
    1670:	42 1b       	sub	r20, r18
    1672:	53 0b       	sbc	r21, r19
    1674:	84 85       	ldd	r24, Z+12	; 0x0c
    1676:	95 85       	ldd	r25, Z+13	; 0x0d
    1678:	48 17       	cp	r20, r24
    167a:	59 07       	cpc	r21, r25
    167c:	e0 f4       	brcc	.+56     	; 0x16b6 <prvInsertTimerInActiveList+0x56>
    167e:	bf 01       	movw	r22, r30
    1680:	6e 5f       	subi	r22, 0xFE	; 254
    1682:	7f 4f       	sbci	r23, 0xFF	; 255
    1684:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <pxOverflowTimerList>
    1688:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <pxOverflowTimerList+0x1>
    168c:	0e 94 3c 02 	call	0x478	; 0x478 <vListInsert>
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	08 95       	ret
    1694:	42 17       	cp	r20, r18
    1696:	53 07       	cpc	r21, r19
    1698:	18 f4       	brcc	.+6      	; 0x16a0 <prvInsertTimerInActiveList+0x40>
    169a:	62 17       	cp	r22, r18
    169c:	73 07       	cpc	r23, r19
    169e:	68 f4       	brcc	.+26     	; 0x16ba <prvInsertTimerInActiveList+0x5a>
    16a0:	bf 01       	movw	r22, r30
    16a2:	6e 5f       	subi	r22, 0xFE	; 254
    16a4:	7f 4f       	sbci	r23, 0xFF	; 255
    16a6:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <pxCurrentTimerList>
    16aa:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <pxCurrentTimerList+0x1>
    16ae:	0e 94 3c 02 	call	0x478	; 0x478 <vListInsert>
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	08 95       	ret
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	08 95       	ret
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	08 95       	ret

000016be <prvCheckForValidListAndQueue>:
    16be:	0f b6       	in	r0, 0x3f	; 63
    16c0:	f8 94       	cli
    16c2:	0f 92       	push	r0
    16c4:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <xTimerQueue>
    16c8:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <xTimerQueue+0x1>
    16cc:	89 2b       	or	r24, r25
    16ce:	e1 f4       	brne	.+56     	; 0x1708 <prvCheckForValidListAndQueue+0x4a>
    16d0:	8d e8       	ldi	r24, 0x8D	; 141
    16d2:	92 e0       	ldi	r25, 0x02	; 2
    16d4:	0e 94 09 02 	call	0x412	; 0x412 <vListInitialise>
    16d8:	84 e8       	ldi	r24, 0x84	; 132
    16da:	92 e0       	ldi	r25, 0x02	; 2
    16dc:	0e 94 09 02 	call	0x412	; 0x412 <vListInitialise>
    16e0:	8d e8       	ldi	r24, 0x8D	; 141
    16e2:	92 e0       	ldi	r25, 0x02	; 2
    16e4:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <pxCurrentTimerList+0x1>
    16e8:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <pxCurrentTimerList>
    16ec:	84 e8       	ldi	r24, 0x84	; 132
    16ee:	92 e0       	ldi	r25, 0x02	; 2
    16f0:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <pxOverflowTimerList+0x1>
    16f4:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <pxOverflowTimerList>
    16f8:	40 e0       	ldi	r20, 0x00	; 0
    16fa:	65 e0       	ldi	r22, 0x05	; 5
    16fc:	8a e0       	ldi	r24, 0x0A	; 10
    16fe:	95 d9       	rcall	.-3286   	; 0xa2a <xQueueGenericCreate>
    1700:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <xTimerQueue+0x1>
    1704:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <xTimerQueue>
    1708:	0f 90       	pop	r0
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	08 95       	ret

0000170e <xTimerCreateTimerTask>:
    170e:	ef 92       	push	r14
    1710:	ff 92       	push	r15
    1712:	0f 93       	push	r16
    1714:	d4 df       	rcall	.-88     	; 0x16be <prvCheckForValidListAndQueue>
    1716:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <xTimerQueue>
    171a:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <xTimerQueue+0x1>
    171e:	89 2b       	or	r24, r25
    1720:	89 f0       	breq	.+34     	; 0x1744 <xTimerCreateTimerTask+0x36>
    1722:	0f 2e       	mov	r0, r31
    1724:	fc e7       	ldi	r31, 0x7C	; 124
    1726:	ef 2e       	mov	r14, r31
    1728:	f2 e0       	ldi	r31, 0x02	; 2
    172a:	ff 2e       	mov	r15, r31
    172c:	f0 2d       	mov	r31, r0
    172e:	03 e0       	ldi	r16, 0x03	; 3
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	45 e5       	ldi	r20, 0x55	; 85
    1736:	50 e0       	ldi	r21, 0x00	; 0
    1738:	6b e0       	ldi	r22, 0x0B	; 11
    173a:	72 e0       	ldi	r23, 0x02	; 2
    173c:	82 eb       	ldi	r24, 0xB2	; 178
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	83 db       	rcall	.-2298   	; 0xe48 <xTaskCreate>
    1742:	01 c0       	rjmp	.+2      	; 0x1746 <xTimerCreateTimerTask+0x38>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	0f 91       	pop	r16
    1748:	ff 90       	pop	r15
    174a:	ef 90       	pop	r14
    174c:	08 95       	ret

0000174e <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    174e:	0f 93       	push	r16
    1750:	1f 93       	push	r17
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	00 d0       	rcall	.+0      	; 0x1758 <xTimerGenericCommand+0xa>
    1758:	1f 92       	push	r1
    175a:	1f 92       	push	r1
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    1760:	e0 91 7e 02 	lds	r30, 0x027E	; 0x80027e <xTimerQueue>
    1764:	f0 91 7f 02 	lds	r31, 0x027F	; 0x80027f <xTimerQueue+0x1>
    1768:	30 97       	sbiw	r30, 0x00	; 0
    176a:	51 f1       	breq	.+84     	; 0x17c0 <xTimerGenericCommand+0x72>
    176c:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    176e:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1770:	5b 83       	std	Y+3, r21	; 0x03
    1772:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    1774:	9d 83       	std	Y+5, r25	; 0x05
    1776:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1778:	66 30       	cpi	r22, 0x06	; 6
    177a:	d4 f4       	brge	.+52     	; 0x17b0 <xTimerGenericCommand+0x62>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    177c:	23 df       	rcall	.-442    	; 0x15c4 <xTaskGetSchedulerState>
    177e:	82 30       	cpi	r24, 0x02	; 2
    1780:	59 f4       	brne	.+22     	; 0x1798 <xTimerGenericCommand+0x4a>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1782:	20 e0       	ldi	r18, 0x00	; 0
    1784:	a8 01       	movw	r20, r16
    1786:	be 01       	movw	r22, r28
    1788:	6f 5f       	subi	r22, 0xFF	; 255
    178a:	7f 4f       	sbci	r23, 0xFF	; 255
    178c:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <xTimerQueue>
    1790:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <xTimerQueue+0x1>
    1794:	78 d9       	rcall	.-3344   	; 0xa86 <xQueueGenericSend>
    1796:	15 c0       	rjmp	.+42     	; 0x17c2 <xTimerGenericCommand+0x74>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	40 e0       	ldi	r20, 0x00	; 0
    179c:	50 e0       	ldi	r21, 0x00	; 0
    179e:	be 01       	movw	r22, r28
    17a0:	6f 5f       	subi	r22, 0xFF	; 255
    17a2:	7f 4f       	sbci	r23, 0xFF	; 255
    17a4:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <xTimerQueue>
    17a8:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <xTimerQueue+0x1>
    17ac:	6c d9       	rcall	.-3368   	; 0xa86 <xQueueGenericSend>
    17ae:	09 c0       	rjmp	.+18     	; 0x17c2 <xTimerGenericCommand+0x74>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	ad 01       	movw	r20, r26
    17b4:	be 01       	movw	r22, r28
    17b6:	6f 5f       	subi	r22, 0xFF	; 255
    17b8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ba:	cf 01       	movw	r24, r30
    17bc:	f6 d9       	rcall	.-3092   	; 0xbaa <xQueueGenericSendFromISR>
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <xTimerGenericCommand+0x74>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	df 91       	pop	r29
    17ce:	cf 91       	pop	r28
    17d0:	1f 91       	pop	r17
    17d2:	0f 91       	pop	r16
    17d4:	08 95       	ret

000017d6 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    17d6:	af 92       	push	r10
    17d8:	bf 92       	push	r11
    17da:	cf 92       	push	r12
    17dc:	df 92       	push	r13
    17de:	ef 92       	push	r14
    17e0:	ff 92       	push	r15
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    17ec:	71 dc       	rcall	.-1822   	; 0x10d0 <xTaskGetTickCount>
    17ee:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    17f0:	80 91 7a 02 	lds	r24, 0x027A	; 0x80027a <xLastTime.2432>
    17f4:	90 91 7b 02 	lds	r25, 0x027B	; 0x80027b <xLastTime.2432+0x1>
    17f8:	e8 16       	cp	r14, r24
    17fa:	f9 06       	cpc	r15, r25
    17fc:	08 f0       	brcs	.+2      	; 0x1800 <prvSampleTimeNow+0x2a>
    17fe:	47 c0       	rjmp	.+142    	; 0x188e <prvSampleTimeNow+0xb8>
    1800:	2f c0       	rjmp	.+94     	; 0x1860 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1802:	05 80       	ldd	r0, Z+5	; 0x05
    1804:	f6 81       	ldd	r31, Z+6	; 0x06
    1806:	e0 2d       	mov	r30, r0
    1808:	a0 80       	ld	r10, Z
    180a:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    180c:	c6 81       	ldd	r28, Z+6	; 0x06
    180e:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1810:	8e 01       	movw	r16, r28
    1812:	0e 5f       	subi	r16, 0xFE	; 254
    1814:	1f 4f       	sbci	r17, 0xFF	; 255
    1816:	c8 01       	movw	r24, r16
    1818:	0e 94 6d 02 	call	0x4da	; 0x4da <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    181c:	e8 89       	ldd	r30, Y+16	; 0x10
    181e:	f9 89       	ldd	r31, Y+17	; 0x11
    1820:	ce 01       	movw	r24, r28
    1822:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1824:	8b 89       	ldd	r24, Y+19	; 0x13
    1826:	82 ff       	sbrs	r24, 2
    1828:	1b c0       	rjmp	.+54     	; 0x1860 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    182a:	8c 85       	ldd	r24, Y+12	; 0x0c
    182c:	9d 85       	ldd	r25, Y+13	; 0x0d
    182e:	8a 0d       	add	r24, r10
    1830:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    1832:	a8 16       	cp	r10, r24
    1834:	b9 06       	cpc	r11, r25
    1836:	60 f4       	brcc	.+24     	; 0x1850 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1838:	9b 83       	std	Y+3, r25	; 0x03
    183a:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    183c:	d9 87       	std	Y+9, r29	; 0x09
    183e:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1840:	b8 01       	movw	r22, r16
    1842:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <pxCurrentTimerList>
    1846:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <pxCurrentTimerList+0x1>
    184a:	0e 94 3c 02 	call	0x478	; 0x478 <vListInsert>
    184e:	08 c0       	rjmp	.+16     	; 0x1860 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1850:	00 e0       	ldi	r16, 0x00	; 0
    1852:	10 e0       	ldi	r17, 0x00	; 0
    1854:	20 e0       	ldi	r18, 0x00	; 0
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	a5 01       	movw	r20, r10
    185a:	60 e0       	ldi	r22, 0x00	; 0
    185c:	ce 01       	movw	r24, r28
    185e:	77 df       	rcall	.-274    	; 0x174e <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1860:	e0 91 82 02 	lds	r30, 0x0282	; 0x800282 <pxCurrentTimerList>
    1864:	f0 91 83 02 	lds	r31, 0x0283	; 0x800283 <pxCurrentTimerList+0x1>
    1868:	80 81       	ld	r24, Z
    186a:	81 11       	cpse	r24, r1
    186c:	ca cf       	rjmp	.-108    	; 0x1802 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    186e:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <pxOverflowTimerList>
    1872:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <pxOverflowTimerList+0x1>
    1876:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <pxCurrentTimerList+0x1>
    187a:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    187e:	f0 93 81 02 	sts	0x0281, r31	; 0x800281 <pxOverflowTimerList+0x1>
    1882:	e0 93 80 02 	sts	0x0280, r30	; 0x800280 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	f6 01       	movw	r30, r12
    188a:	80 83       	st	Z, r24
    188c:	02 c0       	rjmp	.+4      	; 0x1892 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    188e:	f6 01       	movw	r30, r12
    1890:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    1892:	f0 92 7b 02 	sts	0x027B, r15	; 0x80027b <xLastTime.2432+0x1>
    1896:	e0 92 7a 02 	sts	0x027A, r14	; 0x80027a <xLastTime.2432>

    return xTimeNow;
}
    189a:	c7 01       	movw	r24, r14
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	1f 91       	pop	r17
    18a2:	0f 91       	pop	r16
    18a4:	ff 90       	pop	r15
    18a6:	ef 90       	pop	r14
    18a8:	df 90       	pop	r13
    18aa:	cf 90       	pop	r12
    18ac:	bf 90       	pop	r11
    18ae:	af 90       	pop	r10
    18b0:	08 95       	ret

000018b2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    18b2:	08 95       	ret

000018b4 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    18b4:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    18b6:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    18b8:	2f ef       	ldi	r18, 0xFF	; 255
    18ba:	80 e7       	ldi	r24, 0x70	; 112
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	21 50       	subi	r18, 0x01	; 1
    18c0:	80 40       	sbci	r24, 0x00	; 0
    18c2:	90 40       	sbci	r25, 0x00	; 0
    18c4:	e1 f7       	brne	.-8      	; 0x18be <vApplicationMallocFailedHook+0xa>
    18c6:	00 c0       	rjmp	.+0      	; 0x18c8 <vApplicationMallocFailedHook+0x14>
    18c8:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    18ca:	1f 9a       	sbi	0x03, 7	; 3
    18cc:	f5 cf       	rjmp	.-22     	; 0x18b8 <vApplicationMallocFailedHook+0x4>

000018ce <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    18ce:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    18d0:	2f 9a       	sbi	0x05, 7	; 5
    18d2:	2f ef       	ldi	r18, 0xFF	; 255
    18d4:	87 ea       	ldi	r24, 0xA7	; 167
    18d6:	91 e6       	ldi	r25, 0x61	; 97
    18d8:	21 50       	subi	r18, 0x01	; 1
    18da:	80 40       	sbci	r24, 0x00	; 0
    18dc:	90 40       	sbci	r25, 0x00	; 0
    18de:	e1 f7       	brne	.-8      	; 0x18d8 <vApplicationStackOverflowHook+0xa>
    18e0:	00 c0       	rjmp	.+0      	; 0x18e2 <vApplicationStackOverflowHook+0x14>
    18e2:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    18e4:	1f 9a       	sbi	0x03, 7	; 3
    18e6:	f5 cf       	rjmp	.-22     	; 0x18d2 <vApplicationStackOverflowHook+0x4>

000018e8 <main>:



int main(void)
{
	DDRA |= _BV(DDA0) | _BV(DDA7);
    18e8:	81 b1       	in	r24, 0x01	; 1
    18ea:	81 68       	ori	r24, 0x81	; 129
    18ec:	81 b9       	out	0x01, r24	; 1
	trace_init();
    18ee:	0e 94 d5 01 	call	0x3aa	; 0x3aa <trace_init>


	
	
	
	vTaskStartScheduler(); // initialize and run the freeRTOS scheduler. Execution should never return here.
    18f2:	b7 db       	rcall	.-2194   	; 0x1062 <vTaskStartScheduler>
    18f4:	ff cf       	rjmp	.-2      	; 0x18f4 <main+0xc>

000018f6 <__tablejump2__>:
    18f6:	ee 0f       	add	r30, r30
    18f8:	ff 1f       	adc	r31, r31
    18fa:	88 1f       	adc	r24, r24
    18fc:	8b bf       	out	0x3b, r24	; 59
    18fe:	07 90       	elpm	r0, Z+
    1900:	f6 91       	elpm	r31, Z
    1902:	e0 2d       	mov	r30, r0
    1904:	19 94       	eijmp

00001906 <malloc>:
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	82 30       	cpi	r24, 0x02	; 2
    1910:	91 05       	cpc	r25, r1
    1912:	10 f4       	brcc	.+4      	; 0x1918 <malloc+0x12>
    1914:	82 e0       	ldi	r24, 0x02	; 2
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	e0 91 98 02 	lds	r30, 0x0298	; 0x800298 <__flp>
    191c:	f0 91 99 02 	lds	r31, 0x0299	; 0x800299 <__flp+0x1>
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	a0 e0       	ldi	r26, 0x00	; 0
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	30 97       	sbiw	r30, 0x00	; 0
    192a:	19 f1       	breq	.+70     	; 0x1972 <malloc+0x6c>
    192c:	40 81       	ld	r20, Z
    192e:	51 81       	ldd	r21, Z+1	; 0x01
    1930:	02 81       	ldd	r16, Z+2	; 0x02
    1932:	13 81       	ldd	r17, Z+3	; 0x03
    1934:	48 17       	cp	r20, r24
    1936:	59 07       	cpc	r21, r25
    1938:	c8 f0       	brcs	.+50     	; 0x196c <malloc+0x66>
    193a:	84 17       	cp	r24, r20
    193c:	95 07       	cpc	r25, r21
    193e:	69 f4       	brne	.+26     	; 0x195a <malloc+0x54>
    1940:	10 97       	sbiw	r26, 0x00	; 0
    1942:	31 f0       	breq	.+12     	; 0x1950 <malloc+0x4a>
    1944:	12 96       	adiw	r26, 0x02	; 2
    1946:	0c 93       	st	X, r16
    1948:	12 97       	sbiw	r26, 0x02	; 2
    194a:	13 96       	adiw	r26, 0x03	; 3
    194c:	1c 93       	st	X, r17
    194e:	27 c0       	rjmp	.+78     	; 0x199e <malloc+0x98>
    1950:	00 93 98 02 	sts	0x0298, r16	; 0x800298 <__flp>
    1954:	10 93 99 02 	sts	0x0299, r17	; 0x800299 <__flp+0x1>
    1958:	22 c0       	rjmp	.+68     	; 0x199e <malloc+0x98>
    195a:	21 15       	cp	r18, r1
    195c:	31 05       	cpc	r19, r1
    195e:	19 f0       	breq	.+6      	; 0x1966 <malloc+0x60>
    1960:	42 17       	cp	r20, r18
    1962:	53 07       	cpc	r21, r19
    1964:	18 f4       	brcc	.+6      	; 0x196c <malloc+0x66>
    1966:	9a 01       	movw	r18, r20
    1968:	bd 01       	movw	r22, r26
    196a:	ef 01       	movw	r28, r30
    196c:	df 01       	movw	r26, r30
    196e:	f8 01       	movw	r30, r16
    1970:	db cf       	rjmp	.-74     	; 0x1928 <malloc+0x22>
    1972:	21 15       	cp	r18, r1
    1974:	31 05       	cpc	r19, r1
    1976:	f9 f0       	breq	.+62     	; 0x19b6 <malloc+0xb0>
    1978:	28 1b       	sub	r18, r24
    197a:	39 0b       	sbc	r19, r25
    197c:	24 30       	cpi	r18, 0x04	; 4
    197e:	31 05       	cpc	r19, r1
    1980:	80 f4       	brcc	.+32     	; 0x19a2 <malloc+0x9c>
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	9b 81       	ldd	r25, Y+3	; 0x03
    1986:	61 15       	cp	r22, r1
    1988:	71 05       	cpc	r23, r1
    198a:	21 f0       	breq	.+8      	; 0x1994 <malloc+0x8e>
    198c:	fb 01       	movw	r30, r22
    198e:	93 83       	std	Z+3, r25	; 0x03
    1990:	82 83       	std	Z+2, r24	; 0x02
    1992:	04 c0       	rjmp	.+8      	; 0x199c <malloc+0x96>
    1994:	90 93 99 02 	sts	0x0299, r25	; 0x800299 <__flp+0x1>
    1998:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <__flp>
    199c:	fe 01       	movw	r30, r28
    199e:	32 96       	adiw	r30, 0x02	; 2
    19a0:	44 c0       	rjmp	.+136    	; 0x1a2a <malloc+0x124>
    19a2:	fe 01       	movw	r30, r28
    19a4:	e2 0f       	add	r30, r18
    19a6:	f3 1f       	adc	r31, r19
    19a8:	81 93       	st	Z+, r24
    19aa:	91 93       	st	Z+, r25
    19ac:	22 50       	subi	r18, 0x02	; 2
    19ae:	31 09       	sbc	r19, r1
    19b0:	39 83       	std	Y+1, r19	; 0x01
    19b2:	28 83       	st	Y, r18
    19b4:	3a c0       	rjmp	.+116    	; 0x1a2a <malloc+0x124>
    19b6:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <__brkval>
    19ba:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <__brkval+0x1>
    19be:	23 2b       	or	r18, r19
    19c0:	41 f4       	brne	.+16     	; 0x19d2 <malloc+0xcc>
    19c2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    19c6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    19ca:	30 93 97 02 	sts	0x0297, r19	; 0x800297 <__brkval+0x1>
    19ce:	20 93 96 02 	sts	0x0296, r18	; 0x800296 <__brkval>
    19d2:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    19d6:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    19da:	21 15       	cp	r18, r1
    19dc:	31 05       	cpc	r19, r1
    19de:	41 f4       	brne	.+16     	; 0x19f0 <malloc+0xea>
    19e0:	2d b7       	in	r18, 0x3d	; 61
    19e2:	3e b7       	in	r19, 0x3e	; 62
    19e4:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    19e8:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    19ec:	24 1b       	sub	r18, r20
    19ee:	35 0b       	sbc	r19, r21
    19f0:	e0 91 96 02 	lds	r30, 0x0296	; 0x800296 <__brkval>
    19f4:	f0 91 97 02 	lds	r31, 0x0297	; 0x800297 <__brkval+0x1>
    19f8:	e2 17       	cp	r30, r18
    19fa:	f3 07       	cpc	r31, r19
    19fc:	a0 f4       	brcc	.+40     	; 0x1a26 <malloc+0x120>
    19fe:	2e 1b       	sub	r18, r30
    1a00:	3f 0b       	sbc	r19, r31
    1a02:	28 17       	cp	r18, r24
    1a04:	39 07       	cpc	r19, r25
    1a06:	78 f0       	brcs	.+30     	; 0x1a26 <malloc+0x120>
    1a08:	ac 01       	movw	r20, r24
    1a0a:	4e 5f       	subi	r20, 0xFE	; 254
    1a0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0e:	24 17       	cp	r18, r20
    1a10:	35 07       	cpc	r19, r21
    1a12:	48 f0       	brcs	.+18     	; 0x1a26 <malloc+0x120>
    1a14:	4e 0f       	add	r20, r30
    1a16:	5f 1f       	adc	r21, r31
    1a18:	50 93 97 02 	sts	0x0297, r21	; 0x800297 <__brkval+0x1>
    1a1c:	40 93 96 02 	sts	0x0296, r20	; 0x800296 <__brkval>
    1a20:	81 93       	st	Z+, r24
    1a22:	91 93       	st	Z+, r25
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <malloc+0x124>
    1a26:	e0 e0       	ldi	r30, 0x00	; 0
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	cf 01       	movw	r24, r30
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	1f 91       	pop	r17
    1a32:	0f 91       	pop	r16
    1a34:	08 95       	ret

00001a36 <free>:
    1a36:	cf 93       	push	r28
    1a38:	df 93       	push	r29
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	09 f4       	brne	.+2      	; 0x1a40 <free+0xa>
    1a3e:	81 c0       	rjmp	.+258    	; 0x1b42 <free+0x10c>
    1a40:	fc 01       	movw	r30, r24
    1a42:	32 97       	sbiw	r30, 0x02	; 2
    1a44:	13 82       	std	Z+3, r1	; 0x03
    1a46:	12 82       	std	Z+2, r1	; 0x02
    1a48:	a0 91 98 02 	lds	r26, 0x0298	; 0x800298 <__flp>
    1a4c:	b0 91 99 02 	lds	r27, 0x0299	; 0x800299 <__flp+0x1>
    1a50:	10 97       	sbiw	r26, 0x00	; 0
    1a52:	81 f4       	brne	.+32     	; 0x1a74 <free+0x3e>
    1a54:	20 81       	ld	r18, Z
    1a56:	31 81       	ldd	r19, Z+1	; 0x01
    1a58:	82 0f       	add	r24, r18
    1a5a:	93 1f       	adc	r25, r19
    1a5c:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <__brkval>
    1a60:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <__brkval+0x1>
    1a64:	28 17       	cp	r18, r24
    1a66:	39 07       	cpc	r19, r25
    1a68:	51 f5       	brne	.+84     	; 0x1abe <free+0x88>
    1a6a:	f0 93 97 02 	sts	0x0297, r31	; 0x800297 <__brkval+0x1>
    1a6e:	e0 93 96 02 	sts	0x0296, r30	; 0x800296 <__brkval>
    1a72:	67 c0       	rjmp	.+206    	; 0x1b42 <free+0x10c>
    1a74:	ed 01       	movw	r28, r26
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	ce 17       	cp	r28, r30
    1a7c:	df 07       	cpc	r29, r31
    1a7e:	40 f4       	brcc	.+16     	; 0x1a90 <free+0x5a>
    1a80:	4a 81       	ldd	r20, Y+2	; 0x02
    1a82:	5b 81       	ldd	r21, Y+3	; 0x03
    1a84:	9e 01       	movw	r18, r28
    1a86:	41 15       	cp	r20, r1
    1a88:	51 05       	cpc	r21, r1
    1a8a:	f1 f0       	breq	.+60     	; 0x1ac8 <free+0x92>
    1a8c:	ea 01       	movw	r28, r20
    1a8e:	f5 cf       	rjmp	.-22     	; 0x1a7a <free+0x44>
    1a90:	d3 83       	std	Z+3, r29	; 0x03
    1a92:	c2 83       	std	Z+2, r28	; 0x02
    1a94:	40 81       	ld	r20, Z
    1a96:	51 81       	ldd	r21, Z+1	; 0x01
    1a98:	84 0f       	add	r24, r20
    1a9a:	95 1f       	adc	r25, r21
    1a9c:	c8 17       	cp	r28, r24
    1a9e:	d9 07       	cpc	r29, r25
    1aa0:	59 f4       	brne	.+22     	; 0x1ab8 <free+0x82>
    1aa2:	88 81       	ld	r24, Y
    1aa4:	99 81       	ldd	r25, Y+1	; 0x01
    1aa6:	84 0f       	add	r24, r20
    1aa8:	95 1f       	adc	r25, r21
    1aaa:	02 96       	adiw	r24, 0x02	; 2
    1aac:	91 83       	std	Z+1, r25	; 0x01
    1aae:	80 83       	st	Z, r24
    1ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ab4:	93 83       	std	Z+3, r25	; 0x03
    1ab6:	82 83       	std	Z+2, r24	; 0x02
    1ab8:	21 15       	cp	r18, r1
    1aba:	31 05       	cpc	r19, r1
    1abc:	29 f4       	brne	.+10     	; 0x1ac8 <free+0x92>
    1abe:	f0 93 99 02 	sts	0x0299, r31	; 0x800299 <__flp+0x1>
    1ac2:	e0 93 98 02 	sts	0x0298, r30	; 0x800298 <__flp>
    1ac6:	3d c0       	rjmp	.+122    	; 0x1b42 <free+0x10c>
    1ac8:	e9 01       	movw	r28, r18
    1aca:	fb 83       	std	Y+3, r31	; 0x03
    1acc:	ea 83       	std	Y+2, r30	; 0x02
    1ace:	49 91       	ld	r20, Y+
    1ad0:	59 91       	ld	r21, Y+
    1ad2:	c4 0f       	add	r28, r20
    1ad4:	d5 1f       	adc	r29, r21
    1ad6:	ec 17       	cp	r30, r28
    1ad8:	fd 07       	cpc	r31, r29
    1ada:	61 f4       	brne	.+24     	; 0x1af4 <free+0xbe>
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	84 0f       	add	r24, r20
    1ae2:	95 1f       	adc	r25, r21
    1ae4:	02 96       	adiw	r24, 0x02	; 2
    1ae6:	e9 01       	movw	r28, r18
    1ae8:	99 83       	std	Y+1, r25	; 0x01
    1aea:	88 83       	st	Y, r24
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	9b 83       	std	Y+3, r25	; 0x03
    1af2:	8a 83       	std	Y+2, r24	; 0x02
    1af4:	e0 e0       	ldi	r30, 0x00	; 0
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	12 96       	adiw	r26, 0x02	; 2
    1afa:	8d 91       	ld	r24, X+
    1afc:	9c 91       	ld	r25, X
    1afe:	13 97       	sbiw	r26, 0x03	; 3
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	19 f0       	breq	.+6      	; 0x1b0a <free+0xd4>
    1b04:	fd 01       	movw	r30, r26
    1b06:	dc 01       	movw	r26, r24
    1b08:	f7 cf       	rjmp	.-18     	; 0x1af8 <free+0xc2>
    1b0a:	8d 91       	ld	r24, X+
    1b0c:	9c 91       	ld	r25, X
    1b0e:	11 97       	sbiw	r26, 0x01	; 1
    1b10:	9d 01       	movw	r18, r26
    1b12:	2e 5f       	subi	r18, 0xFE	; 254
    1b14:	3f 4f       	sbci	r19, 0xFF	; 255
    1b16:	82 0f       	add	r24, r18
    1b18:	93 1f       	adc	r25, r19
    1b1a:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <__brkval>
    1b1e:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <__brkval+0x1>
    1b22:	28 17       	cp	r18, r24
    1b24:	39 07       	cpc	r19, r25
    1b26:	69 f4       	brne	.+26     	; 0x1b42 <free+0x10c>
    1b28:	30 97       	sbiw	r30, 0x00	; 0
    1b2a:	29 f4       	brne	.+10     	; 0x1b36 <free+0x100>
    1b2c:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <__flp+0x1>
    1b30:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <__flp>
    1b34:	02 c0       	rjmp	.+4      	; 0x1b3a <free+0x104>
    1b36:	13 82       	std	Z+3, r1	; 0x03
    1b38:	12 82       	std	Z+2, r1	; 0x02
    1b3a:	b0 93 97 02 	sts	0x0297, r27	; 0x800297 <__brkval+0x1>
    1b3e:	a0 93 96 02 	sts	0x0296, r26	; 0x800296 <__brkval>
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	08 95       	ret

00001b48 <memcpy>:
    1b48:	fb 01       	movw	r30, r22
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <memcpy+0xa>
    1b4e:	01 90       	ld	r0, Z+
    1b50:	0d 92       	st	X+, r0
    1b52:	41 50       	subi	r20, 0x01	; 1
    1b54:	50 40       	sbci	r21, 0x00	; 0
    1b56:	d8 f7       	brcc	.-10     	; 0x1b4e <memcpy+0x6>
    1b58:	08 95       	ret

00001b5a <memset>:
    1b5a:	dc 01       	movw	r26, r24
    1b5c:	01 c0       	rjmp	.+2      	; 0x1b60 <memset+0x6>
    1b5e:	6d 93       	st	X+, r22
    1b60:	41 50       	subi	r20, 0x01	; 1
    1b62:	50 40       	sbci	r21, 0x00	; 0
    1b64:	e0 f7       	brcc	.-8      	; 0x1b5e <memset+0x4>
    1b66:	08 95       	ret

00001b68 <_exit>:
    1b68:	f8 94       	cli

00001b6a <__stop_program>:
    1b6a:	ff cf       	rjmp	.-2      	; 0x1b6a <__stop_program>
