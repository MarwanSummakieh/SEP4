
MyFirstProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000068a  00800200  00005334  000053c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005334  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000229  0080088a  0080088a  00005a52  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005a52  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005ab0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ae0  00000000  00000000  00005af0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000db55  00000000  00000000  000065d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003741  00000000  00000000  00014125  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000067de  00000000  00000000  00017866  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002240  00000000  00000000  0001e044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003ef7  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b71b  00000000  00000000  0002417b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ac8  00000000  00000000  0002f896  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	05 c2       	rjmp	.+1034   	; 0x40c <__ctors_end>
       2:	00 00       	nop
       4:	24 c2       	rjmp	.+1096   	; 0x44e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c2       	rjmp	.+1092   	; 0x44e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c2       	rjmp	.+1088   	; 0x44e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c2       	rjmp	.+1084   	; 0x44e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c2       	rjmp	.+1080   	; 0x44e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c2       	rjmp	.+1076   	; 0x44e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c2       	rjmp	.+1072   	; 0x44e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c2       	rjmp	.+1068   	; 0x44e <__bad_interrupt>
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__bad_interrupt>
      26:	00 00       	nop
      28:	12 c2       	rjmp	.+1060   	; 0x44e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c2       	rjmp	.+1056   	; 0x44e <__bad_interrupt>
      2e:	00 00       	nop
      30:	70 c4       	rjmp	.+2272   	; 0x912 <__vector_12>
      32:	00 00       	nop
      34:	0c c2       	rjmp	.+1048   	; 0x44e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c2       	rjmp	.+1044   	; 0x44e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c2       	rjmp	.+1040   	; 0x44e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c2       	rjmp	.+1036   	; 0x44e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c2       	rjmp	.+1032   	; 0x44e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c2       	rjmp	.+1028   	; 0x44e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c2       	rjmp	.+1024   	; 0x44e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c1       	rjmp	.+1020   	; 0x44e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c1       	rjmp	.+1016   	; 0x44e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c1       	rjmp	.+1012   	; 0x44e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f8 c1       	rjmp	.+1008   	; 0x44e <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__vector_25>
      68:	0c 94 e1 1e 	jmp	0x3dc2	; 0x3dc2 <__vector_26>
      6c:	f0 c1       	rjmp	.+992    	; 0x44e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c1       	rjmp	.+988    	; 0x44e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c1       	rjmp	.+984    	; 0x44e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c1       	rjmp	.+980    	; 0x44e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c1       	rjmp	.+976    	; 0x44e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c1       	rjmp	.+972    	; 0x44e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c1       	rjmp	.+968    	; 0x44e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c1       	rjmp	.+964    	; 0x44e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c1       	rjmp	.+960    	; 0x44e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 25 1f 	jmp	0x3e4a	; 0x3e4a <__vector_36>
      94:	0c 94 77 1f 	jmp	0x3eee	; 0x3eee <__vector_37>
      98:	da c1       	rjmp	.+948    	; 0x44e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 0f 22 	jmp	0x441e	; 0x441e <__vector_39>
      a0:	d6 c1       	rjmp	.+940    	; 0x44e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c1       	rjmp	.+936    	; 0x44e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c1       	rjmp	.+932    	; 0x44e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c1       	rjmp	.+928    	; 0x44e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c1       	rjmp	.+924    	; 0x44e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c1       	rjmp	.+920    	; 0x44e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c1       	rjmp	.+916    	; 0x44e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c1       	rjmp	.+912    	; 0x44e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c1       	rjmp	.+908    	; 0x44e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c1       	rjmp	.+904    	; 0x44e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c1       	rjmp	.+900    	; 0x44e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 bb 1f 	jmp	0x3f76	; 0x3f76 <__vector_51>
      d0:	0c 94 0d 20 	jmp	0x401a	; 0x401a <__vector_52>
      d4:	bc c1       	rjmp	.+888    	; 0x44e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 51 20 	jmp	0x40a2	; 0x40a2 <__vector_54>
      dc:	0c 94 a3 20 	jmp	0x4146	; 0x4146 <__vector_55>
      e0:	b6 c1       	rjmp	.+876    	; 0x44e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	95 01       	movw	r18, r10
      e6:	95 01       	movw	r18, r10
      e8:	95 01       	movw	r18, r10
      ea:	c4 01       	movw	r24, r8
      ec:	cc 01       	movw	r24, r24
      ee:	db 01       	movw	r26, r22
      f0:	95 01       	movw	r18, r10
      f2:	95 01       	movw	r18, r10
      f4:	c4 01       	movw	r24, r8
      f6:	cc 01       	movw	r24, r24
      f8:	31 22       	and	r3, r17
      fa:	a1 22       	and	r10, r17
      fc:	a1 22       	and	r10, r17
      fe:	a1 22       	and	r10, r17
     100:	a1 22       	and	r10, r17
     102:	a1 22       	and	r10, r17
     104:	a1 22       	and	r10, r17
     106:	a1 22       	and	r10, r17
     108:	31 22       	and	r3, r17
     10a:	a1 22       	and	r10, r17
     10c:	a1 22       	and	r10, r17
     10e:	a1 22       	and	r10, r17
     110:	a1 22       	and	r10, r17
     112:	a1 22       	and	r10, r17
     114:	a1 22       	and	r10, r17
     116:	a1 22       	and	r10, r17
     118:	33 22       	and	r3, r19
     11a:	a1 22       	and	r10, r17
     11c:	a1 22       	and	r10, r17
     11e:	a1 22       	and	r10, r17
     120:	a1 22       	and	r10, r17
     122:	a1 22       	and	r10, r17
     124:	a1 22       	and	r10, r17
     126:	a1 22       	and	r10, r17
     128:	a1 22       	and	r10, r17
     12a:	a1 22       	and	r10, r17
     12c:	a1 22       	and	r10, r17
     12e:	a1 22       	and	r10, r17
     130:	a1 22       	and	r10, r17
     132:	a1 22       	and	r10, r17
     134:	a1 22       	and	r10, r17
     136:	a1 22       	and	r10, r17
     138:	33 22       	and	r3, r19
     13a:	a1 22       	and	r10, r17
     13c:	a1 22       	and	r10, r17
     13e:	a1 22       	and	r10, r17
     140:	a1 22       	and	r10, r17
     142:	a1 22       	and	r10, r17
     144:	a1 22       	and	r10, r17
     146:	a1 22       	and	r10, r17
     148:	a1 22       	and	r10, r17
     14a:	a1 22       	and	r10, r17
     14c:	a1 22       	and	r10, r17
     14e:	a1 22       	and	r10, r17
     150:	a1 22       	and	r10, r17
     152:	a1 22       	and	r10, r17
     154:	a1 22       	and	r10, r17
     156:	a1 22       	and	r10, r17
     158:	9d 22       	and	r9, r29
     15a:	a1 22       	and	r10, r17
     15c:	a1 22       	and	r10, r17
     15e:	a1 22       	and	r10, r17
     160:	a1 22       	and	r10, r17
     162:	a1 22       	and	r10, r17
     164:	a1 22       	and	r10, r17
     166:	a1 22       	and	r10, r17
     168:	68 22       	and	r6, r24
     16a:	a1 22       	and	r10, r17
     16c:	a1 22       	and	r10, r17
     16e:	a1 22       	and	r10, r17
     170:	a1 22       	and	r10, r17
     172:	a1 22       	and	r10, r17
     174:	a1 22       	and	r10, r17
     176:	a1 22       	and	r10, r17
     178:	a1 22       	and	r10, r17
     17a:	a1 22       	and	r10, r17
     17c:	a1 22       	and	r10, r17
     17e:	a1 22       	and	r10, r17
     180:	a1 22       	and	r10, r17
     182:	a1 22       	and	r10, r17
     184:	a1 22       	and	r10, r17
     186:	a1 22       	and	r10, r17
     188:	5c 22       	and	r5, r28
     18a:	a1 22       	and	r10, r17
     18c:	a1 22       	and	r10, r17
     18e:	a1 22       	and	r10, r17
     190:	a1 22       	and	r10, r17
     192:	a1 22       	and	r10, r17
     194:	a1 22       	and	r10, r17
     196:	a1 22       	and	r10, r17
     198:	80 22       	and	r8, r16

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	02 ea       	ldi	r16, 0xA2	; 162
     19c:	18 e0       	ldi	r17, 0x08	; 8
     19e:	0f 2e       	mov	r0, r31
     1a0:	fa ec       	ldi	r31, 0xCA	; 202
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f8 e0       	ldi	r31, 0x08	; 8
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	09 d2       	rcall	.+1042   	; 0x5de <uxListRemove>
     1cc:	80 91 97 08 	lds	r24, 0x0897	; 0x800897 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 97 08 	sts	0x0897, r24	; 0x800897 <uxCurrentNumberOfTasks>
     1d6:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 a1 08 	sts	0x08A1, r24	; 0x8008a1 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	87 d1       	rcall	.+782    	; 0x4f8 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	85 d1       	rcall	.+778    	; 0x4f8 <vPortFree>
     1ee:	80 91 a1 08 	lds	r24, 0x08A1	; 0x8008a1 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	c4 d2       	rcall	.+1416   	; 0x788 <vPortYield>
     200:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     220:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
     226:	e0 91 f8 08 	lds	r30, 0x08F8	; 0x8008f8 <pxCurrentTimerList>
     22a:	f0 91 f9 08 	lds	r31, 0x08F9	; 0x8008f9 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d7 c0       	rjmp	.+430    	; 0x3e4 <prvTimerTask+0x1de>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     240:	0e 94 07 0c 	call	0x180e	; 0x180e <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     244:	c4 01       	movw	r24, r8
     246:	0e 94 63 12 	call	0x24c6	; 0x24c6 <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	48 c0       	rjmp	.+144    	; 0x2e2 <prvTimerTask+0xdc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
            {
                ( void ) xTaskResumeAll();
     258:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     25c:	e0 91 f8 08 	lds	r30, 0x08F8	; 0x8008f8 <pxCurrentTimerList>
     260:	f0 91 f9 08 	lds	r31, 0x08F9	; 0x8008f9 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	b5 d1       	rcall	.+874    	; 0x5de <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 6e 11 	call	0x22dc	; 0x22dc <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 1c 12 	call	0x2438	; 0x2438 <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	84 c0       	rjmp	.+264    	; 0x3cc <prvTimerTask+0x1c6>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     2c4:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <xTimerQueue>
     2d0:	90 91 f5 08 	lds	r25, 0x08F5	; 0x8008f5 <xTimerQueue+0x1>
     2d4:	8c d6       	rcall	.+3352   	; 0xfee <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
     2d6:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <xTaskResumeAll>
     2da:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
     2dc:	77 c0       	rjmp	.+238    	; 0x3cc <prvTimerTask+0x1c6>
     2de:	54 d2       	rcall	.+1192   	; 0x788 <vPortYield>
     2e0:	75 c0       	rjmp	.+234    	; 0x3cc <prvTimerTask+0x1c6>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
     2e2:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <xTaskResumeAll>
     2e6:	72 c0       	rjmp	.+228    	; 0x3cc <prvTimerTask+0x1c6>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 23       	and	r24, r24
     2ec:	0c f4       	brge	.+2      	; 0x2f0 <prvTimerTask+0xea>
     2ee:	6e c0       	rjmp	.+220    	; 0x3cc <prvTimerTask+0x1c6>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
     2f0:	ac 80       	ldd	r10, Y+4	; 0x04
     2f2:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
     2f4:	f5 01       	movw	r30, r10
     2f6:	82 85       	ldd	r24, Z+10	; 0x0a
     2f8:	93 85       	ldd	r25, Z+11	; 0x0b
     2fa:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     2fc:	19 f0       	breq	.+6      	; 0x304 <prvTimerTask+0xfe>
     2fe:	c5 01       	movw	r24, r10
     300:	02 96       	adiw	r24, 0x02	; 2
     302:	6d d1       	rcall	.+730    	; 0x5de <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     304:	ce 01       	movw	r24, r28
     306:	06 96       	adiw	r24, 0x06	; 6
     308:	0e 94 63 12 	call	0x24c6	; 0x24c6 <prvSampleTimeNow>
     30c:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
     30e:	e9 81       	ldd	r30, Y+1	; 0x01
     310:	0e 2e       	mov	r0, r30
     312:	00 0c       	add	r0, r0
     314:	ff 0b       	sbc	r31, r31
     316:	ea 30       	cpi	r30, 0x0A	; 10
     318:	f1 05       	cpc	r31, r1
     31a:	08 f0       	brcs	.+2      	; 0x31e <prvTimerTask+0x118>
     31c:	57 c0       	rjmp	.+174    	; 0x3cc <prvTimerTask+0x1c6>
     31e:	88 27       	eor	r24, r24
     320:	ee 58       	subi	r30, 0x8E	; 142
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	8f 4f       	sbci	r24, 0xFF	; 255
     326:	0c 94 f9 24 	jmp	0x49f2	; 0x49f2 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     32a:	d5 01       	movw	r26, r10
     32c:	53 96       	adiw	r26, 0x13	; 19
     32e:	8c 91       	ld	r24, X
     330:	53 97       	sbiw	r26, 0x13	; 19
     332:	81 60       	ori	r24, 0x01	; 1
     334:	53 96       	adiw	r26, 0x13	; 19
     336:	8c 93       	st	X, r24
     338:	53 97       	sbiw	r26, 0x13	; 19
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	3b 81       	ldd	r19, Y+3	; 0x03
     33e:	1c 96       	adiw	r26, 0x0c	; 12
     340:	6d 91       	ld	r22, X+
     342:	7c 91       	ld	r23, X
     344:	1d 97       	sbiw	r26, 0x0d	; 13
     346:	62 0f       	add	r22, r18
     348:	73 1f       	adc	r23, r19
     34a:	c5 01       	movw	r24, r10
     34c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <prvInsertTimerInActiveList>
     350:	88 23       	and	r24, r24
     352:	e1 f1       	breq	.+120    	; 0x3cc <prvTimerTask+0x1c6>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     354:	d5 01       	movw	r26, r10
     356:	50 96       	adiw	r26, 0x10	; 16
     358:	ed 91       	ld	r30, X+
     35a:	fc 91       	ld	r31, X
     35c:	51 97       	sbiw	r26, 0x11	; 17
     35e:	c5 01       	movw	r24, r10
     360:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     362:	f5 01       	movw	r30, r10
     364:	83 89       	ldd	r24, Z+19	; 0x13
     366:	82 ff       	sbrs	r24, 2
     368:	31 c0       	rjmp	.+98     	; 0x3cc <prvTimerTask+0x1c6>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
     36a:	4a 81       	ldd	r20, Y+2	; 0x02
     36c:	5b 81       	ldd	r21, Y+3	; 0x03
     36e:	84 85       	ldd	r24, Z+12	; 0x0c
     370:	95 85       	ldd	r25, Z+13	; 0x0d
     372:	48 0f       	add	r20, r24
     374:	59 1f       	adc	r21, r25
     376:	0e 2d       	mov	r16, r14
     378:	1f 2d       	mov	r17, r15
     37a:	2e 2d       	mov	r18, r14
     37c:	3f 2d       	mov	r19, r15
     37e:	65 2d       	mov	r22, r5
     380:	c5 01       	movw	r24, r10
     382:	0e 94 1c 12 	call	0x2438	; 0x2438 <xTimerGenericCommand>
     386:	22 c0       	rjmp	.+68     	; 0x3cc <prvTimerTask+0x1c6>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     388:	d5 01       	movw	r26, r10
     38a:	53 96       	adiw	r26, 0x13	; 19
     38c:	8c 91       	ld	r24, X
     38e:	53 97       	sbiw	r26, 0x13	; 19
     390:	8e 7f       	andi	r24, 0xFE	; 254
     392:	53 96       	adiw	r26, 0x13	; 19
     394:	8c 93       	st	X, r24
     396:	1a c0       	rjmp	.+52     	; 0x3cc <prvTimerTask+0x1c6>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     398:	f5 01       	movw	r30, r10
     39a:	83 89       	ldd	r24, Z+19	; 0x13
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	83 8b       	std	Z+19, r24	; 0x13
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
     3a0:	6a 81       	ldd	r22, Y+2	; 0x02
     3a2:	7b 81       	ldd	r23, Y+3	; 0x03
     3a4:	75 87       	std	Z+13, r23	; 0x0d
     3a6:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
     3a8:	64 0f       	add	r22, r20
     3aa:	75 1f       	adc	r23, r21
     3ac:	9a 01       	movw	r18, r20
     3ae:	c5 01       	movw	r24, r10
     3b0:	0e 94 6e 11 	call	0x22dc	; 0x22dc <prvInsertTimerInActiveList>
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <prvTimerTask+0x1c6>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
     3b6:	d5 01       	movw	r26, r10
     3b8:	53 96       	adiw	r26, 0x13	; 19
     3ba:	8c 91       	ld	r24, X
     3bc:	81 fd       	sbrc	r24, 1
                        {
                            vPortFree( pxTimer );
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <prvTimerTask+0x1c0>
     3c0:	c5 01       	movw	r24, r10
     3c2:	9a d0       	rcall	.+308    	; 0x4f8 <vPortFree>
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <prvTimerTask+0x1c6>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     3c6:	8e 7f       	andi	r24, 0xFE	; 254
     3c8:	f5 01       	movw	r30, r10
     3ca:	83 8b       	std	Z+19, r24	; 0x13
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     3cc:	4e 2d       	mov	r20, r14
     3ce:	5f 2d       	mov	r21, r15
     3d0:	6c 2d       	mov	r22, r12
     3d2:	7d 2d       	mov	r23, r13
     3d4:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <xTimerQueue>
     3d8:	90 91 f5 08 	lds	r25, 0x08F5	; 0x8008f5 <xTimerQueue+0x1>
     3dc:	c3 d4       	rcall	.+2438   	; 0xd64 <xQueueReceive>
     3de:	81 11       	cpse	r24, r1
     3e0:	83 cf       	rjmp	.-250    	; 0x2e8 <prvTimerTask+0xe2>
     3e2:	21 cf       	rjmp	.-446    	; 0x226 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     3e4:	0e 94 07 0c 	call	0x180e	; 0x180e <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     3e8:	c4 01       	movw	r24, r8
     3ea:	0e 94 63 12 	call	0x24c6	; 0x24c6 <prvSampleTimeNow>
     3ee:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	81 11       	cpse	r24, r1
     3f4:	76 cf       	rjmp	.-276    	; 0x2e2 <prvTimerTask+0xdc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     3f6:	e0 91 f6 08 	lds	r30, 0x08F6	; 0x8008f6 <pxOverflowTimerList>
     3fa:	f0 91 f7 08 	lds	r31, 0x08F7	; 0x8008f7 <pxOverflowTimerList+0x1>
     3fe:	80 81       	ld	r24, Z
     400:	44 2d       	mov	r20, r4
     402:	81 11       	cpse	r24, r1
     404:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     406:	ae 2c       	mov	r10, r14
     408:	bf 2c       	mov	r11, r15
     40a:	5d cf       	rjmp	.-326    	; 0x2c6 <prvTimerTask+0xc0>

0000040c <__ctors_end>:
     40c:	11 24       	eor	r1, r1
     40e:	1f be       	out	0x3f, r1	; 63
     410:	cf ef       	ldi	r28, 0xFF	; 255
     412:	d1 e2       	ldi	r29, 0x21	; 33
     414:	de bf       	out	0x3e, r29	; 62
     416:	cd bf       	out	0x3d, r28	; 61
     418:	00 e0       	ldi	r16, 0x00	; 0
     41a:	0c bf       	out	0x3c, r16	; 60

0000041c <__do_copy_data>:
     41c:	18 e0       	ldi	r17, 0x08	; 8
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b2 e0       	ldi	r27, 0x02	; 2
     422:	e4 e3       	ldi	r30, 0x34	; 52
     424:	f3 e5       	ldi	r31, 0x53	; 83
     426:	00 e0       	ldi	r16, 0x00	; 0
     428:	0b bf       	out	0x3b, r16	; 59
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x14>
     42c:	07 90       	elpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	aa 38       	cpi	r26, 0x8A	; 138
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0x10>

00000436 <__do_clear_bss>:
     436:	2a e0       	ldi	r18, 0x0A	; 10
     438:	aa e8       	ldi	r26, 0x8A	; 138
     43a:	b8 e0       	ldi	r27, 0x08	; 8
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	a3 3b       	cpi	r26, 0xB3	; 179
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <main>
     44a:	0c 94 98 29 	jmp	0x5330	; 0x5330 <_exit>

0000044e <__bad_interrupt>:
     44e:	d8 cd       	rjmp	.-1104   	; 0x0 <__vectors>

00000450 <co2_callback>:
		//vTaskDelayUntil(&xLastWakeTimeCO2,SENSOR_TIMER*60);
	//}
}

// call back function for getting co2 value
void co2_callback(uint16_t co2_ppm) {
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	1f 92       	push	r1
     456:	1f 92       	push	r1
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	co2_ppm_pointer = &co2_ppm;
     45c:	ce 01       	movw	r24, r28
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	90 93 78 0a 	sts	0x0A78, r25	; 0x800a78 <co2_ppm_pointer+0x1>
     464:	80 93 77 0a 	sts	0x0A77, r24	; 0x800a77 <co2_ppm_pointer>
}
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <co2_sensor_init>:

uint16_t* co2_ppm_pointer;

// create drivers
void co2_sensor_init() {	
	mh_z19_create(ser_USART3, co2_callback);
     472:	68 e2       	ldi	r22, 0x28	; 40
     474:	72 e0       	ldi	r23, 0x02	; 2
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	0c 94 0b 1d 	jmp	0x3a16	; 0x3a16 <mh_z19_create>
     47c:	08 95       	ret

0000047e <co2_measure>:
	while(1){
		//xSemaphoreTake(*semaphore,SENSOR_TIMER*60);
		printf("CO2 TASK %d \n",xLastWakeTimeCO2);*/
	mh_z19_return_code_t rc;
	
	if ((rc = mh_z19_take_meassuring()) != MHZ19_OK) {
     47e:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <mh_z19_take_meassuring>
     482:	88 23       	and	r24, r24
     484:	41 f0       	breq	.+16     	; 0x496 <co2_measure+0x18>
		printf("CO2_SENSOR_ERROR\n");
     486:	8e e6       	ldi	r24, 0x6E	; 110
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <puts>
		vTaskDelay(10);
     48e:	8a e0       	ldi	r24, 0x0A	; 10
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <vTaskDelay>
     496:	08 95       	ret

00000498 <co2_get_value>:
	co2_ppm_pointer = &co2_ppm;
}


uint16_t co2_get_value() {
	return *co2_ppm_pointer;
     498:	e0 91 77 0a 	lds	r30, 0x0A77	; 0x800a77 <co2_ppm_pointer>
     49c:	f0 91 78 0a 	lds	r31, 0x0A78	; 0x800a78 <co2_ppm_pointer+0x1>
}
     4a0:	80 81       	ld	r24, Z
     4a2:	91 81       	ldd	r25, Z+1	; 0x01
     4a4:	08 95       	ret

000004a6 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     4a6:	e7 e0       	ldi	r30, 0x07	; 7
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	80 81       	ld	r24, Z
     4ac:	8f 60       	ori	r24, 0x0F	; 15
     4ae:	80 83       	st	Z, r24
     4b0:	08 95       	ret

000004b2 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     4b2:	e8 e0       	ldi	r30, 0x08	; 8
     4b4:	f1 e0       	ldi	r31, 0x01	; 1
     4b6:	90 81       	ld	r25, Z
     4b8:	90 7f       	andi	r25, 0xF0	; 240
     4ba:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     4bc:	90 81       	ld	r25, Z
     4be:	8f 70       	andi	r24, 0x0F	; 15
     4c0:	98 2b       	or	r25, r24
     4c2:	90 83       	st	Z, r25
     4c4:	08 95       	ret

000004c6 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     4c6:	e8 e0       	ldi	r30, 0x08	; 8
     4c8:	f1 e0       	ldi	r31, 0x01	; 1
     4ca:	80 81       	ld	r24, Z
     4cc:	80 7f       	andi	r24, 0xF0	; 240
     4ce:	80 83       	st	Z, r24
     4d0:	08 95       	ret

000004d2 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     4d2:	cf 93       	push	r28
     4d4:	df 93       	push	r29
     4d6:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     4d8:	0e 94 07 0c 	call	0x180e	; 0x180e <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     4dc:	ce 01       	movw	r24, r28
     4de:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <malloc>
     4e2:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     4e4:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     4e8:	20 97       	sbiw	r28, 0x00	; 0
     4ea:	11 f4       	brne	.+4      	; 0x4f0 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     4ec:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     4f0:	ce 01       	movw	r24, r28
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
    if( pv )
     4fc:	00 97       	sbiw	r24, 0x00	; 0
     4fe:	41 f0       	breq	.+16     	; 0x510 <vPortFree+0x18>
     500:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     502:	0e 94 07 0c 	call	0x180e	; 0x180e <vTaskSuspendAll>
        {
            free( pv );
     506:	ce 01       	movw	r24, r28
     508:	0e 94 b3 25 	call	0x4b66	; 0x4b66 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     50c:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <xTaskResumeAll>
    }
}
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     516:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     518:	03 96       	adiw	r24, 0x03	; 3
     51a:	92 83       	std	Z+2, r25	; 0x02
     51c:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     51e:	2f ef       	ldi	r18, 0xFF	; 255
     520:	3f ef       	ldi	r19, 0xFF	; 255
     522:	34 83       	std	Z+4, r19	; 0x04
     524:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     526:	96 83       	std	Z+6, r25	; 0x06
     528:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     52a:	90 87       	std	Z+8, r25	; 0x08
     52c:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     52e:	10 82       	st	Z, r1
     530:	08 95       	ret

00000532 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     532:	fc 01       	movw	r30, r24
     534:	11 86       	std	Z+9, r1	; 0x09
     536:	10 86       	std	Z+8, r1	; 0x08
     538:	08 95       	ret

0000053a <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     53a:	cf 93       	push	r28
     53c:	df 93       	push	r29
     53e:	9c 01       	movw	r18, r24
     540:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     542:	dc 01       	movw	r26, r24
     544:	11 96       	adiw	r26, 0x01	; 1
     546:	cd 91       	ld	r28, X+
     548:	dc 91       	ld	r29, X
     54a:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     54c:	d3 83       	std	Z+3, r29	; 0x03
     54e:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     550:	8c 81       	ldd	r24, Y+4	; 0x04
     552:	9d 81       	ldd	r25, Y+5	; 0x05
     554:	95 83       	std	Z+5, r25	; 0x05
     556:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     558:	8c 81       	ldd	r24, Y+4	; 0x04
     55a:	9d 81       	ldd	r25, Y+5	; 0x05
     55c:	dc 01       	movw	r26, r24
     55e:	13 96       	adiw	r26, 0x03	; 3
     560:	7c 93       	st	X, r23
     562:	6e 93       	st	-X, r22
     564:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     566:	7d 83       	std	Y+5, r23	; 0x05
     568:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     56a:	31 87       	std	Z+9, r19	; 0x09
     56c:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     56e:	f9 01       	movw	r30, r18
     570:	80 81       	ld	r24, Z
     572:	8f 5f       	subi	r24, 0xFF	; 255
     574:	80 83       	st	Z, r24
}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	08 95       	ret

0000057c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     582:	48 81       	ld	r20, Y
     584:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     586:	4f 3f       	cpi	r20, 0xFF	; 255
     588:	2f ef       	ldi	r18, 0xFF	; 255
     58a:	52 07       	cpc	r21, r18
     58c:	21 f4       	brne	.+8      	; 0x596 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     58e:	fc 01       	movw	r30, r24
     590:	a7 81       	ldd	r26, Z+7	; 0x07
     592:	b0 85       	ldd	r27, Z+8	; 0x08
     594:	0d c0       	rjmp	.+26     	; 0x5b0 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     596:	dc 01       	movw	r26, r24
     598:	13 96       	adiw	r26, 0x03	; 3
     59a:	01 c0       	rjmp	.+2      	; 0x59e <vListInsert+0x22>
     59c:	df 01       	movw	r26, r30
     59e:	12 96       	adiw	r26, 0x02	; 2
     5a0:	ed 91       	ld	r30, X+
     5a2:	fc 91       	ld	r31, X
     5a4:	13 97       	sbiw	r26, 0x03	; 3
     5a6:	20 81       	ld	r18, Z
     5a8:	31 81       	ldd	r19, Z+1	; 0x01
     5aa:	42 17       	cp	r20, r18
     5ac:	53 07       	cpc	r21, r19
     5ae:	b0 f7       	brcc	.-20     	; 0x59c <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     5b0:	12 96       	adiw	r26, 0x02	; 2
     5b2:	ed 91       	ld	r30, X+
     5b4:	fc 91       	ld	r31, X
     5b6:	13 97       	sbiw	r26, 0x03	; 3
     5b8:	fb 83       	std	Y+3, r31	; 0x03
     5ba:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5bc:	d5 83       	std	Z+5, r29	; 0x05
     5be:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     5c0:	bd 83       	std	Y+5, r27	; 0x05
     5c2:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     5c4:	13 96       	adiw	r26, 0x03	; 3
     5c6:	dc 93       	st	X, r29
     5c8:	ce 93       	st	-X, r28
     5ca:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     5cc:	99 87       	std	Y+9, r25	; 0x09
     5ce:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     5d0:	fc 01       	movw	r30, r24
     5d2:	20 81       	ld	r18, Z
     5d4:	2f 5f       	subi	r18, 0xFF	; 255
     5d6:	20 83       	st	Z, r18
}
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5de:	cf 93       	push	r28
     5e0:	df 93       	push	r29
     5e2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     5e4:	a0 85       	ldd	r26, Z+8	; 0x08
     5e6:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5e8:	c2 81       	ldd	r28, Z+2	; 0x02
     5ea:	d3 81       	ldd	r29, Z+3	; 0x03
     5ec:	84 81       	ldd	r24, Z+4	; 0x04
     5ee:	95 81       	ldd	r25, Z+5	; 0x05
     5f0:	9d 83       	std	Y+5, r25	; 0x05
     5f2:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5f4:	c4 81       	ldd	r28, Z+4	; 0x04
     5f6:	d5 81       	ldd	r29, Z+5	; 0x05
     5f8:	82 81       	ldd	r24, Z+2	; 0x02
     5fa:	93 81       	ldd	r25, Z+3	; 0x03
     5fc:	9b 83       	std	Y+3, r25	; 0x03
     5fe:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     600:	11 96       	adiw	r26, 0x01	; 1
     602:	8d 91       	ld	r24, X+
     604:	9c 91       	ld	r25, X
     606:	12 97       	sbiw	r26, 0x02	; 2
     608:	e8 17       	cp	r30, r24
     60a:	f9 07       	cpc	r31, r25
     60c:	31 f4       	brne	.+12     	; 0x61a <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     60e:	84 81       	ldd	r24, Z+4	; 0x04
     610:	95 81       	ldd	r25, Z+5	; 0x05
     612:	12 96       	adiw	r26, 0x02	; 2
     614:	9c 93       	st	X, r25
     616:	8e 93       	st	-X, r24
     618:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     61a:	11 86       	std	Z+9, r1	; 0x09
     61c:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     61e:	8c 91       	ld	r24, X
     620:	81 50       	subi	r24, 0x01	; 1
     622:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     624:	8c 91       	ld	r24, X
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     62c:	31 e1       	ldi	r19, 0x11	; 17
     62e:	fc 01       	movw	r30, r24
     630:	30 83       	st	Z, r19
     632:	31 97       	sbiw	r30, 0x01	; 1
     634:	22 e2       	ldi	r18, 0x22	; 34
     636:	20 83       	st	Z, r18
     638:	31 97       	sbiw	r30, 0x01	; 1
     63a:	a3 e3       	ldi	r26, 0x33	; 51
     63c:	a0 83       	st	Z, r26
     63e:	31 97       	sbiw	r30, 0x01	; 1
     640:	60 83       	st	Z, r22
     642:	31 97       	sbiw	r30, 0x01	; 1
     644:	70 83       	st	Z, r23
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	10 82       	st	Z, r1
     64a:	31 97       	sbiw	r30, 0x01	; 1
     64c:	10 82       	st	Z, r1
     64e:	31 97       	sbiw	r30, 0x01	; 1
     650:	60 e8       	ldi	r22, 0x80	; 128
     652:	60 83       	st	Z, r22
     654:	31 97       	sbiw	r30, 0x01	; 1
     656:	10 82       	st	Z, r1
     658:	31 97       	sbiw	r30, 0x01	; 1
     65a:	10 82       	st	Z, r1
     65c:	31 97       	sbiw	r30, 0x01	; 1
     65e:	10 82       	st	Z, r1
     660:	31 97       	sbiw	r30, 0x01	; 1
     662:	62 e0       	ldi	r22, 0x02	; 2
     664:	60 83       	st	Z, r22
     666:	31 97       	sbiw	r30, 0x01	; 1
     668:	63 e0       	ldi	r22, 0x03	; 3
     66a:	60 83       	st	Z, r22
     66c:	31 97       	sbiw	r30, 0x01	; 1
     66e:	64 e0       	ldi	r22, 0x04	; 4
     670:	60 83       	st	Z, r22
     672:	31 97       	sbiw	r30, 0x01	; 1
     674:	65 e0       	ldi	r22, 0x05	; 5
     676:	60 83       	st	Z, r22
     678:	31 97       	sbiw	r30, 0x01	; 1
     67a:	66 e0       	ldi	r22, 0x06	; 6
     67c:	60 83       	st	Z, r22
     67e:	31 97       	sbiw	r30, 0x01	; 1
     680:	67 e0       	ldi	r22, 0x07	; 7
     682:	60 83       	st	Z, r22
     684:	31 97       	sbiw	r30, 0x01	; 1
     686:	68 e0       	ldi	r22, 0x08	; 8
     688:	60 83       	st	Z, r22
     68a:	31 97       	sbiw	r30, 0x01	; 1
     68c:	69 e0       	ldi	r22, 0x09	; 9
     68e:	60 83       	st	Z, r22
     690:	31 97       	sbiw	r30, 0x01	; 1
     692:	60 e1       	ldi	r22, 0x10	; 16
     694:	60 83       	st	Z, r22
     696:	31 97       	sbiw	r30, 0x01	; 1
     698:	30 83       	st	Z, r19
     69a:	31 97       	sbiw	r30, 0x01	; 1
     69c:	32 e1       	ldi	r19, 0x12	; 18
     69e:	30 83       	st	Z, r19
     6a0:	31 97       	sbiw	r30, 0x01	; 1
     6a2:	33 e1       	ldi	r19, 0x13	; 19
     6a4:	30 83       	st	Z, r19
     6a6:	31 97       	sbiw	r30, 0x01	; 1
     6a8:	34 e1       	ldi	r19, 0x14	; 20
     6aa:	30 83       	st	Z, r19
     6ac:	31 97       	sbiw	r30, 0x01	; 1
     6ae:	35 e1       	ldi	r19, 0x15	; 21
     6b0:	30 83       	st	Z, r19
     6b2:	31 97       	sbiw	r30, 0x01	; 1
     6b4:	36 e1       	ldi	r19, 0x16	; 22
     6b6:	30 83       	st	Z, r19
     6b8:	31 97       	sbiw	r30, 0x01	; 1
     6ba:	37 e1       	ldi	r19, 0x17	; 23
     6bc:	30 83       	st	Z, r19
     6be:	31 97       	sbiw	r30, 0x01	; 1
     6c0:	38 e1       	ldi	r19, 0x18	; 24
     6c2:	30 83       	st	Z, r19
     6c4:	31 97       	sbiw	r30, 0x01	; 1
     6c6:	39 e1       	ldi	r19, 0x19	; 25
     6c8:	30 83       	st	Z, r19
     6ca:	31 97       	sbiw	r30, 0x01	; 1
     6cc:	30 e2       	ldi	r19, 0x20	; 32
     6ce:	30 83       	st	Z, r19
     6d0:	31 97       	sbiw	r30, 0x01	; 1
     6d2:	31 e2       	ldi	r19, 0x21	; 33
     6d4:	30 83       	st	Z, r19
     6d6:	31 97       	sbiw	r30, 0x01	; 1
     6d8:	20 83       	st	Z, r18
     6da:	31 97       	sbiw	r30, 0x01	; 1
     6dc:	23 e2       	ldi	r18, 0x23	; 35
     6de:	20 83       	st	Z, r18
     6e0:	31 97       	sbiw	r30, 0x01	; 1
     6e2:	40 83       	st	Z, r20
     6e4:	31 97       	sbiw	r30, 0x01	; 1
     6e6:	50 83       	st	Z, r21
     6e8:	31 97       	sbiw	r30, 0x01	; 1
     6ea:	26 e2       	ldi	r18, 0x26	; 38
     6ec:	20 83       	st	Z, r18
     6ee:	31 97       	sbiw	r30, 0x01	; 1
     6f0:	27 e2       	ldi	r18, 0x27	; 39
     6f2:	20 83       	st	Z, r18
     6f4:	31 97       	sbiw	r30, 0x01	; 1
     6f6:	28 e2       	ldi	r18, 0x28	; 40
     6f8:	20 83       	st	Z, r18
     6fa:	31 97       	sbiw	r30, 0x01	; 1
     6fc:	29 e2       	ldi	r18, 0x29	; 41
     6fe:	20 83       	st	Z, r18
     700:	31 97       	sbiw	r30, 0x01	; 1
     702:	20 e3       	ldi	r18, 0x30	; 48
     704:	20 83       	st	Z, r18
     706:	31 97       	sbiw	r30, 0x01	; 1
     708:	21 e3       	ldi	r18, 0x31	; 49
     70a:	20 83       	st	Z, r18
     70c:	89 97       	sbiw	r24, 0x29	; 41
     70e:	08 95       	ret

00000710 <xPortStartScheduler>:
     710:	a8 95       	wdr
     712:	90 ec       	ldi	r25, 0xC0	; 192
     714:	88 e1       	ldi	r24, 0x18	; 24
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	f8 94       	cli
     71a:	a8 95       	wdr
     71c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     720:	0f be       	out	0x3f, r0	; 63
     722:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     726:	a0 91 ee 08 	lds	r26, 0x08EE	; 0x8008ee <pxCurrentTCB>
     72a:	b0 91 ef 08 	lds	r27, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
     72e:	cd 91       	ld	r28, X+
     730:	cd bf       	out	0x3d, r28	; 61
     732:	dd 91       	ld	r29, X+
     734:	de bf       	out	0x3e, r29	; 62
     736:	ff 91       	pop	r31
     738:	ef 91       	pop	r30
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	bf 91       	pop	r27
     740:	af 91       	pop	r26
     742:	9f 91       	pop	r25
     744:	8f 91       	pop	r24
     746:	7f 91       	pop	r23
     748:	6f 91       	pop	r22
     74a:	5f 91       	pop	r21
     74c:	4f 91       	pop	r20
     74e:	3f 91       	pop	r19
     750:	2f 91       	pop	r18
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	bf 90       	pop	r11
     760:	af 90       	pop	r10
     762:	9f 90       	pop	r9
     764:	8f 90       	pop	r8
     766:	7f 90       	pop	r7
     768:	6f 90       	pop	r6
     76a:	5f 90       	pop	r5
     76c:	4f 90       	pop	r4
     76e:	3f 90       	pop	r3
     770:	2f 90       	pop	r2
     772:	1f 90       	pop	r1
     774:	0f 90       	pop	r0
     776:	0c be       	out	0x3c, r0	; 60
     778:	0f 90       	pop	r0
     77a:	0b be       	out	0x3b, r0	; 59
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	0f 90       	pop	r0
     782:	08 95       	ret
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	08 95       	ret

00000788 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     788:	0f 92       	push	r0
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	f8 94       	cli
     78e:	0f 92       	push	r0
     790:	0b b6       	in	r0, 0x3b	; 59
     792:	0f 92       	push	r0
     794:	0c b6       	in	r0, 0x3c	; 60
     796:	0f 92       	push	r0
     798:	1f 92       	push	r1
     79a:	11 24       	eor	r1, r1
     79c:	2f 92       	push	r2
     79e:	3f 92       	push	r3
     7a0:	4f 92       	push	r4
     7a2:	5f 92       	push	r5
     7a4:	6f 92       	push	r6
     7a6:	7f 92       	push	r7
     7a8:	8f 92       	push	r8
     7aa:	9f 92       	push	r9
     7ac:	af 92       	push	r10
     7ae:	bf 92       	push	r11
     7b0:	cf 92       	push	r12
     7b2:	df 92       	push	r13
     7b4:	ef 92       	push	r14
     7b6:	ff 92       	push	r15
     7b8:	0f 93       	push	r16
     7ba:	1f 93       	push	r17
     7bc:	2f 93       	push	r18
     7be:	3f 93       	push	r19
     7c0:	4f 93       	push	r20
     7c2:	5f 93       	push	r21
     7c4:	6f 93       	push	r22
     7c6:	7f 93       	push	r23
     7c8:	8f 93       	push	r24
     7ca:	9f 93       	push	r25
     7cc:	af 93       	push	r26
     7ce:	bf 93       	push	r27
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	ef 93       	push	r30
     7d6:	ff 93       	push	r31
     7d8:	a0 91 ee 08 	lds	r26, 0x08EE	; 0x8008ee <pxCurrentTCB>
     7dc:	b0 91 ef 08 	lds	r27, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
     7e0:	0d b6       	in	r0, 0x3d	; 61
     7e2:	0d 92       	st	X+, r0
     7e4:	0e b6       	in	r0, 0x3e	; 62
     7e6:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     7e8:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     7ec:	a0 91 ee 08 	lds	r26, 0x08EE	; 0x8008ee <pxCurrentTCB>
     7f0:	b0 91 ef 08 	lds	r27, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
     7f4:	cd 91       	ld	r28, X+
     7f6:	cd bf       	out	0x3d, r28	; 61
     7f8:	dd 91       	ld	r29, X+
     7fa:	de bf       	out	0x3e, r29	; 62
     7fc:	ff 91       	pop	r31
     7fe:	ef 91       	pop	r30
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	bf 91       	pop	r27
     806:	af 91       	pop	r26
     808:	9f 91       	pop	r25
     80a:	8f 91       	pop	r24
     80c:	7f 91       	pop	r23
     80e:	6f 91       	pop	r22
     810:	5f 91       	pop	r21
     812:	4f 91       	pop	r20
     814:	3f 91       	pop	r19
     816:	2f 91       	pop	r18
     818:	1f 91       	pop	r17
     81a:	0f 91       	pop	r16
     81c:	ff 90       	pop	r15
     81e:	ef 90       	pop	r14
     820:	df 90       	pop	r13
     822:	cf 90       	pop	r12
     824:	bf 90       	pop	r11
     826:	af 90       	pop	r10
     828:	9f 90       	pop	r9
     82a:	8f 90       	pop	r8
     82c:	7f 90       	pop	r7
     82e:	6f 90       	pop	r6
     830:	5f 90       	pop	r5
     832:	4f 90       	pop	r4
     834:	3f 90       	pop	r3
     836:	2f 90       	pop	r2
     838:	1f 90       	pop	r1
     83a:	0f 90       	pop	r0
     83c:	0c be       	out	0x3c, r0	; 60
     83e:	0f 90       	pop	r0
     840:	0b be       	out	0x3b, r0	; 59
     842:	0f 90       	pop	r0
     844:	0f be       	out	0x3f, r0	; 63
     846:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     848:	08 95       	ret

0000084a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     84a:	0f 92       	push	r0
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	0f 92       	push	r0
     852:	0b b6       	in	r0, 0x3b	; 59
     854:	0f 92       	push	r0
     856:	0c b6       	in	r0, 0x3c	; 60
     858:	0f 92       	push	r0
     85a:	1f 92       	push	r1
     85c:	11 24       	eor	r1, r1
     85e:	2f 92       	push	r2
     860:	3f 92       	push	r3
     862:	4f 92       	push	r4
     864:	5f 92       	push	r5
     866:	6f 92       	push	r6
     868:	7f 92       	push	r7
     86a:	8f 92       	push	r8
     86c:	9f 92       	push	r9
     86e:	af 92       	push	r10
     870:	bf 92       	push	r11
     872:	cf 92       	push	r12
     874:	df 92       	push	r13
     876:	ef 92       	push	r14
     878:	ff 92       	push	r15
     87a:	0f 93       	push	r16
     87c:	1f 93       	push	r17
     87e:	2f 93       	push	r18
     880:	3f 93       	push	r19
     882:	4f 93       	push	r20
     884:	5f 93       	push	r21
     886:	6f 93       	push	r22
     888:	7f 93       	push	r23
     88a:	8f 93       	push	r24
     88c:	9f 93       	push	r25
     88e:	af 93       	push	r26
     890:	bf 93       	push	r27
     892:	cf 93       	push	r28
     894:	df 93       	push	r29
     896:	ef 93       	push	r30
     898:	ff 93       	push	r31
     89a:	a0 91 ee 08 	lds	r26, 0x08EE	; 0x8008ee <pxCurrentTCB>
     89e:	b0 91 ef 08 	lds	r27, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
     8a2:	0d b6       	in	r0, 0x3d	; 61
     8a4:	0d 92       	st	X+, r0
     8a6:	0e b6       	in	r0, 0x3e	; 62
     8a8:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     8aa:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     8ac:	c0 d7       	rcall	.+3968   	; 0x182e <xTaskIncrementTick>
     8ae:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     8b0:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     8b4:	a0 91 ee 08 	lds	r26, 0x08EE	; 0x8008ee <pxCurrentTCB>
     8b8:	b0 91 ef 08 	lds	r27, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
     8bc:	cd 91       	ld	r28, X+
     8be:	cd bf       	out	0x3d, r28	; 61
     8c0:	dd 91       	ld	r29, X+
     8c2:	de bf       	out	0x3e, r29	; 62
     8c4:	ff 91       	pop	r31
     8c6:	ef 91       	pop	r30
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	bf 91       	pop	r27
     8ce:	af 91       	pop	r26
     8d0:	9f 91       	pop	r25
     8d2:	8f 91       	pop	r24
     8d4:	7f 91       	pop	r23
     8d6:	6f 91       	pop	r22
     8d8:	5f 91       	pop	r21
     8da:	4f 91       	pop	r20
     8dc:	3f 91       	pop	r19
     8de:	2f 91       	pop	r18
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	df 90       	pop	r13
     8ea:	cf 90       	pop	r12
     8ec:	bf 90       	pop	r11
     8ee:	af 90       	pop	r10
     8f0:	9f 90       	pop	r9
     8f2:	8f 90       	pop	r8
     8f4:	7f 90       	pop	r7
     8f6:	6f 90       	pop	r6
     8f8:	5f 90       	pop	r5
     8fa:	4f 90       	pop	r4
     8fc:	3f 90       	pop	r3
     8fe:	2f 90       	pop	r2
     900:	1f 90       	pop	r1
     902:	0f 90       	pop	r0
     904:	0c be       	out	0x3c, r0	; 60
     906:	0f 90       	pop	r0
     908:	0b be       	out	0x3b, r0	; 59
     90a:	0f 90       	pop	r0
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     910:	08 95       	ret

00000912 <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     912:	9b df       	rcall	.-202    	; 0x84a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     914:	18 95       	reti

00000916 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	0f 92       	push	r0
     91c:	fc 01       	movw	r30, r24
     91e:	92 8d       	ldd	r25, Z+26	; 0x1a
     920:	0f 90       	pop	r0
     922:	0f be       	out	0x3f, r0	; 63
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	91 11       	cpse	r25, r1
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	08 95       	ret

0000092c <prvCopyDataToQueue>:
     92c:	0f 93       	push	r16
     92e:	1f 93       	push	r17
     930:	cf 93       	push	r28
     932:	df 93       	push	r29
     934:	ec 01       	movw	r28, r24
     936:	04 2f       	mov	r16, r20
     938:	1a 8d       	ldd	r17, Y+26	; 0x1a
     93a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     93c:	41 11       	cpse	r20, r1
     93e:	0c c0       	rjmp	.+24     	; 0x958 <prvCopyDataToQueue+0x2c>
     940:	88 81       	ld	r24, Y
     942:	99 81       	ldd	r25, Y+1	; 0x01
     944:	89 2b       	or	r24, r25
     946:	09 f0       	breq	.+2      	; 0x94a <prvCopyDataToQueue+0x1e>
     948:	42 c0       	rjmp	.+132    	; 0x9ce <prvCopyDataToQueue+0xa2>
     94a:	8c 81       	ldd	r24, Y+4	; 0x04
     94c:	9d 81       	ldd	r25, Y+5	; 0x05
     94e:	0e 94 27 0f 	call	0x1e4e	; 0x1e4e <xTaskPriorityDisinherit>
     952:	1d 82       	std	Y+5, r1	; 0x05
     954:	1c 82       	std	Y+4, r1	; 0x04
     956:	42 c0       	rjmp	.+132    	; 0x9dc <prvCopyDataToQueue+0xb0>
     958:	01 11       	cpse	r16, r1
     95a:	17 c0       	rjmp	.+46     	; 0x98a <prvCopyDataToQueue+0x5e>
     95c:	50 e0       	ldi	r21, 0x00	; 0
     95e:	8a 81       	ldd	r24, Y+2	; 0x02
     960:	9b 81       	ldd	r25, Y+3	; 0x03
     962:	0e 94 40 26 	call	0x4c80	; 0x4c80 <memcpy>
     966:	2c 8d       	ldd	r18, Y+28	; 0x1c
     968:	8a 81       	ldd	r24, Y+2	; 0x02
     96a:	9b 81       	ldd	r25, Y+3	; 0x03
     96c:	82 0f       	add	r24, r18
     96e:	91 1d       	adc	r25, r1
     970:	9b 83       	std	Y+3, r25	; 0x03
     972:	8a 83       	std	Y+2, r24	; 0x02
     974:	2c 81       	ldd	r18, Y+4	; 0x04
     976:	3d 81       	ldd	r19, Y+5	; 0x05
     978:	82 17       	cp	r24, r18
     97a:	93 07       	cpc	r25, r19
     97c:	50 f1       	brcs	.+84     	; 0x9d2 <prvCopyDataToQueue+0xa6>
     97e:	88 81       	ld	r24, Y
     980:	99 81       	ldd	r25, Y+1	; 0x01
     982:	9b 83       	std	Y+3, r25	; 0x03
     984:	8a 83       	std	Y+2, r24	; 0x02
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	29 c0       	rjmp	.+82     	; 0x9dc <prvCopyDataToQueue+0xb0>
     98a:	50 e0       	ldi	r21, 0x00	; 0
     98c:	8e 81       	ldd	r24, Y+6	; 0x06
     98e:	9f 81       	ldd	r25, Y+7	; 0x07
     990:	0e 94 40 26 	call	0x4c80	; 0x4c80 <memcpy>
     994:	8c 8d       	ldd	r24, Y+28	; 0x1c
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	91 95       	neg	r25
     99a:	81 95       	neg	r24
     99c:	91 09       	sbc	r25, r1
     99e:	2e 81       	ldd	r18, Y+6	; 0x06
     9a0:	3f 81       	ldd	r19, Y+7	; 0x07
     9a2:	28 0f       	add	r18, r24
     9a4:	39 1f       	adc	r19, r25
     9a6:	3f 83       	std	Y+7, r19	; 0x07
     9a8:	2e 83       	std	Y+6, r18	; 0x06
     9aa:	48 81       	ld	r20, Y
     9ac:	59 81       	ldd	r21, Y+1	; 0x01
     9ae:	24 17       	cp	r18, r20
     9b0:	35 07       	cpc	r19, r21
     9b2:	30 f4       	brcc	.+12     	; 0x9c0 <prvCopyDataToQueue+0x94>
     9b4:	2c 81       	ldd	r18, Y+4	; 0x04
     9b6:	3d 81       	ldd	r19, Y+5	; 0x05
     9b8:	82 0f       	add	r24, r18
     9ba:	93 1f       	adc	r25, r19
     9bc:	9f 83       	std	Y+7, r25	; 0x07
     9be:	8e 83       	std	Y+6, r24	; 0x06
     9c0:	02 30       	cpi	r16, 0x02	; 2
     9c2:	49 f4       	brne	.+18     	; 0x9d6 <prvCopyDataToQueue+0xaa>
     9c4:	11 23       	and	r17, r17
     9c6:	49 f0       	breq	.+18     	; 0x9da <prvCopyDataToQueue+0xae>
     9c8:	11 50       	subi	r17, 0x01	; 1
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	07 c0       	rjmp	.+14     	; 0x9dc <prvCopyDataToQueue+0xb0>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	05 c0       	rjmp	.+10     	; 0x9dc <prvCopyDataToQueue+0xb0>
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	03 c0       	rjmp	.+6      	; 0x9dc <prvCopyDataToQueue+0xb0>
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	01 c0       	rjmp	.+2      	; 0x9dc <prvCopyDataToQueue+0xb0>
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	1f 5f       	subi	r17, 0xFF	; 255
     9de:	1a 8f       	std	Y+26, r17	; 0x1a
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	08 95       	ret

000009ea <prvCopyDataFromQueue>:
     9ea:	fc 01       	movw	r30, r24
     9ec:	44 8d       	ldd	r20, Z+28	; 0x1c
     9ee:	44 23       	and	r20, r20
     9f0:	a9 f0       	breq	.+42     	; 0xa1c <prvCopyDataFromQueue+0x32>
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	26 81       	ldd	r18, Z+6	; 0x06
     9f6:	37 81       	ldd	r19, Z+7	; 0x07
     9f8:	24 0f       	add	r18, r20
     9fa:	35 1f       	adc	r19, r21
     9fc:	37 83       	std	Z+7, r19	; 0x07
     9fe:	26 83       	std	Z+6, r18	; 0x06
     a00:	84 81       	ldd	r24, Z+4	; 0x04
     a02:	95 81       	ldd	r25, Z+5	; 0x05
     a04:	28 17       	cp	r18, r24
     a06:	39 07       	cpc	r19, r25
     a08:	20 f0       	brcs	.+8      	; 0xa12 <prvCopyDataFromQueue+0x28>
     a0a:	80 81       	ld	r24, Z
     a0c:	91 81       	ldd	r25, Z+1	; 0x01
     a0e:	97 83       	std	Z+7, r25	; 0x07
     a10:	86 83       	std	Z+6, r24	; 0x06
     a12:	cb 01       	movw	r24, r22
     a14:	66 81       	ldd	r22, Z+6	; 0x06
     a16:	77 81       	ldd	r23, Z+7	; 0x07
     a18:	0c 94 40 26 	jmp	0x4c80	; 0x4c80 <memcpy>
     a1c:	08 95       	ret

00000a1e <prvUnlockQueue>:
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	0f 93       	push	r16
     a24:	1f 93       	push	r17
     a26:	cf 93       	push	r28
     a28:	8c 01       	movw	r16, r24
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	0f 92       	push	r0
     a30:	fc 01       	movw	r30, r24
     a32:	c6 8d       	ldd	r28, Z+30	; 0x1e
     a34:	1c 16       	cp	r1, r28
     a36:	ac f4       	brge	.+42     	; 0xa62 <prvUnlockQueue+0x44>
     a38:	81 89       	ldd	r24, Z+17	; 0x11
     a3a:	81 11       	cpse	r24, r1
     a3c:	06 c0       	rjmp	.+12     	; 0xa4a <prvUnlockQueue+0x2c>
     a3e:	11 c0       	rjmp	.+34     	; 0xa62 <prvUnlockQueue+0x44>
     a40:	f8 01       	movw	r30, r16
     a42:	81 89       	ldd	r24, Z+17	; 0x11
     a44:	81 11       	cpse	r24, r1
     a46:	05 c0       	rjmp	.+10     	; 0xa52 <prvUnlockQueue+0x34>
     a48:	0c c0       	rjmp	.+24     	; 0xa62 <prvUnlockQueue+0x44>
     a4a:	78 01       	movw	r14, r16
     a4c:	f1 e1       	ldi	r31, 0x11	; 17
     a4e:	ef 0e       	add	r14, r31
     a50:	f1 1c       	adc	r15, r1
     a52:	c7 01       	movw	r24, r14
     a54:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <xTaskRemoveFromEventList>
     a58:	81 11       	cpse	r24, r1
     a5a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <vTaskMissedYield>
     a5e:	c1 50       	subi	r28, 0x01	; 1
     a60:	79 f7       	brne	.-34     	; 0xa40 <prvUnlockQueue+0x22>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	f8 01       	movw	r30, r16
     a66:	86 8f       	std	Z+30, r24	; 0x1e
     a68:	0f 90       	pop	r0
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	0f b6       	in	r0, 0x3f	; 63
     a6e:	f8 94       	cli
     a70:	0f 92       	push	r0
     a72:	c5 8d       	ldd	r28, Z+29	; 0x1d
     a74:	1c 16       	cp	r1, r28
     a76:	ac f4       	brge	.+42     	; 0xaa2 <prvUnlockQueue+0x84>
     a78:	80 85       	ldd	r24, Z+8	; 0x08
     a7a:	81 11       	cpse	r24, r1
     a7c:	06 c0       	rjmp	.+12     	; 0xa8a <prvUnlockQueue+0x6c>
     a7e:	11 c0       	rjmp	.+34     	; 0xaa2 <prvUnlockQueue+0x84>
     a80:	f8 01       	movw	r30, r16
     a82:	80 85       	ldd	r24, Z+8	; 0x08
     a84:	81 11       	cpse	r24, r1
     a86:	05 c0       	rjmp	.+10     	; 0xa92 <prvUnlockQueue+0x74>
     a88:	0c c0       	rjmp	.+24     	; 0xaa2 <prvUnlockQueue+0x84>
     a8a:	78 01       	movw	r14, r16
     a8c:	f8 e0       	ldi	r31, 0x08	; 8
     a8e:	ef 0e       	add	r14, r31
     a90:	f1 1c       	adc	r15, r1
     a92:	c7 01       	movw	r24, r14
     a94:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <xTaskRemoveFromEventList>
     a98:	81 11       	cpse	r24, r1
     a9a:	0e 94 9e 0e 	call	0x1d3c	; 0x1d3c <vTaskMissedYield>
     a9e:	c1 50       	subi	r28, 0x01	; 1
     aa0:	79 f7       	brne	.-34     	; 0xa80 <prvUnlockQueue+0x62>
     aa2:	8f ef       	ldi	r24, 0xFF	; 255
     aa4:	f8 01       	movw	r30, r16
     aa6:	85 8f       	std	Z+29, r24	; 0x1d
     aa8:	0f 90       	pop	r0
     aaa:	0f be       	out	0x3f, r0	; 63
     aac:	cf 91       	pop	r28
     aae:	1f 91       	pop	r17
     ab0:	0f 91       	pop	r16
     ab2:	ff 90       	pop	r15
     ab4:	ef 90       	pop	r14
     ab6:	08 95       	ret

00000ab8 <xQueueGenericReset>:
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ec 01       	movw	r28, r24
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	0f 92       	push	r0
     ac4:	e8 81       	ld	r30, Y
     ac6:	f9 81       	ldd	r31, Y+1	; 0x01
     ac8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     aca:	2c 8d       	ldd	r18, Y+28	; 0x1c
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	82 9f       	mul	r24, r18
     ad2:	a0 01       	movw	r20, r0
     ad4:	83 9f       	mul	r24, r19
     ad6:	50 0d       	add	r21, r0
     ad8:	92 9f       	mul	r25, r18
     ada:	50 0d       	add	r21, r0
     adc:	11 24       	eor	r1, r1
     ade:	4e 0f       	add	r20, r30
     ae0:	5f 1f       	adc	r21, r31
     ae2:	5d 83       	std	Y+5, r21	; 0x05
     ae4:	4c 83       	std	Y+4, r20	; 0x04
     ae6:	1a 8e       	std	Y+26, r1	; 0x1a
     ae8:	fb 83       	std	Y+3, r31	; 0x03
     aea:	ea 83       	std	Y+2, r30	; 0x02
     aec:	01 97       	sbiw	r24, 0x01	; 1
     aee:	82 9f       	mul	r24, r18
     af0:	a0 01       	movw	r20, r0
     af2:	83 9f       	mul	r24, r19
     af4:	50 0d       	add	r21, r0
     af6:	92 9f       	mul	r25, r18
     af8:	50 0d       	add	r21, r0
     afa:	11 24       	eor	r1, r1
     afc:	cf 01       	movw	r24, r30
     afe:	84 0f       	add	r24, r20
     b00:	95 1f       	adc	r25, r21
     b02:	9f 83       	std	Y+7, r25	; 0x07
     b04:	8e 83       	std	Y+6, r24	; 0x06
     b06:	8f ef       	ldi	r24, 0xFF	; 255
     b08:	8d 8f       	std	Y+29, r24	; 0x1d
     b0a:	8e 8f       	std	Y+30, r24	; 0x1e
     b0c:	61 11       	cpse	r22, r1
     b0e:	0b c0       	rjmp	.+22     	; 0xb26 <xQueueGenericReset+0x6e>
     b10:	88 85       	ldd	r24, Y+8	; 0x08
     b12:	88 23       	and	r24, r24
     b14:	71 f0       	breq	.+28     	; 0xb32 <xQueueGenericReset+0x7a>
     b16:	ce 01       	movw	r24, r28
     b18:	08 96       	adiw	r24, 0x08	; 8
     b1a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <xTaskRemoveFromEventList>
     b1e:	88 23       	and	r24, r24
     b20:	41 f0       	breq	.+16     	; 0xb32 <xQueueGenericReset+0x7a>
     b22:	32 de       	rcall	.-924    	; 0x788 <vPortYield>
     b24:	06 c0       	rjmp	.+12     	; 0xb32 <xQueueGenericReset+0x7a>
     b26:	ce 01       	movw	r24, r28
     b28:	08 96       	adiw	r24, 0x08	; 8
     b2a:	f5 dc       	rcall	.-1558   	; 0x516 <vListInitialise>
     b2c:	ce 01       	movw	r24, r28
     b2e:	41 96       	adiw	r24, 0x11	; 17
     b30:	f2 dc       	rcall	.-1564   	; 0x516 <vListInitialise>
     b32:	0f 90       	pop	r0
     b34:	0f be       	out	0x3f, r0	; 63
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	08 95       	ret

00000b3e <xQueueGenericCreate>:
     b3e:	ff 92       	push	r15
     b40:	0f 93       	push	r16
     b42:	1f 93       	push	r17
     b44:	cf 93       	push	r28
     b46:	df 93       	push	r29
     b48:	08 2f       	mov	r16, r24
     b4a:	16 2f       	mov	r17, r22
     b4c:	f4 2e       	mov	r15, r20
     b4e:	66 23       	and	r22, r22
     b50:	b9 f0       	breq	.+46     	; 0xb80 <xQueueGenericCreate+0x42>
     b52:	86 9f       	mul	r24, r22
     b54:	c0 01       	movw	r24, r0
     b56:	11 24       	eor	r1, r1
     b58:	81 96       	adiw	r24, 0x21	; 33
     b5a:	bb dc       	rcall	.-1674   	; 0x4d2 <pvPortMalloc>
     b5c:	ec 01       	movw	r28, r24
     b5e:	00 97       	sbiw	r24, 0x00	; 0
     b60:	41 f4       	brne	.+16     	; 0xb72 <xQueueGenericCreate+0x34>
     b62:	14 c0       	rjmp	.+40     	; 0xb8c <xQueueGenericCreate+0x4e>
     b64:	0b 8f       	std	Y+27, r16	; 0x1b
     b66:	1c 8f       	std	Y+28, r17	; 0x1c
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	ce 01       	movw	r24, r28
     b6c:	a5 df       	rcall	.-182    	; 0xab8 <xQueueGenericReset>
     b6e:	f8 a2       	std	Y+32, r15	; 0x20
     b70:	0d c0       	rjmp	.+26     	; 0xb8c <xQueueGenericCreate+0x4e>
     b72:	81 96       	adiw	r24, 0x21	; 33
     b74:	99 83       	std	Y+1, r25	; 0x01
     b76:	88 83       	st	Y, r24
     b78:	f5 cf       	rjmp	.-22     	; 0xb64 <xQueueGenericCreate+0x26>
     b7a:	d9 83       	std	Y+1, r29	; 0x01
     b7c:	c8 83       	st	Y, r28
     b7e:	f2 cf       	rjmp	.-28     	; 0xb64 <xQueueGenericCreate+0x26>
     b80:	81 e2       	ldi	r24, 0x21	; 33
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a6 dc       	rcall	.-1716   	; 0x4d2 <pvPortMalloc>
     b86:	ec 01       	movw	r28, r24
     b88:	89 2b       	or	r24, r25
     b8a:	b9 f7       	brne	.-18     	; 0xb7a <xQueueGenericCreate+0x3c>
     b8c:	ce 01       	movw	r24, r28
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	08 95       	ret

00000b9a <xQueueGenericSend>:
     b9a:	9f 92       	push	r9
     b9c:	af 92       	push	r10
     b9e:	bf 92       	push	r11
     ba0:	cf 92       	push	r12
     ba2:	df 92       	push	r13
     ba4:	ef 92       	push	r14
     ba6:	ff 92       	push	r15
     ba8:	0f 93       	push	r16
     baa:	1f 93       	push	r17
     bac:	cf 93       	push	r28
     bae:	df 93       	push	r29
     bb0:	00 d0       	rcall	.+0      	; 0xbb2 <xQueueGenericSend+0x18>
     bb2:	1f 92       	push	r1
     bb4:	1f 92       	push	r1
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	8c 01       	movw	r16, r24
     bbc:	6b 01       	movw	r12, r22
     bbe:	5d 83       	std	Y+5, r21	; 0x05
     bc0:	4c 83       	std	Y+4, r20	; 0x04
     bc2:	a2 2e       	mov	r10, r18
     bc4:	b1 2c       	mov	r11, r1
     bc6:	99 24       	eor	r9, r9
     bc8:	93 94       	inc	r9
     bca:	7c 01       	movw	r14, r24
     bcc:	88 e0       	ldi	r24, 0x08	; 8
     bce:	e8 0e       	add	r14, r24
     bd0:	f1 1c       	adc	r15, r1
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	0f 92       	push	r0
     bd8:	f8 01       	movw	r30, r16
     bda:	92 8d       	ldd	r25, Z+26	; 0x1a
     bdc:	83 8d       	ldd	r24, Z+27	; 0x1b
     bde:	98 17       	cp	r25, r24
     be0:	18 f0       	brcs	.+6      	; 0xbe8 <xQueueGenericSend+0x4e>
     be2:	f2 e0       	ldi	r31, 0x02	; 2
     be4:	af 12       	cpse	r10, r31
     be6:	16 c0       	rjmp	.+44     	; 0xc14 <xQueueGenericSend+0x7a>
     be8:	4a 2d       	mov	r20, r10
     bea:	b6 01       	movw	r22, r12
     bec:	c8 01       	movw	r24, r16
     bee:	9e de       	rcall	.-708    	; 0x92c <prvCopyDataToQueue>
     bf0:	f8 01       	movw	r30, r16
     bf2:	91 89       	ldd	r25, Z+17	; 0x11
     bf4:	99 23       	and	r25, r25
     bf6:	41 f0       	breq	.+16     	; 0xc08 <xQueueGenericSend+0x6e>
     bf8:	c8 01       	movw	r24, r16
     bfa:	41 96       	adiw	r24, 0x11	; 17
     bfc:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <xTaskRemoveFromEventList>
     c00:	88 23       	and	r24, r24
     c02:	21 f0       	breq	.+8      	; 0xc0c <xQueueGenericSend+0x72>
     c04:	c1 dd       	rcall	.-1150   	; 0x788 <vPortYield>
     c06:	02 c0       	rjmp	.+4      	; 0xc0c <xQueueGenericSend+0x72>
     c08:	81 11       	cpse	r24, r1
     c0a:	be dd       	rcall	.-1156   	; 0x788 <vPortYield>
     c0c:	0f 90       	pop	r0
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	47 c0       	rjmp	.+142    	; 0xca2 <xQueueGenericSend+0x108>
     c14:	8c 81       	ldd	r24, Y+4	; 0x04
     c16:	9d 81       	ldd	r25, Y+5	; 0x05
     c18:	89 2b       	or	r24, r25
     c1a:	21 f4       	brne	.+8      	; 0xc24 <xQueueGenericSend+0x8a>
     c1c:	0f 90       	pop	r0
     c1e:	0f be       	out	0x3f, r0	; 63
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	3f c0       	rjmp	.+126    	; 0xca2 <xQueueGenericSend+0x108>
     c24:	b1 10       	cpse	r11, r1
     c26:	05 c0       	rjmp	.+10     	; 0xc32 <xQueueGenericSend+0x98>
     c28:	ce 01       	movw	r24, r28
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <vTaskInternalSetTimeOutState>
     c30:	b9 2c       	mov	r11, r9
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	eb d5       	rcall	.+3030   	; 0x180e <vTaskSuspendAll>
     c38:	0f b6       	in	r0, 0x3f	; 63
     c3a:	f8 94       	cli
     c3c:	0f 92       	push	r0
     c3e:	f8 01       	movw	r30, r16
     c40:	85 8d       	ldd	r24, Z+29	; 0x1d
     c42:	8f 3f       	cpi	r24, 0xFF	; 255
     c44:	09 f4       	brne	.+2      	; 0xc48 <xQueueGenericSend+0xae>
     c46:	15 8e       	std	Z+29, r1	; 0x1d
     c48:	f8 01       	movw	r30, r16
     c4a:	86 8d       	ldd	r24, Z+30	; 0x1e
     c4c:	8f 3f       	cpi	r24, 0xFF	; 255
     c4e:	09 f4       	brne	.+2      	; 0xc52 <xQueueGenericSend+0xb8>
     c50:	16 8e       	std	Z+30, r1	; 0x1e
     c52:	0f 90       	pop	r0
     c54:	0f be       	out	0x3f, r0	; 63
     c56:	be 01       	movw	r22, r28
     c58:	6c 5f       	subi	r22, 0xFC	; 252
     c5a:	7f 4f       	sbci	r23, 0xFF	; 255
     c5c:	ce 01       	movw	r24, r28
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <xTaskCheckForTimeOut>
     c64:	81 11       	cpse	r24, r1
     c66:	19 c0       	rjmp	.+50     	; 0xc9a <xQueueGenericSend+0x100>
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	0f 92       	push	r0
     c6e:	f8 01       	movw	r30, r16
     c70:	92 8d       	ldd	r25, Z+26	; 0x1a
     c72:	83 8d       	ldd	r24, Z+27	; 0x1b
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	98 13       	cpse	r25, r24
     c7a:	0b c0       	rjmp	.+22     	; 0xc92 <xQueueGenericSend+0xf8>
     c7c:	6c 81       	ldd	r22, Y+4	; 0x04
     c7e:	7d 81       	ldd	r23, Y+5	; 0x05
     c80:	c7 01       	movw	r24, r14
     c82:	ab d7       	rcall	.+3926   	; 0x1bda <vTaskPlaceOnEventList>
     c84:	c8 01       	movw	r24, r16
     c86:	cb de       	rcall	.-618    	; 0xa1e <prvUnlockQueue>
     c88:	8c d6       	rcall	.+3352   	; 0x19a2 <xTaskResumeAll>
     c8a:	81 11       	cpse	r24, r1
     c8c:	a2 cf       	rjmp	.-188    	; 0xbd2 <xQueueGenericSend+0x38>
     c8e:	7c dd       	rcall	.-1288   	; 0x788 <vPortYield>
     c90:	a0 cf       	rjmp	.-192    	; 0xbd2 <xQueueGenericSend+0x38>
     c92:	c8 01       	movw	r24, r16
     c94:	c4 de       	rcall	.-632    	; 0xa1e <prvUnlockQueue>
     c96:	85 d6       	rcall	.+3338   	; 0x19a2 <xTaskResumeAll>
     c98:	9c cf       	rjmp	.-200    	; 0xbd2 <xQueueGenericSend+0x38>
     c9a:	c8 01       	movw	r24, r16
     c9c:	c0 de       	rcall	.-640    	; 0xa1e <prvUnlockQueue>
     c9e:	81 d6       	rcall	.+3330   	; 0x19a2 <xTaskResumeAll>
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	0f 90       	pop	r0
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	1f 91       	pop	r17
     cb2:	0f 91       	pop	r16
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	bf 90       	pop	r11
     cbe:	af 90       	pop	r10
     cc0:	9f 90       	pop	r9
     cc2:	08 95       	ret

00000cc4 <xQueueCreateMutex>:
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	48 2f       	mov	r20, r24
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	37 df       	rcall	.-402    	; 0xb3e <xQueueGenericCreate>
     cd0:	ec 01       	movw	r28, r24
     cd2:	00 97       	sbiw	r24, 0x00	; 0
     cd4:	59 f0       	breq	.+22     	; 0xcec <xQueueCreateMutex+0x28>
     cd6:	1d 82       	std	Y+5, r1	; 0x05
     cd8:	1c 82       	std	Y+4, r1	; 0x04
     cda:	19 82       	std	Y+1, r1	; 0x01
     cdc:	18 82       	st	Y, r1
     cde:	1e 82       	std	Y+6, r1	; 0x06
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	50 e0       	ldi	r21, 0x00	; 0
     ce6:	60 e0       	ldi	r22, 0x00	; 0
     ce8:	70 e0       	ldi	r23, 0x00	; 0
     cea:	57 df       	rcall	.-338    	; 0xb9a <xQueueGenericSend>
     cec:	ce 01       	movw	r24, r28
     cee:	df 91       	pop	r29
     cf0:	cf 91       	pop	r28
     cf2:	08 95       	ret

00000cf4 <xQueueGenericSendFromISR>:
     cf4:	ef 92       	push	r14
     cf6:	ff 92       	push	r15
     cf8:	0f 93       	push	r16
     cfa:	1f 93       	push	r17
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	8a 01       	movw	r16, r20
     d02:	fc 01       	movw	r30, r24
     d04:	52 8d       	ldd	r21, Z+26	; 0x1a
     d06:	33 8d       	ldd	r19, Z+27	; 0x1b
     d08:	53 17       	cp	r21, r19
     d0a:	10 f0       	brcs	.+4      	; 0xd10 <xQueueGenericSendFromISR+0x1c>
     d0c:	22 30       	cpi	r18, 0x02	; 2
     d0e:	e1 f4       	brne	.+56     	; 0xd48 <xQueueGenericSendFromISR+0x54>
     d10:	42 2f       	mov	r20, r18
     d12:	78 01       	movw	r14, r16
     d14:	ec 01       	movw	r28, r24
     d16:	1e 8d       	ldd	r17, Y+30	; 0x1e
     d18:	09 de       	rcall	.-1006   	; 0x92c <prvCopyDataToQueue>
     d1a:	1f 3f       	cpi	r17, 0xFF	; 255
     d1c:	79 f4       	brne	.+30     	; 0xd3c <xQueueGenericSendFromISR+0x48>
     d1e:	89 89       	ldd	r24, Y+17	; 0x11
     d20:	88 23       	and	r24, r24
     d22:	a1 f0       	breq	.+40     	; 0xd4c <xQueueGenericSendFromISR+0x58>
     d24:	ce 01       	movw	r24, r28
     d26:	41 96       	adiw	r24, 0x11	; 17
     d28:	81 d7       	rcall	.+3842   	; 0x1c2c <xTaskRemoveFromEventList>
     d2a:	88 23       	and	r24, r24
     d2c:	89 f0       	breq	.+34     	; 0xd50 <xQueueGenericSendFromISR+0x5c>
     d2e:	e1 14       	cp	r14, r1
     d30:	f1 04       	cpc	r15, r1
     d32:	81 f0       	breq	.+32     	; 0xd54 <xQueueGenericSendFromISR+0x60>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	f7 01       	movw	r30, r14
     d38:	80 83       	st	Z, r24
     d3a:	0d c0       	rjmp	.+26     	; 0xd56 <xQueueGenericSendFromISR+0x62>
     d3c:	ff 24       	eor	r15, r15
     d3e:	f3 94       	inc	r15
     d40:	f1 0e       	add	r15, r17
     d42:	fe 8e       	std	Y+30, r15	; 0x1e
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	07 c0       	rjmp	.+14     	; 0xd56 <xQueueGenericSendFromISR+0x62>
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <xQueueGenericSendFromISR+0x62>
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	03 c0       	rjmp	.+6      	; 0xd56 <xQueueGenericSendFromISR+0x62>
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <xQueueGenericSendFromISR+0x62>
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	0f 91       	pop	r16
     d5e:	ff 90       	pop	r15
     d60:	ef 90       	pop	r14
     d62:	08 95       	ret

00000d64 <xQueueReceive>:
     d64:	9f 92       	push	r9
     d66:	af 92       	push	r10
     d68:	bf 92       	push	r11
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <xQueueReceive+0x18>
     d7c:	1f 92       	push	r1
     d7e:	1f 92       	push	r1
     d80:	cd b7       	in	r28, 0x3d	; 61
     d82:	de b7       	in	r29, 0x3e	; 62
     d84:	8c 01       	movw	r16, r24
     d86:	5b 01       	movw	r10, r22
     d88:	5d 83       	std	Y+5, r21	; 0x05
     d8a:	4c 83       	std	Y+4, r20	; 0x04
     d8c:	e1 2c       	mov	r14, r1
     d8e:	99 24       	eor	r9, r9
     d90:	93 94       	inc	r9
     d92:	6c 01       	movw	r12, r24
     d94:	81 e1       	ldi	r24, 0x11	; 17
     d96:	c8 0e       	add	r12, r24
     d98:	d1 1c       	adc	r13, r1
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	0f 92       	push	r0
     da0:	f8 01       	movw	r30, r16
     da2:	f2 8c       	ldd	r15, Z+26	; 0x1a
     da4:	ff 20       	and	r15, r15
     da6:	91 f0       	breq	.+36     	; 0xdcc <xQueueReceive+0x68>
     da8:	b5 01       	movw	r22, r10
     daa:	c8 01       	movw	r24, r16
     dac:	1e de       	rcall	.-964    	; 0x9ea <prvCopyDataFromQueue>
     dae:	fa 94       	dec	r15
     db0:	f8 01       	movw	r30, r16
     db2:	f2 8e       	std	Z+26, r15	; 0x1a
     db4:	80 85       	ldd	r24, Z+8	; 0x08
     db6:	88 23       	and	r24, r24
     db8:	29 f0       	breq	.+10     	; 0xdc4 <xQueueReceive+0x60>
     dba:	c8 01       	movw	r24, r16
     dbc:	08 96       	adiw	r24, 0x08	; 8
     dbe:	36 d7       	rcall	.+3692   	; 0x1c2c <xTaskRemoveFromEventList>
     dc0:	81 11       	cpse	r24, r1
     dc2:	e2 dc       	rcall	.-1596   	; 0x788 <vPortYield>
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	44 c0       	rjmp	.+136    	; 0xe54 <xQueueReceive+0xf0>
     dcc:	8c 81       	ldd	r24, Y+4	; 0x04
     dce:	9d 81       	ldd	r25, Y+5	; 0x05
     dd0:	89 2b       	or	r24, r25
     dd2:	21 f4       	brne	.+8      	; 0xddc <xQueueReceive+0x78>
     dd4:	0f 90       	pop	r0
     dd6:	0f be       	out	0x3f, r0	; 63
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	3c c0       	rjmp	.+120    	; 0xe54 <xQueueReceive+0xf0>
     ddc:	e1 10       	cpse	r14, r1
     dde:	04 c0       	rjmp	.+8      	; 0xde8 <xQueueReceive+0x84>
     de0:	ce 01       	movw	r24, r28
     de2:	01 96       	adiw	r24, 0x01	; 1
     de4:	6b d7       	rcall	.+3798   	; 0x1cbc <vTaskInternalSetTimeOutState>
     de6:	e9 2c       	mov	r14, r9
     de8:	0f 90       	pop	r0
     dea:	0f be       	out	0x3f, r0	; 63
     dec:	10 d5       	rcall	.+2592   	; 0x180e <vTaskSuspendAll>
     dee:	0f b6       	in	r0, 0x3f	; 63
     df0:	f8 94       	cli
     df2:	0f 92       	push	r0
     df4:	f8 01       	movw	r30, r16
     df6:	85 8d       	ldd	r24, Z+29	; 0x1d
     df8:	8f 3f       	cpi	r24, 0xFF	; 255
     dfa:	09 f4       	brne	.+2      	; 0xdfe <xQueueReceive+0x9a>
     dfc:	15 8e       	std	Z+29, r1	; 0x1d
     dfe:	f8 01       	movw	r30, r16
     e00:	86 8d       	ldd	r24, Z+30	; 0x1e
     e02:	8f 3f       	cpi	r24, 0xFF	; 255
     e04:	09 f4       	brne	.+2      	; 0xe08 <xQueueReceive+0xa4>
     e06:	16 8e       	std	Z+30, r1	; 0x1e
     e08:	0f 90       	pop	r0
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	be 01       	movw	r22, r28
     e0e:	6c 5f       	subi	r22, 0xFC	; 252
     e10:	7f 4f       	sbci	r23, 0xFF	; 255
     e12:	ce 01       	movw	r24, r28
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	5d d7       	rcall	.+3770   	; 0x1cd2 <xTaskCheckForTimeOut>
     e18:	81 11       	cpse	r24, r1
     e1a:	13 c0       	rjmp	.+38     	; 0xe42 <xQueueReceive+0xde>
     e1c:	c8 01       	movw	r24, r16
     e1e:	7b dd       	rcall	.-1290   	; 0x916 <prvIsQueueEmpty>
     e20:	88 23       	and	r24, r24
     e22:	59 f0       	breq	.+22     	; 0xe3a <xQueueReceive+0xd6>
     e24:	6c 81       	ldd	r22, Y+4	; 0x04
     e26:	7d 81       	ldd	r23, Y+5	; 0x05
     e28:	c6 01       	movw	r24, r12
     e2a:	d7 d6       	rcall	.+3502   	; 0x1bda <vTaskPlaceOnEventList>
     e2c:	c8 01       	movw	r24, r16
     e2e:	f7 dd       	rcall	.-1042   	; 0xa1e <prvUnlockQueue>
     e30:	b8 d5       	rcall	.+2928   	; 0x19a2 <xTaskResumeAll>
     e32:	81 11       	cpse	r24, r1
     e34:	b2 cf       	rjmp	.-156    	; 0xd9a <xQueueReceive+0x36>
     e36:	a8 dc       	rcall	.-1712   	; 0x788 <vPortYield>
     e38:	b0 cf       	rjmp	.-160    	; 0xd9a <xQueueReceive+0x36>
     e3a:	c8 01       	movw	r24, r16
     e3c:	f0 dd       	rcall	.-1056   	; 0xa1e <prvUnlockQueue>
     e3e:	b1 d5       	rcall	.+2914   	; 0x19a2 <xTaskResumeAll>
     e40:	ac cf       	rjmp	.-168    	; 0xd9a <xQueueReceive+0x36>
     e42:	c8 01       	movw	r24, r16
     e44:	ec dd       	rcall	.-1064   	; 0xa1e <prvUnlockQueue>
     e46:	ad d5       	rcall	.+2906   	; 0x19a2 <xTaskResumeAll>
     e48:	c8 01       	movw	r24, r16
     e4a:	65 dd       	rcall	.-1334   	; 0x916 <prvIsQueueEmpty>
     e4c:	88 23       	and	r24, r24
     e4e:	09 f4       	brne	.+2      	; 0xe52 <xQueueReceive+0xee>
     e50:	a4 cf       	rjmp	.-184    	; 0xd9a <xQueueReceive+0x36>
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	0f 90       	pop	r0
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	0f 90       	pop	r0
     e5c:	0f 90       	pop	r0
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	bf 90       	pop	r11
     e70:	af 90       	pop	r10
     e72:	9f 90       	pop	r9
     e74:	08 95       	ret

00000e76 <xQueueSemaphoreTake>:
     e76:	bf 92       	push	r11
     e78:	cf 92       	push	r12
     e7a:	df 92       	push	r13
     e7c:	ef 92       	push	r14
     e7e:	ff 92       	push	r15
     e80:	0f 93       	push	r16
     e82:	1f 93       	push	r17
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	00 d0       	rcall	.+0      	; 0xe8a <xQueueSemaphoreTake+0x14>
     e8a:	1f 92       	push	r1
     e8c:	1f 92       	push	r1
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	8c 01       	movw	r16, r24
     e94:	7d 83       	std	Y+5, r23	; 0x05
     e96:	6c 83       	std	Y+4, r22	; 0x04
     e98:	b1 2c       	mov	r11, r1
     e9a:	d1 2c       	mov	r13, r1
     e9c:	cc 24       	eor	r12, r12
     e9e:	c3 94       	inc	r12
     ea0:	7c 01       	movw	r14, r24
     ea2:	81 e1       	ldi	r24, 0x11	; 17
     ea4:	e8 0e       	add	r14, r24
     ea6:	f1 1c       	adc	r15, r1
     ea8:	0f b6       	in	r0, 0x3f	; 63
     eaa:	f8 94       	cli
     eac:	0f 92       	push	r0
     eae:	d8 01       	movw	r26, r16
     eb0:	5a 96       	adiw	r26, 0x1a	; 26
     eb2:	8c 91       	ld	r24, X
     eb4:	5a 97       	sbiw	r26, 0x1a	; 26
     eb6:	88 23       	and	r24, r24
     eb8:	d9 f0       	breq	.+54     	; 0xef0 <xQueueSemaphoreTake+0x7a>
     eba:	81 50       	subi	r24, 0x01	; 1
     ebc:	5a 96       	adiw	r26, 0x1a	; 26
     ebe:	8c 93       	st	X, r24
     ec0:	5a 97       	sbiw	r26, 0x1a	; 26
     ec2:	8d 91       	ld	r24, X+
     ec4:	9c 91       	ld	r25, X
     ec6:	89 2b       	or	r24, r25
     ec8:	29 f4       	brne	.+10     	; 0xed4 <xQueueSemaphoreTake+0x5e>
     eca:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <pvTaskIncrementMutexHeldCount>
     ece:	f8 01       	movw	r30, r16
     ed0:	95 83       	std	Z+5, r25	; 0x05
     ed2:	84 83       	std	Z+4, r24	; 0x04
     ed4:	d8 01       	movw	r26, r16
     ed6:	18 96       	adiw	r26, 0x08	; 8
     ed8:	8c 91       	ld	r24, X
     eda:	88 23       	and	r24, r24
     edc:	29 f0       	breq	.+10     	; 0xee8 <xQueueSemaphoreTake+0x72>
     ede:	c8 01       	movw	r24, r16
     ee0:	08 96       	adiw	r24, 0x08	; 8
     ee2:	a4 d6       	rcall	.+3400   	; 0x1c2c <xTaskRemoveFromEventList>
     ee4:	81 11       	cpse	r24, r1
     ee6:	50 dc       	rcall	.-1888   	; 0x788 <vPortYield>
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	70 c0       	rjmp	.+224    	; 0xfd0 <xQueueSemaphoreTake+0x15a>
     ef0:	8c 81       	ldd	r24, Y+4	; 0x04
     ef2:	9d 81       	ldd	r25, Y+5	; 0x05
     ef4:	89 2b       	or	r24, r25
     ef6:	21 f4       	brne	.+8      	; 0xf00 <xQueueSemaphoreTake+0x8a>
     ef8:	0f 90       	pop	r0
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	68 c0       	rjmp	.+208    	; 0xfd0 <xQueueSemaphoreTake+0x15a>
     f00:	d1 10       	cpse	r13, r1
     f02:	04 c0       	rjmp	.+8      	; 0xf0c <xQueueSemaphoreTake+0x96>
     f04:	ce 01       	movw	r24, r28
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	d9 d6       	rcall	.+3506   	; 0x1cbc <vTaskInternalSetTimeOutState>
     f0a:	dc 2c       	mov	r13, r12
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	7e d4       	rcall	.+2300   	; 0x180e <vTaskSuspendAll>
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	0f 92       	push	r0
     f18:	f8 01       	movw	r30, r16
     f1a:	85 8d       	ldd	r24, Z+29	; 0x1d
     f1c:	8f 3f       	cpi	r24, 0xFF	; 255
     f1e:	09 f4       	brne	.+2      	; 0xf22 <xQueueSemaphoreTake+0xac>
     f20:	15 8e       	std	Z+29, r1	; 0x1d
     f22:	d8 01       	movw	r26, r16
     f24:	5e 96       	adiw	r26, 0x1e	; 30
     f26:	8c 91       	ld	r24, X
     f28:	5e 97       	sbiw	r26, 0x1e	; 30
     f2a:	8f 3f       	cpi	r24, 0xFF	; 255
     f2c:	11 f4       	brne	.+4      	; 0xf32 <xQueueSemaphoreTake+0xbc>
     f2e:	5e 96       	adiw	r26, 0x1e	; 30
     f30:	1c 92       	st	X, r1
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	be 01       	movw	r22, r28
     f38:	6c 5f       	subi	r22, 0xFC	; 252
     f3a:	7f 4f       	sbci	r23, 0xFF	; 255
     f3c:	ce 01       	movw	r24, r28
     f3e:	01 96       	adiw	r24, 0x01	; 1
     f40:	c8 d6       	rcall	.+3472   	; 0x1cd2 <xTaskCheckForTimeOut>
     f42:	81 11       	cpse	r24, r1
     f44:	21 c0       	rjmp	.+66     	; 0xf88 <xQueueSemaphoreTake+0x112>
     f46:	c8 01       	movw	r24, r16
     f48:	e6 dc       	rcall	.-1588   	; 0x916 <prvIsQueueEmpty>
     f4a:	88 23       	and	r24, r24
     f4c:	c9 f0       	breq	.+50     	; 0xf80 <xQueueSemaphoreTake+0x10a>
     f4e:	f8 01       	movw	r30, r16
     f50:	80 81       	ld	r24, Z
     f52:	91 81       	ldd	r25, Z+1	; 0x01
     f54:	89 2b       	or	r24, r25
     f56:	49 f4       	brne	.+18     	; 0xf6a <xQueueSemaphoreTake+0xf4>
     f58:	0f b6       	in	r0, 0x3f	; 63
     f5a:	f8 94       	cli
     f5c:	0f 92       	push	r0
     f5e:	84 81       	ldd	r24, Z+4	; 0x04
     f60:	95 81       	ldd	r25, Z+5	; 0x05
     f62:	03 d7       	rcall	.+3590   	; 0x1d6a <xTaskPriorityInherit>
     f64:	b8 2e       	mov	r11, r24
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	6c 81       	ldd	r22, Y+4	; 0x04
     f6c:	7d 81       	ldd	r23, Y+5	; 0x05
     f6e:	c7 01       	movw	r24, r14
     f70:	34 d6       	rcall	.+3176   	; 0x1bda <vTaskPlaceOnEventList>
     f72:	c8 01       	movw	r24, r16
     f74:	54 dd       	rcall	.-1368   	; 0xa1e <prvUnlockQueue>
     f76:	15 d5       	rcall	.+2602   	; 0x19a2 <xTaskResumeAll>
     f78:	81 11       	cpse	r24, r1
     f7a:	96 cf       	rjmp	.-212    	; 0xea8 <xQueueSemaphoreTake+0x32>
     f7c:	05 dc       	rcall	.-2038   	; 0x788 <vPortYield>
     f7e:	94 cf       	rjmp	.-216    	; 0xea8 <xQueueSemaphoreTake+0x32>
     f80:	c8 01       	movw	r24, r16
     f82:	4d dd       	rcall	.-1382   	; 0xa1e <prvUnlockQueue>
     f84:	0e d5       	rcall	.+2588   	; 0x19a2 <xTaskResumeAll>
     f86:	90 cf       	rjmp	.-224    	; 0xea8 <xQueueSemaphoreTake+0x32>
     f88:	c8 01       	movw	r24, r16
     f8a:	49 dd       	rcall	.-1390   	; 0xa1e <prvUnlockQueue>
     f8c:	0a d5       	rcall	.+2580   	; 0x19a2 <xTaskResumeAll>
     f8e:	c8 01       	movw	r24, r16
     f90:	c2 dc       	rcall	.-1660   	; 0x916 <prvIsQueueEmpty>
     f92:	88 23       	and	r24, r24
     f94:	09 f4       	brne	.+2      	; 0xf98 <xQueueSemaphoreTake+0x122>
     f96:	88 cf       	rjmp	.-240    	; 0xea8 <xQueueSemaphoreTake+0x32>
     f98:	bb 20       	and	r11, r11
     f9a:	c9 f0       	breq	.+50     	; 0xfce <xQueueSemaphoreTake+0x158>
     f9c:	0f b6       	in	r0, 0x3f	; 63
     f9e:	f8 94       	cli
     fa0:	0f 92       	push	r0
     fa2:	f8 01       	movw	r30, r16
     fa4:	81 89       	ldd	r24, Z+17	; 0x11
     fa6:	88 23       	and	r24, r24
     fa8:	39 f0       	breq	.+14     	; 0xfb8 <xQueueSemaphoreTake+0x142>
     faa:	06 88       	ldd	r0, Z+22	; 0x16
     fac:	f7 89       	ldd	r31, Z+23	; 0x17
     fae:	e0 2d       	mov	r30, r0
     fb0:	80 81       	ld	r24, Z
     fb2:	64 e0       	ldi	r22, 0x04	; 4
     fb4:	68 1b       	sub	r22, r24
     fb6:	01 c0       	rjmp	.+2      	; 0xfba <xQueueSemaphoreTake+0x144>
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	d8 01       	movw	r26, r16
     fbc:	14 96       	adiw	r26, 0x04	; 4
     fbe:	8d 91       	ld	r24, X+
     fc0:	9c 91       	ld	r25, X
     fc2:	15 97       	sbiw	r26, 0x05	; 5
     fc4:	84 d7       	rcall	.+3848   	; 0x1ece <vTaskPriorityDisinheritAfterTimeout>
     fc6:	0f 90       	pop	r0
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	80 e0       	ldi	r24, 0x00	; 0
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <xQueueSemaphoreTake+0x15a>
     fce:	80 e0       	ldi	r24, 0x00	; 0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	1f 91       	pop	r17
     fe0:	0f 91       	pop	r16
     fe2:	ff 90       	pop	r15
     fe4:	ef 90       	pop	r14
     fe6:	df 90       	pop	r13
     fe8:	cf 90       	pop	r12
     fea:	bf 90       	pop	r11
     fec:	08 95       	ret

00000fee <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	0f 92       	push	r0
     ffa:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ffc:	8f 3f       	cpi	r24, 0xFF	; 255
     ffe:	09 f4       	brne	.+2      	; 0x1002 <vQueueWaitForMessageRestricted+0x14>
    1000:	1d 8e       	std	Y+29, r1	; 0x1d
    1002:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1004:	8f 3f       	cpi	r24, 0xFF	; 255
    1006:	09 f4       	brne	.+2      	; 0x100a <vQueueWaitForMessageRestricted+0x1c>
    1008:	1e 8e       	std	Y+30, r1	; 0x1e
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    100e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1010:	81 11       	cpse	r24, r1
    1012:	03 c0       	rjmp	.+6      	; 0x101a <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1014:	ce 01       	movw	r24, r28
    1016:	41 96       	adiw	r24, 0x11	; 17
    1018:	f1 d5       	rcall	.+3042   	; 0x1bfc <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    101a:	ce 01       	movw	r24, r28
    101c:	00 dd       	rcall	.-1536   	; 0xa1e <prvUnlockQueue>
    }
    101e:	df 91       	pop	r29
    1020:	cf 91       	pop	r28
    1022:	08 95       	ret

00001024 <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    1024:	fc 01       	movw	r30, r24
    1026:	44 81       	ldd	r20, Z+4	; 0x04
    1028:	55 81       	ldd	r21, Z+5	; 0x05
    102a:	22 81       	ldd	r18, Z+2	; 0x02
    102c:	33 81       	ldd	r19, Z+3	; 0x03
    102e:	24 0f       	add	r18, r20
    1030:	35 1f       	adc	r19, r21
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	b9 01       	movw	r22, r18
    1038:	68 1b       	sub	r22, r24
    103a:	79 0b       	sbc	r23, r25
    103c:	cb 01       	movw	r24, r22
    103e:	64 17       	cp	r22, r20
    1040:	75 07       	cpc	r23, r21
    1042:	10 f0       	brcs	.+4      	; 0x1048 <prvBytesInBuffer+0x24>
    1044:	84 1b       	sub	r24, r20
    1046:	95 0b       	sbc	r25, r21
    1048:	08 95       	ret

0000104a <prvWriteBytesToBuffer>:
    104a:	af 92       	push	r10
    104c:	bf 92       	push	r11
    104e:	cf 92       	push	r12
    1050:	df 92       	push	r13
    1052:	ef 92       	push	r14
    1054:	ff 92       	push	r15
    1056:	0f 93       	push	r16
    1058:	1f 93       	push	r17
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	6c 01       	movw	r12, r24
    1060:	5b 01       	movw	r10, r22
    1062:	7a 01       	movw	r14, r20
    1064:	fc 01       	movw	r30, r24
    1066:	c2 81       	ldd	r28, Z+2	; 0x02
    1068:	d3 81       	ldd	r29, Z+3	; 0x03
    106a:	04 81       	ldd	r16, Z+4	; 0x04
    106c:	15 81       	ldd	r17, Z+5	; 0x05
    106e:	0c 1b       	sub	r16, r28
    1070:	1d 0b       	sbc	r17, r29
    1072:	40 17       	cp	r20, r16
    1074:	51 07       	cpc	r21, r17
    1076:	08 f4       	brcc	.+2      	; 0x107a <prvWriteBytesToBuffer+0x30>
    1078:	8a 01       	movw	r16, r20
    107a:	f6 01       	movw	r30, r12
    107c:	84 85       	ldd	r24, Z+12	; 0x0c
    107e:	95 85       	ldd	r25, Z+13	; 0x0d
    1080:	a8 01       	movw	r20, r16
    1082:	b5 01       	movw	r22, r10
    1084:	8c 0f       	add	r24, r28
    1086:	9d 1f       	adc	r25, r29
    1088:	0e 94 40 26 	call	0x4c80	; 0x4c80 <memcpy>
    108c:	0e 15       	cp	r16, r14
    108e:	1f 05       	cpc	r17, r15
    1090:	58 f4       	brcc	.+22     	; 0x10a8 <prvWriteBytesToBuffer+0x5e>
    1092:	a7 01       	movw	r20, r14
    1094:	40 1b       	sub	r20, r16
    1096:	51 0b       	sbc	r21, r17
    1098:	b5 01       	movw	r22, r10
    109a:	60 0f       	add	r22, r16
    109c:	71 1f       	adc	r23, r17
    109e:	f6 01       	movw	r30, r12
    10a0:	84 85       	ldd	r24, Z+12	; 0x0c
    10a2:	95 85       	ldd	r25, Z+13	; 0x0d
    10a4:	0e 94 40 26 	call	0x4c80	; 0x4c80 <memcpy>
    10a8:	ce 01       	movw	r24, r28
    10aa:	8e 0d       	add	r24, r14
    10ac:	9f 1d       	adc	r25, r15
    10ae:	f6 01       	movw	r30, r12
    10b0:	24 81       	ldd	r18, Z+4	; 0x04
    10b2:	35 81       	ldd	r19, Z+5	; 0x05
    10b4:	82 17       	cp	r24, r18
    10b6:	93 07       	cpc	r25, r19
    10b8:	10 f0       	brcs	.+4      	; 0x10be <prvWriteBytesToBuffer+0x74>
    10ba:	82 1b       	sub	r24, r18
    10bc:	93 0b       	sbc	r25, r19
    10be:	f6 01       	movw	r30, r12
    10c0:	93 83       	std	Z+3, r25	; 0x03
    10c2:	82 83       	std	Z+2, r24	; 0x02
    10c4:	c7 01       	movw	r24, r14
    10c6:	df 91       	pop	r29
    10c8:	cf 91       	pop	r28
    10ca:	1f 91       	pop	r17
    10cc:	0f 91       	pop	r16
    10ce:	ff 90       	pop	r15
    10d0:	ef 90       	pop	r14
    10d2:	df 90       	pop	r13
    10d4:	cf 90       	pop	r12
    10d6:	bf 90       	pop	r11
    10d8:	af 90       	pop	r10
    10da:	08 95       	ret

000010dc <prvWriteMessageToBuffer>:
    10dc:	cf 92       	push	r12
    10de:	df 92       	push	r13
    10e0:	ef 92       	push	r14
    10e2:	ff 92       	push	r15
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	1f 92       	push	r1
    10ee:	1f 92       	push	r1
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	5a 83       	std	Y+2, r21	; 0x02
    10f6:	49 83       	std	Y+1, r20	; 0x01
    10f8:	21 15       	cp	r18, r1
    10fa:	31 05       	cpc	r19, r1
    10fc:	c9 f0       	breq	.+50     	; 0x1130 <prvWriteMessageToBuffer+0x54>
    10fe:	6b 01       	movw	r12, r22
    1100:	7c 01       	movw	r14, r24
    1102:	fc 01       	movw	r30, r24
    1104:	86 85       	ldd	r24, Z+14	; 0x0e
    1106:	80 fd       	sbrc	r24, 0
    1108:	08 c0       	rjmp	.+16     	; 0x111a <prvWriteMessageToBuffer+0x3e>
    110a:	ca 01       	movw	r24, r20
    110c:	24 17       	cp	r18, r20
    110e:	35 07       	cpc	r19, r21
    1110:	08 f4       	brcc	.+2      	; 0x1114 <prvWriteMessageToBuffer+0x38>
    1112:	c9 01       	movw	r24, r18
    1114:	9a 83       	std	Y+2, r25	; 0x02
    1116:	89 83       	std	Y+1, r24	; 0x01
    1118:	11 c0       	rjmp	.+34     	; 0x113c <prvWriteMessageToBuffer+0x60>
    111a:	20 17       	cp	r18, r16
    111c:	31 07       	cpc	r19, r17
    111e:	58 f0       	brcs	.+22     	; 0x1136 <prvWriteMessageToBuffer+0x5a>
    1120:	42 e0       	ldi	r20, 0x02	; 2
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	be 01       	movw	r22, r28
    1126:	6f 5f       	subi	r22, 0xFF	; 255
    1128:	7f 4f       	sbci	r23, 0xFF	; 255
    112a:	c7 01       	movw	r24, r14
    112c:	8e df       	rcall	.-228    	; 0x104a <prvWriteBytesToBuffer>
    112e:	06 c0       	rjmp	.+12     	; 0x113c <prvWriteMessageToBuffer+0x60>
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	08 c0       	rjmp	.+16     	; 0x1146 <prvWriteMessageToBuffer+0x6a>
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	05 c0       	rjmp	.+10     	; 0x1146 <prvWriteMessageToBuffer+0x6a>
    113c:	49 81       	ldd	r20, Y+1	; 0x01
    113e:	5a 81       	ldd	r21, Y+2	; 0x02
    1140:	b6 01       	movw	r22, r12
    1142:	c7 01       	movw	r24, r14
    1144:	82 df       	rcall	.-252    	; 0x104a <prvWriteBytesToBuffer>
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	1f 91       	pop	r17
    1150:	0f 91       	pop	r16
    1152:	ff 90       	pop	r15
    1154:	ef 90       	pop	r14
    1156:	df 90       	pop	r13
    1158:	cf 90       	pop	r12
    115a:	08 95       	ret

0000115c <prvReadBytesFromBuffer>:
    115c:	af 92       	push	r10
    115e:	bf 92       	push	r11
    1160:	cf 92       	push	r12
    1162:	df 92       	push	r13
    1164:	ef 92       	push	r14
    1166:	ff 92       	push	r15
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	7c 01       	movw	r14, r24
    1172:	5b 01       	movw	r10, r22
    1174:	e9 01       	movw	r28, r18
    1176:	42 17       	cp	r20, r18
    1178:	53 07       	cpc	r21, r19
    117a:	08 f4       	brcc	.+2      	; 0x117e <prvReadBytesFromBuffer+0x22>
    117c:	ea 01       	movw	r28, r20
    117e:	20 97       	sbiw	r28, 0x00	; 0
    1180:	79 f1       	breq	.+94     	; 0x11e0 <prvReadBytesFromBuffer+0x84>
    1182:	f7 01       	movw	r30, r14
    1184:	00 81       	ld	r16, Z
    1186:	11 81       	ldd	r17, Z+1	; 0x01
    1188:	c4 80       	ldd	r12, Z+4	; 0x04
    118a:	d5 80       	ldd	r13, Z+5	; 0x05
    118c:	c0 1a       	sub	r12, r16
    118e:	d1 0a       	sbc	r13, r17
    1190:	cc 15       	cp	r28, r12
    1192:	dd 05       	cpc	r29, r13
    1194:	08 f4       	brcc	.+2      	; 0x1198 <prvReadBytesFromBuffer+0x3c>
    1196:	6e 01       	movw	r12, r28
    1198:	f7 01       	movw	r30, r14
    119a:	64 85       	ldd	r22, Z+12	; 0x0c
    119c:	75 85       	ldd	r23, Z+13	; 0x0d
    119e:	60 0f       	add	r22, r16
    11a0:	71 1f       	adc	r23, r17
    11a2:	a6 01       	movw	r20, r12
    11a4:	c5 01       	movw	r24, r10
    11a6:	0e 94 40 26 	call	0x4c80	; 0x4c80 <memcpy>
    11aa:	cc 16       	cp	r12, r28
    11ac:	dd 06       	cpc	r13, r29
    11ae:	58 f4       	brcc	.+22     	; 0x11c6 <prvReadBytesFromBuffer+0x6a>
    11b0:	ae 01       	movw	r20, r28
    11b2:	4c 19       	sub	r20, r12
    11b4:	5d 09       	sbc	r21, r13
    11b6:	f7 01       	movw	r30, r14
    11b8:	64 85       	ldd	r22, Z+12	; 0x0c
    11ba:	75 85       	ldd	r23, Z+13	; 0x0d
    11bc:	c5 01       	movw	r24, r10
    11be:	8c 0d       	add	r24, r12
    11c0:	9d 1d       	adc	r25, r13
    11c2:	0e 94 40 26 	call	0x4c80	; 0x4c80 <memcpy>
    11c6:	0c 0f       	add	r16, r28
    11c8:	1d 1f       	adc	r17, r29
    11ca:	f7 01       	movw	r30, r14
    11cc:	84 81       	ldd	r24, Z+4	; 0x04
    11ce:	95 81       	ldd	r25, Z+5	; 0x05
    11d0:	08 17       	cp	r16, r24
    11d2:	19 07       	cpc	r17, r25
    11d4:	10 f0       	brcs	.+4      	; 0x11da <prvReadBytesFromBuffer+0x7e>
    11d6:	08 1b       	sub	r16, r24
    11d8:	19 0b       	sbc	r17, r25
    11da:	f7 01       	movw	r30, r14
    11dc:	11 83       	std	Z+1, r17	; 0x01
    11de:	00 83       	st	Z, r16
    11e0:	ce 01       	movw	r24, r28
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	ff 90       	pop	r15
    11ec:	ef 90       	pop	r14
    11ee:	df 90       	pop	r13
    11f0:	cf 90       	pop	r12
    11f2:	bf 90       	pop	r11
    11f4:	af 90       	pop	r10
    11f6:	08 95       	ret

000011f8 <xStreamBufferGenericCreate>:
    11f8:	ef 92       	push	r14
    11fa:	ff 92       	push	r15
    11fc:	1f 93       	push	r17
    11fe:	cf 93       	push	r28
    1200:	df 93       	push	r29
    1202:	eb 01       	movw	r28, r22
    1204:	11 e0       	ldi	r17, 0x01	; 1
    1206:	41 30       	cpi	r20, 0x01	; 1
    1208:	09 f0       	breq	.+2      	; 0x120c <xStreamBufferGenericCreate+0x14>
    120a:	10 e0       	ldi	r17, 0x00	; 0
    120c:	20 97       	sbiw	r28, 0x00	; 0
    120e:	11 f4       	brne	.+4      	; 0x1214 <xStreamBufferGenericCreate+0x1c>
    1210:	c1 e0       	ldi	r28, 0x01	; 1
    1212:	d0 e0       	ldi	r29, 0x00	; 0
    1214:	7c 01       	movw	r14, r24
    1216:	2f ef       	ldi	r18, 0xFF	; 255
    1218:	e2 1a       	sub	r14, r18
    121a:	f2 0a       	sbc	r15, r18
    121c:	41 96       	adiw	r24, 0x11	; 17
    121e:	59 d9       	rcall	.-3406   	; 0x4d2 <pvPortMalloc>
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	81 f0       	breq	.+32     	; 0x1244 <xStreamBufferGenericCreate+0x4c>
    1224:	20 e1       	ldi	r18, 0x10	; 16
    1226:	fc 01       	movw	r30, r24
    1228:	11 92       	st	Z+, r1
    122a:	2a 95       	dec	r18
    122c:	e9 f7       	brne	.-6      	; 0x1228 <xStreamBufferGenericCreate+0x30>
    122e:	9c 01       	movw	r18, r24
    1230:	20 5f       	subi	r18, 0xF0	; 240
    1232:	3f 4f       	sbci	r19, 0xFF	; 255
    1234:	fc 01       	movw	r30, r24
    1236:	35 87       	std	Z+13, r19	; 0x0d
    1238:	24 87       	std	Z+12, r18	; 0x0c
    123a:	f5 82       	std	Z+5, r15	; 0x05
    123c:	e4 82       	std	Z+4, r14	; 0x04
    123e:	d7 83       	std	Z+7, r29	; 0x07
    1240:	c6 83       	std	Z+6, r28	; 0x06
    1242:	16 87       	std	Z+14, r17	; 0x0e
    1244:	df 91       	pop	r29
    1246:	cf 91       	pop	r28
    1248:	1f 91       	pop	r17
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	08 95       	ret

00001250 <xStreamBufferReset>:
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	fc 01       	movw	r30, r24
    1256:	27 85       	ldd	r18, Z+15	; 0x0f
    1258:	0f b6       	in	r0, 0x3f	; 63
    125a:	f8 94       	cli
    125c:	0f 92       	push	r0
    125e:	80 85       	ldd	r24, Z+8	; 0x08
    1260:	91 85       	ldd	r25, Z+9	; 0x09
    1262:	89 2b       	or	r24, r25
    1264:	d1 f4       	brne	.+52     	; 0x129a <xStreamBufferReset+0x4a>
    1266:	82 85       	ldd	r24, Z+10	; 0x0a
    1268:	93 85       	ldd	r25, Z+11	; 0x0b
    126a:	89 2b       	or	r24, r25
    126c:	c1 f4       	brne	.+48     	; 0x129e <xStreamBufferReset+0x4e>
    126e:	86 85       	ldd	r24, Z+14	; 0x0e
    1270:	46 81       	ldd	r20, Z+6	; 0x06
    1272:	57 81       	ldd	r21, Z+7	; 0x07
    1274:	64 81       	ldd	r22, Z+4	; 0x04
    1276:	75 81       	ldd	r23, Z+5	; 0x05
    1278:	a4 85       	ldd	r26, Z+12	; 0x0c
    127a:	b5 85       	ldd	r27, Z+13	; 0x0d
    127c:	90 e1       	ldi	r25, 0x10	; 16
    127e:	ef 01       	movw	r28, r30
    1280:	19 92       	st	Y+, r1
    1282:	9a 95       	dec	r25
    1284:	e9 f7       	brne	.-6      	; 0x1280 <xStreamBufferReset+0x30>
    1286:	b5 87       	std	Z+13, r27	; 0x0d
    1288:	a4 87       	std	Z+12, r26	; 0x0c
    128a:	75 83       	std	Z+5, r23	; 0x05
    128c:	64 83       	std	Z+4, r22	; 0x04
    128e:	57 83       	std	Z+7, r21	; 0x07
    1290:	46 83       	std	Z+6, r20	; 0x06
    1292:	86 87       	std	Z+14, r24	; 0x0e
    1294:	27 87       	std	Z+15, r18	; 0x0f
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <xStreamBufferReset+0x50>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <xStreamBufferReset+0x50>
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	0f 90       	pop	r0
    12a2:	0f be       	out	0x3f, r0	; 63
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	08 95       	ret

000012aa <xStreamBufferSpacesAvailable>:
    12aa:	fc 01       	movw	r30, r24
    12ac:	24 81       	ldd	r18, Z+4	; 0x04
    12ae:	35 81       	ldd	r19, Z+5	; 0x05
    12b0:	80 81       	ld	r24, Z
    12b2:	91 81       	ldd	r25, Z+1	; 0x01
    12b4:	42 81       	ldd	r20, Z+2	; 0x02
    12b6:	53 81       	ldd	r21, Z+3	; 0x03
    12b8:	82 0f       	add	r24, r18
    12ba:	93 1f       	adc	r25, r19
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	84 1b       	sub	r24, r20
    12c0:	95 0b       	sbc	r25, r21
    12c2:	82 17       	cp	r24, r18
    12c4:	93 07       	cpc	r25, r19
    12c6:	10 f0       	brcs	.+4      	; 0x12cc <xStreamBufferSpacesAvailable+0x22>
    12c8:	82 1b       	sub	r24, r18
    12ca:	93 0b       	sbc	r25, r19
    12cc:	08 95       	ret

000012ce <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    12ce:	af 92       	push	r10
    12d0:	bf 92       	push	r11
    12d2:	cf 92       	push	r12
    12d4:	df 92       	push	r13
    12d6:	ef 92       	push	r14
    12d8:	ff 92       	push	r15
    12da:	0f 93       	push	r16
    12dc:	1f 93       	push	r17
    12de:	cf 93       	push	r28
    12e0:	df 93       	push	r29
    12e2:	ec 01       	movw	r28, r24
    12e4:	5b 01       	movw	r10, r22
    12e6:	6a 01       	movw	r12, r20
    12e8:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    12ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    12ec:	80 ff       	sbrs	r24, 0
    12ee:	04 c0       	rjmp	.+8      	; 0x12f8 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    12f0:	8a 01       	movw	r16, r20
    12f2:	0e 5f       	subi	r16, 0xFE	; 254
    12f4:	1f 4f       	sbci	r17, 0xFF	; 255
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    12f8:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    12fa:	ce 01       	movw	r24, r28
    12fc:	d6 df       	rcall	.-84     	; 0x12aa <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    12fe:	9c 01       	movw	r18, r24
    1300:	a6 01       	movw	r20, r12
    1302:	b5 01       	movw	r22, r10
    1304:	ce 01       	movw	r24, r28
    1306:	ea de       	rcall	.-556    	; 0x10dc <prvWriteMessageToBuffer>
    1308:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    130a:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    130c:	b1 f0       	breq	.+44     	; 0x133a <xStreamBufferSendFromISR+0x6c>
    130e:	ce 01       	movw	r24, r28
    1310:	89 de       	rcall	.-750    	; 0x1024 <prvBytesInBuffer>
    1312:	2e 81       	ldd	r18, Y+6	; 0x06
    1314:	3f 81       	ldd	r19, Y+7	; 0x07
    1316:	82 17       	cp	r24, r18
    1318:	93 07       	cpc	r25, r19
    131a:	78 f0       	brcs	.+30     	; 0x133a <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    131c:	88 85       	ldd	r24, Y+8	; 0x08
    131e:	99 85       	ldd	r25, Y+9	; 0x09
    1320:	89 2b       	or	r24, r25
    1322:	59 f0       	breq	.+22     	; 0x133a <xStreamBufferSendFromISR+0x6c>
    1324:	88 85       	ldd	r24, Y+8	; 0x08
    1326:	99 85       	ldd	r25, Y+9	; 0x09
    1328:	00 e0       	ldi	r16, 0x00	; 0
    132a:	10 e0       	ldi	r17, 0x00	; 0
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	40 e0       	ldi	r20, 0x00	; 0
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	ba 01       	movw	r22, r20
    1334:	2f d7       	rcall	.+3678   	; 0x2194 <xTaskGenericNotifyFromISR>
    1336:	19 86       	std	Y+9, r1	; 0x09
    1338:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    133a:	c6 01       	movw	r24, r12
    133c:	df 91       	pop	r29
    133e:	cf 91       	pop	r28
    1340:	1f 91       	pop	r17
    1342:	0f 91       	pop	r16
    1344:	ff 90       	pop	r15
    1346:	ef 90       	pop	r14
    1348:	df 90       	pop	r13
    134a:	cf 90       	pop	r12
    134c:	bf 90       	pop	r11
    134e:	af 90       	pop	r10
    1350:	08 95       	ret

00001352 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1352:	6f 92       	push	r6
    1354:	7f 92       	push	r7
    1356:	8f 92       	push	r8
    1358:	9f 92       	push	r9
    135a:	af 92       	push	r10
    135c:	bf 92       	push	r11
    135e:	cf 92       	push	r12
    1360:	df 92       	push	r13
    1362:	ef 92       	push	r14
    1364:	ff 92       	push	r15
    1366:	0f 93       	push	r16
    1368:	1f 93       	push	r17
    136a:	cf 93       	push	r28
    136c:	df 93       	push	r29
    136e:	1f 92       	push	r1
    1370:	1f 92       	push	r1
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
    1376:	6c 01       	movw	r12, r24
    1378:	3b 01       	movw	r6, r22
    137a:	4a 01       	movw	r8, r20
    137c:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    137e:	fc 01       	movw	r30, r24
    1380:	86 85       	ldd	r24, Z+14	; 0x0e
    1382:	80 fd       	sbrc	r24, 0
    1384:	03 c0       	rjmp	.+6      	; 0x138c <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1386:	a1 2c       	mov	r10, r1
    1388:	b1 2c       	mov	r11, r1
    138a:	04 c0       	rjmp	.+8      	; 0x1394 <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    138c:	68 94       	set
    138e:	aa 24       	eor	r10, r10
    1390:	a1 f8       	bld	r10, 1
    1392:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1394:	e1 14       	cp	r14, r1
    1396:	f1 04       	cpc	r15, r1
    1398:	29 f1       	breq	.+74     	; 0x13e4 <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13a0:	c6 01       	movw	r24, r12
    13a2:	40 de       	rcall	.-896    	; 0x1024 <prvBytesInBuffer>
    13a4:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    13a6:	a8 16       	cp	r10, r24
    13a8:	b9 06       	cpc	r11, r25
    13aa:	38 f0       	brcs	.+14     	; 0x13ba <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    13b0:	81 d7       	rcall	.+3842   	; 0x22b4 <xTaskNotifyStateClear>
    13b2:	c8 d4       	rcall	.+2448   	; 0x1d44 <xTaskGetCurrentTaskHandle>
    13b4:	f6 01       	movw	r30, r12
    13b6:	91 87       	std	Z+9, r25	; 0x09
    13b8:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    13ba:	0f 90       	pop	r0
    13bc:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    13be:	a0 16       	cp	r10, r16
    13c0:	b1 06       	cpc	r11, r17
    13c2:	b0 f0       	brcs	.+44     	; 0x13f0 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    13c4:	00 e0       	ldi	r16, 0x00	; 0
    13c6:	10 e0       	ldi	r17, 0x00	; 0
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	a9 01       	movw	r20, r18
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	cb 01       	movw	r24, r22
    13d4:	de d5       	rcall	.+3004   	; 0x1f92 <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    13d6:	f6 01       	movw	r30, r12
    13d8:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13da:	10 86       	std	Z+8, r1	; 0x08
    13dc:	c6 01       	movw	r24, r12
    13de:	22 de       	rcall	.-956    	; 0x1024 <prvBytesInBuffer>
    13e0:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13e2:	03 c0       	rjmp	.+6      	; 0x13ea <xStreamBufferReceive+0x98>
    13e4:	c6 01       	movw	r24, r12
    13e6:	1e de       	rcall	.-964    	; 0x1024 <prvBytesInBuffer>
    13e8:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    13ea:	a0 16       	cp	r10, r16
    13ec:	b1 06       	cpc	r11, r17
    13ee:	b8 f5       	brcc	.+110    	; 0x145e <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    13f0:	a1 14       	cp	r10, r1
    13f2:	b1 04       	cpc	r11, r1
    13f4:	c1 f0       	breq	.+48     	; 0x1426 <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    13f6:	f6 01       	movw	r30, r12
    13f8:	e0 80       	ld	r14, Z
    13fa:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    13fc:	98 01       	movw	r18, r16
    13fe:	a5 01       	movw	r20, r10
    1400:	be 01       	movw	r22, r28
    1402:	6f 5f       	subi	r22, 0xFF	; 255
    1404:	7f 4f       	sbci	r23, 0xFF	; 255
    1406:	c6 01       	movw	r24, r12
    1408:	a9 de       	rcall	.-686    	; 0x115c <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    140e:	0a 19       	sub	r16, r10
    1410:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1412:	88 16       	cp	r8, r24
    1414:	99 06       	cpc	r9, r25
    1416:	30 f4       	brcc	.+12     	; 0x1424 <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1418:	f6 01       	movw	r30, r12
    141a:	f1 82       	std	Z+1, r15	; 0x01
    141c:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    141e:	81 2c       	mov	r8, r1
    1420:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1422:	01 c0       	rjmp	.+2      	; 0x1426 <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    1424:	4c 01       	movw	r8, r24
    1426:	98 01       	movw	r18, r16
    1428:	a4 01       	movw	r20, r8
    142a:	b3 01       	movw	r22, r6
    142c:	c6 01       	movw	r24, r12
    142e:	96 de       	rcall	.-724    	; 0x115c <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1430:	7c 01       	movw	r14, r24
    1432:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    1434:	b1 f0       	breq	.+44     	; 0x1462 <xStreamBufferReceive+0x110>
    1436:	eb d1       	rcall	.+982    	; 0x180e <vTaskSuspendAll>
    1438:	f6 01       	movw	r30, r12
    143a:	82 85       	ldd	r24, Z+10	; 0x0a
    143c:	93 85       	ldd	r25, Z+11	; 0x0b
    143e:	89 2b       	or	r24, r25
    1440:	61 f0       	breq	.+24     	; 0x145a <xStreamBufferReceive+0x108>
    1442:	82 85       	ldd	r24, Z+10	; 0x0a
    1444:	93 85       	ldd	r25, Z+11	; 0x0b
    1446:	00 e0       	ldi	r16, 0x00	; 0
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	ba 01       	movw	r22, r20
    1452:	22 d6       	rcall	.+3140   	; 0x2098 <xTaskGenericNotify>
    1454:	f6 01       	movw	r30, r12
    1456:	13 86       	std	Z+11, r1	; 0x0b
    1458:	12 86       	std	Z+10, r1	; 0x0a
    145a:	a3 d2       	rcall	.+1350   	; 0x19a2 <xTaskResumeAll>
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    145e:	e1 2c       	mov	r14, r1
    1460:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1462:	c7 01       	movw	r24, r14
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	ff 90       	pop	r15
    1472:	ef 90       	pop	r14
    1474:	df 90       	pop	r13
    1476:	cf 90       	pop	r12
    1478:	bf 90       	pop	r11
    147a:	af 90       	pop	r10
    147c:	9f 90       	pop	r9
    147e:	8f 90       	pop	r8
    1480:	7f 90       	pop	r7
    1482:	6f 90       	pop	r6
    1484:	08 95       	ret

00001486 <prvResetNextTaskUnblockTime>:
    1486:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxDelayedTaskList>
    148a:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxDelayedTaskList+0x1>
    148e:	80 81       	ld	r24, Z
    1490:	81 11       	cpse	r24, r1
    1492:	07 c0       	rjmp	.+14     	; 0x14a2 <prvResetNextTaskUnblockTime+0x1c>
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	9f ef       	ldi	r25, 0xFF	; 255
    1498:	90 93 8e 08 	sts	0x088E, r25	; 0x80088e <xNextTaskUnblockTime+0x1>
    149c:	80 93 8d 08 	sts	0x088D, r24	; 0x80088d <xNextTaskUnblockTime>
    14a0:	08 95       	ret
    14a2:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxDelayedTaskList>
    14a6:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxDelayedTaskList+0x1>
    14aa:	05 80       	ldd	r0, Z+5	; 0x05
    14ac:	f6 81       	ldd	r31, Z+6	; 0x06
    14ae:	e0 2d       	mov	r30, r0
    14b0:	06 80       	ldd	r0, Z+6	; 0x06
    14b2:	f7 81       	ldd	r31, Z+7	; 0x07
    14b4:	e0 2d       	mov	r30, r0
    14b6:	82 81       	ldd	r24, Z+2	; 0x02
    14b8:	93 81       	ldd	r25, Z+3	; 0x03
    14ba:	90 93 8e 08 	sts	0x088E, r25	; 0x80088e <xNextTaskUnblockTime+0x1>
    14be:	80 93 8d 08 	sts	0x088D, r24	; 0x80088d <xNextTaskUnblockTime>
    14c2:	08 95       	ret

000014c4 <prvAddCurrentTaskToDelayedList>:
    14c4:	ff 92       	push	r15
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	ec 01       	movw	r28, r24
    14d0:	f6 2e       	mov	r15, r22
    14d2:	00 91 95 08 	lds	r16, 0x0895	; 0x800895 <xTickCount>
    14d6:	10 91 96 08 	lds	r17, 0x0896	; 0x800896 <xTickCount+0x1>
    14da:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <pxCurrentTCB>
    14de:	90 91 ef 08 	lds	r25, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    14e2:	02 96       	adiw	r24, 0x02	; 2
    14e4:	7c d8       	rcall	.-3848   	; 0x5de <uxListRemove>
    14e6:	cf 3f       	cpi	r28, 0xFF	; 255
    14e8:	8f ef       	ldi	r24, 0xFF	; 255
    14ea:	d8 07       	cpc	r29, r24
    14ec:	61 f4       	brne	.+24     	; 0x1506 <prvAddCurrentTaskToDelayedList+0x42>
    14ee:	ff 20       	and	r15, r15
    14f0:	51 f0       	breq	.+20     	; 0x1506 <prvAddCurrentTaskToDelayedList+0x42>
    14f2:	60 91 ee 08 	lds	r22, 0x08EE	; 0x8008ee <pxCurrentTCB>
    14f6:	70 91 ef 08 	lds	r23, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    14fa:	6e 5f       	subi	r22, 0xFE	; 254
    14fc:	7f 4f       	sbci	r23, 0xFF	; 255
    14fe:	88 e9       	ldi	r24, 0x98	; 152
    1500:	98 e0       	ldi	r25, 0x08	; 8
    1502:	1b d8       	rcall	.-4042   	; 0x53a <vListInsertEnd>
    1504:	2d c0       	rjmp	.+90     	; 0x1560 <prvAddCurrentTaskToDelayedList+0x9c>
    1506:	c0 0f       	add	r28, r16
    1508:	d1 1f       	adc	r29, r17
    150a:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    150e:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1512:	d3 83       	std	Z+3, r29	; 0x03
    1514:	c2 83       	std	Z+2, r28	; 0x02
    1516:	c0 17       	cp	r28, r16
    1518:	d1 07       	cpc	r29, r17
    151a:	60 f4       	brcc	.+24     	; 0x1534 <prvAddCurrentTaskToDelayedList+0x70>
    151c:	60 91 ee 08 	lds	r22, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1520:	70 91 ef 08 	lds	r23, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1524:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <pxOverflowDelayedTaskList>
    1528:	90 91 b5 08 	lds	r25, 0x08B5	; 0x8008b5 <pxOverflowDelayedTaskList+0x1>
    152c:	6e 5f       	subi	r22, 0xFE	; 254
    152e:	7f 4f       	sbci	r23, 0xFF	; 255
    1530:	25 d8       	rcall	.-4022   	; 0x57c <vListInsert>
    1532:	16 c0       	rjmp	.+44     	; 0x1560 <prvAddCurrentTaskToDelayedList+0x9c>
    1534:	60 91 ee 08 	lds	r22, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1538:	70 91 ef 08 	lds	r23, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    153c:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <pxDelayedTaskList>
    1540:	90 91 b7 08 	lds	r25, 0x08B7	; 0x8008b7 <pxDelayedTaskList+0x1>
    1544:	6e 5f       	subi	r22, 0xFE	; 254
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	19 d8       	rcall	.-4046   	; 0x57c <vListInsert>
    154a:	80 91 8d 08 	lds	r24, 0x088D	; 0x80088d <xNextTaskUnblockTime>
    154e:	90 91 8e 08 	lds	r25, 0x088E	; 0x80088e <xNextTaskUnblockTime+0x1>
    1552:	c8 17       	cp	r28, r24
    1554:	d9 07       	cpc	r29, r25
    1556:	20 f4       	brcc	.+8      	; 0x1560 <prvAddCurrentTaskToDelayedList+0x9c>
    1558:	d0 93 8e 08 	sts	0x088E, r29	; 0x80088e <xNextTaskUnblockTime+0x1>
    155c:	c0 93 8d 08 	sts	0x088D, r28	; 0x80088d <xNextTaskUnblockTime>
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	1f 91       	pop	r17
    1566:	0f 91       	pop	r16
    1568:	ff 90       	pop	r15
    156a:	08 95       	ret

0000156c <xTaskCreate>:
    156c:	4f 92       	push	r4
    156e:	5f 92       	push	r5
    1570:	6f 92       	push	r6
    1572:	7f 92       	push	r7
    1574:	8f 92       	push	r8
    1576:	9f 92       	push	r9
    1578:	af 92       	push	r10
    157a:	bf 92       	push	r11
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	4c 01       	movw	r8, r24
    158c:	6b 01       	movw	r12, r22
    158e:	5a 01       	movw	r10, r20
    1590:	29 01       	movw	r4, r18
    1592:	ca 01       	movw	r24, r20
    1594:	0e 94 69 02 	call	0x4d2	; 0x4d2 <pvPortMalloc>
    1598:	3c 01       	movw	r6, r24
    159a:	89 2b       	or	r24, r25
    159c:	09 f4       	brne	.+2      	; 0x15a0 <xTaskCreate+0x34>
    159e:	f3 c0       	rjmp	.+486    	; 0x1786 <xTaskCreate+0x21a>
    15a0:	8c e2       	ldi	r24, 0x2C	; 44
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 69 02 	call	0x4d2	; 0x4d2 <pvPortMalloc>
    15a8:	ec 01       	movw	r28, r24
    15aa:	89 2b       	or	r24, r25
    15ac:	99 f0       	breq	.+38     	; 0x15d4 <xTaskCreate+0x68>
    15ae:	78 8e       	std	Y+24, r7	; 0x18
    15b0:	6f 8a       	std	Y+23, r6	; 0x17
    15b2:	a5 01       	movw	r20, r10
    15b4:	65 ea       	ldi	r22, 0xA5	; 165
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	c3 01       	movw	r24, r6
    15ba:	0e 94 49 26 	call	0x4c92	; 0x4c92 <memset>
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	a8 1a       	sub	r10, r24
    15c2:	b1 08       	sbc	r11, r1
    15c4:	8f 89       	ldd	r24, Y+23	; 0x17
    15c6:	98 8d       	ldd	r25, Y+24	; 0x18
    15c8:	a8 0e       	add	r10, r24
    15ca:	b9 1e       	adc	r11, r25
    15cc:	c1 14       	cp	r12, r1
    15ce:	d1 04       	cpc	r13, r1
    15d0:	29 f4       	brne	.+10     	; 0x15dc <xTaskCreate+0x70>
    15d2:	20 c0       	rjmp	.+64     	; 0x1614 <xTaskCreate+0xa8>
    15d4:	c3 01       	movw	r24, r6
    15d6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <vPortFree>
    15da:	d5 c0       	rjmp	.+426    	; 0x1786 <xTaskCreate+0x21a>
    15dc:	d6 01       	movw	r26, r12
    15de:	8c 91       	ld	r24, X
    15e0:	89 8f       	std	Y+25, r24	; 0x19
    15e2:	8c 91       	ld	r24, X
    15e4:	88 23       	and	r24, r24
    15e6:	a1 f0       	breq	.+40     	; 0x1610 <xTaskCreate+0xa4>
    15e8:	ae 01       	movw	r20, r28
    15ea:	46 5e       	subi	r20, 0xE6	; 230
    15ec:	5f 4f       	sbci	r21, 0xFF	; 255
    15ee:	f6 01       	movw	r30, r12
    15f0:	31 96       	adiw	r30, 0x01	; 1
    15f2:	b8 e0       	ldi	r27, 0x08	; 8
    15f4:	cb 0e       	add	r12, r27
    15f6:	d1 1c       	adc	r13, r1
    15f8:	cf 01       	movw	r24, r30
    15fa:	21 91       	ld	r18, Z+
    15fc:	da 01       	movw	r26, r20
    15fe:	2d 93       	st	X+, r18
    1600:	ad 01       	movw	r20, r26
    1602:	dc 01       	movw	r26, r24
    1604:	8c 91       	ld	r24, X
    1606:	88 23       	and	r24, r24
    1608:	19 f0       	breq	.+6      	; 0x1610 <xTaskCreate+0xa4>
    160a:	ec 15       	cp	r30, r12
    160c:	fd 05       	cpc	r31, r13
    160e:	a1 f7       	brne	.-24     	; 0x15f8 <xTaskCreate+0x8c>
    1610:	18 a2       	std	Y+32, r1	; 0x20
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <xTaskCreate+0xaa>
    1614:	19 8e       	std	Y+25, r1	; 0x19
    1616:	04 30       	cpi	r16, 0x04	; 4
    1618:	08 f0       	brcs	.+2      	; 0x161c <xTaskCreate+0xb0>
    161a:	03 e0       	ldi	r16, 0x03	; 3
    161c:	0e 8b       	std	Y+22, r16	; 0x16
    161e:	0b a3       	std	Y+35, r16	; 0x23
    1620:	1c a2       	std	Y+36, r1	; 0x24
    1622:	6e 01       	movw	r12, r28
    1624:	b2 e0       	ldi	r27, 0x02	; 2
    1626:	cb 0e       	add	r12, r27
    1628:	d1 1c       	adc	r13, r1
    162a:	c6 01       	movw	r24, r12
    162c:	0e 94 99 02 	call	0x532	; 0x532 <vListInitialiseItem>
    1630:	ce 01       	movw	r24, r28
    1632:	0c 96       	adiw	r24, 0x0c	; 12
    1634:	0e 94 99 02 	call	0x532	; 0x532 <vListInitialiseItem>
    1638:	d9 87       	std	Y+9, r29	; 0x09
    163a:	c8 87       	std	Y+8, r28	; 0x08
    163c:	84 e0       	ldi	r24, 0x04	; 4
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	80 1b       	sub	r24, r16
    1642:	91 09       	sbc	r25, r1
    1644:	9d 87       	std	Y+13, r25	; 0x0d
    1646:	8c 87       	std	Y+12, r24	; 0x0c
    1648:	db 8b       	std	Y+19, r29	; 0x13
    164a:	ca 8b       	std	Y+18, r28	; 0x12
    164c:	1e a2       	std	Y+38, r1	; 0x26
    164e:	1d a2       	std	Y+37, r1	; 0x25
    1650:	1f a2       	std	Y+39, r1	; 0x27
    1652:	18 a6       	std	Y+40, r1	; 0x28
    1654:	19 a6       	std	Y+41, r1	; 0x29
    1656:	1a a6       	std	Y+42, r1	; 0x2a
    1658:	1b a6       	std	Y+43, r1	; 0x2b
    165a:	a2 01       	movw	r20, r4
    165c:	b4 01       	movw	r22, r8
    165e:	c5 01       	movw	r24, r10
    1660:	0e 94 16 03 	call	0x62c	; 0x62c <pxPortInitialiseStack>
    1664:	99 83       	std	Y+1, r25	; 0x01
    1666:	88 83       	st	Y, r24
    1668:	e1 14       	cp	r14, r1
    166a:	f1 04       	cpc	r15, r1
    166c:	19 f0       	breq	.+6      	; 0x1674 <xTaskCreate+0x108>
    166e:	f7 01       	movw	r30, r14
    1670:	d1 83       	std	Z+1, r29	; 0x01
    1672:	c0 83       	st	Z, r28
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	0f 92       	push	r0
    167a:	80 91 97 08 	lds	r24, 0x0897	; 0x800897 <uxCurrentNumberOfTasks>
    167e:	8f 5f       	subi	r24, 0xFF	; 255
    1680:	80 93 97 08 	sts	0x0897, r24	; 0x800897 <uxCurrentNumberOfTasks>
    1684:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1688:	90 91 ef 08 	lds	r25, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    168c:	89 2b       	or	r24, r25
    168e:	d1 f5       	brne	.+116    	; 0x1704 <xTaskCreate+0x198>
    1690:	d0 93 ef 08 	sts	0x08EF, r29	; 0x8008ef <pxCurrentTCB+0x1>
    1694:	c0 93 ee 08 	sts	0x08EE, r28	; 0x8008ee <pxCurrentTCB>
    1698:	80 91 97 08 	lds	r24, 0x0897	; 0x800897 <uxCurrentNumberOfTasks>
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	09 f0       	breq	.+2      	; 0x16a2 <xTaskCreate+0x136>
    16a0:	41 c0       	rjmp	.+130    	; 0x1724 <xTaskCreate+0x1b8>
    16a2:	8a ec       	ldi	r24, 0xCA	; 202
    16a4:	98 e0       	ldi	r25, 0x08	; 8
    16a6:	0e 94 8b 02 	call	0x516	; 0x516 <vListInitialise>
    16aa:	83 ed       	ldi	r24, 0xD3	; 211
    16ac:	98 e0       	ldi	r25, 0x08	; 8
    16ae:	0e 94 8b 02 	call	0x516	; 0x516 <vListInitialise>
    16b2:	8c ed       	ldi	r24, 0xDC	; 220
    16b4:	98 e0       	ldi	r25, 0x08	; 8
    16b6:	0e 94 8b 02 	call	0x516	; 0x516 <vListInitialise>
    16ba:	85 ee       	ldi	r24, 0xE5	; 229
    16bc:	98 e0       	ldi	r25, 0x08	; 8
    16be:	0e 94 8b 02 	call	0x516	; 0x516 <vListInitialise>
    16c2:	81 ec       	ldi	r24, 0xC1	; 193
    16c4:	98 e0       	ldi	r25, 0x08	; 8
    16c6:	0e 94 8b 02 	call	0x516	; 0x516 <vListInitialise>
    16ca:	88 eb       	ldi	r24, 0xB8	; 184
    16cc:	98 e0       	ldi	r25, 0x08	; 8
    16ce:	0e 94 8b 02 	call	0x516	; 0x516 <vListInitialise>
    16d2:	8b ea       	ldi	r24, 0xAB	; 171
    16d4:	98 e0       	ldi	r25, 0x08	; 8
    16d6:	0e 94 8b 02 	call	0x516	; 0x516 <vListInitialise>
    16da:	82 ea       	ldi	r24, 0xA2	; 162
    16dc:	98 e0       	ldi	r25, 0x08	; 8
    16de:	0e 94 8b 02 	call	0x516	; 0x516 <vListInitialise>
    16e2:	88 e9       	ldi	r24, 0x98	; 152
    16e4:	98 e0       	ldi	r25, 0x08	; 8
    16e6:	0e 94 8b 02 	call	0x516	; 0x516 <vListInitialise>
    16ea:	81 ec       	ldi	r24, 0xC1	; 193
    16ec:	98 e0       	ldi	r25, 0x08	; 8
    16ee:	90 93 b7 08 	sts	0x08B7, r25	; 0x8008b7 <pxDelayedTaskList+0x1>
    16f2:	80 93 b6 08 	sts	0x08B6, r24	; 0x8008b6 <pxDelayedTaskList>
    16f6:	88 eb       	ldi	r24, 0xB8	; 184
    16f8:	98 e0       	ldi	r25, 0x08	; 8
    16fa:	90 93 b5 08 	sts	0x08B5, r25	; 0x8008b5 <pxOverflowDelayedTaskList+0x1>
    16fe:	80 93 b4 08 	sts	0x08B4, r24	; 0x8008b4 <pxOverflowDelayedTaskList>
    1702:	10 c0       	rjmp	.+32     	; 0x1724 <xTaskCreate+0x1b8>
    1704:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <xSchedulerRunning>
    1708:	81 11       	cpse	r24, r1
    170a:	0c c0       	rjmp	.+24     	; 0x1724 <xTaskCreate+0x1b8>
    170c:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1710:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1714:	96 89       	ldd	r25, Z+22	; 0x16
    1716:	8e 89       	ldd	r24, Y+22	; 0x16
    1718:	89 17       	cp	r24, r25
    171a:	20 f0       	brcs	.+8      	; 0x1724 <xTaskCreate+0x1b8>
    171c:	d0 93 ef 08 	sts	0x08EF, r29	; 0x8008ef <pxCurrentTCB+0x1>
    1720:	c0 93 ee 08 	sts	0x08EE, r28	; 0x8008ee <pxCurrentTCB>
    1724:	80 91 8f 08 	lds	r24, 0x088F	; 0x80088f <uxTaskNumber>
    1728:	8f 5f       	subi	r24, 0xFF	; 255
    172a:	80 93 8f 08 	sts	0x088F, r24	; 0x80088f <uxTaskNumber>
    172e:	89 a3       	std	Y+33, r24	; 0x21
    1730:	8e 89       	ldd	r24, Y+22	; 0x16
    1732:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <uxTopReadyPriority>
    1736:	98 17       	cp	r25, r24
    1738:	10 f4       	brcc	.+4      	; 0x173e <xTaskCreate+0x1d2>
    173a:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <uxTopReadyPriority>
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	9c 01       	movw	r18, r24
    1742:	22 0f       	add	r18, r18
    1744:	33 1f       	adc	r19, r19
    1746:	22 0f       	add	r18, r18
    1748:	33 1f       	adc	r19, r19
    174a:	22 0f       	add	r18, r18
    174c:	33 1f       	adc	r19, r19
    174e:	82 0f       	add	r24, r18
    1750:	93 1f       	adc	r25, r19
    1752:	b6 01       	movw	r22, r12
    1754:	86 53       	subi	r24, 0x36	; 54
    1756:	97 4f       	sbci	r25, 0xF7	; 247
    1758:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInsertEnd>
    175c:	0f 90       	pop	r0
    175e:	0f be       	out	0x3f, r0	; 63
    1760:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <xSchedulerRunning>
    1764:	88 23       	and	r24, r24
    1766:	59 f0       	breq	.+22     	; 0x177e <xTaskCreate+0x212>
    1768:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    176c:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1770:	96 89       	ldd	r25, Z+22	; 0x16
    1772:	8e 89       	ldd	r24, Y+22	; 0x16
    1774:	98 17       	cp	r25, r24
    1776:	28 f4       	brcc	.+10     	; 0x1782 <xTaskCreate+0x216>
    1778:	07 d8       	rcall	.-4082   	; 0x788 <vPortYield>
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	05 c0       	rjmp	.+10     	; 0x1788 <xTaskCreate+0x21c>
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	03 c0       	rjmp	.+6      	; 0x1788 <xTaskCreate+0x21c>
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <xTaskCreate+0x21c>
    1786:	8f ef       	ldi	r24, 0xFF	; 255
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	0f 91       	pop	r16
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	df 90       	pop	r13
    1794:	cf 90       	pop	r12
    1796:	bf 90       	pop	r11
    1798:	af 90       	pop	r10
    179a:	9f 90       	pop	r9
    179c:	8f 90       	pop	r8
    179e:	7f 90       	pop	r7
    17a0:	6f 90       	pop	r6
    17a2:	5f 90       	pop	r5
    17a4:	4f 90       	pop	r4
    17a6:	08 95       	ret

000017a8 <vTaskStartScheduler>:
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	0f 93       	push	r16
    17ae:	0f 2e       	mov	r0, r31
    17b0:	fb e8       	ldi	r31, 0x8B	; 139
    17b2:	ef 2e       	mov	r14, r31
    17b4:	f8 e0       	ldi	r31, 0x08	; 8
    17b6:	ff 2e       	mov	r15, r31
    17b8:	f0 2d       	mov	r31, r0
    17ba:	00 e0       	ldi	r16, 0x00	; 0
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 ec       	ldi	r20, 0xC0	; 192
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	6f e7       	ldi	r22, 0x7F	; 127
    17c6:	72 e0       	ldi	r23, 0x02	; 2
    17c8:	8d ec       	ldi	r24, 0xCD	; 205
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	cf de       	rcall	.-610    	; 0x156c <xTaskCreate>
    17ce:	81 30       	cpi	r24, 0x01	; 1
    17d0:	d1 f4       	brne	.+52     	; 0x1806 <vTaskStartScheduler+0x5e>
    17d2:	dc d5       	rcall	.+3000   	; 0x238c <xTimerCreateTimerTask>
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	b9 f4       	brne	.+46     	; 0x1806 <vTaskStartScheduler+0x5e>
    17d8:	f8 94       	cli
    17da:	8f ef       	ldi	r24, 0xFF	; 255
    17dc:	9f ef       	ldi	r25, 0xFF	; 255
    17de:	90 93 8e 08 	sts	0x088E, r25	; 0x80088e <xNextTaskUnblockTime+0x1>
    17e2:	80 93 8d 08 	sts	0x088D, r24	; 0x80088d <xNextTaskUnblockTime>
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <xSchedulerRunning>
    17ec:	10 92 96 08 	sts	0x0896, r1	; 0x800896 <xTickCount+0x1>
    17f0:	10 92 95 08 	sts	0x0895, r1	; 0x800895 <xTickCount>
    17f4:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    17f8:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    17fc:	85 a1       	ldd	r24, Z+37	; 0x25
    17fe:	0e 94 59 02 	call	0x4b2	; 0x4b2 <task_switch_in>
    1802:	0e 94 88 03 	call	0x710	; 0x710 <xPortStartScheduler>
    1806:	0f 91       	pop	r16
    1808:	ff 90       	pop	r15
    180a:	ef 90       	pop	r14
    180c:	08 95       	ret

0000180e <vTaskSuspendAll>:
    180e:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <__data_end>
    1812:	8f 5f       	subi	r24, 0xFF	; 255
    1814:	80 93 8a 08 	sts	0x088A, r24	; 0x80088a <__data_end>
    1818:	08 95       	ret

0000181a <xTaskGetTickCount>:
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	0f 92       	push	r0
    1820:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <xTickCount>
    1824:	90 91 96 08 	lds	r25, 0x0896	; 0x800896 <xTickCount+0x1>
    1828:	0f 90       	pop	r0
    182a:	0f be       	out	0x3f, r0	; 63
    182c:	08 95       	ret

0000182e <xTaskIncrementTick>:
    182e:	cf 92       	push	r12
    1830:	df 92       	push	r13
    1832:	ef 92       	push	r14
    1834:	ff 92       	push	r15
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <__data_end>
    1842:	81 11       	cpse	r24, r1
    1844:	98 c0       	rjmp	.+304    	; 0x1976 <xTaskIncrementTick+0x148>
    1846:	e0 90 95 08 	lds	r14, 0x0895	; 0x800895 <xTickCount>
    184a:	f0 90 96 08 	lds	r15, 0x0896	; 0x800896 <xTickCount+0x1>
    184e:	8f ef       	ldi	r24, 0xFF	; 255
    1850:	e8 1a       	sub	r14, r24
    1852:	f8 0a       	sbc	r15, r24
    1854:	f0 92 96 08 	sts	0x0896, r15	; 0x800896 <xTickCount+0x1>
    1858:	e0 92 95 08 	sts	0x0895, r14	; 0x800895 <xTickCount>
    185c:	e1 14       	cp	r14, r1
    185e:	f1 04       	cpc	r15, r1
    1860:	b1 f4       	brne	.+44     	; 0x188e <xTaskIncrementTick+0x60>
    1862:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <pxDelayedTaskList>
    1866:	90 91 b7 08 	lds	r25, 0x08B7	; 0x8008b7 <pxDelayedTaskList+0x1>
    186a:	20 91 b4 08 	lds	r18, 0x08B4	; 0x8008b4 <pxOverflowDelayedTaskList>
    186e:	30 91 b5 08 	lds	r19, 0x08B5	; 0x8008b5 <pxOverflowDelayedTaskList+0x1>
    1872:	30 93 b7 08 	sts	0x08B7, r19	; 0x8008b7 <pxDelayedTaskList+0x1>
    1876:	20 93 b6 08 	sts	0x08B6, r18	; 0x8008b6 <pxDelayedTaskList>
    187a:	90 93 b5 08 	sts	0x08B5, r25	; 0x8008b5 <pxOverflowDelayedTaskList+0x1>
    187e:	80 93 b4 08 	sts	0x08B4, r24	; 0x8008b4 <pxOverflowDelayedTaskList>
    1882:	80 91 90 08 	lds	r24, 0x0890	; 0x800890 <xNumOfOverflows>
    1886:	8f 5f       	subi	r24, 0xFF	; 255
    1888:	80 93 90 08 	sts	0x0890, r24	; 0x800890 <xNumOfOverflows>
    188c:	fc dd       	rcall	.-1032   	; 0x1486 <prvResetNextTaskUnblockTime>
    188e:	80 91 8d 08 	lds	r24, 0x088D	; 0x80088d <xNextTaskUnblockTime>
    1892:	90 91 8e 08 	lds	r25, 0x088E	; 0x80088e <xNextTaskUnblockTime+0x1>
    1896:	e8 16       	cp	r14, r24
    1898:	f9 06       	cpc	r15, r25
    189a:	10 f4       	brcc	.+4      	; 0x18a0 <xTaskIncrementTick+0x72>
    189c:	d1 2c       	mov	r13, r1
    189e:	53 c0       	rjmp	.+166    	; 0x1946 <xTaskIncrementTick+0x118>
    18a0:	d1 2c       	mov	r13, r1
    18a2:	cc 24       	eor	r12, r12
    18a4:	c3 94       	inc	r12
    18a6:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxDelayedTaskList>
    18aa:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxDelayedTaskList+0x1>
    18ae:	80 81       	ld	r24, Z
    18b0:	81 11       	cpse	r24, r1
    18b2:	07 c0       	rjmp	.+14     	; 0x18c2 <xTaskIncrementTick+0x94>
    18b4:	8f ef       	ldi	r24, 0xFF	; 255
    18b6:	9f ef       	ldi	r25, 0xFF	; 255
    18b8:	90 93 8e 08 	sts	0x088E, r25	; 0x80088e <xNextTaskUnblockTime+0x1>
    18bc:	80 93 8d 08 	sts	0x088D, r24	; 0x80088d <xNextTaskUnblockTime>
    18c0:	42 c0       	rjmp	.+132    	; 0x1946 <xTaskIncrementTick+0x118>
    18c2:	e0 91 b6 08 	lds	r30, 0x08B6	; 0x8008b6 <pxDelayedTaskList>
    18c6:	f0 91 b7 08 	lds	r31, 0x08B7	; 0x8008b7 <pxDelayedTaskList+0x1>
    18ca:	05 80       	ldd	r0, Z+5	; 0x05
    18cc:	f6 81       	ldd	r31, Z+6	; 0x06
    18ce:	e0 2d       	mov	r30, r0
    18d0:	c6 81       	ldd	r28, Z+6	; 0x06
    18d2:	d7 81       	ldd	r29, Z+7	; 0x07
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	9b 81       	ldd	r25, Y+3	; 0x03
    18d8:	e8 16       	cp	r14, r24
    18da:	f9 06       	cpc	r15, r25
    18dc:	28 f4       	brcc	.+10     	; 0x18e8 <xTaskIncrementTick+0xba>
    18de:	90 93 8e 08 	sts	0x088E, r25	; 0x80088e <xNextTaskUnblockTime+0x1>
    18e2:	80 93 8d 08 	sts	0x088D, r24	; 0x80088d <xNextTaskUnblockTime>
    18e6:	2f c0       	rjmp	.+94     	; 0x1946 <xTaskIncrementTick+0x118>
    18e8:	8e 01       	movw	r16, r28
    18ea:	0e 5f       	subi	r16, 0xFE	; 254
    18ec:	1f 4f       	sbci	r17, 0xFF	; 255
    18ee:	c8 01       	movw	r24, r16
    18f0:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    18f4:	8c 89       	ldd	r24, Y+20	; 0x14
    18f6:	9d 89       	ldd	r25, Y+21	; 0x15
    18f8:	89 2b       	or	r24, r25
    18fa:	21 f0       	breq	.+8      	; 0x1904 <xTaskIncrementTick+0xd6>
    18fc:	ce 01       	movw	r24, r28
    18fe:	0c 96       	adiw	r24, 0x0c	; 12
    1900:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    1904:	8e 89       	ldd	r24, Y+22	; 0x16
    1906:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <uxTopReadyPriority>
    190a:	98 17       	cp	r25, r24
    190c:	10 f4       	brcc	.+4      	; 0x1912 <xTaskIncrementTick+0xe4>
    190e:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <uxTopReadyPriority>
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	9c 01       	movw	r18, r24
    1916:	22 0f       	add	r18, r18
    1918:	33 1f       	adc	r19, r19
    191a:	22 0f       	add	r18, r18
    191c:	33 1f       	adc	r19, r19
    191e:	22 0f       	add	r18, r18
    1920:	33 1f       	adc	r19, r19
    1922:	82 0f       	add	r24, r18
    1924:	93 1f       	adc	r25, r19
    1926:	b8 01       	movw	r22, r16
    1928:	86 53       	subi	r24, 0x36	; 54
    192a:	97 4f       	sbci	r25, 0xF7	; 247
    192c:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInsertEnd>
    1930:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1934:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1938:	9e 89       	ldd	r25, Y+22	; 0x16
    193a:	86 89       	ldd	r24, Z+22	; 0x16
    193c:	98 17       	cp	r25, r24
    193e:	08 f4       	brcc	.+2      	; 0x1942 <xTaskIncrementTick+0x114>
    1940:	b2 cf       	rjmp	.-156    	; 0x18a6 <xTaskIncrementTick+0x78>
    1942:	dc 2c       	mov	r13, r12
    1944:	b0 cf       	rjmp	.-160    	; 0x18a6 <xTaskIncrementTick+0x78>
    1946:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    194a:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    194e:	86 89       	ldd	r24, Z+22	; 0x16
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	fc 01       	movw	r30, r24
    1954:	ee 0f       	add	r30, r30
    1956:	ff 1f       	adc	r31, r31
    1958:	ee 0f       	add	r30, r30
    195a:	ff 1f       	adc	r31, r31
    195c:	ee 0f       	add	r30, r30
    195e:	ff 1f       	adc	r31, r31
    1960:	8e 0f       	add	r24, r30
    1962:	9f 1f       	adc	r25, r31
    1964:	fc 01       	movw	r30, r24
    1966:	e6 53       	subi	r30, 0x36	; 54
    1968:	f7 4f       	sbci	r31, 0xF7	; 247
    196a:	80 81       	ld	r24, Z
    196c:	82 30       	cpi	r24, 0x02	; 2
    196e:	48 f0       	brcs	.+18     	; 0x1982 <xTaskIncrementTick+0x154>
    1970:	dd 24       	eor	r13, r13
    1972:	d3 94       	inc	r13
    1974:	06 c0       	rjmp	.+12     	; 0x1982 <xTaskIncrementTick+0x154>
    1976:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <uxPendedTicks>
    197a:	8f 5f       	subi	r24, 0xFF	; 255
    197c:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <uxPendedTicks>
    1980:	d1 2c       	mov	r13, r1
    1982:	80 91 91 08 	lds	r24, 0x0891	; 0x800891 <xYieldPending>
    1986:	88 23       	and	r24, r24
    1988:	11 f0       	breq	.+4      	; 0x198e <xTaskIncrementTick+0x160>
    198a:	dd 24       	eor	r13, r13
    198c:	d3 94       	inc	r13
    198e:	8d 2d       	mov	r24, r13
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	df 90       	pop	r13
    199e:	cf 90       	pop	r12
    19a0:	08 95       	ret

000019a2 <xTaskResumeAll>:
    19a2:	df 92       	push	r13
    19a4:	ef 92       	push	r14
    19a6:	ff 92       	push	r15
    19a8:	0f 93       	push	r16
    19aa:	1f 93       	push	r17
    19ac:	cf 93       	push	r28
    19ae:	df 93       	push	r29
    19b0:	0f b6       	in	r0, 0x3f	; 63
    19b2:	f8 94       	cli
    19b4:	0f 92       	push	r0
    19b6:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <__data_end>
    19ba:	81 50       	subi	r24, 0x01	; 1
    19bc:	80 93 8a 08 	sts	0x088A, r24	; 0x80088a <__data_end>
    19c0:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <__data_end>
    19c4:	81 11       	cpse	r24, r1
    19c6:	5d c0       	rjmp	.+186    	; 0x1a82 <xTaskResumeAll+0xe0>
    19c8:	80 91 97 08 	lds	r24, 0x0897	; 0x800897 <uxCurrentNumberOfTasks>
    19cc:	81 11       	cpse	r24, r1
    19ce:	33 c0       	rjmp	.+102    	; 0x1a36 <xTaskResumeAll+0x94>
    19d0:	5b c0       	rjmp	.+182    	; 0x1a88 <xTaskResumeAll+0xe6>
    19d2:	d7 01       	movw	r26, r14
    19d4:	15 96       	adiw	r26, 0x05	; 5
    19d6:	ed 91       	ld	r30, X+
    19d8:	fc 91       	ld	r31, X
    19da:	16 97       	sbiw	r26, 0x06	; 6
    19dc:	c6 81       	ldd	r28, Z+6	; 0x06
    19de:	d7 81       	ldd	r29, Z+7	; 0x07
    19e0:	ce 01       	movw	r24, r28
    19e2:	0c 96       	adiw	r24, 0x0c	; 12
    19e4:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    19e8:	8e 01       	movw	r16, r28
    19ea:	0e 5f       	subi	r16, 0xFE	; 254
    19ec:	1f 4f       	sbci	r17, 0xFF	; 255
    19ee:	c8 01       	movw	r24, r16
    19f0:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    19f4:	8e 89       	ldd	r24, Y+22	; 0x16
    19f6:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <uxTopReadyPriority>
    19fa:	98 17       	cp	r25, r24
    19fc:	10 f4       	brcc	.+4      	; 0x1a02 <xTaskResumeAll+0x60>
    19fe:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <uxTopReadyPriority>
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	9c 01       	movw	r18, r24
    1a06:	22 0f       	add	r18, r18
    1a08:	33 1f       	adc	r19, r19
    1a0a:	22 0f       	add	r18, r18
    1a0c:	33 1f       	adc	r19, r19
    1a0e:	22 0f       	add	r18, r18
    1a10:	33 1f       	adc	r19, r19
    1a12:	82 0f       	add	r24, r18
    1a14:	93 1f       	adc	r25, r19
    1a16:	b8 01       	movw	r22, r16
    1a18:	86 53       	subi	r24, 0x36	; 54
    1a1a:	97 4f       	sbci	r25, 0xF7	; 247
    1a1c:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInsertEnd>
    1a20:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1a24:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1a28:	9e 89       	ldd	r25, Y+22	; 0x16
    1a2a:	86 89       	ldd	r24, Z+22	; 0x16
    1a2c:	98 17       	cp	r25, r24
    1a2e:	68 f0       	brcs	.+26     	; 0x1a4a <xTaskResumeAll+0xa8>
    1a30:	d0 92 91 08 	sts	0x0891, r13	; 0x800891 <xYieldPending>
    1a34:	0a c0       	rjmp	.+20     	; 0x1a4a <xTaskResumeAll+0xa8>
    1a36:	c0 e0       	ldi	r28, 0x00	; 0
    1a38:	d0 e0       	ldi	r29, 0x00	; 0
    1a3a:	0f 2e       	mov	r0, r31
    1a3c:	fb ea       	ldi	r31, 0xAB	; 171
    1a3e:	ef 2e       	mov	r14, r31
    1a40:	f8 e0       	ldi	r31, 0x08	; 8
    1a42:	ff 2e       	mov	r15, r31
    1a44:	f0 2d       	mov	r31, r0
    1a46:	dd 24       	eor	r13, r13
    1a48:	d3 94       	inc	r13
    1a4a:	f7 01       	movw	r30, r14
    1a4c:	80 81       	ld	r24, Z
    1a4e:	81 11       	cpse	r24, r1
    1a50:	c0 cf       	rjmp	.-128    	; 0x19d2 <xTaskResumeAll+0x30>
    1a52:	cd 2b       	or	r28, r29
    1a54:	09 f0       	breq	.+2      	; 0x1a58 <xTaskResumeAll+0xb6>
    1a56:	17 dd       	rcall	.-1490   	; 0x1486 <prvResetNextTaskUnblockTime>
    1a58:	c0 91 92 08 	lds	r28, 0x0892	; 0x800892 <uxPendedTicks>
    1a5c:	cc 23       	and	r28, r28
    1a5e:	49 f0       	breq	.+18     	; 0x1a72 <xTaskResumeAll+0xd0>
    1a60:	d1 e0       	ldi	r29, 0x01	; 1
    1a62:	e5 de       	rcall	.-566    	; 0x182e <xTaskIncrementTick>
    1a64:	81 11       	cpse	r24, r1
    1a66:	d0 93 91 08 	sts	0x0891, r29	; 0x800891 <xYieldPending>
    1a6a:	c1 50       	subi	r28, 0x01	; 1
    1a6c:	d1 f7       	brne	.-12     	; 0x1a62 <xTaskResumeAll+0xc0>
    1a6e:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <uxPendedTicks>
    1a72:	80 91 91 08 	lds	r24, 0x0891	; 0x800891 <xYieldPending>
    1a76:	88 23       	and	r24, r24
    1a78:	31 f0       	breq	.+12     	; 0x1a86 <xTaskResumeAll+0xe4>
    1a7a:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	03 c0       	rjmp	.+6      	; 0x1a88 <xTaskResumeAll+0xe6>
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	01 c0       	rjmp	.+2      	; 0x1a88 <xTaskResumeAll+0xe6>
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	0f 90       	pop	r0
    1a8a:	0f be       	out	0x3f, r0	; 63
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	ff 90       	pop	r15
    1a96:	ef 90       	pop	r14
    1a98:	df 90       	pop	r13
    1a9a:	08 95       	ret

00001a9c <vTaskDelay>:
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	ec 01       	movw	r28, r24
    1aa2:	89 2b       	or	r24, r25
    1aa4:	39 f0       	breq	.+14     	; 0x1ab4 <vTaskDelay+0x18>
    1aa6:	b3 de       	rcall	.-666    	; 0x180e <vTaskSuspendAll>
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	ce 01       	movw	r24, r28
    1aac:	0b dd       	rcall	.-1514   	; 0x14c4 <prvAddCurrentTaskToDelayedList>
    1aae:	79 df       	rcall	.-270    	; 0x19a2 <xTaskResumeAll>
    1ab0:	81 11       	cpse	r24, r1
    1ab2:	02 c0       	rjmp	.+4      	; 0x1ab8 <vTaskDelay+0x1c>
    1ab4:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	08 95       	ret

00001abe <vTaskSwitchContext>:
    1abe:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <__data_end>
    1ac2:	88 23       	and	r24, r24
    1ac4:	21 f0       	breq	.+8      	; 0x1ace <vTaskSwitchContext+0x10>
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <xYieldPending>
    1acc:	08 95       	ret
    1ace:	10 92 91 08 	sts	0x0891, r1	; 0x800891 <xYieldPending>
    1ad2:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1ad6:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1ada:	85 a1       	ldd	r24, Z+37	; 0x25
    1adc:	0e 94 63 02 	call	0x4c6	; 0x4c6 <task_switch_out>
    1ae0:	a0 91 ee 08 	lds	r26, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1ae4:	b0 91 ef 08 	lds	r27, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1ae8:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1aec:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1af0:	2d 91       	ld	r18, X+
    1af2:	3c 91       	ld	r19, X
    1af4:	87 89       	ldd	r24, Z+23	; 0x17
    1af6:	90 8d       	ldd	r25, Z+24	; 0x18
    1af8:	82 17       	cp	r24, r18
    1afa:	93 07       	cpc	r25, r19
    1afc:	58 f0       	brcs	.+22     	; 0x1b14 <vTaskSwitchContext+0x56>
    1afe:	60 91 ee 08 	lds	r22, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1b02:	70 91 ef 08 	lds	r23, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1b06:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1b0a:	90 91 ef 08 	lds	r25, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1b0e:	67 5e       	subi	r22, 0xE7	; 231
    1b10:	7f 4f       	sbci	r23, 0xFF	; 255
    1b12:	55 d5       	rcall	.+2730   	; 0x25be <vApplicationStackOverflowHook>
    1b14:	20 91 94 08 	lds	r18, 0x0894	; 0x800894 <uxTopReadyPriority>
    1b18:	82 2f       	mov	r24, r18
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	ee 0f       	add	r30, r30
    1b20:	ff 1f       	adc	r31, r31
    1b22:	ee 0f       	add	r30, r30
    1b24:	ff 1f       	adc	r31, r31
    1b26:	ee 0f       	add	r30, r30
    1b28:	ff 1f       	adc	r31, r31
    1b2a:	e8 0f       	add	r30, r24
    1b2c:	f9 1f       	adc	r31, r25
    1b2e:	e6 53       	subi	r30, 0x36	; 54
    1b30:	f7 4f       	sbci	r31, 0xF7	; 247
    1b32:	30 81       	ld	r19, Z
    1b34:	31 11       	cpse	r19, r1
    1b36:	11 c0       	rjmp	.+34     	; 0x1b5a <vTaskSwitchContext+0x9c>
    1b38:	21 50       	subi	r18, 0x01	; 1
    1b3a:	82 2f       	mov	r24, r18
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	fc 01       	movw	r30, r24
    1b40:	ee 0f       	add	r30, r30
    1b42:	ff 1f       	adc	r31, r31
    1b44:	ee 0f       	add	r30, r30
    1b46:	ff 1f       	adc	r31, r31
    1b48:	ee 0f       	add	r30, r30
    1b4a:	ff 1f       	adc	r31, r31
    1b4c:	e8 0f       	add	r30, r24
    1b4e:	f9 1f       	adc	r31, r25
    1b50:	e6 53       	subi	r30, 0x36	; 54
    1b52:	f7 4f       	sbci	r31, 0xF7	; 247
    1b54:	30 81       	ld	r19, Z
    1b56:	33 23       	and	r19, r19
    1b58:	79 f3       	breq	.-34     	; 0x1b38 <vTaskSwitchContext+0x7a>
    1b5a:	ac 01       	movw	r20, r24
    1b5c:	44 0f       	add	r20, r20
    1b5e:	55 1f       	adc	r21, r21
    1b60:	44 0f       	add	r20, r20
    1b62:	55 1f       	adc	r21, r21
    1b64:	44 0f       	add	r20, r20
    1b66:	55 1f       	adc	r21, r21
    1b68:	48 0f       	add	r20, r24
    1b6a:	59 1f       	adc	r21, r25
    1b6c:	da 01       	movw	r26, r20
    1b6e:	a6 53       	subi	r26, 0x36	; 54
    1b70:	b7 4f       	sbci	r27, 0xF7	; 247
    1b72:	11 96       	adiw	r26, 0x01	; 1
    1b74:	ed 91       	ld	r30, X+
    1b76:	fc 91       	ld	r31, X
    1b78:	12 97       	sbiw	r26, 0x02	; 2
    1b7a:	02 80       	ldd	r0, Z+2	; 0x02
    1b7c:	f3 81       	ldd	r31, Z+3	; 0x03
    1b7e:	e0 2d       	mov	r30, r0
    1b80:	12 96       	adiw	r26, 0x02	; 2
    1b82:	fc 93       	st	X, r31
    1b84:	ee 93       	st	-X, r30
    1b86:	11 97       	sbiw	r26, 0x01	; 1
    1b88:	43 53       	subi	r20, 0x33	; 51
    1b8a:	57 4f       	sbci	r21, 0xF7	; 247
    1b8c:	e4 17       	cp	r30, r20
    1b8e:	f5 07       	cpc	r31, r21
    1b90:	29 f4       	brne	.+10     	; 0x1b9c <vTaskSwitchContext+0xde>
    1b92:	42 81       	ldd	r20, Z+2	; 0x02
    1b94:	53 81       	ldd	r21, Z+3	; 0x03
    1b96:	fd 01       	movw	r30, r26
    1b98:	52 83       	std	Z+2, r21	; 0x02
    1b9a:	41 83       	std	Z+1, r20	; 0x01
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	ee 0f       	add	r30, r30
    1ba4:	ff 1f       	adc	r31, r31
    1ba6:	ee 0f       	add	r30, r30
    1ba8:	ff 1f       	adc	r31, r31
    1baa:	8e 0f       	add	r24, r30
    1bac:	9f 1f       	adc	r25, r31
    1bae:	fc 01       	movw	r30, r24
    1bb0:	e6 53       	subi	r30, 0x36	; 54
    1bb2:	f7 4f       	sbci	r31, 0xF7	; 247
    1bb4:	01 80       	ldd	r0, Z+1	; 0x01
    1bb6:	f2 81       	ldd	r31, Z+2	; 0x02
    1bb8:	e0 2d       	mov	r30, r0
    1bba:	86 81       	ldd	r24, Z+6	; 0x06
    1bbc:	97 81       	ldd	r25, Z+7	; 0x07
    1bbe:	90 93 ef 08 	sts	0x08EF, r25	; 0x8008ef <pxCurrentTCB+0x1>
    1bc2:	80 93 ee 08 	sts	0x08EE, r24	; 0x8008ee <pxCurrentTCB>
    1bc6:	20 93 94 08 	sts	0x0894, r18	; 0x800894 <uxTopReadyPriority>
    1bca:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1bce:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1bd2:	85 a1       	ldd	r24, Z+37	; 0x25
    1bd4:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <task_switch_in>
    1bd8:	08 95       	ret

00001bda <vTaskPlaceOnEventList>:
    1bda:	cf 93       	push	r28
    1bdc:	df 93       	push	r29
    1bde:	eb 01       	movw	r28, r22
    1be0:	60 91 ee 08 	lds	r22, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1be4:	70 91 ef 08 	lds	r23, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1be8:	64 5f       	subi	r22, 0xF4	; 244
    1bea:	7f 4f       	sbci	r23, 0xFF	; 255
    1bec:	0e 94 be 02 	call	0x57c	; 0x57c <vListInsert>
    1bf0:	61 e0       	ldi	r22, 0x01	; 1
    1bf2:	ce 01       	movw	r24, r28
    1bf4:	67 dc       	rcall	.-1842   	; 0x14c4 <prvAddCurrentTaskToDelayedList>
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	08 95       	ret

00001bfc <vTaskPlaceOnEventListRestricted>:
    1bfc:	0f 93       	push	r16
    1bfe:	1f 93       	push	r17
    1c00:	cf 93       	push	r28
    1c02:	8b 01       	movw	r16, r22
    1c04:	c4 2f       	mov	r28, r20
    1c06:	60 91 ee 08 	lds	r22, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1c0a:	70 91 ef 08 	lds	r23, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1c0e:	64 5f       	subi	r22, 0xF4	; 244
    1c10:	7f 4f       	sbci	r23, 0xFF	; 255
    1c12:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInsertEnd>
    1c16:	cc 23       	and	r28, r28
    1c18:	11 f0       	breq	.+4      	; 0x1c1e <vTaskPlaceOnEventListRestricted+0x22>
    1c1a:	0f ef       	ldi	r16, 0xFF	; 255
    1c1c:	1f ef       	ldi	r17, 0xFF	; 255
    1c1e:	6c 2f       	mov	r22, r28
    1c20:	c8 01       	movw	r24, r16
    1c22:	50 dc       	rcall	.-1888   	; 0x14c4 <prvAddCurrentTaskToDelayedList>
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	08 95       	ret

00001c2c <xTaskRemoveFromEventList>:
    1c2c:	0f 93       	push	r16
    1c2e:	1f 93       	push	r17
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
    1c34:	dc 01       	movw	r26, r24
    1c36:	15 96       	adiw	r26, 0x05	; 5
    1c38:	ed 91       	ld	r30, X+
    1c3a:	fc 91       	ld	r31, X
    1c3c:	16 97       	sbiw	r26, 0x06	; 6
    1c3e:	c6 81       	ldd	r28, Z+6	; 0x06
    1c40:	d7 81       	ldd	r29, Z+7	; 0x07
    1c42:	8e 01       	movw	r16, r28
    1c44:	04 5f       	subi	r16, 0xF4	; 244
    1c46:	1f 4f       	sbci	r17, 0xFF	; 255
    1c48:	c8 01       	movw	r24, r16
    1c4a:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    1c4e:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <__data_end>
    1c52:	81 11       	cpse	r24, r1
    1c54:	1c c0       	rjmp	.+56     	; 0x1c8e <xTaskRemoveFromEventList+0x62>
    1c56:	0a 50       	subi	r16, 0x0A	; 10
    1c58:	11 09       	sbc	r17, r1
    1c5a:	c8 01       	movw	r24, r16
    1c5c:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    1c60:	8e 89       	ldd	r24, Y+22	; 0x16
    1c62:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <uxTopReadyPriority>
    1c66:	98 17       	cp	r25, r24
    1c68:	10 f4       	brcc	.+4      	; 0x1c6e <xTaskRemoveFromEventList+0x42>
    1c6a:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <uxTopReadyPriority>
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	9c 01       	movw	r18, r24
    1c72:	22 0f       	add	r18, r18
    1c74:	33 1f       	adc	r19, r19
    1c76:	22 0f       	add	r18, r18
    1c78:	33 1f       	adc	r19, r19
    1c7a:	22 0f       	add	r18, r18
    1c7c:	33 1f       	adc	r19, r19
    1c7e:	82 0f       	add	r24, r18
    1c80:	93 1f       	adc	r25, r19
    1c82:	b8 01       	movw	r22, r16
    1c84:	86 53       	subi	r24, 0x36	; 54
    1c86:	97 4f       	sbci	r25, 0xF7	; 247
    1c88:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInsertEnd>
    1c8c:	05 c0       	rjmp	.+10     	; 0x1c98 <xTaskRemoveFromEventList+0x6c>
    1c8e:	b8 01       	movw	r22, r16
    1c90:	8b ea       	ldi	r24, 0xAB	; 171
    1c92:	98 e0       	ldi	r25, 0x08	; 8
    1c94:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInsertEnd>
    1c98:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1c9c:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1ca0:	9e 89       	ldd	r25, Y+22	; 0x16
    1ca2:	86 89       	ldd	r24, Z+22	; 0x16
    1ca4:	89 17       	cp	r24, r25
    1ca6:	20 f4       	brcc	.+8      	; 0x1cb0 <xTaskRemoveFromEventList+0x84>
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <xYieldPending>
    1cae:	01 c0       	rjmp	.+2      	; 0x1cb2 <xTaskRemoveFromEventList+0x86>
    1cb0:	80 e0       	ldi	r24, 0x00	; 0
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	1f 91       	pop	r17
    1cb8:	0f 91       	pop	r16
    1cba:	08 95       	ret

00001cbc <vTaskInternalSetTimeOutState>:
    1cbc:	20 91 90 08 	lds	r18, 0x0890	; 0x800890 <xNumOfOverflows>
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	20 83       	st	Z, r18
    1cc4:	20 91 95 08 	lds	r18, 0x0895	; 0x800895 <xTickCount>
    1cc8:	30 91 96 08 	lds	r19, 0x0896	; 0x800896 <xTickCount+0x1>
    1ccc:	32 83       	std	Z+2, r19	; 0x02
    1cce:	21 83       	std	Z+1, r18	; 0x01
    1cd0:	08 95       	ret

00001cd2 <xTaskCheckForTimeOut>:
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	f8 94       	cli
    1cda:	0f 92       	push	r0
    1cdc:	20 91 95 08 	lds	r18, 0x0895	; 0x800895 <xTickCount>
    1ce0:	30 91 96 08 	lds	r19, 0x0896	; 0x800896 <xTickCount+0x1>
    1ce4:	db 01       	movw	r26, r22
    1ce6:	4d 91       	ld	r20, X+
    1ce8:	5c 91       	ld	r21, X
    1cea:	4f 3f       	cpi	r20, 0xFF	; 255
    1cec:	bf ef       	ldi	r27, 0xFF	; 255
    1cee:	5b 07       	cpc	r21, r27
    1cf0:	e9 f0       	breq	.+58     	; 0x1d2c <xTaskCheckForTimeOut+0x5a>
    1cf2:	ec 01       	movw	r28, r24
    1cf4:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf6:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf8:	a0 91 90 08 	lds	r26, 0x0890	; 0x800890 <xNumOfOverflows>
    1cfc:	b8 81       	ld	r27, Y
    1cfe:	ba 17       	cp	r27, r26
    1d00:	19 f0       	breq	.+6      	; 0x1d08 <xTaskCheckForTimeOut+0x36>
    1d02:	2e 17       	cp	r18, r30
    1d04:	3f 07       	cpc	r19, r31
    1d06:	a0 f4       	brcc	.+40     	; 0x1d30 <xTaskCheckForTimeOut+0x5e>
    1d08:	2e 1b       	sub	r18, r30
    1d0a:	3f 0b       	sbc	r19, r31
    1d0c:	24 17       	cp	r18, r20
    1d0e:	35 07       	cpc	r19, r21
    1d10:	40 f4       	brcc	.+16     	; 0x1d22 <xTaskCheckForTimeOut+0x50>
    1d12:	fb 01       	movw	r30, r22
    1d14:	42 1b       	sub	r20, r18
    1d16:	53 0b       	sbc	r21, r19
    1d18:	51 83       	std	Z+1, r21	; 0x01
    1d1a:	40 83       	st	Z, r20
    1d1c:	cf df       	rcall	.-98     	; 0x1cbc <vTaskInternalSetTimeOutState>
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	08 c0       	rjmp	.+16     	; 0x1d32 <xTaskCheckForTimeOut+0x60>
    1d22:	fb 01       	movw	r30, r22
    1d24:	11 82       	std	Z+1, r1	; 0x01
    1d26:	10 82       	st	Z, r1
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	03 c0       	rjmp	.+6      	; 0x1d32 <xTaskCheckForTimeOut+0x60>
    1d2c:	80 e0       	ldi	r24, 0x00	; 0
    1d2e:	01 c0       	rjmp	.+2      	; 0x1d32 <xTaskCheckForTimeOut+0x60>
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	0f 90       	pop	r0
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	08 95       	ret

00001d3c <vTaskMissedYield>:
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <xYieldPending>
    1d42:	08 95       	ret

00001d44 <xTaskGetCurrentTaskHandle>:
    1d44:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1d48:	90 91 ef 08 	lds	r25, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1d4c:	08 95       	ret

00001d4e <xTaskGetSchedulerState>:
    1d4e:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <xSchedulerRunning>
    1d52:	88 23       	and	r24, r24
    1d54:	31 f0       	breq	.+12     	; 0x1d62 <xTaskGetSchedulerState+0x14>
    1d56:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <__data_end>
    1d5a:	88 23       	and	r24, r24
    1d5c:	21 f0       	breq	.+8      	; 0x1d66 <xTaskGetSchedulerState+0x18>
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	08 95       	ret
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	08 95       	ret
    1d66:	82 e0       	ldi	r24, 0x02	; 2
    1d68:	08 95       	ret

00001d6a <xTaskPriorityInherit>:
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	fc 01       	movw	r30, r24
    1d74:	89 2b       	or	r24, r25
    1d76:	09 f4       	brne	.+2      	; 0x1d7a <xTaskPriorityInherit+0x10>
    1d78:	64 c0       	rjmp	.+200    	; 0x1e42 <xTaskPriorityInherit+0xd8>
    1d7a:	26 89       	ldd	r18, Z+22	; 0x16
    1d7c:	a0 91 ee 08 	lds	r26, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1d80:	b0 91 ef 08 	lds	r27, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1d84:	56 96       	adiw	r26, 0x16	; 22
    1d86:	8c 91       	ld	r24, X
    1d88:	28 17       	cp	r18, r24
    1d8a:	08 f0       	brcs	.+2      	; 0x1d8e <xTaskPriorityInherit+0x24>
    1d8c:	4e c0       	rjmp	.+156    	; 0x1e2a <xTaskPriorityInherit+0xc0>
    1d8e:	84 85       	ldd	r24, Z+12	; 0x0c
    1d90:	95 85       	ldd	r25, Z+13	; 0x0d
    1d92:	99 23       	and	r25, r25
    1d94:	64 f0       	brlt	.+24     	; 0x1dae <xTaskPriorityInherit+0x44>
    1d96:	a0 91 ee 08 	lds	r26, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1d9a:	b0 91 ef 08 	lds	r27, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1d9e:	56 96       	adiw	r26, 0x16	; 22
    1da0:	3c 91       	ld	r19, X
    1da2:	84 e0       	ldi	r24, 0x04	; 4
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	83 1b       	sub	r24, r19
    1da8:	91 09       	sbc	r25, r1
    1daa:	95 87       	std	Z+13, r25	; 0x0d
    1dac:	84 87       	std	Z+12, r24	; 0x0c
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	c9 01       	movw	r24, r18
    1db2:	88 0f       	add	r24, r24
    1db4:	99 1f       	adc	r25, r25
    1db6:	88 0f       	add	r24, r24
    1db8:	99 1f       	adc	r25, r25
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	28 0f       	add	r18, r24
    1dc0:	39 1f       	adc	r19, r25
    1dc2:	26 53       	subi	r18, 0x36	; 54
    1dc4:	37 4f       	sbci	r19, 0xF7	; 247
    1dc6:	82 85       	ldd	r24, Z+10	; 0x0a
    1dc8:	93 85       	ldd	r25, Z+11	; 0x0b
    1dca:	82 17       	cp	r24, r18
    1dcc:	93 07       	cpc	r25, r19
    1dce:	21 f5       	brne	.+72     	; 0x1e18 <xTaskPriorityInherit+0xae>
    1dd0:	8f 01       	movw	r16, r30
    1dd2:	ef 01       	movw	r28, r30
    1dd4:	22 96       	adiw	r28, 0x02	; 2
    1dd6:	ce 01       	movw	r24, r28
    1dd8:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    1ddc:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1de0:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1de4:	86 89       	ldd	r24, Z+22	; 0x16
    1de6:	f8 01       	movw	r30, r16
    1de8:	86 8b       	std	Z+22, r24	; 0x16
    1dea:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <uxTopReadyPriority>
    1dee:	98 17       	cp	r25, r24
    1df0:	10 f4       	brcc	.+4      	; 0x1df6 <xTaskPriorityInherit+0x8c>
    1df2:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <uxTopReadyPriority>
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	9c 01       	movw	r18, r24
    1dfa:	22 0f       	add	r18, r18
    1dfc:	33 1f       	adc	r19, r19
    1dfe:	22 0f       	add	r18, r18
    1e00:	33 1f       	adc	r19, r19
    1e02:	22 0f       	add	r18, r18
    1e04:	33 1f       	adc	r19, r19
    1e06:	82 0f       	add	r24, r18
    1e08:	93 1f       	adc	r25, r19
    1e0a:	be 01       	movw	r22, r28
    1e0c:	86 53       	subi	r24, 0x36	; 54
    1e0e:	97 4f       	sbci	r25, 0xF7	; 247
    1e10:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInsertEnd>
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	16 c0       	rjmp	.+44     	; 0x1e44 <xTaskPriorityInherit+0xda>
    1e18:	a0 91 ee 08 	lds	r26, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1e1c:	b0 91 ef 08 	lds	r27, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1e20:	56 96       	adiw	r26, 0x16	; 22
    1e22:	8c 91       	ld	r24, X
    1e24:	86 8b       	std	Z+22, r24	; 0x16
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	0d c0       	rjmp	.+26     	; 0x1e44 <xTaskPriorityInherit+0xda>
    1e2a:	a0 91 ee 08 	lds	r26, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1e2e:	b0 91 ef 08 	lds	r27, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	23 a1       	ldd	r18, Z+35	; 0x23
    1e36:	56 96       	adiw	r26, 0x16	; 22
    1e38:	9c 91       	ld	r25, X
    1e3a:	29 17       	cp	r18, r25
    1e3c:	18 f0       	brcs	.+6      	; 0x1e44 <xTaskPriorityInherit+0xda>
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	01 c0       	rjmp	.+2      	; 0x1e44 <xTaskPriorityInherit+0xda>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	df 91       	pop	r29
    1e46:	cf 91       	pop	r28
    1e48:	1f 91       	pop	r17
    1e4a:	0f 91       	pop	r16
    1e4c:	08 95       	ret

00001e4e <xTaskPriorityDisinherit>:
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	cf 93       	push	r28
    1e54:	df 93       	push	r29
    1e56:	fc 01       	movw	r30, r24
    1e58:	89 2b       	or	r24, r25
    1e5a:	79 f1       	breq	.+94     	; 0x1eba <xTaskPriorityDisinherit+0x6c>
    1e5c:	84 a1       	ldd	r24, Z+36	; 0x24
    1e5e:	81 50       	subi	r24, 0x01	; 1
    1e60:	84 a3       	std	Z+36, r24	; 0x24
    1e62:	26 89       	ldd	r18, Z+22	; 0x16
    1e64:	93 a1       	ldd	r25, Z+35	; 0x23
    1e66:	29 17       	cp	r18, r25
    1e68:	51 f1       	breq	.+84     	; 0x1ebe <xTaskPriorityDisinherit+0x70>
    1e6a:	81 11       	cpse	r24, r1
    1e6c:	2a c0       	rjmp	.+84     	; 0x1ec2 <xTaskPriorityDisinherit+0x74>
    1e6e:	ef 01       	movw	r28, r30
    1e70:	8f 01       	movw	r16, r30
    1e72:	0e 5f       	subi	r16, 0xFE	; 254
    1e74:	1f 4f       	sbci	r17, 0xFF	; 255
    1e76:	c8 01       	movw	r24, r16
    1e78:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    1e7c:	8b a1       	ldd	r24, Y+35	; 0x23
    1e7e:	8e 8b       	std	Y+22, r24	; 0x16
    1e80:	24 e0       	ldi	r18, 0x04	; 4
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	28 1b       	sub	r18, r24
    1e86:	31 09       	sbc	r19, r1
    1e88:	3d 87       	std	Y+13, r19	; 0x0d
    1e8a:	2c 87       	std	Y+12, r18	; 0x0c
    1e8c:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <uxTopReadyPriority>
    1e90:	98 17       	cp	r25, r24
    1e92:	10 f4       	brcc	.+4      	; 0x1e98 <xTaskPriorityDisinherit+0x4a>
    1e94:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <uxTopReadyPriority>
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	9c 01       	movw	r18, r24
    1e9c:	22 0f       	add	r18, r18
    1e9e:	33 1f       	adc	r19, r19
    1ea0:	22 0f       	add	r18, r18
    1ea2:	33 1f       	adc	r19, r19
    1ea4:	22 0f       	add	r18, r18
    1ea6:	33 1f       	adc	r19, r19
    1ea8:	82 0f       	add	r24, r18
    1eaa:	93 1f       	adc	r25, r19
    1eac:	b8 01       	movw	r22, r16
    1eae:	86 53       	subi	r24, 0x36	; 54
    1eb0:	97 4f       	sbci	r25, 0xF7	; 247
    1eb2:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInsertEnd>
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	05 c0       	rjmp	.+10     	; 0x1ec4 <xTaskPriorityDisinherit+0x76>
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	03 c0       	rjmp	.+6      	; 0x1ec4 <xTaskPriorityDisinherit+0x76>
    1ebe:	80 e0       	ldi	r24, 0x00	; 0
    1ec0:	01 c0       	rjmp	.+2      	; 0x1ec4 <xTaskPriorityDisinherit+0x76>
    1ec2:	80 e0       	ldi	r24, 0x00	; 0
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	1f 91       	pop	r17
    1eca:	0f 91       	pop	r16
    1ecc:	08 95       	ret

00001ece <vTaskPriorityDisinheritAfterTimeout>:
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	89 2b       	or	r24, r25
    1eda:	09 f4       	brne	.+2      	; 0x1ede <vTaskPriorityDisinheritAfterTimeout+0x10>
    1edc:	43 c0       	rjmp	.+134    	; 0x1f64 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1ede:	93 a1       	ldd	r25, Z+35	; 0x23
    1ee0:	96 17       	cp	r25, r22
    1ee2:	08 f4       	brcc	.+2      	; 0x1ee6 <vTaskPriorityDisinheritAfterTimeout+0x18>
    1ee4:	96 2f       	mov	r25, r22
    1ee6:	86 89       	ldd	r24, Z+22	; 0x16
    1ee8:	89 17       	cp	r24, r25
    1eea:	e1 f1       	breq	.+120    	; 0x1f64 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1eec:	24 a1       	ldd	r18, Z+36	; 0x24
    1eee:	21 30       	cpi	r18, 0x01	; 1
    1ef0:	c9 f5       	brne	.+114    	; 0x1f64 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1ef2:	96 8b       	std	Z+22, r25	; 0x16
    1ef4:	24 85       	ldd	r18, Z+12	; 0x0c
    1ef6:	35 85       	ldd	r19, Z+13	; 0x0d
    1ef8:	33 23       	and	r19, r19
    1efa:	34 f0       	brlt	.+12     	; 0x1f08 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    1efc:	24 e0       	ldi	r18, 0x04	; 4
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	29 1b       	sub	r18, r25
    1f02:	31 09       	sbc	r19, r1
    1f04:	35 87       	std	Z+13, r19	; 0x0d
    1f06:	24 87       	std	Z+12, r18	; 0x0c
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9c 01       	movw	r18, r24
    1f0c:	22 0f       	add	r18, r18
    1f0e:	33 1f       	adc	r19, r19
    1f10:	22 0f       	add	r18, r18
    1f12:	33 1f       	adc	r19, r19
    1f14:	22 0f       	add	r18, r18
    1f16:	33 1f       	adc	r19, r19
    1f18:	82 0f       	add	r24, r18
    1f1a:	93 1f       	adc	r25, r19
    1f1c:	86 53       	subi	r24, 0x36	; 54
    1f1e:	97 4f       	sbci	r25, 0xF7	; 247
    1f20:	22 85       	ldd	r18, Z+10	; 0x0a
    1f22:	33 85       	ldd	r19, Z+11	; 0x0b
    1f24:	28 17       	cp	r18, r24
    1f26:	39 07       	cpc	r19, r25
    1f28:	e9 f4       	brne	.+58     	; 0x1f64 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1f2a:	ef 01       	movw	r28, r30
    1f2c:	8f 01       	movw	r16, r30
    1f2e:	0e 5f       	subi	r16, 0xFE	; 254
    1f30:	1f 4f       	sbci	r17, 0xFF	; 255
    1f32:	c8 01       	movw	r24, r16
    1f34:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    1f38:	8e 89       	ldd	r24, Y+22	; 0x16
    1f3a:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <uxTopReadyPriority>
    1f3e:	98 17       	cp	r25, r24
    1f40:	10 f4       	brcc	.+4      	; 0x1f46 <vTaskPriorityDisinheritAfterTimeout+0x78>
    1f42:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <uxTopReadyPriority>
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9c 01       	movw	r18, r24
    1f4a:	22 0f       	add	r18, r18
    1f4c:	33 1f       	adc	r19, r19
    1f4e:	22 0f       	add	r18, r18
    1f50:	33 1f       	adc	r19, r19
    1f52:	22 0f       	add	r18, r18
    1f54:	33 1f       	adc	r19, r19
    1f56:	82 0f       	add	r24, r18
    1f58:	93 1f       	adc	r25, r19
    1f5a:	b8 01       	movw	r22, r16
    1f5c:	86 53       	subi	r24, 0x36	; 54
    1f5e:	97 4f       	sbci	r25, 0xF7	; 247
    1f60:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInsertEnd>
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	08 95       	ret

00001f6e <pvTaskIncrementMutexHeldCount>:
    1f6e:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1f72:	90 91 ef 08 	lds	r25, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1f76:	89 2b       	or	r24, r25
    1f78:	39 f0       	breq	.+14     	; 0x1f88 <pvTaskIncrementMutexHeldCount+0x1a>
    1f7a:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1f7e:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1f82:	84 a1       	ldd	r24, Z+36	; 0x24
    1f84:	8f 5f       	subi	r24, 0xFF	; 255
    1f86:	84 a3       	std	Z+36, r24	; 0x24
    1f88:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1f8c:	90 91 ef 08 	lds	r25, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1f90:	08 95       	ret

00001f92 <xTaskNotifyWait>:
    1f92:	4f 92       	push	r4
    1f94:	5f 92       	push	r5
    1f96:	6f 92       	push	r6
    1f98:	7f 92       	push	r7
    1f9a:	8f 92       	push	r8
    1f9c:	9f 92       	push	r9
    1f9e:	af 92       	push	r10
    1fa0:	bf 92       	push	r11
    1fa2:	ef 92       	push	r14
    1fa4:	ff 92       	push	r15
    1fa6:	0f 93       	push	r16
    1fa8:	1f 93       	push	r17
    1faa:	49 01       	movw	r8, r18
    1fac:	5a 01       	movw	r10, r20
    1fae:	0f b6       	in	r0, 0x3f	; 63
    1fb0:	f8 94       	cli
    1fb2:	0f 92       	push	r0
    1fb4:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1fb8:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1fbc:	23 a5       	ldd	r18, Z+43	; 0x2b
    1fbe:	22 30       	cpi	r18, 0x02	; 2
    1fc0:	21 f1       	breq	.+72     	; 0x200a <xTaskNotifyWait+0x78>
    1fc2:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1fc6:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1fca:	47 a0       	ldd	r4, Z+39	; 0x27
    1fcc:	50 a4       	ldd	r5, Z+40	; 0x28
    1fce:	61 a4       	ldd	r6, Z+41	; 0x29
    1fd0:	72 a4       	ldd	r7, Z+42	; 0x2a
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	80 95       	com	r24
    1fd8:	90 95       	com	r25
    1fda:	a0 95       	com	r26
    1fdc:	b0 95       	com	r27
    1fde:	84 21       	and	r24, r4
    1fe0:	95 21       	and	r25, r5
    1fe2:	a6 21       	and	r26, r6
    1fe4:	b7 21       	and	r27, r7
    1fe6:	87 a3       	std	Z+39, r24	; 0x27
    1fe8:	90 a7       	std	Z+40, r25	; 0x28
    1fea:	a1 a7       	std	Z+41, r26	; 0x29
    1fec:	b2 a7       	std	Z+42, r27	; 0x2a
    1fee:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    1ff2:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	83 a7       	std	Z+43, r24	; 0x2b
    1ffa:	e1 14       	cp	r14, r1
    1ffc:	f1 04       	cpc	r15, r1
    1ffe:	29 f0       	breq	.+10     	; 0x200a <xTaskNotifyWait+0x78>
    2000:	61 e0       	ldi	r22, 0x01	; 1
    2002:	c7 01       	movw	r24, r14
    2004:	5f da       	rcall	.-2882   	; 0x14c4 <prvAddCurrentTaskToDelayedList>
    2006:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
    200a:	0f 90       	pop	r0
    200c:	0f be       	out	0x3f, r0	; 63
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	0f 92       	push	r0
    2014:	01 15       	cp	r16, r1
    2016:	11 05       	cpc	r17, r1
    2018:	69 f0       	breq	.+26     	; 0x2034 <xTaskNotifyWait+0xa2>
    201a:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    201e:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    2022:	87 a1       	ldd	r24, Z+39	; 0x27
    2024:	90 a5       	ldd	r25, Z+40	; 0x28
    2026:	a1 a5       	ldd	r26, Z+41	; 0x29
    2028:	b2 a5       	ldd	r27, Z+42	; 0x2a
    202a:	f8 01       	movw	r30, r16
    202c:	80 83       	st	Z, r24
    202e:	91 83       	std	Z+1, r25	; 0x01
    2030:	a2 83       	std	Z+2, r26	; 0x02
    2032:	b3 83       	std	Z+3, r27	; 0x03
    2034:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    2038:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    203c:	83 a5       	ldd	r24, Z+43	; 0x2b
    203e:	82 30       	cpi	r24, 0x02	; 2
    2040:	b1 f4       	brne	.+44     	; 0x206e <xTaskNotifyWait+0xdc>
    2042:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    2046:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    204a:	87 a1       	ldd	r24, Z+39	; 0x27
    204c:	90 a5       	ldd	r25, Z+40	; 0x28
    204e:	a1 a5       	ldd	r26, Z+41	; 0x29
    2050:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2052:	80 94       	com	r8
    2054:	90 94       	com	r9
    2056:	a0 94       	com	r10
    2058:	b0 94       	com	r11
    205a:	88 22       	and	r8, r24
    205c:	99 22       	and	r9, r25
    205e:	aa 22       	and	r10, r26
    2060:	bb 22       	and	r11, r27
    2062:	87 a2       	std	Z+39, r8	; 0x27
    2064:	90 a6       	std	Z+40, r9	; 0x28
    2066:	a1 a6       	std	Z+41, r10	; 0x29
    2068:	b2 a6       	std	Z+42, r11	; 0x2a
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	01 c0       	rjmp	.+2      	; 0x2070 <xTaskNotifyWait+0xde>
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    2074:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    2078:	13 a6       	std	Z+43, r1	; 0x2b
    207a:	0f 90       	pop	r0
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	1f 91       	pop	r17
    2080:	0f 91       	pop	r16
    2082:	ff 90       	pop	r15
    2084:	ef 90       	pop	r14
    2086:	bf 90       	pop	r11
    2088:	af 90       	pop	r10
    208a:	9f 90       	pop	r9
    208c:	8f 90       	pop	r8
    208e:	7f 90       	pop	r7
    2090:	6f 90       	pop	r6
    2092:	5f 90       	pop	r5
    2094:	4f 90       	pop	r4
    2096:	08 95       	ret

00002098 <xTaskGenericNotify>:
    2098:	0f 93       	push	r16
    209a:	1f 93       	push	r17
    209c:	cf 93       	push	r28
    209e:	df 93       	push	r29
    20a0:	fc 01       	movw	r30, r24
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	0f 92       	push	r0
    20a8:	01 15       	cp	r16, r1
    20aa:	11 05       	cpc	r17, r1
    20ac:	49 f0       	breq	.+18     	; 0x20c0 <xTaskGenericNotify+0x28>
    20ae:	87 a1       	ldd	r24, Z+39	; 0x27
    20b0:	90 a5       	ldd	r25, Z+40	; 0x28
    20b2:	a1 a5       	ldd	r26, Z+41	; 0x29
    20b4:	b2 a5       	ldd	r27, Z+42	; 0x2a
    20b6:	e8 01       	movw	r28, r16
    20b8:	88 83       	st	Y, r24
    20ba:	99 83       	std	Y+1, r25	; 0x01
    20bc:	aa 83       	std	Y+2, r26	; 0x02
    20be:	bb 83       	std	Y+3, r27	; 0x03
    20c0:	83 a5       	ldd	r24, Z+43	; 0x2b
    20c2:	92 e0       	ldi	r25, 0x02	; 2
    20c4:	93 a7       	std	Z+43, r25	; 0x2b
    20c6:	22 30       	cpi	r18, 0x02	; 2
    20c8:	b1 f0       	breq	.+44     	; 0x20f6 <xTaskGenericNotify+0x5e>
    20ca:	18 f4       	brcc	.+6      	; 0x20d2 <xTaskGenericNotify+0x3a>
    20cc:	21 30       	cpi	r18, 0x01	; 1
    20ce:	31 f0       	breq	.+12     	; 0x20dc <xTaskGenericNotify+0x44>
    20d0:	2a c0       	rjmp	.+84     	; 0x2126 <xTaskGenericNotify+0x8e>
    20d2:	23 30       	cpi	r18, 0x03	; 3
    20d4:	e9 f0       	breq	.+58     	; 0x2110 <xTaskGenericNotify+0x78>
    20d6:	24 30       	cpi	r18, 0x04	; 4
    20d8:	01 f1       	breq	.+64     	; 0x211a <xTaskGenericNotify+0x82>
    20da:	25 c0       	rjmp	.+74     	; 0x2126 <xTaskGenericNotify+0x8e>
    20dc:	07 a1       	ldd	r16, Z+39	; 0x27
    20de:	10 a5       	ldd	r17, Z+40	; 0x28
    20e0:	21 a5       	ldd	r18, Z+41	; 0x29
    20e2:	32 a5       	ldd	r19, Z+42	; 0x2a
    20e4:	40 2b       	or	r20, r16
    20e6:	51 2b       	or	r21, r17
    20e8:	62 2b       	or	r22, r18
    20ea:	73 2b       	or	r23, r19
    20ec:	47 a3       	std	Z+39, r20	; 0x27
    20ee:	50 a7       	std	Z+40, r21	; 0x28
    20f0:	61 a7       	std	Z+41, r22	; 0x29
    20f2:	72 a7       	std	Z+42, r23	; 0x2a
    20f4:	18 c0       	rjmp	.+48     	; 0x2126 <xTaskGenericNotify+0x8e>
    20f6:	47 a1       	ldd	r20, Z+39	; 0x27
    20f8:	50 a5       	ldd	r21, Z+40	; 0x28
    20fa:	61 a5       	ldd	r22, Z+41	; 0x29
    20fc:	72 a5       	ldd	r23, Z+42	; 0x2a
    20fe:	4f 5f       	subi	r20, 0xFF	; 255
    2100:	5f 4f       	sbci	r21, 0xFF	; 255
    2102:	6f 4f       	sbci	r22, 0xFF	; 255
    2104:	7f 4f       	sbci	r23, 0xFF	; 255
    2106:	47 a3       	std	Z+39, r20	; 0x27
    2108:	50 a7       	std	Z+40, r21	; 0x28
    210a:	61 a7       	std	Z+41, r22	; 0x29
    210c:	72 a7       	std	Z+42, r23	; 0x2a
    210e:	0b c0       	rjmp	.+22     	; 0x2126 <xTaskGenericNotify+0x8e>
    2110:	47 a3       	std	Z+39, r20	; 0x27
    2112:	50 a7       	std	Z+40, r21	; 0x28
    2114:	61 a7       	std	Z+41, r22	; 0x29
    2116:	72 a7       	std	Z+42, r23	; 0x2a
    2118:	06 c0       	rjmp	.+12     	; 0x2126 <xTaskGenericNotify+0x8e>
    211a:	82 30       	cpi	r24, 0x02	; 2
    211c:	79 f1       	breq	.+94     	; 0x217c <xTaskGenericNotify+0xe4>
    211e:	47 a3       	std	Z+39, r20	; 0x27
    2120:	50 a7       	std	Z+40, r21	; 0x28
    2122:	61 a7       	std	Z+41, r22	; 0x29
    2124:	72 a7       	std	Z+42, r23	; 0x2a
    2126:	81 30       	cpi	r24, 0x01	; 1
    2128:	59 f5       	brne	.+86     	; 0x2180 <xTaskGenericNotify+0xe8>
    212a:	ef 01       	movw	r28, r30
    212c:	8f 01       	movw	r16, r30
    212e:	0e 5f       	subi	r16, 0xFE	; 254
    2130:	1f 4f       	sbci	r17, 0xFF	; 255
    2132:	c8 01       	movw	r24, r16
    2134:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    2138:	8e 89       	ldd	r24, Y+22	; 0x16
    213a:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <uxTopReadyPriority>
    213e:	98 17       	cp	r25, r24
    2140:	10 f4       	brcc	.+4      	; 0x2146 <xTaskGenericNotify+0xae>
    2142:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <uxTopReadyPriority>
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	9c 01       	movw	r18, r24
    214a:	22 0f       	add	r18, r18
    214c:	33 1f       	adc	r19, r19
    214e:	22 0f       	add	r18, r18
    2150:	33 1f       	adc	r19, r19
    2152:	22 0f       	add	r18, r18
    2154:	33 1f       	adc	r19, r19
    2156:	82 0f       	add	r24, r18
    2158:	93 1f       	adc	r25, r19
    215a:	b8 01       	movw	r22, r16
    215c:	86 53       	subi	r24, 0x36	; 54
    215e:	97 4f       	sbci	r25, 0xF7	; 247
    2160:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInsertEnd>
    2164:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    2168:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    216c:	9e 89       	ldd	r25, Y+22	; 0x16
    216e:	86 89       	ldd	r24, Z+22	; 0x16
    2170:	89 17       	cp	r24, r25
    2172:	40 f4       	brcc	.+16     	; 0x2184 <xTaskGenericNotify+0xec>
    2174:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	05 c0       	rjmp	.+10     	; 0x2186 <xTaskGenericNotify+0xee>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	03 c0       	rjmp	.+6      	; 0x2186 <xTaskGenericNotify+0xee>
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	01 c0       	rjmp	.+2      	; 0x2186 <xTaskGenericNotify+0xee>
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	0f 90       	pop	r0
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	1f 91       	pop	r17
    2190:	0f 91       	pop	r16
    2192:	08 95       	ret

00002194 <xTaskGenericNotifyFromISR>:
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	fc 01       	movw	r30, r24
    21a2:	01 15       	cp	r16, r1
    21a4:	11 05       	cpc	r17, r1
    21a6:	49 f0       	breq	.+18     	; 0x21ba <xTaskGenericNotifyFromISR+0x26>
    21a8:	87 a1       	ldd	r24, Z+39	; 0x27
    21aa:	90 a5       	ldd	r25, Z+40	; 0x28
    21ac:	a1 a5       	ldd	r26, Z+41	; 0x29
    21ae:	b2 a5       	ldd	r27, Z+42	; 0x2a
    21b0:	e8 01       	movw	r28, r16
    21b2:	88 83       	st	Y, r24
    21b4:	99 83       	std	Y+1, r25	; 0x01
    21b6:	aa 83       	std	Y+2, r26	; 0x02
    21b8:	bb 83       	std	Y+3, r27	; 0x03
    21ba:	83 a5       	ldd	r24, Z+43	; 0x2b
    21bc:	92 e0       	ldi	r25, 0x02	; 2
    21be:	93 a7       	std	Z+43, r25	; 0x2b
    21c0:	22 30       	cpi	r18, 0x02	; 2
    21c2:	b1 f0       	breq	.+44     	; 0x21f0 <xTaskGenericNotifyFromISR+0x5c>
    21c4:	18 f4       	brcc	.+6      	; 0x21cc <xTaskGenericNotifyFromISR+0x38>
    21c6:	21 30       	cpi	r18, 0x01	; 1
    21c8:	31 f0       	breq	.+12     	; 0x21d6 <xTaskGenericNotifyFromISR+0x42>
    21ca:	2b c0       	rjmp	.+86     	; 0x2222 <__stack+0x23>
    21cc:	23 30       	cpi	r18, 0x03	; 3
    21ce:	e9 f0       	breq	.+58     	; 0x220a <__stack+0xb>
    21d0:	24 30       	cpi	r18, 0x04	; 4
    21d2:	01 f1       	breq	.+64     	; 0x2214 <__stack+0x15>
    21d4:	26 c0       	rjmp	.+76     	; 0x2222 <__stack+0x23>
    21d6:	07 a1       	ldd	r16, Z+39	; 0x27
    21d8:	10 a5       	ldd	r17, Z+40	; 0x28
    21da:	21 a5       	ldd	r18, Z+41	; 0x29
    21dc:	32 a5       	ldd	r19, Z+42	; 0x2a
    21de:	40 2b       	or	r20, r16
    21e0:	51 2b       	or	r21, r17
    21e2:	62 2b       	or	r22, r18
    21e4:	73 2b       	or	r23, r19
    21e6:	47 a3       	std	Z+39, r20	; 0x27
    21e8:	50 a7       	std	Z+40, r21	; 0x28
    21ea:	61 a7       	std	Z+41, r22	; 0x29
    21ec:	72 a7       	std	Z+42, r23	; 0x2a
    21ee:	19 c0       	rjmp	.+50     	; 0x2222 <__stack+0x23>
    21f0:	47 a1       	ldd	r20, Z+39	; 0x27
    21f2:	50 a5       	ldd	r21, Z+40	; 0x28
    21f4:	61 a5       	ldd	r22, Z+41	; 0x29
    21f6:	72 a5       	ldd	r23, Z+42	; 0x2a
    21f8:	4f 5f       	subi	r20, 0xFF	; 255
    21fa:	5f 4f       	sbci	r21, 0xFF	; 255
    21fc:	6f 4f       	sbci	r22, 0xFF	; 255
    21fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2200:	47 a3       	std	Z+39, r20	; 0x27
    2202:	50 a7       	std	Z+40, r21	; 0x28
    2204:	61 a7       	std	Z+41, r22	; 0x29
    2206:	72 a7       	std	Z+42, r23	; 0x2a
    2208:	0c c0       	rjmp	.+24     	; 0x2222 <__stack+0x23>
    220a:	47 a3       	std	Z+39, r20	; 0x27
    220c:	50 a7       	std	Z+40, r21	; 0x28
    220e:	61 a7       	std	Z+41, r22	; 0x29
    2210:	72 a7       	std	Z+42, r23	; 0x2a
    2212:	07 c0       	rjmp	.+14     	; 0x2222 <__stack+0x23>
    2214:	82 30       	cpi	r24, 0x02	; 2
    2216:	09 f4       	brne	.+2      	; 0x221a <__stack+0x1b>
    2218:	41 c0       	rjmp	.+130    	; 0x229c <__stack+0x9d>
    221a:	47 a3       	std	Z+39, r20	; 0x27
    221c:	50 a7       	std	Z+40, r21	; 0x28
    221e:	61 a7       	std	Z+41, r22	; 0x29
    2220:	72 a7       	std	Z+42, r23	; 0x2a
    2222:	81 30       	cpi	r24, 0x01	; 1
    2224:	e9 f5       	brne	.+122    	; 0x22a0 <__stack+0xa1>
    2226:	ef 01       	movw	r28, r30
    2228:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <__data_end>
    222c:	81 11       	cpse	r24, r1
    222e:	1d c0       	rjmp	.+58     	; 0x226a <__stack+0x6b>
    2230:	8f 01       	movw	r16, r30
    2232:	0e 5f       	subi	r16, 0xFE	; 254
    2234:	1f 4f       	sbci	r17, 0xFF	; 255
    2236:	c8 01       	movw	r24, r16
    2238:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
    223c:	8e 89       	ldd	r24, Y+22	; 0x16
    223e:	90 91 94 08 	lds	r25, 0x0894	; 0x800894 <uxTopReadyPriority>
    2242:	98 17       	cp	r25, r24
    2244:	10 f4       	brcc	.+4      	; 0x224a <__stack+0x4b>
    2246:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <uxTopReadyPriority>
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9c 01       	movw	r18, r24
    224e:	22 0f       	add	r18, r18
    2250:	33 1f       	adc	r19, r19
    2252:	22 0f       	add	r18, r18
    2254:	33 1f       	adc	r19, r19
    2256:	22 0f       	add	r18, r18
    2258:	33 1f       	adc	r19, r19
    225a:	82 0f       	add	r24, r18
    225c:	93 1f       	adc	r25, r19
    225e:	b8 01       	movw	r22, r16
    2260:	86 53       	subi	r24, 0x36	; 54
    2262:	97 4f       	sbci	r25, 0xF7	; 247
    2264:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInsertEnd>
    2268:	07 c0       	rjmp	.+14     	; 0x2278 <__stack+0x79>
    226a:	bf 01       	movw	r22, r30
    226c:	64 5f       	subi	r22, 0xF4	; 244
    226e:	7f 4f       	sbci	r23, 0xFF	; 255
    2270:	8b ea       	ldi	r24, 0xAB	; 171
    2272:	98 e0       	ldi	r25, 0x08	; 8
    2274:	0e 94 9d 02 	call	0x53a	; 0x53a <vListInsertEnd>
    2278:	e0 91 ee 08 	lds	r30, 0x08EE	; 0x8008ee <pxCurrentTCB>
    227c:	f0 91 ef 08 	lds	r31, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>
    2280:	9e 89       	ldd	r25, Y+22	; 0x16
    2282:	86 89       	ldd	r24, Z+22	; 0x16
    2284:	89 17       	cp	r24, r25
    2286:	70 f4       	brcc	.+28     	; 0x22a4 <__stack+0xa5>
    2288:	e1 14       	cp	r14, r1
    228a:	f1 04       	cpc	r15, r1
    228c:	19 f0       	breq	.+6      	; 0x2294 <__stack+0x95>
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	f7 01       	movw	r30, r14
    2292:	80 83       	st	Z, r24
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	80 93 91 08 	sts	0x0891, r24	; 0x800891 <xYieldPending>
    229a:	05 c0       	rjmp	.+10     	; 0x22a6 <__stack+0xa7>
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	03 c0       	rjmp	.+6      	; 0x22a6 <__stack+0xa7>
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	01 c0       	rjmp	.+2      	; 0x22a6 <__stack+0xa7>
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	1f 91       	pop	r17
    22ac:	0f 91       	pop	r16
    22ae:	ff 90       	pop	r15
    22b0:	ef 90       	pop	r14
    22b2:	08 95       	ret

000022b4 <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	21 f4       	brne	.+8      	; 0x22c0 <xTaskNotifyStateClear+0xc>
    22b8:	80 91 ee 08 	lds	r24, 0x08EE	; 0x8008ee <pxCurrentTCB>
    22bc:	90 91 ef 08 	lds	r25, 0x08EF	; 0x8008ef <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    22c6:	fc 01       	movw	r30, r24
    22c8:	23 a5       	ldd	r18, Z+43	; 0x2b
    22ca:	22 30       	cpi	r18, 0x02	; 2
    22cc:	19 f4       	brne	.+6      	; 0x22d4 <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    22ce:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	01 c0       	rjmp	.+2      	; 0x22d6 <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    22d4:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    22d6:	0f 90       	pop	r0
    22d8:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    22da:	08 95       	ret

000022dc <prvInsertTimerInActiveList>:
    return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    22dc:	fc 01       	movw	r30, r24
BaseType_t xProcessTimerNow = pdFALSE;

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    22de:	73 83       	std	Z+3, r23	; 0x03
    22e0:	62 83       	std	Z+2, r22	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    22e2:	91 87       	std	Z+9, r25	; 0x09
    22e4:	80 87       	std	Z+8, r24	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    22e6:	46 17       	cp	r20, r22
    22e8:	57 07       	cpc	r21, r23
    22ea:	90 f0       	brcs	.+36     	; 0x2310 <prvInsertTimerInActiveList+0x34>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    22ec:	42 1b       	sub	r20, r18
    22ee:	53 0b       	sbc	r21, r19
    22f0:	84 85       	ldd	r24, Z+12	; 0x0c
    22f2:	95 85       	ldd	r25, Z+13	; 0x0d
    22f4:	48 17       	cp	r20, r24
    22f6:	59 07       	cpc	r21, r25
    22f8:	e0 f4       	brcc	.+56     	; 0x2332 <prvInsertTimerInActiveList+0x56>
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    22fa:	bf 01       	movw	r22, r30
    22fc:	6e 5f       	subi	r22, 0xFE	; 254
    22fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2300:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <pxOverflowTimerList>
    2304:	90 91 f7 08 	lds	r25, 0x08F7	; 0x8008f7 <pxOverflowTimerList+0x1>
    2308:	0e 94 be 02 	call	0x57c	; 0x57c <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	08 95       	ret
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    2310:	42 17       	cp	r20, r18
    2312:	53 07       	cpc	r21, r19
    2314:	18 f4       	brcc	.+6      	; 0x231c <prvInsertTimerInActiveList+0x40>
    2316:	62 17       	cp	r22, r18
    2318:	73 07       	cpc	r23, r19
    231a:	68 f4       	brcc	.+26     	; 0x2336 <prvInsertTimerInActiveList+0x5a>
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    231c:	bf 01       	movw	r22, r30
    231e:	6e 5f       	subi	r22, 0xFE	; 254
    2320:	7f 4f       	sbci	r23, 0xFF	; 255
    2322:	80 91 f8 08 	lds	r24, 0x08F8	; 0x8008f8 <pxCurrentTimerList>
    2326:	90 91 f9 08 	lds	r25, 0x08F9	; 0x8008f9 <pxCurrentTimerList+0x1>
    232a:	0e 94 be 02 	call	0x57c	; 0x57c <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	08 95       	ret
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	08 95       	ret
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    2336:	81 e0       	ldi	r24, 0x01	; 1
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
        }
    }

    return xProcessTimerNow;
}
    2338:	08 95       	ret

0000233a <prvCheckForValidListAndQueue>:
static void prvCheckForValidListAndQueue( void )
{
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    2340:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <xTimerQueue>
    2344:	90 91 f5 08 	lds	r25, 0x08F5	; 0x8008f5 <xTimerQueue+0x1>
    2348:	89 2b       	or	r24, r25
    234a:	e9 f4       	brne	.+58     	; 0x2386 <prvCheckForValidListAndQueue+0x4c>
        {
            vListInitialise( &xActiveTimerList1 );
    234c:	83 e0       	ldi	r24, 0x03	; 3
    234e:	99 e0       	ldi	r25, 0x09	; 9
    2350:	0e 94 8b 02 	call	0x516	; 0x516 <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    2354:	8a ef       	ldi	r24, 0xFA	; 250
    2356:	98 e0       	ldi	r25, 0x08	; 8
    2358:	0e 94 8b 02 	call	0x516	; 0x516 <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    235c:	83 e0       	ldi	r24, 0x03	; 3
    235e:	99 e0       	ldi	r25, 0x09	; 9
    2360:	90 93 f9 08 	sts	0x08F9, r25	; 0x8008f9 <pxCurrentTimerList+0x1>
    2364:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    2368:	8a ef       	ldi	r24, 0xFA	; 250
    236a:	98 e0       	ldi	r25, 0x08	; 8
    236c:	90 93 f7 08 	sts	0x08F7, r25	; 0x8008f7 <pxOverflowTimerList+0x1>
    2370:	80 93 f6 08 	sts	0x08F6, r24	; 0x8008f6 <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    2374:	40 e0       	ldi	r20, 0x00	; 0
    2376:	65 e0       	ldi	r22, 0x05	; 5
    2378:	8a e0       	ldi	r24, 0x0A	; 10
    237a:	0e 94 9f 05 	call	0xb3e	; 0xb3e <xQueueGenericCreate>
    237e:	90 93 f5 08 	sts	0x08F5, r25	; 0x8008f5 <xTimerQueue+0x1>
    2382:	80 93 f4 08 	sts	0x08F4, r24	; 0x8008f4 <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    2386:	0f 90       	pop	r0
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	08 95       	ret

0000238c <xTimerCreateTimerTask>:
                                    TimerCallbackFunction_t pxCallbackFunction,
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    238c:	ef 92       	push	r14
    238e:	ff 92       	push	r15
    2390:	0f 93       	push	r16

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
    2392:	d3 df       	rcall	.-90     	; 0x233a <prvCheckForValidListAndQueue>

    if( xTimerQueue != NULL )
    2394:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <xTimerQueue>
    2398:	90 91 f5 08 	lds	r25, 0x08F5	; 0x8008f5 <xTimerQueue+0x1>
    239c:	89 2b       	or	r24, r25
    239e:	89 f0       	breq	.+34     	; 0x23c2 <xTimerCreateTimerTask+0x36>
                xReturn = pdPASS;
            }
        }
        #else
        {
            xReturn = xTaskCreate(    prvTimerTask,
    23a0:	0f 2e       	mov	r0, r31
    23a2:	f2 ef       	ldi	r31, 0xF2	; 242
    23a4:	ef 2e       	mov	r14, r31
    23a6:	f8 e0       	ldi	r31, 0x08	; 8
    23a8:	ff 2e       	mov	r15, r31
    23aa:	f0 2d       	mov	r31, r0
    23ac:	03 e0       	ldi	r16, 0x03	; 3
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	45 e5       	ldi	r20, 0x55	; 85
    23b4:	50 e0       	ldi	r21, 0x00	; 0
    23b6:	64 e8       	ldi	r22, 0x84	; 132
    23b8:	72 e0       	ldi	r23, 0x02	; 2
    23ba:	83 e0       	ldi	r24, 0x03	; 3
    23bc:	91 e0       	ldi	r25, 0x01	; 1
    23be:	d6 d8       	rcall	.-3668   	; 0x156c <xTaskCreate>
    23c0:	01 c0       	rjmp	.+2      	; 0x23c4 <xTimerCreateTimerTask+0x38>
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
    23c2:	80 e0       	ldi	r24, 0x00	; 0
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT( xReturn );
    return xReturn;
}
    23c4:	0f 91       	pop	r16
    23c6:	ff 90       	pop	r15
    23c8:	ef 90       	pop	r14
    23ca:	08 95       	ret

000023cc <xTimerCreate>:
    TimerHandle_t xTimerCreate( const char * const pcTimerName,            /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                const TickType_t xTimerPeriodInTicks,
                                const UBaseType_t uxAutoReload,
                                void * const pvTimerID,
                                TimerCallbackFunction_t pxCallbackFunction )
    {
    23cc:	8f 92       	push	r8
    23ce:	9f 92       	push	r9
    23d0:	af 92       	push	r10
    23d2:	bf 92       	push	r11
    23d4:	cf 92       	push	r12
    23d6:	df 92       	push	r13
    23d8:	ff 92       	push	r15
    23da:	0f 93       	push	r16
    23dc:	1f 93       	push	r17
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	4c 01       	movw	r8, r24
    23e4:	5b 01       	movw	r10, r22
    23e6:	f4 2e       	mov	r15, r20
    23e8:	69 01       	movw	r12, r18
    Timer_t *pxNewTimer;

        pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    23ea:	84 e1       	ldi	r24, 0x14	; 20
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	0e 94 69 02 	call	0x4d2	; 0x4d2 <pvPortMalloc>
    23f2:	ec 01       	movw	r28, r24

        if( pxNewTimer != NULL )
    23f4:	89 2b       	or	r24, r25
    23f6:	99 f0       	breq	.+38     	; 0x241e <xTimerCreate+0x52>
        {
            /* Status is thus far zero as the timer is not created statically
            and has not been started.  The autoreload bit may get set in
            prvInitialiseNewTimer. */
            pxNewTimer->ucStatus = 0x00;
    23f8:	1b 8a       	std	Y+19, r1	; 0x13

    if( pxNewTimer != NULL )
    {
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
    23fa:	9f df       	rcall	.-194    	; 0x233a <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    23fc:	99 82       	std	Y+1, r9	; 0x01
    23fe:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    2400:	bd 86       	std	Y+13, r11	; 0x0d
    2402:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    2404:	df 86       	std	Y+15, r13	; 0x0f
    2406:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    2408:	19 8b       	std	Y+17, r17	; 0x11
    240a:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    240c:	ce 01       	movw	r24, r28
    240e:	02 96       	adiw	r24, 0x02	; 2
    2410:	0e 94 99 02 	call	0x532	; 0x532 <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
    2414:	ff 20       	and	r15, r15
    2416:	19 f0       	breq	.+6      	; 0x241e <xTimerCreate+0x52>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    2418:	8b 89       	ldd	r24, Y+19	; 0x13
    241a:	84 60       	ori	r24, 0x04	; 4
    241c:	8b 8b       	std	Y+19, r24	; 0x13
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    241e:	ce 01       	movw	r24, r28
    2420:	df 91       	pop	r29
    2422:	cf 91       	pop	r28
    2424:	1f 91       	pop	r17
    2426:	0f 91       	pop	r16
    2428:	ff 90       	pop	r15
    242a:	df 90       	pop	r13
    242c:	cf 90       	pop	r12
    242e:	bf 90       	pop	r11
    2430:	af 90       	pop	r10
    2432:	9f 90       	pop	r9
    2434:	8f 90       	pop	r8
    2436:	08 95       	ret

00002438 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	00 d0       	rcall	.+0      	; 0x2442 <xTimerGenericCommand+0xa>
    2442:	1f 92       	push	r1
    2444:	1f 92       	push	r1
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    244a:	e0 91 f4 08 	lds	r30, 0x08F4	; 0x8008f4 <xTimerQueue>
    244e:	f0 91 f5 08 	lds	r31, 0x08F5	; 0x8008f5 <xTimerQueue+0x1>
    2452:	30 97       	sbiw	r30, 0x00	; 0
    2454:	69 f1       	breq	.+90     	; 0x24b0 <xTimerGenericCommand+0x78>
    2456:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2458:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    245a:	5b 83       	std	Y+3, r21	; 0x03
    245c:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    245e:	9d 83       	std	Y+5, r25	; 0x05
    2460:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2462:	66 30       	cpi	r22, 0x06	; 6
    2464:	e4 f4       	brge	.+56     	; 0x249e <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2466:	73 dc       	rcall	.-1818   	; 0x1d4e <xTaskGetSchedulerState>
    2468:	82 30       	cpi	r24, 0x02	; 2
    246a:	61 f4       	brne	.+24     	; 0x2484 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	a8 01       	movw	r20, r16
    2470:	be 01       	movw	r22, r28
    2472:	6f 5f       	subi	r22, 0xFF	; 255
    2474:	7f 4f       	sbci	r23, 0xFF	; 255
    2476:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <xTimerQueue>
    247a:	90 91 f5 08 	lds	r25, 0x08F5	; 0x8008f5 <xTimerQueue+0x1>
    247e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
    2482:	17 c0       	rjmp	.+46     	; 0x24b2 <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	40 e0       	ldi	r20, 0x00	; 0
    2488:	50 e0       	ldi	r21, 0x00	; 0
    248a:	be 01       	movw	r22, r28
    248c:	6f 5f       	subi	r22, 0xFF	; 255
    248e:	7f 4f       	sbci	r23, 0xFF	; 255
    2490:	80 91 f4 08 	lds	r24, 0x08F4	; 0x8008f4 <xTimerQueue>
    2494:	90 91 f5 08 	lds	r25, 0x08F5	; 0x8008f5 <xTimerQueue+0x1>
    2498:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
    249c:	0a c0       	rjmp	.+20     	; 0x24b2 <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	ad 01       	movw	r20, r26
    24a2:	be 01       	movw	r22, r28
    24a4:	6f 5f       	subi	r22, 0xFF	; 255
    24a6:	7f 4f       	sbci	r23, 0xFF	; 255
    24a8:	cf 01       	movw	r24, r30
    24aa:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <xQueueGenericSendFromISR>
    24ae:	01 c0       	rjmp	.+2      	; 0x24b2 <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	df 91       	pop	r29
    24be:	cf 91       	pop	r28
    24c0:	1f 91       	pop	r17
    24c2:	0f 91       	pop	r16
    24c4:	08 95       	ret

000024c6 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    24c6:	af 92       	push	r10
    24c8:	bf 92       	push	r11
    24ca:	cf 92       	push	r12
    24cc:	df 92       	push	r13
    24ce:	ef 92       	push	r14
    24d0:	ff 92       	push	r15
    24d2:	0f 93       	push	r16
    24d4:	1f 93       	push	r17
    24d6:	cf 93       	push	r28
    24d8:	df 93       	push	r29
    24da:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    24dc:	9e d9       	rcall	.-3268   	; 0x181a <xTaskGetTickCount>
    24de:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    24e0:	80 91 f0 08 	lds	r24, 0x08F0	; 0x8008f0 <xLastTime.2432>
    24e4:	90 91 f1 08 	lds	r25, 0x08F1	; 0x8008f1 <xLastTime.2432+0x1>
    24e8:	e8 16       	cp	r14, r24
    24ea:	f9 06       	cpc	r15, r25
    24ec:	08 f0       	brcs	.+2      	; 0x24f0 <prvSampleTimeNow+0x2a>
    24ee:	47 c0       	rjmp	.+142    	; 0x257e <prvSampleTimeNow+0xb8>
    24f0:	2f c0       	rjmp	.+94     	; 0x2550 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    24f2:	05 80       	ldd	r0, Z+5	; 0x05
    24f4:	f6 81       	ldd	r31, Z+6	; 0x06
    24f6:	e0 2d       	mov	r30, r0
    24f8:	a0 80       	ld	r10, Z
    24fa:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    24fc:	c6 81       	ldd	r28, Z+6	; 0x06
    24fe:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2500:	8e 01       	movw	r16, r28
    2502:	0e 5f       	subi	r16, 0xFE	; 254
    2504:	1f 4f       	sbci	r17, 0xFF	; 255
    2506:	c8 01       	movw	r24, r16
    2508:	0e 94 ef 02 	call	0x5de	; 0x5de <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    250c:	e8 89       	ldd	r30, Y+16	; 0x10
    250e:	f9 89       	ldd	r31, Y+17	; 0x11
    2510:	ce 01       	movw	r24, r28
    2512:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2514:	8b 89       	ldd	r24, Y+19	; 0x13
    2516:	82 ff       	sbrs	r24, 2
    2518:	1b c0       	rjmp	.+54     	; 0x2550 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    251a:	8c 85       	ldd	r24, Y+12	; 0x0c
    251c:	9d 85       	ldd	r25, Y+13	; 0x0d
    251e:	8a 0d       	add	r24, r10
    2520:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2522:	a8 16       	cp	r10, r24
    2524:	b9 06       	cpc	r11, r25
    2526:	60 f4       	brcc	.+24     	; 0x2540 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2528:	9b 83       	std	Y+3, r25	; 0x03
    252a:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    252c:	d9 87       	std	Y+9, r29	; 0x09
    252e:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2530:	b8 01       	movw	r22, r16
    2532:	80 91 f8 08 	lds	r24, 0x08F8	; 0x8008f8 <pxCurrentTimerList>
    2536:	90 91 f9 08 	lds	r25, 0x08F9	; 0x8008f9 <pxCurrentTimerList+0x1>
    253a:	0e 94 be 02 	call	0x57c	; 0x57c <vListInsert>
    253e:	08 c0       	rjmp	.+16     	; 0x2550 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2540:	00 e0       	ldi	r16, 0x00	; 0
    2542:	10 e0       	ldi	r17, 0x00	; 0
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	a5 01       	movw	r20, r10
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	ce 01       	movw	r24, r28
    254e:	74 df       	rcall	.-280    	; 0x2438 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2550:	e0 91 f8 08 	lds	r30, 0x08F8	; 0x8008f8 <pxCurrentTimerList>
    2554:	f0 91 f9 08 	lds	r31, 0x08F9	; 0x8008f9 <pxCurrentTimerList+0x1>
    2558:	80 81       	ld	r24, Z
    255a:	81 11       	cpse	r24, r1
    255c:	ca cf       	rjmp	.-108    	; 0x24f2 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    255e:	80 91 f6 08 	lds	r24, 0x08F6	; 0x8008f6 <pxOverflowTimerList>
    2562:	90 91 f7 08 	lds	r25, 0x08F7	; 0x8008f7 <pxOverflowTimerList+0x1>
    2566:	90 93 f9 08 	sts	0x08F9, r25	; 0x8008f9 <pxCurrentTimerList+0x1>
    256a:	80 93 f8 08 	sts	0x08F8, r24	; 0x8008f8 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    256e:	f0 93 f7 08 	sts	0x08F7, r31	; 0x8008f7 <pxOverflowTimerList+0x1>
    2572:	e0 93 f6 08 	sts	0x08F6, r30	; 0x8008f6 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	f6 01       	movw	r30, r12
    257a:	80 83       	st	Z, r24
    257c:	02 c0       	rjmp	.+4      	; 0x2582 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    257e:	f6 01       	movw	r30, r12
    2580:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2582:	f0 92 f1 08 	sts	0x08F1, r15	; 0x8008f1 <xLastTime.2432+0x1>
    2586:	e0 92 f0 08 	sts	0x08F0, r14	; 0x8008f0 <xLastTime.2432>

    return xTimeNow;
}
    258a:	c7 01       	movw	r24, r14
    258c:	df 91       	pop	r29
    258e:	cf 91       	pop	r28
    2590:	1f 91       	pop	r17
    2592:	0f 91       	pop	r16
    2594:	ff 90       	pop	r15
    2596:	ef 90       	pop	r14
    2598:	df 90       	pop	r13
    259a:	cf 90       	pop	r12
    259c:	bf 90       	pop	r11
    259e:	af 90       	pop	r10
    25a0:	08 95       	ret

000025a2 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    25a2:	08 95       	ret

000025a4 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    25a4:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    25a6:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25a8:	2f ef       	ldi	r18, 0xFF	; 255
    25aa:	80 e7       	ldi	r24, 0x70	; 112
    25ac:	92 e0       	ldi	r25, 0x02	; 2
    25ae:	21 50       	subi	r18, 0x01	; 1
    25b0:	80 40       	sbci	r24, 0x00	; 0
    25b2:	90 40       	sbci	r25, 0x00	; 0
    25b4:	e1 f7       	brne	.-8      	; 0x25ae <vApplicationMallocFailedHook+0xa>
    25b6:	00 c0       	rjmp	.+0      	; 0x25b8 <vApplicationMallocFailedHook+0x14>
    25b8:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    25ba:	1f 9a       	sbi	0x03, 7	; 3
    25bc:	f5 cf       	rjmp	.-22     	; 0x25a8 <vApplicationMallocFailedHook+0x4>

000025be <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    25be:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    25c0:	2f 9a       	sbi	0x05, 7	; 5
    25c2:	2f ef       	ldi	r18, 0xFF	; 255
    25c4:	87 ea       	ldi	r24, 0xA7	; 167
    25c6:	91 e6       	ldi	r25, 0x61	; 97
    25c8:	21 50       	subi	r18, 0x01	; 1
    25ca:	80 40       	sbci	r24, 0x00	; 0
    25cc:	90 40       	sbci	r25, 0x00	; 0
    25ce:	e1 f7       	brne	.-8      	; 0x25c8 <vApplicationStackOverflowHook+0xa>
    25d0:	00 c0       	rjmp	.+0      	; 0x25d2 <vApplicationStackOverflowHook+0x14>
    25d2:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    25d4:	1f 9a       	sbi	0x03, 7	; 3
    25d6:	f5 cf       	rjmp	.-22     	; 0x25c2 <vApplicationStackOverflowHook+0x4>

000025d8 <main>:
#include "temp_humSensor.h"


int main(void)
{
	trace_init();
    25d8:	0e 94 53 02 	call	0x4a6	; 0x4a6 <trace_init>
	// stdio_drivers init
	stdioCreate(0);
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	0e 94 05 21 	call	0x420a	; 0x420a <stdioCreate>

	// initialization of resources
	// rtos
	semaphores_init();
    25e2:	e1 d0       	rcall	.+450    	; 0x27a6 <semaphores_init>
	timers_init();
    25e4:	14 d3       	rcall	.+1576   	; 0x2c0e <timers_init>
    25e6:	0e 94 39 02 	call	0x472	; 0x472 <co2_sensor_init>
	// drivers
	co2_sensor_init();
	temp_hum_sensor_init();
    25ea:	4e d3       	rcall	.+1692   	; 0x2c88 <temp_hum_sensor_init>
    25ec:	1b d0       	rcall	.+54     	; 0x2624 <lora_init>
	lora_init();
    25ee:	6f ef       	ldi	r22, 0xFF	; 255
    25f0:	7f ef       	ldi	r23, 0xFF	; 255
	
	
	// take semaphores
	// we do not care about result
	// just wanna make sure they are take
	xSemaphoreTake( co2Semaphore, portMAX_DELAY );
    25f2:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <co2Semaphore>
    25f6:	90 91 84 0a 	lds	r25, 0x0A84	; 0x800a84 <co2Semaphore+0x1>
    25fa:	0e 94 3b 07 	call	0xe76	; 0xe76 <xQueueSemaphoreTake>
    25fe:	6f ef       	ldi	r22, 0xFF	; 255
    2600:	7f ef       	ldi	r23, 0xFF	; 255
	xSemaphoreTake( tempHumSemaphore, portMAX_DELAY );
    2602:	80 91 7d 0a 	lds	r24, 0x0A7D	; 0x800a7d <tempHumSemaphore>
    2606:	90 91 7e 0a 	lds	r25, 0x0A7E	; 0x800a7e <tempHumSemaphore+0x1>
    260a:	0e 94 3b 07 	call	0xe76	; 0xe76 <xQueueSemaphoreTake>
    260e:	6f ef       	ldi	r22, 0xFF	; 255
    2610:	7f ef       	ldi	r23, 0xFF	; 255
	xSemaphoreTake( loraSemaphore, portMAX_DELAY );
    2612:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <loraSemaphore>
    2616:	90 91 82 0a 	lds	r25, 0x0A82	; 0x800a82 <loraSemaphore+0x1>
    261a:	0e 94 3b 07 	call	0xe76	; 0xe76 <xQueueSemaphoreTake>
	
	// tasks
	create_tasks();
    261e:	bb d1       	rcall	.+886    	; 0x2996 <create_tasks>
    2620:	c3 d8       	rcall	.-3706   	; 0x17a8 <vTaskStartScheduler>
	
	vTaskStartScheduler(); // initialize and run the freeRTOS scheduler. Execution should never return here.
    2622:	ff cf       	rjmp	.-2      	; 0x2622 <main+0x4a>

00002624 <lora_init>:

//static char _out_buf[100];

void lora_init() 
{		
		hal_create(LORA_INIT_TASK_PRIORITY+1);
    2624:	88 e0       	ldi	r24, 0x08	; 8
    2626:	67 d3       	rcall	.+1742   	; 0x2cf6 <hal_create>
		lora_driver_create(ser_USART1);
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	50 c6       	rjmp	.+3232   	; 0x32cc <lora_driver_create>
    262c:	08 95       	ret

0000262e <lora_start>:
}


void lora_start()
{
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
	e_LoRa_return_code_t rc;
	
	lora_driver_reset_rn2483(1);
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	87 d6       	rcall	.+3342   	; 0x3344 <lora_driver_reset_rn2483>
	vTaskDelay(2);
    2636:	82 e0       	ldi	r24, 0x02	; 2
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	30 da       	rcall	.-2976   	; 0x1a9c <vTaskDelay>
	lora_driver_reset_rn2483(0);
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	82 d6       	rcall	.+3332   	; 0x3344 <lora_driver_reset_rn2483>
	vTaskDelay(150);
    2640:	86 e9       	ldi	r24, 0x96	; 150
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	2b da       	rcall	.-2986   	; 0x1a9c <vTaskDelay>
	
	if (lora_driver_rn2483_factory_reset() != LoRA_OK)
    2646:	92 d6       	rcall	.+3364   	; 0x336c <lora_driver_rn2483_factory_reset>
    2648:	88 23       	and	r24, r24
    264a:	21 f0       	breq	.+8      	; 0x2654 <lora_start+0x26>
    264c:	8c e8       	ldi	r24, 0x8C	; 140
	{
		printf("FACTORY_RESET_FAILURE \n");
    264e:	92 e0       	ldi	r25, 0x02	; 2
    2650:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <puts>
	}
		
	vTaskDelay(150);
    2654:	86 e9       	ldi	r24, 0x96	; 150
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	21 da       	rcall	.-3006   	; 0x1a9c <vTaskDelay>

	if (lora_driver_configure_to_eu868() != LoRA_OK)
    265a:	b5 d7       	rcall	.+3946   	; 0x35c6 <lora_driver_configure_to_eu868>
    265c:	88 23       	and	r24, r24
    265e:	21 f0       	breq	.+8      	; 0x2668 <lora_start+0x3a>
		printf("CONFIGURE_BREAK \n");
    2660:	83 ea       	ldi	r24, 0xA3	; 163
    2662:	92 e0       	ldi	r25, 0x02	; 2
    2664:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <puts>
		
	// It is static to avoid it to occupy stack space in the task
	static char dev_eui[17];
	if (lora_driver_get_rn2483_hweui(dev_eui) != LoRA_OK)
    2668:	8c e0       	ldi	r24, 0x0C	; 12
    266a:	99 e0       	ldi	r25, 0x09	; 9
    266c:	91 d6       	rcall	.+3362   	; 0x3390 <lora_driver_get_rn2483_hweui>
    266e:	88 23       	and	r24, r24
    2670:	29 f0       	breq	.+10     	; 0x267c <lora_start+0x4e>
    2672:	84 eb       	ldi	r24, 0xB4	; 180
	{
		printf("HWUI_ERROR \n");
    2674:	92 e0       	ldi	r25, 0x02	; 2
    2676:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <puts>
    267a:	0e c0       	rjmp	.+28     	; 0x2698 <lora_start+0x6a>
    267c:	8c e0       	ldi	r24, 0x0C	; 12
	}	
	else 
		printf("%s, DEV_EUI \n",dev_eui);
    267e:	99 e0       	ldi	r25, 0x09	; 9
    2680:	9f 93       	push	r25
    2682:	8f 93       	push	r24
    2684:	80 ec       	ldi	r24, 0xC0	; 192
    2686:	92 e0       	ldi	r25, 0x02	; 2
    2688:	9f 93       	push	r25
    268a:	8f 93       	push	r24
    268c:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	0f 90       	pop	r0
    2698:	4c e0       	ldi	r20, 0x0C	; 12

	if (lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,dev_eui) != LoRA_OK)
    269a:	59 e0       	ldi	r21, 0x09	; 9
    269c:	6e ec       	ldi	r22, 0xCE	; 206
    269e:	72 e0       	ldi	r23, 0x02	; 2
    26a0:	8f ee       	ldi	r24, 0xEF	; 239
    26a2:	92 e0       	ldi	r25, 0x02	; 2
    26a4:	0e 94 c1 1b 	call	0x3782	; 0x3782 <lora_driver_set_otaa_identity>
    26a8:	88 23       	and	r24, r24
    26aa:	21 f0       	breq	.+8      	; 0x26b4 <lora_start+0x86>
	{
		printf("IDENTITY_BREAK \n");
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	93 e0       	ldi	r25, 0x03	; 3
    26b0:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <puts>
	}
	
	if ((rc=lora_driver_join(LoRa_OTAA)) == LoRa_ACCEPTED)
    26b4:	80 e0       	ldi	r24, 0x00	; 0
    26b6:	c1 d6       	rcall	.+3458   	; 0x343a <lora_driver_join>
    26b8:	88 30       	cpi	r24, 0x08	; 8
    26ba:	29 f4       	brne	.+10     	; 0x26c6 <lora_start+0x98>
    26bc:	80 e1       	ldi	r24, 0x10	; 16
	{
		printf("LORA_ACCEPTED \n");
    26be:	93 e0       	ldi	r25, 0x03	; 3
    26c0:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <puts>
    26c4:	13 c0       	rjmp	.+38     	; 0x26ec <lora_start+0xbe>
	}
	else if(rc==7) 
    26c6:	87 30       	cpi	r24, 0x07	; 7
    26c8:	89 f4       	brne	.+34     	; 0x26ec <lora_start+0xbe>
    26ca:	c5 e0       	ldi	r28, 0x05	; 5
    26cc:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for (int i = 0; i < 5; ++i)
		{
			rc=lora_driver_join(LoRa_OTAA);
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	b4 d6       	rcall	.+3432   	; 0x343a <lora_driver_join>
    26d2:	87 30       	cpi	r24, 0x07	; 7
			if(rc==7)
    26d4:	39 f4       	brne	.+14     	; 0x26e4 <lora_start+0xb6>
    26d6:	8f e1       	ldi	r24, 0x1F	; 31
			{
				printf("LORA_DENIED\n");
    26d8:	93 e0       	ldi	r25, 0x03	; 3
    26da:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <puts>
    26de:	21 97       	sbiw	r28, 0x01	; 1
    26e0:	b1 f7       	brne	.-20     	; 0x26ce <lora_start+0xa0>
	{
		printf("LORA_ACCEPTED \n");
	}
	else if(rc==7) 
	{
		for (int i = 0; i < 5; ++i)
    26e2:	04 c0       	rjmp	.+8      	; 0x26ec <lora_start+0xbe>
    26e4:	8b e2       	ldi	r24, 0x2B	; 43
				printf("LORA_DENIED\n");
				continue;
			}
			else
			{
				printf("LORA_ACCEPTED\n");
    26e6:	93 e0       	ldi	r25, 0x03	; 3
    26e8:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <puts>
    26ec:	df 91       	pop	r29
				break;
			}
		}
	}
	// total delay 0seconds 302ticks
}
    26ee:	cf 91       	pop	r28
    26f0:	08 95       	ret

000026f2 <lora_send_data>:
    26f2:	ef 92       	push	r14

void lora_send_data()
{
    26f4:	ff 92       	push	r15
    26f6:	0f 93       	push	r16
    26f8:	1f 93       	push	r17
    26fa:	cf 93       	push	r28
    26fc:	df 93       	push	r29
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
    2702:	66 97       	sbiw	r28, 0x16	; 22
    2704:	0f b6       	in	r0, 0x3f	; 63
    2706:	f8 94       	cli
    2708:	de bf       	out	0x3e, r29	; 62
    270a:	0f be       	out	0x3f, r0	; 63
    270c:	cd bf       	out	0x3d, r28	; 61
				break;
			}
		}
	}*/
	
	vTaskDelay(100/portTICK_PERIOD_MS);
    270e:	86 e0       	ldi	r24, 0x06	; 6
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	c4 d9       	rcall	.-3192   	; 0x1a9c <vTaskDelay>
	
	lora_driver_flush_buffers(); // get rid of first version string from module after reset!
    2714:	d4 d5       	rcall	.+2984   	; 0x32be <lora_driver_flush_buffers>
    2716:	86 e0       	ldi	r24, 0x06	; 6

	vTaskDelay(100/portTICK_PERIOD_MS);
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	c0 d9       	rcall	.-3200   	; 0x1a9c <vTaskDelay>
	// Some dummy payload
	uint16_t hum = hum_get_value(); // Dummy humidity
    271c:	ea d2       	rcall	.+1492   	; 0x2cf2 <hum_get_value>
    271e:	f8 2e       	mov	r15, r24
    2720:	e9 2e       	mov	r14, r25
	int16_t temp = temp_get_value(); // Dummy temp
    2722:	e5 d2       	rcall	.+1482   	; 0x2cee <temp_get_value>
    2724:	18 2f       	mov	r17, r24
    2726:	09 2f       	mov	r16, r25
    2728:	0e 94 4c 02 	call	0x498	; 0x498 <co2_get_value>
	uint16_t co2_ppm = co2_get_value(); // Dummy CO2
    272c:	26 e0       	ldi	r18, 0x06	; 6

	lora_payload_t uplink_payload;
	
	uplink_payload.len = 6;
    272e:	2a 83       	std	Y+2, r18	; 0x02
    2730:	21 e0       	ldi	r18, 0x01	; 1
	uplink_payload.port_no = 1; 
    2732:	29 83       	std	Y+1, r18	; 0x01
    2734:	eb 82       	std	Y+3, r14	; 0x03
	
	uplink_payload.bytes[0] = hum >> 8;
    2736:	fc 82       	std	Y+4, r15	; 0x04
	uplink_payload.bytes[1] = hum & 0xFF;
    2738:	0d 83       	std	Y+5, r16	; 0x05
	uplink_payload.bytes[2] = temp >> 8;
    273a:	1e 83       	std	Y+6, r17	; 0x06
	uplink_payload.bytes[3] = temp & 0xFF;
    273c:	9f 83       	std	Y+7, r25	; 0x07
	uplink_payload.bytes[4] = co2_ppm >> 8;
    273e:	88 87       	std	Y+8, r24	; 0x08
	uplink_payload.bytes[5] = co2_ppm & 0xFF;
	
	if ((rc = lora_driver_sent_upload_message(false, &uplink_payload)) == LoRa_MAC_TX_OK )
    2740:	be 01       	movw	r22, r28
    2742:	6f 5f       	subi	r22, 0xFF	; 255
    2744:	7f 4f       	sbci	r23, 0xFF	; 255
    2746:	80 e0       	ldi	r24, 0x00	; 0
    2748:	9b d6       	rcall	.+3382   	; 0x3480 <lora_driver_sent_upload_message>
    274a:	93 ef       	ldi	r25, 0xF3	; 243
    274c:	98 0f       	add	r25, r24
    274e:	92 30       	cpi	r25, 0x02	; 2
    2750:	e8 f0       	brcs	.+58     	; 0x278c <lora_send_data+0x9a>
    2752:	81 11       	cpse	r24, r1
	}
	else if (rc == LoRa_MAC_RX_OK)
	{
		// The uplink message is sent and a downlink message is received
	}
	else if (rc == LoRA_OK)
    2754:	0d c0       	rjmp	.+26     	; 0x2770 <lora_send_data+0x7e>
    2756:	1f 92       	push	r1
	{
		// everything went ok, message sent
		printf("Return code (Send upload message) -> %i ",rc); 
    2758:	1f 92       	push	r1
    275a:	89 e3       	ldi	r24, 0x39	; 57
    275c:	93 e0       	ldi	r25, 0x03	; 3
    275e:	9f 93       	push	r25
    2760:	8f 93       	push	r24
    2762:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	0e c0       	rjmp	.+28     	; 0x278c <lora_send_data+0x9a>
    2770:	0e 94 e2 1b 	call	0x37c4	; 0x37c4 <lora_driver_map_return_code_to_text>
	}
	else 
		printf(">%s<", lora_driver_map_return_code_to_text(rc));
    2774:	9f 93       	push	r25
    2776:	8f 93       	push	r24
    2778:	82 e6       	ldi	r24, 0x62	; 98
    277a:	93 e0       	ldi	r25, 0x03	; 3
    277c:	9f 93       	push	r25
    277e:	8f 93       	push	r24
    2780:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	66 96       	adiw	r28, 0x16	; 22
	// total delay 0seconds 500ticks
    278e:	0f b6       	in	r0, 0x3f	; 63
    2790:	f8 94       	cli
    2792:	de bf       	out	0x3e, r29	; 62
    2794:	0f be       	out	0x3f, r0	; 63
    2796:	cd bf       	out	0x3d, r28	; 61
    2798:	df 91       	pop	r29
    279a:	cf 91       	pop	r28
    279c:	1f 91       	pop	r17
    279e:	0f 91       	pop	r16
    27a0:	ff 90       	pop	r15
    27a2:	ef 90       	pop	r14
    27a4:	08 95       	ret

000027a6 <semaphores_init>:
#include "mySemaphores.h"

void semaphores_init() {
	
		cycleSemaphore = xSemaphoreCreateMutex();
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <xQueueCreateMutex>
    27ac:	90 93 92 0a 	sts	0x0A92, r25	; 0x800a92 <cycleSemaphore+0x1>
    27b0:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <cycleSemaphore>
		if( cycleSemaphore == NULL )
    27b4:	89 2b       	or	r24, r25
    27b6:	39 f4       	brne	.+14     	; 0x27c6 <semaphores_init+0x20>
			cycleSemaphore = xSemaphoreCreateMutex();	// try one more time
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	0e 94 62 06 	call	0xcc4	; 0xcc4 <xQueueCreateMutex>
    27be:	90 93 92 0a 	sts	0x0A92, r25	; 0x800a92 <cycleSemaphore+0x1>
    27c2:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <cycleSemaphore>
	
		co2Semaphore = xSemaphoreCreateMutex();
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <xQueueCreateMutex>
    27cc:	90 93 84 0a 	sts	0x0A84, r25	; 0x800a84 <co2Semaphore+0x1>
    27d0:	80 93 83 0a 	sts	0x0A83, r24	; 0x800a83 <co2Semaphore>
		if( co2Semaphore == NULL )
    27d4:	89 2b       	or	r24, r25
    27d6:	39 f4       	brne	.+14     	; 0x27e6 <semaphores_init+0x40>
			co2Semaphore = xSemaphoreCreateMutex();		// try one more time
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	0e 94 62 06 	call	0xcc4	; 0xcc4 <xQueueCreateMutex>
    27de:	90 93 84 0a 	sts	0x0A84, r25	; 0x800a84 <co2Semaphore+0x1>
    27e2:	80 93 83 0a 	sts	0x0A83, r24	; 0x800a83 <co2Semaphore>
				
		tempHumSemaphore = xSemaphoreCreateMutex();	
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	0e 94 62 06 	call	0xcc4	; 0xcc4 <xQueueCreateMutex>
    27ec:	90 93 7e 0a 	sts	0x0A7E, r25	; 0x800a7e <tempHumSemaphore+0x1>
    27f0:	80 93 7d 0a 	sts	0x0A7D, r24	; 0x800a7d <tempHumSemaphore>
		if( tempHumSemaphore == NULL )
    27f4:	89 2b       	or	r24, r25
    27f6:	39 f4       	brne	.+14     	; 0x2806 <semaphores_init+0x60>
			tempHumSemaphore = xSemaphoreCreateMutex();	// try one more time
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	0e 94 62 06 	call	0xcc4	; 0xcc4 <xQueueCreateMutex>
    27fe:	90 93 7e 0a 	sts	0x0A7E, r25	; 0x800a7e <tempHumSemaphore+0x1>
    2802:	80 93 7d 0a 	sts	0x0A7D, r24	; 0x800a7d <tempHumSemaphore>
		
		loraSemaphore = xSemaphoreCreateMutex();	
    2806:	81 e0       	ldi	r24, 0x01	; 1
    2808:	0e 94 62 06 	call	0xcc4	; 0xcc4 <xQueueCreateMutex>
    280c:	90 93 82 0a 	sts	0x0A82, r25	; 0x800a82 <loraSemaphore+0x1>
    2810:	80 93 81 0a 	sts	0x0A81, r24	; 0x800a81 <loraSemaphore>
		if( loraSemaphore == NULL )
    2814:	89 2b       	or	r24, r25
    2816:	39 f4       	brne	.+14     	; 0x2826 <semaphores_init+0x80>
			loraSemaphore = xSemaphoreCreateMutex();	// try one more time
    2818:	81 e0       	ldi	r24, 0x01	; 1
    281a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <xQueueCreateMutex>
    281e:	90 93 82 0a 	sts	0x0A82, r25	; 0x800a82 <loraSemaphore+0x1>
    2822:	80 93 81 0a 	sts	0x0A81, r24	; 0x800a81 <loraSemaphore>
		
		queueSemaphore = xSemaphoreCreateMutex();
    2826:	81 e0       	ldi	r24, 0x01	; 1
    2828:	0e 94 62 06 	call	0xcc4	; 0xcc4 <xQueueCreateMutex>
    282c:	90 93 8a 0a 	sts	0x0A8A, r25	; 0x800a8a <queueSemaphore+0x1>
    2830:	80 93 89 0a 	sts	0x0A89, r24	; 0x800a89 <queueSemaphore>
		if( queueSemaphore == NULL )
    2834:	89 2b       	or	r24, r25
    2836:	39 f4       	brne	.+14     	; 0x2846 <semaphores_init+0xa0>
			queueSemaphore = xSemaphoreCreateMutex();	// try one more time
    2838:	81 e0       	ldi	r24, 0x01	; 1
    283a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <xQueueCreateMutex>
    283e:	90 93 8a 0a 	sts	0x0A8A, r25	; 0x800a8a <queueSemaphore+0x1>
    2842:	80 93 89 0a 	sts	0x0A89, r24	; 0x800a89 <queueSemaphore>
    2846:	08 95       	ret

00002848 <start_cycle_task>:
	// remove compiler warnings
	( void )pvParameters;
	
	while(1)
	{
		if( xSemaphoreTake( cycleSemaphore, portMAX_DELAY ) == pdTRUE )
    2848:	6f ef       	ldi	r22, 0xFF	; 255
    284a:	7f ef       	ldi	r23, 0xFF	; 255
    284c:	80 91 91 0a 	lds	r24, 0x0A91	; 0x800a91 <cycleSemaphore>
    2850:	90 91 92 0a 	lds	r25, 0x0A92	; 0x800a92 <cycleSemaphore+0x1>
    2854:	0e 94 3b 07 	call	0xe76	; 0xe76 <xQueueSemaphoreTake>
    2858:	81 30       	cpi	r24, 0x01	; 1
    285a:	b1 f7       	brne	.-20     	; 0x2848 <start_cycle_task>
		{		
			// start first timer
			if( xTimerReset( co2Timer, 0 ) != pdTRUE)
    285c:	0e 94 0d 0c 	call	0x181a	; 0x181a <xTaskGetTickCount>
    2860:	00 e0       	ldi	r16, 0x00	; 0
    2862:	10 e0       	ldi	r17, 0x00	; 0
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	ac 01       	movw	r20, r24
    286a:	62 e0       	ldi	r22, 0x02	; 2
    286c:	80 91 79 0a 	lds	r24, 0x0A79	; 0x800a79 <co2Timer>
    2870:	90 91 7a 0a 	lds	r25, 0x0A7A	; 0x800a7a <co2Timer+0x1>
    2874:	e1 dd       	rcall	.-1086   	; 0x2438 <xTimerGenericCommand>
    2876:	81 30       	cpi	r24, 0x01	; 1
    2878:	59 f0       	breq	.+22     	; 0x2890 <start_cycle_task+0x48>
				xTimerStart( co2Timer,0 );
    287a:	0e 94 0d 0c 	call	0x181a	; 0x181a <xTaskGetTickCount>
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	ac 01       	movw	r20, r24
    2884:	61 e0       	ldi	r22, 0x01	; 1
    2886:	80 91 79 0a 	lds	r24, 0x0A79	; 0x800a79 <co2Timer>
    288a:	90 91 7a 0a 	lds	r25, 0x0A7A	; 0x800a7a <co2Timer+0x1>
    288e:	d4 dd       	rcall	.-1112   	; 0x2438 <xTimerGenericCommand>
			
			xSemaphoreGive( cycleSemaphore );
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	50 e0       	ldi	r21, 0x00	; 0
    2896:	60 e0       	ldi	r22, 0x00	; 0
    2898:	70 e0       	ldi	r23, 0x00	; 0
    289a:	80 91 91 0a 	lds	r24, 0x0A91	; 0x800a91 <cycleSemaphore>
    289e:	90 91 92 0a 	lds	r25, 0x0A92	; 0x800a92 <cycleSemaphore+0x1>
    28a2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
			// do not run for 9 minutes
			// cycle semaphore should be taken after 7 minutes
			//vTaskDelay( 9 * 60 * ( 1000 / portTICK_PERIOD_MS ));
			vTaskDelay( 55000 / portTICK_PERIOD_MS );
    28a6:	8d e6       	ldi	r24, 0x6D	; 109
    28a8:	9d e0       	ldi	r25, 0x0D	; 13
    28aa:	f8 d8       	rcall	.-3600   	; 0x1a9c <vTaskDelay>
    28ac:	cd cf       	rjmp	.-102    	; 0x2848 <start_cycle_task>

000028ae <co2_measure_task>:
	{
		if( xSemaphoreTake ( co2Semaphore, portMAX_DELAY ) == pdTRUE ) 
		{
			co2_measure();
			// add measure to queue
			printf("co2 task");
    28ae:	c7 e6       	ldi	r28, 0x67	; 103
    28b0:	d3 e0       	ldi	r29, 0x03	; 3
	// remove compiler warnings
	( void )pvParameters;
	
	while(1) 
	{
		if( xSemaphoreTake ( co2Semaphore, portMAX_DELAY ) == pdTRUE ) 
    28b2:	6f ef       	ldi	r22, 0xFF	; 255
    28b4:	7f ef       	ldi	r23, 0xFF	; 255
    28b6:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <co2Semaphore>
    28ba:	90 91 84 0a 	lds	r25, 0x0A84	; 0x800a84 <co2Semaphore+0x1>
    28be:	0e 94 3b 07 	call	0xe76	; 0xe76 <xQueueSemaphoreTake>
    28c2:	81 30       	cpi	r24, 0x01	; 1
    28c4:	b1 f7       	brne	.-20     	; 0x28b2 <co2_measure_task+0x4>
		{
			co2_measure();
    28c6:	0e 94 3f 02 	call	0x47e	; 0x47e <co2_measure>
			// add measure to queue
			printf("co2 task");
    28ca:	df 93       	push	r29
    28cc:	cf 93       	push	r28
    28ce:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
			vTaskDelay( 100 );
    28d2:	84 e6       	ldi	r24, 0x64	; 100
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	e2 d8       	rcall	.-3644   	; 0x1a9c <vTaskDelay>
			
			xSemaphoreGive( co2Semaphore );
    28d8:	20 e0       	ldi	r18, 0x00	; 0
    28da:	40 e0       	ldi	r20, 0x00	; 0
    28dc:	50 e0       	ldi	r21, 0x00	; 0
    28de:	60 e0       	ldi	r22, 0x00	; 0
    28e0:	70 e0       	ldi	r23, 0x00	; 0
    28e2:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <co2Semaphore>
    28e6:	90 91 84 0a 	lds	r25, 0x0A84	; 0x800a84 <co2Semaphore+0x1>
    28ea:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
			vTaskDelay( 15000 / portTICK_PERIOD_MS );
    28ee:	89 ea       	ldi	r24, 0xA9	; 169
    28f0:	93 e0       	ldi	r25, 0x03	; 3
    28f2:	d4 d8       	rcall	.-3672   	; 0x1a9c <vTaskDelay>
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	dc cf       	rjmp	.-72     	; 0x28b2 <co2_measure_task+0x4>

000028fa <temp_hum_measure_task>:
		if( xSemaphoreTake( tempHumSemaphore, portMAX_DELAY ) == pdTRUE ) 
		{
			temp_hum_measure();
			// add values to queue
			
			printf("temp hum task");
    28fa:	c0 e7       	ldi	r28, 0x70	; 112
    28fc:	d3 e0       	ldi	r29, 0x03	; 3
	// remove compiler warnings
	( void )pvParameters;
	
	while(1) 
	{
		if( xSemaphoreTake( tempHumSemaphore, portMAX_DELAY ) == pdTRUE ) 
    28fe:	6f ef       	ldi	r22, 0xFF	; 255
    2900:	7f ef       	ldi	r23, 0xFF	; 255
    2902:	80 91 7d 0a 	lds	r24, 0x0A7D	; 0x800a7d <tempHumSemaphore>
    2906:	90 91 7e 0a 	lds	r25, 0x0A7E	; 0x800a7e <tempHumSemaphore+0x1>
    290a:	0e 94 3b 07 	call	0xe76	; 0xe76 <xQueueSemaphoreTake>
    290e:	81 30       	cpi	r24, 0x01	; 1
    2910:	b1 f7       	brne	.-20     	; 0x28fe <temp_hum_measure_task+0x4>
		{
			temp_hum_measure();
    2912:	c2 d1       	rcall	.+900    	; 0x2c98 <temp_hum_measure>
			// add values to queue
			
			printf("temp hum task");
    2914:	df 93       	push	r29
    2916:	cf 93       	push	r28
    2918:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
			vTaskDelay( 100 );
    291c:	84 e6       	ldi	r24, 0x64	; 100
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	bd d8       	rcall	.-3718   	; 0x1a9c <vTaskDelay>
			
			xSemaphoreGive( tempHumSemaphore );
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	50 e0       	ldi	r21, 0x00	; 0
    2928:	60 e0       	ldi	r22, 0x00	; 0
    292a:	70 e0       	ldi	r23, 0x00	; 0
    292c:	80 91 7d 0a 	lds	r24, 0x0A7D	; 0x800a7d <tempHumSemaphore>
    2930:	90 91 7e 0a 	lds	r25, 0x0A7E	; 0x800a7e <tempHumSemaphore+0x1>
    2934:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
			vTaskDelay( 15000 / portTICK_PERIOD_MS );
    2938:	89 ea       	ldi	r24, 0xA9	; 169
    293a:	93 e0       	ldi	r25, 0x03	; 3
    293c:	af d8       	rcall	.-3746   	; 0x1a9c <vTaskDelay>
    293e:	0f 90       	pop	r0
    2940:	0f 90       	pop	r0
    2942:	dd cf       	rjmp	.-70     	; 0x28fe <temp_hum_measure_task+0x4>

00002944 <lora_send_data_task>:
void lora_send_data_task( void *pvParameters ) 
{
	// remove compiler warnings
	( void )pvParameters;
	
	lora_start();
    2944:	74 de       	rcall	.-792    	; 0x262e <lora_start>
	vTaskDelay(100/portTICK_PERIOD_MS);
    2946:	86 e0       	ldi	r24, 0x06	; 6
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	a8 d8       	rcall	.-3760   	; 0x1a9c <vTaskDelay>
	while(1)
	{
		if( xSemaphoreTake( loraSemaphore, portMAX_DELAY ) == pdTRUE )
		{
			lora_send_data();
			printf("lora task");
    294c:	ce e7       	ldi	r28, 0x7E	; 126
    294e:	d3 e0       	ldi	r29, 0x03	; 3
	lora_start();
	vTaskDelay(100/portTICK_PERIOD_MS);
	
	while(1)
	{
		if( xSemaphoreTake( loraSemaphore, portMAX_DELAY ) == pdTRUE )
    2950:	6f ef       	ldi	r22, 0xFF	; 255
    2952:	7f ef       	ldi	r23, 0xFF	; 255
    2954:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <loraSemaphore>
    2958:	90 91 82 0a 	lds	r25, 0x0A82	; 0x800a82 <loraSemaphore+0x1>
    295c:	0e 94 3b 07 	call	0xe76	; 0xe76 <xQueueSemaphoreTake>
    2960:	81 30       	cpi	r24, 0x01	; 1
		{
			lora_send_data();
    2962:	b1 f7       	brne	.-20     	; 0x2950 <lora_send_data_task+0xc>
    2964:	c6 de       	rcall	.-628    	; 0x26f2 <lora_send_data>
			printf("lora task");
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
			vTaskDelay( 100 );
    296e:	84 e6       	ldi	r24, 0x64	; 100
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	94 d8       	rcall	.-3800   	; 0x1a9c <vTaskDelay>
			
			xSemaphoreGive( loraSemaphore );
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	50 e0       	ldi	r21, 0x00	; 0
    297a:	60 e0       	ldi	r22, 0x00	; 0
    297c:	70 e0       	ldi	r23, 0x00	; 0
    297e:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <loraSemaphore>
    2982:	90 91 82 0a 	lds	r25, 0x0A82	; 0x800a82 <loraSemaphore+0x1>
    2986:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
			vTaskDelay( 30000 / portTICK_PERIOD_MS );
    298a:	83 e5       	ldi	r24, 0x53	; 83
    298c:	97 e0       	ldi	r25, 0x07	; 7
    298e:	86 d8       	rcall	.-3828   	; 0x1a9c <vTaskDelay>
    2990:	0f 90       	pop	r0
    2992:	0f 90       	pop	r0
    2994:	dd cf       	rjmp	.-70     	; 0x2950 <lora_send_data_task+0xc>

00002996 <create_tasks>:
#include "myTasks.h"

void create_tasks(void) {
    2996:	ef 92       	push	r14
    2998:	ff 92       	push	r15
    299a:	0f 93       	push	r16
	
	xTaskCreate(
    299c:	0f 2e       	mov	r0, r31
    299e:	f7 e8       	ldi	r31, 0x87	; 135
    29a0:	ef 2e       	mov	r14, r31
    29a2:	fa e0       	ldi	r31, 0x0A	; 10
    29a4:	ff 2e       	mov	r15, r31
    29a6:	f0 2d       	mov	r31, r0
    29a8:	03 e0       	ldi	r16, 0x03	; 3
    29aa:	21 e0       	ldi	r18, 0x01	; 1
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 ec       	ldi	r20, 0xC0	; 192
    29b0:	50 e0       	ldi	r21, 0x00	; 0
    29b2:	68 e8       	ldi	r22, 0x88	; 136
    29b4:	73 e0       	ldi	r23, 0x03	; 3
    29b6:	84 e2       	ldi	r24, 0x24	; 36
    29b8:	94 e1       	ldi	r25, 0x14	; 20
    29ba:	0e 94 b6 0a 	call	0x156c	; 0x156c <xTaskCreate>
		(void*) 1,
		configMAX_PRIORITIES - 1,
		&startCycleTaskHandler
	);
		
	xTaskCreate(
    29be:	0f 2e       	mov	r0, r31
    29c0:	fd e8       	ldi	r31, 0x8D	; 141
    29c2:	ef 2e       	mov	r14, r31
    29c4:	fa e0       	ldi	r31, 0x0A	; 10
    29c6:	ff 2e       	mov	r15, r31
    29c8:	f0 2d       	mov	r31, r0
    29ca:	02 e0       	ldi	r16, 0x02	; 2
    29cc:	21 e0       	ldi	r18, 0x01	; 1
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	40 ec       	ldi	r20, 0xC0	; 192
    29d2:	50 e0       	ldi	r21, 0x00	; 0
    29d4:	69 e9       	ldi	r22, 0x99	; 153
    29d6:	73 e0       	ldi	r23, 0x03	; 3
    29d8:	87 e5       	ldi	r24, 0x57	; 87
    29da:	94 e1       	ldi	r25, 0x14	; 20
    29dc:	0e 94 b6 0a 	call	0x156c	; 0x156c <xTaskCreate>
		(void*) 1,
		configMAX_PRIORITIES - 2,
		&co2MeasureTask
	);	
	
	xTaskCreate(
    29e0:	0f 2e       	mov	r0, r31
    29e2:	fb e8       	ldi	r31, 0x8B	; 139
    29e4:	ef 2e       	mov	r14, r31
    29e6:	fa e0       	ldi	r31, 0x0A	; 10
    29e8:	ff 2e       	mov	r15, r31
    29ea:	f0 2d       	mov	r31, r0
    29ec:	21 e0       	ldi	r18, 0x01	; 1
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 ec       	ldi	r20, 0xC0	; 192
    29f2:	50 e0       	ldi	r21, 0x00	; 0
    29f4:	62 ea       	ldi	r22, 0xA2	; 162
    29f6:	73 e0       	ldi	r23, 0x03	; 3
    29f8:	8d e7       	ldi	r24, 0x7D	; 125
    29fa:	94 e1       	ldi	r25, 0x14	; 20
    29fc:	0e 94 b6 0a 	call	0x156c	; 0x156c <xTaskCreate>
		(void*) 1,
		configMAX_PRIORITIES - 2,
		&tempHumMeasureTask
	);
	
	xTaskCreate(
    2a00:	0f 2e       	mov	r0, r31
    2a02:	f5 e8       	ldi	r31, 0x85	; 133
    2a04:	ef 2e       	mov	r14, r31
    2a06:	fa e0       	ldi	r31, 0x0A	; 10
    2a08:	ff 2e       	mov	r15, r31
    2a0a:	f0 2d       	mov	r31, r0
    2a0c:	21 e0       	ldi	r18, 0x01	; 1
    2a0e:	30 e0       	ldi	r19, 0x00	; 0
    2a10:	40 ec       	ldi	r20, 0xC0	; 192
    2a12:	50 e0       	ldi	r21, 0x00	; 0
    2a14:	60 eb       	ldi	r22, 0xB0	; 176
    2a16:	73 e0       	ldi	r23, 0x03	; 3
    2a18:	82 ea       	ldi	r24, 0xA2	; 162
    2a1a:	94 e1       	ldi	r25, 0x14	; 20
    2a1c:	0e 94 b6 0a 	call	0x156c	; 0x156c <xTaskCreate>
		(void*) 1,
		configMAX_PRIORITIES - 2,
		&loraSendDataTask
	);

}
    2a20:	0f 91       	pop	r16
    2a22:	ff 90       	pop	r15
    2a24:	ef 90       	pop	r14
    2a26:	08 95       	ret

00002a28 <restart_cycle_timer_callback>:
	xTimerStart( restartCycleTimer, 0 );
}

void restart_cycle_timer_callback(TimerHandle_t pxTimer)
{
	printf("1m restart cycle callback");
    2a28:	8f eb       	ldi	r24, 0xBF	; 191
    2a2a:	93 e0       	ldi	r25, 0x03	; 3
    2a2c:	9f 93       	push	r25
    2a2e:	8f 93       	push	r24
    2a30:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
	if( xSemaphoreTake( loraSemaphore, portMAX_DELAY ) != pdTRUE )
    2a34:	6f ef       	ldi	r22, 0xFF	; 255
    2a36:	7f ef       	ldi	r23, 0xFF	; 255
    2a38:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <loraSemaphore>
    2a3c:	90 91 82 0a 	lds	r25, 0x0A82	; 0x800a82 <loraSemaphore+0x1>
    2a40:	0e 94 3b 07 	call	0xe76	; 0xe76 <xQueueSemaphoreTake>
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	81 30       	cpi	r24, 0x01	; 1
    2a4a:	41 f0       	breq	.+16     	; 0x2a5c <restart_cycle_timer_callback+0x34>
		printf("ERROR : LoRa semaphore not taken back.");
    2a4c:	89 ed       	ldi	r24, 0xD9	; 217
    2a4e:	93 e0       	ldi	r25, 0x03	; 3
    2a50:	9f 93       	push	r25
    2a52:	8f 93       	push	r24
    2a54:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
    2a58:	0f 90       	pop	r0
    2a5a:	0f 90       	pop	r0
	if( xSemaphoreGive( cycleSemaphore ) != pdTRUE )
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	40 e0       	ldi	r20, 0x00	; 0
    2a60:	50 e0       	ldi	r21, 0x00	; 0
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	70 e0       	ldi	r23, 0x00	; 0
    2a66:	80 91 91 0a 	lds	r24, 0x0A91	; 0x800a91 <cycleSemaphore>
    2a6a:	90 91 92 0a 	lds	r25, 0x0A92	; 0x800a92 <cycleSemaphore+0x1>
    2a6e:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
    2a72:	81 30       	cpi	r24, 0x01	; 1
    2a74:	41 f0       	breq	.+16     	; 0x2a86 <restart_cycle_timer_callback+0x5e>
		printf("ERROR : Cycle semaphore not given.");
    2a76:	80 e0       	ldi	r24, 0x00	; 0
    2a78:	94 e0       	ldi	r25, 0x04	; 4
    2a7a:	9f 93       	push	r25
    2a7c:	8f 93       	push	r24
    2a7e:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	08 95       	ret

00002a88 <co2_timer_callback>:
		restart_cycle_timer_callback
	);
}

void co2_timer_callback(TimerHandle_t pxTimer) 
{
    2a88:	0f 93       	push	r16
    2a8a:	1f 93       	push	r17
	printf("7m co2 callback");
    2a8c:	83 e2       	ldi	r24, 0x23	; 35
    2a8e:	94 e0       	ldi	r25, 0x04	; 4
    2a90:	9f 93       	push	r25
    2a92:	8f 93       	push	r24
    2a94:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
	if( xSemaphoreTake( cycleSemaphore, portMAX_DELAY ) != pdTRUE )
    2a98:	6f ef       	ldi	r22, 0xFF	; 255
    2a9a:	7f ef       	ldi	r23, 0xFF	; 255
    2a9c:	80 91 91 0a 	lds	r24, 0x0A91	; 0x800a91 <cycleSemaphore>
    2aa0:	90 91 92 0a 	lds	r25, 0x0A92	; 0x800a92 <cycleSemaphore+0x1>
    2aa4:	0e 94 3b 07 	call	0xe76	; 0xe76 <xQueueSemaphoreTake>
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	81 30       	cpi	r24, 0x01	; 1
    2aae:	41 f0       	breq	.+16     	; 0x2ac0 <co2_timer_callback+0x38>
		printf("ERROR : Cycle semaphore not taken back.");
    2ab0:	83 e3       	ldi	r24, 0x33	; 51
    2ab2:	94 e0       	ldi	r25, 0x04	; 4
    2ab4:	9f 93       	push	r25
    2ab6:	8f 93       	push	r24
    2ab8:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
	if( xSemaphoreGive( co2Semaphore ) != pdTRUE )
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	40 e0       	ldi	r20, 0x00	; 0
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	60 e0       	ldi	r22, 0x00	; 0
    2ac8:	70 e0       	ldi	r23, 0x00	; 0
    2aca:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <co2Semaphore>
    2ace:	90 91 84 0a 	lds	r25, 0x0A84	; 0x800a84 <co2Semaphore+0x1>
    2ad2:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
    2ad6:	81 30       	cpi	r24, 0x01	; 1
    2ad8:	41 f0       	breq	.+16     	; 0x2aea <co2_timer_callback+0x62>
		printf("ERROR : CO2 semaphore not given.");
    2ada:	8b e5       	ldi	r24, 0x5B	; 91
    2adc:	94 e0       	ldi	r25, 0x04	; 4
    2ade:	9f 93       	push	r25
    2ae0:	8f 93       	push	r24
    2ae2:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
	
	xTimerStart( tempHumTimer, 0 );
    2aea:	0e 94 0d 0c 	call	0x181a	; 0x181a <xTaskGetTickCount>
    2aee:	00 e0       	ldi	r16, 0x00	; 0
    2af0:	10 e0       	ldi	r17, 0x00	; 0
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	30 e0       	ldi	r19, 0x00	; 0
    2af6:	ac 01       	movw	r20, r24
    2af8:	61 e0       	ldi	r22, 0x01	; 1
    2afa:	80 91 7f 0a 	lds	r24, 0x0A7F	; 0x800a7f <tempHumTimer>
    2afe:	90 91 80 0a 	lds	r25, 0x0A80	; 0x800a80 <tempHumTimer+0x1>
    2b02:	9a dc       	rcall	.-1740   	; 0x2438 <xTimerGenericCommand>
}
    2b04:	1f 91       	pop	r17
    2b06:	0f 91       	pop	r16
    2b08:	08 95       	ret

00002b0a <temp_hum_timer_callback>:

void temp_hum_timer_callback(TimerHandle_t pxTimer)
{
    2b0a:	0f 93       	push	r16
    2b0c:	1f 93       	push	r17
	printf("1m temp_hum callback");
    2b0e:	8c e7       	ldi	r24, 0x7C	; 124
    2b10:	94 e0       	ldi	r25, 0x04	; 4
    2b12:	9f 93       	push	r25
    2b14:	8f 93       	push	r24
    2b16:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
	if( xSemaphoreTake( co2Semaphore, portMAX_DELAY ) != pdTRUE )
    2b1a:	6f ef       	ldi	r22, 0xFF	; 255
    2b1c:	7f ef       	ldi	r23, 0xFF	; 255
    2b1e:	80 91 83 0a 	lds	r24, 0x0A83	; 0x800a83 <co2Semaphore>
    2b22:	90 91 84 0a 	lds	r25, 0x0A84	; 0x800a84 <co2Semaphore+0x1>
    2b26:	0e 94 3b 07 	call	0xe76	; 0xe76 <xQueueSemaphoreTake>
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
    2b2e:	81 30       	cpi	r24, 0x01	; 1
    2b30:	41 f0       	breq	.+16     	; 0x2b42 <temp_hum_timer_callback+0x38>
		printf("ERROR : CO2 semaphore not taken back.");
    2b32:	81 e9       	ldi	r24, 0x91	; 145
    2b34:	94 e0       	ldi	r25, 0x04	; 4
    2b36:	9f 93       	push	r25
    2b38:	8f 93       	push	r24
    2b3a:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
    2b3e:	0f 90       	pop	r0
    2b40:	0f 90       	pop	r0
	if( xSemaphoreGive( tempHumSemaphore ) != pdTRUE )
    2b42:	20 e0       	ldi	r18, 0x00	; 0
    2b44:	40 e0       	ldi	r20, 0x00	; 0
    2b46:	50 e0       	ldi	r21, 0x00	; 0
    2b48:	60 e0       	ldi	r22, 0x00	; 0
    2b4a:	70 e0       	ldi	r23, 0x00	; 0
    2b4c:	80 91 7d 0a 	lds	r24, 0x0A7D	; 0x800a7d <tempHumSemaphore>
    2b50:	90 91 7e 0a 	lds	r25, 0x0A7E	; 0x800a7e <tempHumSemaphore+0x1>
    2b54:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
    2b58:	81 30       	cpi	r24, 0x01	; 1
    2b5a:	41 f0       	breq	.+16     	; 0x2b6c <temp_hum_timer_callback+0x62>
		printf("ERROR : TempHum semaphore not given.");
    2b5c:	87 eb       	ldi	r24, 0xB7	; 183
    2b5e:	94 e0       	ldi	r25, 0x04	; 4
    2b60:	9f 93       	push	r25
    2b62:	8f 93       	push	r24
    2b64:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
    2b68:	0f 90       	pop	r0
    2b6a:	0f 90       	pop	r0
	
	xTimerStart( loraTimer, 0 );
    2b6c:	0e 94 0d 0c 	call	0x181a	; 0x181a <xTaskGetTickCount>
    2b70:	00 e0       	ldi	r16, 0x00	; 0
    2b72:	10 e0       	ldi	r17, 0x00	; 0
    2b74:	20 e0       	ldi	r18, 0x00	; 0
    2b76:	30 e0       	ldi	r19, 0x00	; 0
    2b78:	ac 01       	movw	r20, r24
    2b7a:	61 e0       	ldi	r22, 0x01	; 1
    2b7c:	80 91 7b 0a 	lds	r24, 0x0A7B	; 0x800a7b <loraTimer>
    2b80:	90 91 7c 0a 	lds	r25, 0x0A7C	; 0x800a7c <loraTimer+0x1>
    2b84:	59 dc       	rcall	.-1870   	; 0x2438 <xTimerGenericCommand>
}
    2b86:	1f 91       	pop	r17
    2b88:	0f 91       	pop	r16
    2b8a:	08 95       	ret

00002b8c <lora_timer_callback>:

void lora_timer_callback(TimerHandle_t pxTimer) 
{
    2b8c:	0f 93       	push	r16
    2b8e:	1f 93       	push	r17
	printf("1m lora callback");
    2b90:	8c ed       	ldi	r24, 0xDC	; 220
    2b92:	94 e0       	ldi	r25, 0x04	; 4
    2b94:	9f 93       	push	r25
    2b96:	8f 93       	push	r24
    2b98:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
	if( xSemaphoreTake( tempHumSemaphore, portMAX_DELAY ) != pdTRUE )
    2b9c:	6f ef       	ldi	r22, 0xFF	; 255
    2b9e:	7f ef       	ldi	r23, 0xFF	; 255
    2ba0:	80 91 7d 0a 	lds	r24, 0x0A7D	; 0x800a7d <tempHumSemaphore>
    2ba4:	90 91 7e 0a 	lds	r25, 0x0A7E	; 0x800a7e <tempHumSemaphore+0x1>
    2ba8:	0e 94 3b 07 	call	0xe76	; 0xe76 <xQueueSemaphoreTake>
    2bac:	0f 90       	pop	r0
    2bae:	0f 90       	pop	r0
    2bb0:	81 30       	cpi	r24, 0x01	; 1
    2bb2:	41 f0       	breq	.+16     	; 0x2bc4 <lora_timer_callback+0x38>
		printf("ERROR : TempHum semaphore not taken back.");
    2bb4:	8d ee       	ldi	r24, 0xED	; 237
    2bb6:	94 e0       	ldi	r25, 0x04	; 4
    2bb8:	9f 93       	push	r25
    2bba:	8f 93       	push	r24
    2bbc:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
    2bc0:	0f 90       	pop	r0
    2bc2:	0f 90       	pop	r0
	if( xSemaphoreGive( loraSemaphore ) != pdTRUE )		
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	40 e0       	ldi	r20, 0x00	; 0
    2bc8:	50 e0       	ldi	r21, 0x00	; 0
    2bca:	60 e0       	ldi	r22, 0x00	; 0
    2bcc:	70 e0       	ldi	r23, 0x00	; 0
    2bce:	80 91 81 0a 	lds	r24, 0x0A81	; 0x800a81 <loraSemaphore>
    2bd2:	90 91 82 0a 	lds	r25, 0x0A82	; 0x800a82 <loraSemaphore+0x1>
    2bd6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <xQueueGenericSend>
    2bda:	81 30       	cpi	r24, 0x01	; 1
    2bdc:	41 f0       	breq	.+16     	; 0x2bee <lora_timer_callback+0x62>
		printf("ERROR : LoRa semaphore not given.");
    2bde:	87 e1       	ldi	r24, 0x17	; 23
    2be0:	95 e0       	ldi	r25, 0x05	; 5
    2be2:	9f 93       	push	r25
    2be4:	8f 93       	push	r24
    2be6:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
    2bea:	0f 90       	pop	r0
    2bec:	0f 90       	pop	r0
		
	xTimerStart( restartCycleTimer, 0 );
    2bee:	0e 94 0d 0c 	call	0x181a	; 0x181a <xTaskGetTickCount>
    2bf2:	00 e0       	ldi	r16, 0x00	; 0
    2bf4:	10 e0       	ldi	r17, 0x00	; 0
    2bf6:	20 e0       	ldi	r18, 0x00	; 0
    2bf8:	30 e0       	ldi	r19, 0x00	; 0
    2bfa:	ac 01       	movw	r20, r24
    2bfc:	61 e0       	ldi	r22, 0x01	; 1
    2bfe:	80 91 8f 0a 	lds	r24, 0x0A8F	; 0x800a8f <restartCycleTimer>
    2c02:	90 91 90 0a 	lds	r25, 0x0A90	; 0x800a90 <restartCycleTimer+0x1>
    2c06:	18 dc       	rcall	.-2000   	; 0x2438 <xTimerGenericCommand>
}
    2c08:	1f 91       	pop	r17
    2c0a:	0f 91       	pop	r16
    2c0c:	08 95       	ret

00002c0e <timers_init>:
#include "myTimers.h"
#include "mySemaphores.h"

void timers_init() 
{
    2c0e:	0f 93       	push	r16
    2c10:	1f 93       	push	r17
	// total 10 minute cycle
	// timers do not restart automatically 
	
	co2Timer = xTimerCreate(
    2c12:	04 e4       	ldi	r16, 0x44	; 68
    2c14:	15 e1       	ldi	r17, 0x15	; 21
    2c16:	20 e0       	ldi	r18, 0x00	; 0
    2c18:	30 e0       	ldi	r19, 0x00	; 0
    2c1a:	40 e0       	ldi	r20, 0x00	; 0
    2c1c:	66 ee       	ldi	r22, 0xE6	; 230
    2c1e:	7a e0       	ldi	r23, 0x0A	; 10
    2c20:	89 e3       	ldi	r24, 0x39	; 57
    2c22:	95 e0       	ldi	r25, 0x05	; 5
    2c24:	d3 db       	rcall	.-2138   	; 0x23cc <xTimerCreate>
    2c26:	90 93 7a 0a 	sts	0x0A7A, r25	; 0x800a7a <co2Timer+0x1>
    2c2a:	80 93 79 0a 	sts	0x0A79, r24	; 0x800a79 <co2Timer>
		pdFALSE,
		( void* ) 0,
		co2_timer_callback
	);
	
	tempHumTimer = xTimerCreate(
    2c2e:	05 e8       	ldi	r16, 0x85	; 133
    2c30:	15 e1       	ldi	r17, 0x15	; 21
    2c32:	21 e0       	ldi	r18, 0x01	; 1
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	40 e0       	ldi	r20, 0x00	; 0
    2c38:	66 e3       	ldi	r22, 0x36	; 54
    2c3a:	71 e0       	ldi	r23, 0x01	; 1
    2c3c:	83 e4       	ldi	r24, 0x43	; 67
    2c3e:	95 e0       	ldi	r25, 0x05	; 5
    2c40:	c5 db       	rcall	.-2166   	; 0x23cc <xTimerCreate>
    2c42:	90 93 80 0a 	sts	0x0A80, r25	; 0x800a80 <tempHumTimer+0x1>
    2c46:	80 93 7f 0a 	sts	0x0A7F, r24	; 0x800a7f <tempHumTimer>
		pdFALSE,
		( void* ) 1,
		temp_hum_timer_callback
	);
	
	loraTimer = xTimerCreate(
    2c4a:	06 ec       	ldi	r16, 0xC6	; 198
    2c4c:	15 e1       	ldi	r17, 0x15	; 21
    2c4e:	22 e0       	ldi	r18, 0x02	; 2
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	40 e0       	ldi	r20, 0x00	; 0
    2c54:	66 e3       	ldi	r22, 0x36	; 54
    2c56:	71 e0       	ldi	r23, 0x01	; 1
    2c58:	82 e5       	ldi	r24, 0x52	; 82
    2c5a:	95 e0       	ldi	r25, 0x05	; 5
    2c5c:	b7 db       	rcall	.-2194   	; 0x23cc <xTimerCreate>
    2c5e:	90 93 7c 0a 	sts	0x0A7C, r25	; 0x800a7c <loraTimer+0x1>
    2c62:	80 93 7b 0a 	sts	0x0A7B, r24	; 0x800a7b <loraTimer>
		pdFALSE,
		( void* ) 2,
		lora_timer_callback
	);
	
	restartCycleTimer = xTimerCreate(
    2c66:	04 e1       	ldi	r16, 0x14	; 20
    2c68:	15 e1       	ldi	r17, 0x15	; 21
    2c6a:	23 e0       	ldi	r18, 0x03	; 3
    2c6c:	30 e0       	ldi	r19, 0x00	; 0
    2c6e:	40 e0       	ldi	r20, 0x00	; 0
    2c70:	62 ea       	ldi	r22, 0xA2	; 162
    2c72:	73 e0       	ldi	r23, 0x03	; 3
    2c74:	8d e5       	ldi	r24, 0x5D	; 93
    2c76:	95 e0       	ldi	r25, 0x05	; 5
    2c78:	a9 db       	rcall	.-2222   	; 0x23cc <xTimerCreate>
    2c7a:	90 93 90 0a 	sts	0x0A90, r25	; 0x800a90 <restartCycleTimer+0x1>
    2c7e:	80 93 8f 0a 	sts	0x0A8F, r24	; 0x800a8f <restartCycleTimer>
		( 1000/portTICK_PERIOD_MS ) /** 60*/ * 15,	// 1 minute
		pdFALSE,
		( void* ) 3,
		restart_cycle_timer_callback
	);
}
    2c82:	1f 91       	pop	r17
    2c84:	0f 91       	pop	r16
    2c86:	08 95       	ret

00002c88 <temp_hum_sensor_init>:

// create drivers
void temp_hum_sensor_init() 
{	

	if ( HIH8120_OK == ( temp_rc = hih8120Create()) )
    2c88:	95 d0       	rcall	.+298    	; 0x2db4 <hih8120Create>
    2c8a:	81 11       	cpse	r24, r1
    2c8c:	04 c0       	rjmp	.+8      	; 0x2c96 <temp_hum_sensor_init+0xe>
	{
		printf("temp_hum_sensor_created \n");
    2c8e:	81 e7       	ldi	r24, 0x71	; 113
    2c90:	95 e0       	ldi	r25, 0x05	; 5
    2c92:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <puts>
    2c96:	08 95       	ret

00002c98 <temp_hum_measure>:
	/*while(!hih8120IsReady()){
		printf("not ready");
		vTaskDelay(1000/portTICK_PERIOD_MS);
	}*/
	//printf("temp sensor -> %d", temp_rc);
	vTaskDelay(1000/portTICK_PERIOD_MS);
    2c98:	8e e3       	ldi	r24, 0x3E	; 62
    2c9a:	90 e0       	ldi	r25, 0x00	; 0
    2c9c:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <vTaskDelay>
	if ( HIH8120_OK != ( rc = hih8120Wakeup() ))
    2ca0:	a1 d0       	rcall	.+322    	; 0x2de4 <hih8120Wakeup>
    2ca2:	88 23       	and	r24, r24
    2ca4:	61 f0       	breq	.+24     	; 0x2cbe <temp_hum_measure+0x26>
	{
		printf("temp_hum_SENSOR_ERROR --> %d", rc);
    2ca6:	1f 92       	push	r1
    2ca8:	8f 93       	push	r24
    2caa:	8a e8       	ldi	r24, 0x8A	; 138
    2cac:	95 e0       	ldi	r25, 0x05	; 5
    2cae:	9f 93       	push	r25
    2cb0:	8f 93       	push	r24
    2cb2:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
	}
	//printf("temp_hum_rc --> %d", rc);
	vTaskDelay(50/portTICK_PERIOD_MS);
    2cbe:	83 e0       	ldi	r24, 0x03	; 3
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <vTaskDelay>
	if ( HIH8120_OK != ( rc = hih8120Meassure()) )
    2cc6:	a3 d0       	rcall	.+326    	; 0x2e0e <hih8120Meassure>
    2cc8:	88 23       	and	r24, r24
    2cca:	61 f0       	breq	.+24     	; 0x2ce4 <temp_hum_measure+0x4c>
	{
		printf("temp_hum_SENSOR_ERROR1 --> %d", rc);
    2ccc:	1f 92       	push	r1
    2cce:	8f 93       	push	r24
    2cd0:	87 ea       	ldi	r24, 0xA7	; 167
    2cd2:	95 e0       	ldi	r25, 0x05	; 5
    2cd4:	9f 93       	push	r25
    2cd6:	8f 93       	push	r24
    2cd8:	0e 94 7a 26 	call	0x4cf4	; 0x4cf4 <printf>
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
	}
	//printf("temp_hum_rc --> %d", rc);
	vTaskDelay(1000/portTICK_PERIOD_MS);
    2ce4:	8e e3       	ldi	r24, 0x3E	; 62
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	0c 94 4e 0d 	jmp	0x1a9c	; 0x1a9c <vTaskDelay>
    2cec:	08 95       	ret

00002cee <temp_get_value>:




uint16_t temp_get_value() {
	return hih8120GetTemperature_x10();
    2cee:	db c0       	rjmp	.+438    	; 0x2ea6 <hih8120GetTemperature_x10>
}
    2cf0:	08 95       	ret

00002cf2 <hum_get_value>:

uint16_t hum_get_value() {
	return hih8120GetHumidityPercent_x10();
    2cf2:	b3 c0       	rjmp	.+358    	; 0x2e5a <hih8120GetHumidityPercent_x10>
}
    2cf4:	08 95       	ret

00002cf6 <hal_create>:
    2cf6:	e3 e9       	ldi	r30, 0x93	; 147
    2cf8:	fa e0       	ldi	r31, 0x0A	; 10
    2cfa:	23 e6       	ldi	r18, 0x63	; 99
    2cfc:	3c e1       	ldi	r19, 0x1C	; 28
    2cfe:	31 83       	std	Z+1, r19	; 0x01
    2d00:	20 83       	st	Z, r18
    2d02:	26 e6       	ldi	r18, 0x66	; 102
    2d04:	3c e1       	ldi	r19, 0x1C	; 28
    2d06:	33 83       	std	Z+3, r19	; 0x03
    2d08:	22 83       	std	Z+2, r18	; 0x02
    2d0a:	21 e7       	ldi	r18, 0x71	; 113
    2d0c:	3c e1       	ldi	r19, 0x1C	; 28
    2d0e:	35 83       	std	Z+5, r19	; 0x05
    2d10:	24 83       	std	Z+4, r18	; 0x04
    2d12:	25 e7       	ldi	r18, 0x75	; 117
    2d14:	3c e1       	ldi	r19, 0x1C	; 28
    2d16:	37 83       	std	Z+7, r19	; 0x07
    2d18:	26 83       	std	Z+6, r18	; 0x06
    2d1a:	2b e7       	ldi	r18, 0x7B	; 123
    2d1c:	3c e1       	ldi	r19, 0x1C	; 28
    2d1e:	31 87       	std	Z+9, r19	; 0x09
    2d20:	20 87       	std	Z+8, r18	; 0x08
    2d22:	27 e8       	ldi	r18, 0x87	; 135
    2d24:	3c e1       	ldi	r19, 0x1C	; 28
    2d26:	33 87       	std	Z+11, r19	; 0x0b
    2d28:	22 87       	std	Z+10, r18	; 0x0a
    2d2a:	2c e8       	ldi	r18, 0x8C	; 140
    2d2c:	3c e1       	ldi	r19, 0x1C	; 28
    2d2e:	35 87       	std	Z+13, r19	; 0x0d
    2d30:	24 87       	std	Z+12, r18	; 0x0c
    2d32:	28 e9       	ldi	r18, 0x98	; 152
    2d34:	3c e1       	ldi	r19, 0x1C	; 28
    2d36:	37 87       	std	Z+15, r19	; 0x0f
    2d38:	26 87       	std	Z+14, r18	; 0x0e
    2d3a:	28 e7       	ldi	r18, 0x78	; 120
    2d3c:	3c e1       	ldi	r19, 0x1C	; 28
    2d3e:	31 8b       	std	Z+17, r19	; 0x11
    2d40:	20 8b       	std	Z+16, r18	; 0x10
    2d42:	2d e9       	ldi	r18, 0x9D	; 157
    2d44:	3c e1       	ldi	r19, 0x1C	; 28
    2d46:	33 8b       	std	Z+19, r19	; 0x13
    2d48:	22 8b       	std	Z+18, r18	; 0x12
    2d4a:	2a ea       	ldi	r18, 0xAA	; 170
    2d4c:	3c e1       	ldi	r19, 0x1C	; 28
    2d4e:	35 8b       	std	Z+21, r19	; 0x15
    2d50:	24 8b       	std	Z+20, r18	; 0x14
    2d52:	68 2f       	mov	r22, r24
    2d54:	cf 01       	movw	r24, r30
    2d56:	52 c1       	rjmp	.+676    	; 0x2ffc <led_create>
    2d58:	08 95       	ret

00002d5a <_hihTwiCallback>:
    2d5a:	65 30       	cpi	r22, 0x05	; 5
    2d5c:	f1 f4       	brne	.+60     	; 0x2d9a <_hihTwiCallback+0x40>
    2d5e:	fa 01       	movw	r30, r20
    2d60:	80 81       	ld	r24, Z
    2d62:	8f 73       	andi	r24, 0x3F	; 63
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	98 2f       	mov	r25, r24
    2d68:	88 27       	eor	r24, r24
    2d6a:	21 81       	ldd	r18, Z+1	; 0x01
    2d6c:	82 2b       	or	r24, r18
    2d6e:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2d72:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2d76:	82 81       	ldd	r24, Z+2	; 0x02
    2d78:	f0 e4       	ldi	r31, 0x40	; 64
    2d7a:	8f 9f       	mul	r24, r31
    2d7c:	c0 01       	movw	r24, r0
    2d7e:	11 24       	eor	r1, r1
    2d80:	fa 01       	movw	r30, r20
    2d82:	23 81       	ldd	r18, Z+3	; 0x03
    2d84:	26 95       	lsr	r18
    2d86:	26 95       	lsr	r18
    2d88:	82 2b       	or	r24, r18
    2d8a:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2d8e:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	80 93 1d 09 	sts	0x091D, r24	; 0x80091d <_measuringIsReady>
    2d98:	08 95       	ret
    2d9a:	64 30       	cpi	r22, 0x04	; 4
    2d9c:	51 f0       	breq	.+20     	; 0x2db2 <_hihTwiCallback+0x58>
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e4       	ldi	r25, 0x40	; 64
    2da2:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    2da6:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    2daa:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2dae:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2db2:	08 95       	ret

00002db4 <hih8120Create>:
    2db4:	0f 93       	push	r16
    2db6:	1f 93       	push	r17
    2db8:	0d ea       	ldi	r16, 0xAD	; 173
    2dba:	16 e1       	ldi	r17, 0x16	; 22
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	34 e2       	ldi	r19, 0x24	; 36
    2dc0:	44 ef       	ldi	r20, 0xF4	; 244
    2dc2:	50 e0       	ldi	r21, 0x00	; 0
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	87 e2       	ldi	r24, 0x27	; 39
    2dc8:	0e 94 3f 21 	call	0x427e	; 0x427e <twiCreate>
    2dcc:	90 93 1f 09 	sts	0x091F, r25	; 0x80091f <_hih8120Handler+0x1>
    2dd0:	80 93 1e 09 	sts	0x091E, r24	; 0x80091e <_hih8120Handler>
    2dd4:	21 e0       	ldi	r18, 0x01	; 1
    2dd6:	89 2b       	or	r24, r25
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <hih8120Create+0x28>
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	82 2f       	mov	r24, r18
    2dde:	1f 91       	pop	r17
    2de0:	0f 91       	pop	r16
    2de2:	08 95       	ret

00002de4 <hih8120Wakeup>:
    2de4:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <_hih8120Handler>
    2de8:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <_hih8120Handler+0x1>
    2dec:	00 97       	sbiw	r24, 0x00	; 0
    2dee:	59 f0       	breq	.+22     	; 0x2e06 <hih8120Wakeup+0x22>
    2df0:	40 e0       	ldi	r20, 0x00	; 0
    2df2:	60 e0       	ldi	r22, 0x00	; 0
    2df4:	70 e0       	ldi	r23, 0x00	; 0
    2df6:	0e 94 90 21 	call	0x4320	; 0x4320 <twiTransmit>
    2dfa:	84 30       	cpi	r24, 0x04	; 4
    2dfc:	31 f4       	brne	.+12     	; 0x2e0a <hih8120Wakeup+0x26>
    2dfe:	10 92 1d 09 	sts	0x091D, r1	; 0x80091d <_measuringIsReady>
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	08 95       	ret
    2e06:	82 e0       	ldi	r24, 0x02	; 2
    2e08:	08 95       	ret
    2e0a:	83 e0       	ldi	r24, 0x03	; 3
    2e0c:	08 95       	ret

00002e0e <hih8120Meassure>:
    2e0e:	80 91 1e 09 	lds	r24, 0x091E	; 0x80091e <_hih8120Handler>
    2e12:	90 91 1f 09 	lds	r25, 0x091F	; 0x80091f <_hih8120Handler+0x1>
    2e16:	00 97       	sbiw	r24, 0x00	; 0
    2e18:	39 f0       	breq	.+14     	; 0x2e28 <hih8120Meassure+0x1a>
    2e1a:	64 e0       	ldi	r22, 0x04	; 4
    2e1c:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <twiReceive>
    2e20:	85 30       	cpi	r24, 0x05	; 5
    2e22:	21 f0       	breq	.+8      	; 0x2e2c <hih8120Meassure+0x1e>
    2e24:	83 e0       	ldi	r24, 0x03	; 3
    2e26:	08 95       	ret
    2e28:	82 e0       	ldi	r24, 0x02	; 2
    2e2a:	08 95       	ret
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	08 95       	ret

00002e30 <hih8120GetHumidity>:
    2e30:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    2e34:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	0e 94 e6 23 	call	0x47cc	; 0x47cc <__floatunsisf>
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	48 ec       	ldi	r20, 0xC8	; 200
    2e46:	52 e4       	ldi	r21, 0x42	; 66
    2e48:	0e 94 74 24 	call	0x48e8	; 0x48e8 <__mulsf3>
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	38 ef       	ldi	r19, 0xF8	; 248
    2e50:	4f e7       	ldi	r20, 0x7F	; 127
    2e52:	56 e4       	ldi	r21, 0x46	; 70
    2e54:	0c 94 4d 23 	jmp	0x469a	; 0x469a <__divsf3>
    2e58:	08 95       	ret

00002e5a <hih8120GetHumidityPercent_x10>:
    2e5a:	ea df       	rcall	.-44     	; 0x2e30 <hih8120GetHumidity>
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
    2e60:	40 e2       	ldi	r20, 0x20	; 32
    2e62:	51 e4       	ldi	r21, 0x41	; 65
    2e64:	0e 94 74 24 	call	0x48e8	; 0x48e8 <__mulsf3>
    2e68:	0e 94 ba 23 	call	0x4774	; 0x4774 <__fixunssfsi>
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	08 95       	ret

00002e70 <hih8120GetTemperature>:
    2e70:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    2e74:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    2e78:	80 e0       	ldi	r24, 0x00	; 0
    2e7a:	90 e0       	ldi	r25, 0x00	; 0
    2e7c:	0e 94 e6 23 	call	0x47cc	; 0x47cc <__floatunsisf>
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	45 e2       	ldi	r20, 0x25	; 37
    2e86:	53 e4       	ldi	r21, 0x43	; 67
    2e88:	0e 94 74 24 	call	0x48e8	; 0x48e8 <__mulsf3>
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	38 ef       	ldi	r19, 0xF8	; 248
    2e90:	4f e7       	ldi	r20, 0x7F	; 127
    2e92:	56 e4       	ldi	r21, 0x46	; 70
    2e94:	0e 94 4d 23 	call	0x469a	; 0x469a <__divsf3>
    2e98:	20 e0       	ldi	r18, 0x00	; 0
    2e9a:	30 e0       	ldi	r19, 0x00	; 0
    2e9c:	40 e2       	ldi	r20, 0x20	; 32
    2e9e:	52 e4       	ldi	r21, 0x42	; 66
    2ea0:	0c 94 e8 22 	jmp	0x45d0	; 0x45d0 <__subsf3>
    2ea4:	08 95       	ret

00002ea6 <hih8120GetTemperature_x10>:
    2ea6:	e4 df       	rcall	.-56     	; 0x2e70 <hih8120GetTemperature>
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	40 e2       	ldi	r20, 0x20	; 32
    2eae:	51 e4       	ldi	r21, 0x41	; 65
    2eb0:	0e 94 74 24 	call	0x48e8	; 0x48e8 <__mulsf3>
    2eb4:	0e 94 b5 23 	call	0x476a	; 0x476a <__fixsfsi>
    2eb8:	cb 01       	movw	r24, r22
    2eba:	08 95       	ret

00002ebc <_turn_off>:
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	ee 0f       	add	r30, r30
    2ec6:	ff 1f       	adc	r31, r31
    2ec8:	e8 0f       	add	r30, r24
    2eca:	f9 1f       	adc	r31, r25
    2ecc:	ee 0f       	add	r30, r30
    2ece:	ff 1f       	adc	r31, r31
    2ed0:	e0 5e       	subi	r30, 0xE0	; 224
    2ed2:	f6 4f       	sbci	r31, 0xF6	; 246
    2ed4:	23 81       	ldd	r18, Z+3	; 0x03
    2ed6:	21 11       	cpse	r18, r1
    2ed8:	0a c0       	rjmp	.+20     	; 0x2eee <_turn_off+0x32>
    2eda:	ef 01       	movw	r28, r30
    2edc:	e0 91 9b 0a 	lds	r30, 0x0A9B	; 0x800a9b <register_access+0x8>
    2ee0:	f0 91 9c 0a 	lds	r31, 0x0A9C	; 0x800a9c <register_access+0x9>
    2ee4:	6a 81       	ldd	r22, Y+2	; 0x02
    2ee6:	88 81       	ld	r24, Y
    2ee8:	99 81       	ldd	r25, Y+1	; 0x01
    2eea:	19 95       	eicall
    2eec:	12 c0       	rjmp	.+36     	; 0x2f12 <_turn_off+0x56>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	aa 0f       	add	r26, r26
    2ef2:	bb 1f       	adc	r27, r27
    2ef4:	ed 01       	movw	r28, r26
    2ef6:	c8 0f       	add	r28, r24
    2ef8:	d9 1f       	adc	r29, r25
    2efa:	cc 0f       	add	r28, r28
    2efc:	dd 1f       	adc	r29, r29
    2efe:	c0 5e       	subi	r28, 0xE0	; 224
    2f00:	d6 4f       	sbci	r29, 0xF6	; 246
    2f02:	e0 91 a5 0a 	lds	r30, 0x0AA5	; 0x800aa5 <register_access+0x12>
    2f06:	f0 91 a6 0a 	lds	r31, 0x0AA6	; 0x800aa6 <register_access+0x13>
    2f0a:	6a 81       	ldd	r22, Y+2	; 0x02
    2f0c:	88 81       	ld	r24, Y
    2f0e:	99 81       	ldd	r25, Y+1	; 0x01
    2f10:	19 95       	eicall
    2f12:	df 91       	pop	r29
    2f14:	cf 91       	pop	r28
    2f16:	08 95       	ret

00002f18 <_turn_on>:
    2f18:	cf 93       	push	r28
    2f1a:	df 93       	push	r29
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	fc 01       	movw	r30, r24
    2f20:	ee 0f       	add	r30, r30
    2f22:	ff 1f       	adc	r31, r31
    2f24:	e8 0f       	add	r30, r24
    2f26:	f9 1f       	adc	r31, r25
    2f28:	ee 0f       	add	r30, r30
    2f2a:	ff 1f       	adc	r31, r31
    2f2c:	e0 5e       	subi	r30, 0xE0	; 224
    2f2e:	f6 4f       	sbci	r31, 0xF6	; 246
    2f30:	23 81       	ldd	r18, Z+3	; 0x03
    2f32:	21 11       	cpse	r18, r1
    2f34:	0a c0       	rjmp	.+20     	; 0x2f4a <_turn_on+0x32>
    2f36:	ef 01       	movw	r28, r30
    2f38:	e0 91 a5 0a 	lds	r30, 0x0AA5	; 0x800aa5 <register_access+0x12>
    2f3c:	f0 91 a6 0a 	lds	r31, 0x0AA6	; 0x800aa6 <register_access+0x13>
    2f40:	6a 81       	ldd	r22, Y+2	; 0x02
    2f42:	88 81       	ld	r24, Y
    2f44:	99 81       	ldd	r25, Y+1	; 0x01
    2f46:	19 95       	eicall
    2f48:	12 c0       	rjmp	.+36     	; 0x2f6e <_turn_on+0x56>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	aa 0f       	add	r26, r26
    2f4e:	bb 1f       	adc	r27, r27
    2f50:	ed 01       	movw	r28, r26
    2f52:	c8 0f       	add	r28, r24
    2f54:	d9 1f       	adc	r29, r25
    2f56:	cc 0f       	add	r28, r28
    2f58:	dd 1f       	adc	r29, r29
    2f5a:	c0 5e       	subi	r28, 0xE0	; 224
    2f5c:	d6 4f       	sbci	r29, 0xF6	; 246
    2f5e:	e0 91 9b 0a 	lds	r30, 0x0A9B	; 0x800a9b <register_access+0x8>
    2f62:	f0 91 9c 0a 	lds	r31, 0x0A9C	; 0x800a9c <register_access+0x9>
    2f66:	6a 81       	ldd	r22, Y+2	; 0x02
    2f68:	88 81       	ld	r24, Y
    2f6a:	99 81       	ldd	r25, Y+1	; 0x01
    2f6c:	19 95       	eicall
    2f6e:	df 91       	pop	r29
    2f70:	cf 91       	pop	r28
    2f72:	08 95       	ret

00002f74 <_hal_led_task>:
    2f74:	85 ec       	ldi	r24, 0xC5	; 197
    2f76:	95 e0       	ldi	r25, 0x05	; 5
    2f78:	0e 94 8d 26 	call	0x4d1a	; 0x4d1a <puts>
    2f7c:	0f 2e       	mov	r0, r31
    2f7e:	f3 e9       	ldi	r31, 0x93	; 147
    2f80:	cf 2e       	mov	r12, r31
    2f82:	fa e0       	ldi	r31, 0x0A	; 10
    2f84:	df 2e       	mov	r13, r31
    2f86:	f0 2d       	mov	r31, r0
    2f88:	04 e0       	ldi	r16, 0x04	; 4
    2f8a:	c0 e2       	ldi	r28, 0x20	; 32
    2f8c:	d9 e0       	ldi	r29, 0x09	; 9
    2f8e:	10 e0       	ldi	r17, 0x00	; 0
    2f90:	8c 81       	ldd	r24, Y+4	; 0x04
    2f92:	81 30       	cpi	r24, 0x01	; 1
    2f94:	69 f0       	breq	.+26     	; 0x2fb0 <_hal_led_task+0x3c>
    2f96:	e8 f0       	brcs	.+58     	; 0x2fd2 <_hal_led_task+0x5e>
    2f98:	82 30       	cpi	r24, 0x02	; 2
    2f9a:	39 f5       	brne	.+78     	; 0x2fea <_hal_led_task+0x76>
    2f9c:	d6 01       	movw	r26, r12
    2f9e:	1c 96       	adiw	r26, 0x0c	; 12
    2fa0:	ed 91       	ld	r30, X+
    2fa2:	fc 91       	ld	r31, X
    2fa4:	1d 97       	sbiw	r26, 0x0d	; 13
    2fa6:	6a 81       	ldd	r22, Y+2	; 0x02
    2fa8:	88 81       	ld	r24, Y
    2faa:	99 81       	ldd	r25, Y+1	; 0x01
    2fac:	19 95       	eicall
    2fae:	1d c0       	rjmp	.+58     	; 0x2fea <_hal_led_task+0x76>
    2fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb2:	8f 5f       	subi	r24, 0xFF	; 255
    2fb4:	8a 30       	cpi	r24, 0x0A	; 10
    2fb6:	10 f4       	brcc	.+4      	; 0x2fbc <_hal_led_task+0x48>
    2fb8:	8d 83       	std	Y+5, r24	; 0x05
    2fba:	17 c0       	rjmp	.+46     	; 0x2fea <_hal_led_task+0x76>
    2fbc:	1d 82       	std	Y+5, r1	; 0x05
    2fbe:	d6 01       	movw	r26, r12
    2fc0:	1c 96       	adiw	r26, 0x0c	; 12
    2fc2:	ed 91       	ld	r30, X+
    2fc4:	fc 91       	ld	r31, X
    2fc6:	1d 97       	sbiw	r26, 0x0d	; 13
    2fc8:	6a 81       	ldd	r22, Y+2	; 0x02
    2fca:	88 81       	ld	r24, Y
    2fcc:	99 81       	ldd	r25, Y+1	; 0x01
    2fce:	19 95       	eicall
    2fd0:	0c c0       	rjmp	.+24     	; 0x2fea <_hal_led_task+0x76>
    2fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd4:	88 23       	and	r24, r24
    2fd6:	31 f0       	breq	.+12     	; 0x2fe4 <_hal_led_task+0x70>
    2fd8:	81 2f       	mov	r24, r17
    2fda:	9e df       	rcall	.-196    	; 0x2f18 <_turn_on>
    2fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    2fde:	81 50       	subi	r24, 0x01	; 1
    2fe0:	8d 83       	std	Y+5, r24	; 0x05
    2fe2:	03 c0       	rjmp	.+6      	; 0x2fea <_hal_led_task+0x76>
    2fe4:	0c 83       	std	Y+4, r16	; 0x04
    2fe6:	81 2f       	mov	r24, r17
    2fe8:	69 df       	rcall	.-302    	; 0x2ebc <_turn_off>
    2fea:	1f 5f       	subi	r17, 0xFF	; 255
    2fec:	26 96       	adiw	r28, 0x06	; 6
    2fee:	14 30       	cpi	r17, 0x04	; 4
    2ff0:	79 f6       	brne	.-98     	; 0x2f90 <_hal_led_task+0x1c>
    2ff2:	85 e0       	ldi	r24, 0x05	; 5
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <vTaskDelay>
    2ffa:	c7 cf       	rjmp	.-114    	; 0x2f8a <_hal_led_task+0x16>

00002ffc <led_create>:
    2ffc:	cf 92       	push	r12
    2ffe:	df 92       	push	r13
    3000:	ef 92       	push	r14
    3002:	ff 92       	push	r15
    3004:	0f 93       	push	r16
    3006:	1f 93       	push	r17
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	06 2f       	mov	r16, r22
    300e:	0f 2e       	mov	r0, r31
    3010:	f3 e9       	ldi	r31, 0x93	; 147
    3012:	ef 2e       	mov	r14, r31
    3014:	fa e0       	ldi	r31, 0x0A	; 10
    3016:	ff 2e       	mov	r15, r31
    3018:	f0 2d       	mov	r31, r0
    301a:	d7 01       	movw	r26, r14
    301c:	18 96       	adiw	r26, 0x08	; 8
    301e:	ed 91       	ld	r30, X+
    3020:	fc 91       	ld	r31, X
    3022:	19 97       	sbiw	r26, 0x09	; 9
    3024:	66 e0       	ldi	r22, 0x06	; 6
    3026:	87 e2       	ldi	r24, 0x27	; 39
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	19 95       	eicall
    302c:	c0 e2       	ldi	r28, 0x20	; 32
    302e:	d9 e0       	ldi	r29, 0x09	; 9
    3030:	0f 2e       	mov	r0, r31
    3032:	f8 e2       	ldi	r31, 0x28	; 40
    3034:	cf 2e       	mov	r12, r31
    3036:	d1 2c       	mov	r13, r1
    3038:	f0 2d       	mov	r31, r0
    303a:	d9 82       	std	Y+1, r13	; 0x01
    303c:	c8 82       	st	Y, r12
    303e:	86 e0       	ldi	r24, 0x06	; 6
    3040:	8a 83       	std	Y+2, r24	; 0x02
    3042:	1b 82       	std	Y+3, r1	; 0x03
    3044:	14 e0       	ldi	r17, 0x04	; 4
    3046:	1c 83       	std	Y+4, r17	; 0x04
    3048:	80 e0       	ldi	r24, 0x00	; 0
    304a:	38 df       	rcall	.-400    	; 0x2ebc <_turn_off>
    304c:	d7 01       	movw	r26, r14
    304e:	18 96       	adiw	r26, 0x08	; 8
    3050:	ed 91       	ld	r30, X+
    3052:	fc 91       	ld	r31, X
    3054:	19 97       	sbiw	r26, 0x09	; 9
    3056:	67 e0       	ldi	r22, 0x07	; 7
    3058:	87 e2       	ldi	r24, 0x27	; 39
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	19 95       	eicall
    305e:	df 82       	std	Y+7, r13	; 0x07
    3060:	ce 82       	std	Y+6, r12	; 0x06
    3062:	87 e0       	ldi	r24, 0x07	; 7
    3064:	88 87       	std	Y+8, r24	; 0x08
    3066:	19 86       	std	Y+9, r1	; 0x09
    3068:	1a 87       	std	Y+10, r17	; 0x0a
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	27 df       	rcall	.-434    	; 0x2ebc <_turn_off>
    306e:	d7 01       	movw	r26, r14
    3070:	18 96       	adiw	r26, 0x08	; 8
    3072:	ed 91       	ld	r30, X+
    3074:	fc 91       	ld	r31, X
    3076:	19 97       	sbiw	r26, 0x09	; 9
    3078:	65 e0       	ldi	r22, 0x05	; 5
    307a:	83 e3       	ldi	r24, 0x33	; 51
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	19 95       	eicall
    3080:	d7 01       	movw	r26, r14
    3082:	18 96       	adiw	r26, 0x08	; 8
    3084:	ed 91       	ld	r30, X+
    3086:	fc 91       	ld	r31, X
    3088:	19 97       	sbiw	r26, 0x09	; 9
    308a:	61 e0       	ldi	r22, 0x01	; 1
    308c:	84 e3       	ldi	r24, 0x34	; 52
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	19 95       	eicall
    3092:	84 e3       	ldi	r24, 0x34	; 52
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	9d 87       	std	Y+13, r25	; 0x0d
    3098:	8c 87       	std	Y+12, r24	; 0x0c
    309a:	85 e0       	ldi	r24, 0x05	; 5
    309c:	8e 87       	std	Y+14, r24	; 0x0e
    309e:	1f 86       	std	Y+15, r1	; 0x0f
    30a0:	18 8b       	std	Y+16, r17	; 0x10
    30a2:	82 e0       	ldi	r24, 0x02	; 2
    30a4:	0b df       	rcall	.-490    	; 0x2ebc <_turn_off>
    30a6:	d7 01       	movw	r26, r14
    30a8:	18 96       	adiw	r26, 0x08	; 8
    30aa:	ed 91       	ld	r30, X+
    30ac:	fc 91       	ld	r31, X
    30ae:	19 97       	sbiw	r26, 0x09	; 9
    30b0:	64 e0       	ldi	r22, 0x04	; 4
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	91 e0       	ldi	r25, 0x01	; 1
    30b6:	19 95       	eicall
    30b8:	d7 01       	movw	r26, r14
    30ba:	18 96       	adiw	r26, 0x08	; 8
    30bc:	ed 91       	ld	r30, X+
    30be:	fc 91       	ld	r31, X
    30c0:	19 97       	sbiw	r26, 0x09	; 9
    30c2:	61 e0       	ldi	r22, 0x01	; 1
    30c4:	82 e0       	ldi	r24, 0x02	; 2
    30c6:	91 e0       	ldi	r25, 0x01	; 1
    30c8:	19 95       	eicall
    30ca:	82 e0       	ldi	r24, 0x02	; 2
    30cc:	91 e0       	ldi	r25, 0x01	; 1
    30ce:	9b 8b       	std	Y+19, r25	; 0x13
    30d0:	8a 8b       	std	Y+18, r24	; 0x12
    30d2:	1c 8b       	std	Y+20, r17	; 0x14
    30d4:	1d 8a       	std	Y+21, r1	; 0x15
    30d6:	1e 8b       	std	Y+22, r17	; 0x16
    30d8:	83 e0       	ldi	r24, 0x03	; 3
    30da:	f0 de       	rcall	.-544    	; 0x2ebc <_turn_off>
    30dc:	e1 2c       	mov	r14, r1
    30de:	f1 2c       	mov	r15, r1
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	40 ec       	ldi	r20, 0xC0	; 192
    30e6:	50 e0       	ldi	r21, 0x00	; 0
    30e8:	6c ed       	ldi	r22, 0xDC	; 220
    30ea:	75 e0       	ldi	r23, 0x05	; 5
    30ec:	8a eb       	ldi	r24, 0xBA	; 186
    30ee:	97 e1       	ldi	r25, 0x17	; 23
    30f0:	0e 94 b6 0a 	call	0x156c	; 0x156c <xTaskCreate>
    30f4:	df 91       	pop	r29
    30f6:	cf 91       	pop	r28
    30f8:	1f 91       	pop	r17
    30fa:	0f 91       	pop	r16
    30fc:	ff 90       	pop	r15
    30fe:	ef 90       	pop	r14
    3100:	df 90       	pop	r13
    3102:	cf 90       	pop	r12
    3104:	08 95       	ret

00003106 <_serial_call_back>:
    3106:	0f 93       	push	r16
    3108:	1f 93       	push	r17
    310a:	cf 93       	push	r28
    310c:	df 93       	push	r29
    310e:	1f 92       	push	r1
    3110:	1f 92       	push	r1
    3112:	cd b7       	in	r28, 0x3d	; 61
    3114:	de b7       	in	r29, 0x3e	; 62
    3116:	8c 01       	movw	r16, r24
    3118:	19 82       	std	Y+1, r1	; 0x01
    311a:	2d c0       	rjmp	.+90     	; 0x3176 <_serial_call_back+0x70>
    311c:	e0 91 9c 09 	lds	r30, 0x099C	; 0x80099c <rec_buf_inp.2926>
    3120:	ec 32       	cpi	r30, 0x2C	; 44
    3122:	50 f4       	brcc	.+20     	; 0x3138 <_serial_call_back+0x32>
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	8e 0f       	add	r24, r30
    3128:	80 93 9c 09 	sts	0x099C, r24	; 0x80099c <rec_buf_inp.2926>
    312c:	f0 e0       	ldi	r31, 0x00	; 0
    312e:	e4 53       	subi	r30, 0x34	; 52
    3130:	f6 4f       	sbci	r31, 0xF6	; 246
    3132:	8a 81       	ldd	r24, Y+2	; 0x02
    3134:	80 83       	st	Z, r24
    3136:	02 c0       	rjmp	.+4      	; 0x313c <_serial_call_back+0x36>
    3138:	10 92 9c 09 	sts	0x099C, r1	; 0x80099c <rec_buf_inp.2926>
    313c:	8a 81       	ldd	r24, Y+2	; 0x02
    313e:	8a 30       	cpi	r24, 0x0A	; 10
    3140:	d1 f4       	brne	.+52     	; 0x3176 <_serial_call_back+0x70>
    3142:	40 91 9c 09 	lds	r20, 0x099C	; 0x80099c <rec_buf_inp.2926>
    3146:	50 e0       	ldi	r21, 0x00	; 0
    3148:	fa 01       	movw	r30, r20
    314a:	e6 53       	subi	r30, 0x36	; 54
    314c:	f6 4f       	sbci	r31, 0xF6	; 246
    314e:	10 82       	st	Z, r1
    3150:	41 50       	subi	r20, 0x01	; 1
    3152:	51 09       	sbc	r21, r1
    3154:	9e 01       	movw	r18, r28
    3156:	2f 5f       	subi	r18, 0xFF	; 255
    3158:	3f 4f       	sbci	r19, 0xFF	; 255
    315a:	6c ec       	ldi	r22, 0xCC	; 204
    315c:	79 e0       	ldi	r23, 0x09	; 9
    315e:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <_reply_buffer_handle>
    3162:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <_reply_buffer_handle+0x1>
    3166:	0e 94 67 09 	call	0x12ce	; 0x12ce <xStreamBufferSendFromISR>
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	81 11       	cpse	r24, r1
    316e:	0e 94 c4 03 	call	0x788	; 0x788 <vPortYield>
    3172:	10 92 9c 09 	sts	0x099C, r1	; 0x80099c <rec_buf_inp.2926>
    3176:	be 01       	movw	r22, r28
    3178:	6e 5f       	subi	r22, 0xFE	; 254
    317a:	7f 4f       	sbci	r23, 0xFF	; 255
    317c:	c8 01       	movw	r24, r16
    317e:	b3 d5       	rcall	.+2918   	; 0x3ce6 <serial_get_byte>
    3180:	88 23       	and	r24, r24
    3182:	61 f2       	breq	.-104    	; 0x311c <_serial_call_back+0x16>
    3184:	0f 90       	pop	r0
    3186:	0f 90       	pop	r0
    3188:	df 91       	pop	r29
    318a:	cf 91       	pop	r28
    318c:	1f 91       	pop	r17
    318e:	0f 91       	pop	r16
    3190:	08 95       	ret

00003192 <_upload_message>:
    3192:	0f 93       	push	r16
    3194:	1f 93       	push	r17
    3196:	cf 93       	push	r28
    3198:	df 93       	push	r29
    319a:	8c 01       	movw	r16, r24
    319c:	eb 01       	movw	r28, r22
    319e:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <_reply_buffer_handle>
    31a2:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <_reply_buffer_handle+0x1>
    31a6:	0e 94 28 09 	call	0x1250	; 0x1250 <xStreamBufferReset>
    31aa:	b8 01       	movw	r22, r16
    31ac:	88 e3       	ldi	r24, 0x38	; 56
    31ae:	99 e0       	ldi	r25, 0x09	; 9
    31b0:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <strcpy>
    31b4:	20 97       	sbiw	r28, 0x00	; 0
    31b6:	79 f0       	breq	.+30     	; 0x31d6 <_upload_message+0x44>
    31b8:	e8 e3       	ldi	r30, 0x38	; 56
    31ba:	f9 e0       	ldi	r31, 0x09	; 9
    31bc:	01 90       	ld	r0, Z+
    31be:	00 20       	and	r0, r0
    31c0:	e9 f7       	brne	.-6      	; 0x31bc <_upload_message+0x2a>
    31c2:	31 97       	sbiw	r30, 0x01	; 1
    31c4:	80 e2       	ldi	r24, 0x20	; 32
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	91 83       	std	Z+1, r25	; 0x01
    31ca:	80 83       	st	Z, r24
    31cc:	be 01       	movw	r22, r28
    31ce:	88 e3       	ldi	r24, 0x38	; 56
    31d0:	99 e0       	ldi	r25, 0x09	; 9
    31d2:	0e 94 50 26 	call	0x4ca0	; 0x4ca0 <strcat>
    31d6:	e8 e3       	ldi	r30, 0x38	; 56
    31d8:	f9 e0       	ldi	r31, 0x09	; 9
    31da:	df 01       	movw	r26, r30
    31dc:	0d 90       	ld	r0, X+
    31de:	00 20       	and	r0, r0
    31e0:	e9 f7       	brne	.-6      	; 0x31dc <_upload_message+0x4a>
    31e2:	11 97       	sbiw	r26, 0x01	; 1
    31e4:	8d e0       	ldi	r24, 0x0D	; 13
    31e6:	9a e0       	ldi	r25, 0x0A	; 10
    31e8:	11 96       	adiw	r26, 0x01	; 1
    31ea:	9c 93       	st	X, r25
    31ec:	8e 93       	st	-X, r24
    31ee:	12 96       	adiw	r26, 0x02	; 2
    31f0:	1c 92       	st	X, r1
    31f2:	01 90       	ld	r0, Z+
    31f4:	00 20       	and	r0, r0
    31f6:	e9 f7       	brne	.-6      	; 0x31f2 <_upload_message+0x60>
    31f8:	31 97       	sbiw	r30, 0x01	; 1
    31fa:	e8 53       	subi	r30, 0x38	; 56
    31fc:	f9 40       	sbci	r31, 0x09	; 9
    31fe:	ae 2f       	mov	r26, r30
    3200:	88 e3       	ldi	r24, 0x38	; 56
    3202:	99 e0       	ldi	r25, 0x09	; 9
    3204:	ac 01       	movw	r20, r24
    3206:	6a 2f       	mov	r22, r26
    3208:	80 91 9f 09 	lds	r24, 0x099F	; 0x80099f <_rn2483_serial>
    320c:	90 91 a0 09 	lds	r25, 0x09A0	; 0x8009a0 <_rn2483_serial+0x1>
    3210:	1a d5       	rcall	.+2612   	; 0x3c46 <serial_send_bytes>
    3212:	81 11       	cpse	r24, r1
    3214:	0f c0       	rjmp	.+30     	; 0x3234 <_upload_message+0xa2>
    3216:	28 e2       	ldi	r18, 0x28	; 40
    3218:	35 e0       	ldi	r19, 0x05	; 5
    321a:	4d e2       	ldi	r20, 0x2D	; 45
    321c:	50 e0       	ldi	r21, 0x00	; 0
    321e:	66 e2       	ldi	r22, 0x26	; 38
    3220:	7a e0       	ldi	r23, 0x0A	; 10
    3222:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <_reply_buffer_handle>
    3226:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <_reply_buffer_handle+0x1>
    322a:	0e 94 a9 09 	call	0x1352	; 0x1352 <xStreamBufferReceive>
    322e:	86 e2       	ldi	r24, 0x26	; 38
    3230:	9a e0       	ldi	r25, 0x0A	; 10
    3232:	02 c0       	rjmp	.+4      	; 0x3238 <_upload_message+0xa6>
    3234:	80 e0       	ldi	r24, 0x00	; 0
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	08 95       	ret

00003242 <_reply2return_code>:
    3242:	af 92       	push	r10
    3244:	bf 92       	push	r11
    3246:	cf 92       	push	r12
    3248:	df 92       	push	r13
    324a:	ef 92       	push	r14
    324c:	ff 92       	push	r15
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	6c 01       	movw	r12, r24
    3258:	fc 01       	movw	r30, r24
    325a:	01 90       	ld	r0, Z+
    325c:	00 20       	and	r0, r0
    325e:	e9 f7       	brne	.-6      	; 0x325a <_reply2return_code+0x18>
    3260:	31 97       	sbiw	r30, 0x01	; 1
    3262:	7f 01       	movw	r14, r30
    3264:	e8 1a       	sub	r14, r24
    3266:	f9 0a       	sbc	r15, r25
    3268:	08 e5       	ldi	r16, 0x58	; 88
    326a:	18 e0       	ldi	r17, 0x08	; 8
    326c:	c0 e0       	ldi	r28, 0x00	; 0
    326e:	d0 e0       	ldi	r29, 0x00	; 0
    3270:	f8 01       	movw	r30, r16
    3272:	60 81       	ld	r22, Z
    3274:	71 81       	ldd	r23, Z+1	; 0x01
    3276:	a7 01       	movw	r20, r14
    3278:	c6 01       	movw	r24, r12
    327a:	0e 94 62 26 	call	0x4cc4	; 0x4cc4 <strncasecmp>
    327e:	89 2b       	or	r24, r25
    3280:	49 f4       	brne	.+18     	; 0x3294 <_reply2return_code+0x52>
    3282:	fe 01       	movw	r30, r28
    3284:	ee 0f       	add	r30, r30
    3286:	ff 1f       	adc	r31, r31
    3288:	ec 0f       	add	r30, r28
    328a:	fd 1f       	adc	r31, r29
    328c:	e9 5a       	subi	r30, 0xA9	; 169
    328e:	f7 4f       	sbci	r31, 0xF7	; 247
    3290:	80 81       	ld	r24, Z
    3292:	07 c0       	rjmp	.+14     	; 0x32a2 <_reply2return_code+0x60>
    3294:	21 96       	adiw	r28, 0x01	; 1
    3296:	0d 5f       	subi	r16, 0xFD	; 253
    3298:	1f 4f       	sbci	r17, 0xFF	; 255
    329a:	c1 31       	cpi	r28, 0x11	; 17
    329c:	d1 05       	cpc	r29, r1
    329e:	41 f7       	brne	.-48     	; 0x3270 <_reply2return_code+0x2e>
    32a0:	80 e1       	ldi	r24, 0x10	; 16
    32a2:	df 91       	pop	r29
    32a4:	cf 91       	pop	r28
    32a6:	1f 91       	pop	r17
    32a8:	0f 91       	pop	r16
    32aa:	ff 90       	pop	r15
    32ac:	ef 90       	pop	r14
    32ae:	df 90       	pop	r13
    32b0:	cf 90       	pop	r12
    32b2:	bf 90       	pop	r11
    32b4:	af 90       	pop	r10
    32b6:	08 95       	ret

000032b8 <_upload_message_rc>:
    32b8:	6c df       	rcall	.-296    	; 0x3192 <_upload_message>
    32ba:	c3 cf       	rjmp	.-122    	; 0x3242 <_reply2return_code>
    32bc:	08 95       	ret

000032be <lora_driver_flush_buffers>:
    32be:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <_reply_buffer_handle>
    32c2:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <_reply_buffer_handle+0x1>
    32c6:	0c 94 28 09 	jmp	0x1250	; 0x1250 <xStreamBufferReset>
    32ca:	08 95       	ret

000032cc <lora_driver_create>:
    32cc:	8f 92       	push	r8
    32ce:	9f 92       	push	r9
    32d0:	af 92       	push	r10
    32d2:	cf 92       	push	r12
    32d4:	ef 92       	push	r14
    32d6:	0f 93       	push	r16
    32d8:	cf 93       	push	r28
    32da:	c8 2f       	mov	r28, r24
    32dc:	41 e0       	ldi	r20, 0x01	; 1
    32de:	60 e0       	ldi	r22, 0x00	; 0
    32e0:	70 e0       	ldi	r23, 0x00	; 0
    32e2:	88 ec       	ldi	r24, 0xC8	; 200
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <xStreamBufferGenericCreate>
    32ea:	90 93 9e 09 	sts	0x099E, r25	; 0x80099e <_reply_buffer_handle+0x1>
    32ee:	80 93 9d 09 	sts	0x099D, r24	; 0x80099d <_reply_buffer_handle>
    32f2:	0f 2e       	mov	r0, r31
    32f4:	f3 e8       	ldi	r31, 0x83	; 131
    32f6:	8f 2e       	mov	r8, r31
    32f8:	f8 e1       	ldi	r31, 0x18	; 24
    32fa:	9f 2e       	mov	r9, r31
    32fc:	f0 2d       	mov	r31, r0
    32fe:	68 94       	set
    3300:	aa 24       	eor	r10, r10
    3302:	a6 f8       	bld	r10, 6
    3304:	68 94       	set
    3306:	cc 24       	eor	r12, r12
    3308:	c6 f8       	bld	r12, 6
    330a:	e1 2c       	mov	r14, r1
    330c:	00 e0       	ldi	r16, 0x00	; 0
    330e:	23 e0       	ldi	r18, 0x03	; 3
    3310:	40 e0       	ldi	r20, 0x00	; 0
    3312:	51 ee       	ldi	r21, 0xE1	; 225
    3314:	60 e0       	ldi	r22, 0x00	; 0
    3316:	70 e0       	ldi	r23, 0x00	; 0
    3318:	8c 2f       	mov	r24, r28
    331a:	da d3       	rcall	.+1972   	; 0x3ad0 <serial_new_instance>
    331c:	90 93 a0 09 	sts	0x09A0, r25	; 0x8009a0 <_rn2483_serial+0x1>
    3320:	80 93 9f 09 	sts	0x099F, r24	; 0x80099f <_rn2483_serial>
    3324:	e0 91 9b 0a 	lds	r30, 0x0A9B	; 0x800a9b <register_access+0x8>
    3328:	f0 91 9c 0a 	lds	r31, 0x0A9C	; 0x800a9c <register_access+0x9>
    332c:	64 e0       	ldi	r22, 0x04	; 4
    332e:	87 e0       	ldi	r24, 0x07	; 7
    3330:	91 e0       	ldi	r25, 0x01	; 1
    3332:	19 95       	eicall
    3334:	cf 91       	pop	r28
    3336:	0f 91       	pop	r16
    3338:	ef 90       	pop	r14
    333a:	cf 90       	pop	r12
    333c:	af 90       	pop	r10
    333e:	9f 90       	pop	r9
    3340:	8f 90       	pop	r8
    3342:	08 95       	ret

00003344 <lora_driver_reset_rn2483>:
    3344:	88 23       	and	r24, r24
    3346:	49 f0       	breq	.+18     	; 0x335a <lora_driver_reset_rn2483+0x16>
    3348:	e0 91 a5 0a 	lds	r30, 0x0AA5	; 0x800aa5 <register_access+0x12>
    334c:	f0 91 a6 0a 	lds	r31, 0x0AA6	; 0x800aa6 <register_access+0x13>
    3350:	64 e0       	ldi	r22, 0x04	; 4
    3352:	88 e0       	ldi	r24, 0x08	; 8
    3354:	91 e0       	ldi	r25, 0x01	; 1
    3356:	19 95       	eicall
    3358:	08 95       	ret
    335a:	e0 91 9b 0a 	lds	r30, 0x0A9B	; 0x800a9b <register_access+0x8>
    335e:	f0 91 9c 0a 	lds	r31, 0x0A9C	; 0x800a9c <register_access+0x9>
    3362:	64 e0       	ldi	r22, 0x04	; 4
    3364:	88 e0       	ldi	r24, 0x08	; 8
    3366:	91 e0       	ldi	r25, 0x01	; 1
    3368:	19 95       	eicall
    336a:	08 95       	ret

0000336c <lora_driver_rn2483_factory_reset>:
    336c:	60 e0       	ldi	r22, 0x00	; 0
    336e:	70 e0       	ldi	r23, 0x00	; 0
    3370:	83 e0       	ldi	r24, 0x03	; 3
    3372:	96 e0       	ldi	r25, 0x06	; 6
    3374:	0e df       	rcall	.-484    	; 0x3192 <_upload_message>
    3376:	e6 e2       	ldi	r30, 0x26	; 38
    3378:	fa e0       	ldi	r31, 0x0A	; 10
    337a:	01 90       	ld	r0, Z+
    337c:	00 20       	and	r0, r0
    337e:	e9 f7       	brne	.-6      	; 0x337a <lora_driver_rn2483_factory_reset+0xe>
    3380:	31 97       	sbiw	r30, 0x01	; 1
    3382:	e6 52       	subi	r30, 0x26	; 38
    3384:	fa 40       	sbci	r31, 0x0A	; 10
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	75 97       	sbiw	r30, 0x15	; 21
    338a:	08 f0       	brcs	.+2      	; 0x338e <lora_driver_rn2483_factory_reset+0x22>
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	08 95       	ret

00003390 <lora_driver_get_rn2483_hweui>:
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	ec 01       	movw	r28, r24
    3396:	60 e0       	ldi	r22, 0x00	; 0
    3398:	70 e0       	ldi	r23, 0x00	; 0
    339a:	84 e1       	ldi	r24, 0x14	; 20
    339c:	96 e0       	ldi	r25, 0x06	; 6
    339e:	f9 de       	rcall	.-526    	; 0x3192 <_upload_message>
    33a0:	e6 e2       	ldi	r30, 0x26	; 38
    33a2:	fa e0       	ldi	r31, 0x0A	; 10
    33a4:	01 90       	ld	r0, Z+
    33a6:	00 20       	and	r0, r0
    33a8:	e9 f7       	brne	.-6      	; 0x33a4 <lora_driver_get_rn2483_hweui+0x14>
    33aa:	e7 53       	subi	r30, 0x37	; 55
    33ac:	fa 40       	sbci	r31, 0x0A	; 10
    33ae:	39 f4       	brne	.+14     	; 0x33be <lora_driver_get_rn2483_hweui+0x2e>
    33b0:	66 e2       	ldi	r22, 0x26	; 38
    33b2:	7a e0       	ldi	r23, 0x0A	; 10
    33b4:	ce 01       	movw	r24, r28
    33b6:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <strcpy>
    33ba:	80 e0       	ldi	r24, 0x00	; 0
    33bc:	02 c0       	rjmp	.+4      	; 0x33c2 <lora_driver_get_rn2483_hweui+0x32>
    33be:	18 82       	st	Y, r1
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	df 91       	pop	r29
    33c4:	cf 91       	pop	r28
    33c6:	08 95       	ret

000033c8 <lora_driver_set_device_identifier>:
    33c8:	fc 01       	movw	r30, r24
    33ca:	01 90       	ld	r0, Z+
    33cc:	00 20       	and	r0, r0
    33ce:	e9 f7       	brne	.-6      	; 0x33ca <lora_driver_set_device_identifier+0x2>
    33d0:	9f 01       	movw	r18, r30
    33d2:	21 51       	subi	r18, 0x11	; 17
    33d4:	31 09       	sbc	r19, r1
    33d6:	28 17       	cp	r18, r24
    33d8:	39 07       	cpc	r19, r25
    33da:	29 f4       	brne	.+10     	; 0x33e6 <lora_driver_set_device_identifier+0x1e>
    33dc:	bc 01       	movw	r22, r24
    33de:	82 e4       	ldi	r24, 0x42	; 66
    33e0:	96 e0       	ldi	r25, 0x06	; 6
    33e2:	6a cf       	rjmp	.-300    	; 0x32b8 <_upload_message_rc>
    33e4:	08 95       	ret
    33e6:	89 e0       	ldi	r24, 0x09	; 9
    33e8:	08 95       	ret

000033ea <lora_driver_set_application_identifier>:
    33ea:	fc 01       	movw	r30, r24
    33ec:	01 90       	ld	r0, Z+
    33ee:	00 20       	and	r0, r0
    33f0:	e9 f7       	brne	.-6      	; 0x33ec <lora_driver_set_application_identifier+0x2>
    33f2:	9f 01       	movw	r18, r30
    33f4:	21 51       	subi	r18, 0x11	; 17
    33f6:	31 09       	sbc	r19, r1
    33f8:	28 17       	cp	r18, r24
    33fa:	39 07       	cpc	r19, r25
    33fc:	29 f4       	brne	.+10     	; 0x3408 <lora_driver_set_application_identifier+0x1e>
    33fe:	bc 01       	movw	r22, r24
    3400:	81 e5       	ldi	r24, 0x51	; 81
    3402:	96 e0       	ldi	r25, 0x06	; 6
    3404:	59 cf       	rjmp	.-334    	; 0x32b8 <_upload_message_rc>
    3406:	08 95       	ret
    3408:	89 e0       	ldi	r24, 0x09	; 9
    340a:	08 95       	ret

0000340c <lora_driver_set_application_key>:
    340c:	fc 01       	movw	r30, r24
    340e:	01 90       	ld	r0, Z+
    3410:	00 20       	and	r0, r0
    3412:	e9 f7       	brne	.-6      	; 0x340e <lora_driver_set_application_key+0x2>
    3414:	9f 01       	movw	r18, r30
    3416:	21 52       	subi	r18, 0x21	; 33
    3418:	31 09       	sbc	r19, r1
    341a:	28 17       	cp	r18, r24
    341c:	39 07       	cpc	r19, r25
    341e:	29 f4       	brne	.+10     	; 0x342a <lora_driver_set_application_key+0x1e>
    3420:	bc 01       	movw	r22, r24
    3422:	80 e6       	ldi	r24, 0x60	; 96
    3424:	96 e0       	ldi	r25, 0x06	; 6
    3426:	48 cf       	rjmp	.-368    	; 0x32b8 <_upload_message_rc>
    3428:	08 95       	ret
    342a:	89 e0       	ldi	r24, 0x09	; 9
    342c:	08 95       	ret

0000342e <lora_driver_save_mac>:
    342e:	60 e0       	ldi	r22, 0x00	; 0
    3430:	70 e0       	ldi	r23, 0x00	; 0
    3432:	8f e9       	ldi	r24, 0x9F	; 159
    3434:	96 e0       	ldi	r25, 0x06	; 6
    3436:	40 cf       	rjmp	.-384    	; 0x32b8 <_upload_message_rc>
    3438:	08 95       	ret

0000343a <lora_driver_join>:
    343a:	e8 2f       	mov	r30, r24
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	ee 0f       	add	r30, r30
    3440:	ff 1f       	adc	r31, r31
    3442:	ed 5a       	subi	r30, 0xAD	; 173
    3444:	f7 4f       	sbci	r31, 0xF7	; 247
    3446:	60 81       	ld	r22, Z
    3448:	71 81       	ldd	r23, Z+1	; 0x01
    344a:	88 ea       	ldi	r24, 0xA8	; 168
    344c:	96 e0       	ldi	r25, 0x06	; 6
    344e:	34 df       	rcall	.-408    	; 0x32b8 <_upload_message_rc>
    3450:	81 11       	cpse	r24, r1
    3452:	12 c0       	rjmp	.+36     	; 0x3478 <lora_driver_join+0x3e>
    3454:	28 e2       	ldi	r18, 0x28	; 40
    3456:	35 e0       	ldi	r19, 0x05	; 5
    3458:	4d e2       	ldi	r20, 0x2D	; 45
    345a:	50 e0       	ldi	r21, 0x00	; 0
    345c:	66 e2       	ldi	r22, 0x26	; 38
    345e:	7a e0       	ldi	r23, 0x0A	; 10
    3460:	80 91 9d 09 	lds	r24, 0x099D	; 0x80099d <_reply_buffer_handle>
    3464:	90 91 9e 09 	lds	r25, 0x099E	; 0x80099e <_reply_buffer_handle+0x1>
    3468:	0e 94 a9 09 	call	0x1352	; 0x1352 <xStreamBufferReceive>
    346c:	88 23       	and	r24, r24
    346e:	21 f0       	breq	.+8      	; 0x3478 <lora_driver_join+0x3e>
    3470:	86 e2       	ldi	r24, 0x26	; 38
    3472:	9a e0       	ldi	r25, 0x0A	; 10
    3474:	e6 ce       	rjmp	.-564    	; 0x3242 <_reply2return_code>
    3476:	08 95       	ret
    3478:	86 e2       	ldi	r24, 0x26	; 38
    347a:	9a e0       	ldi	r25, 0x0A	; 10
    347c:	e2 ce       	rjmp	.-572    	; 0x3242 <_reply2return_code>
    347e:	08 95       	ret

00003480 <lora_driver_sent_upload_message>:
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    3484:	1f 92       	push	r1
    3486:	cd b7       	in	r28, 0x3d	; 61
    3488:	de b7       	in	r29, 0x3e	; 62
    348a:	db 01       	movw	r26, r22
    348c:	11 96       	adiw	r26, 0x01	; 1
    348e:	9c 91       	ld	r25, X
    3490:	11 97       	sbiw	r26, 0x01	; 1
    3492:	95 31       	cpi	r25, 0x15	; 21
    3494:	08 f0       	brcs	.+2      	; 0x3498 <lora_driver_sent_upload_message+0x18>
    3496:	87 c0       	rjmp	.+270    	; 0x35a6 <lora_driver_sent_upload_message+0x126>
    3498:	99 23       	and	r25, r25
    349a:	81 f1       	breq	.+96     	; 0x34fc <lora_driver_sent_upload_message+0x7c>
    349c:	60 e0       	ldi	r22, 0x00	; 0
    349e:	70 e0       	ldi	r23, 0x00	; 0
    34a0:	27 2f       	mov	r18, r23
    34a2:	30 e0       	ldi	r19, 0x00	; 0
    34a4:	46 2f       	mov	r20, r22
    34a6:	50 e0       	ldi	r21, 0x00	; 0
    34a8:	fd 01       	movw	r30, r26
    34aa:	e4 0f       	add	r30, r20
    34ac:	f5 1f       	adc	r31, r21
    34ae:	92 81       	ldd	r25, Z+2	; 0x02
    34b0:	92 95       	swap	r25
    34b2:	9f 70       	andi	r25, 0x0F	; 15
    34b4:	9a 30       	cpi	r25, 0x0A	; 10
    34b6:	10 f0       	brcs	.+4      	; 0x34bc <lora_driver_sent_upload_message+0x3c>
    34b8:	99 5c       	subi	r25, 0xC9	; 201
    34ba:	01 c0       	rjmp	.+2      	; 0x34be <lora_driver_sent_upload_message+0x3e>
    34bc:	90 5d       	subi	r25, 0xD0	; 208
    34be:	f9 01       	movw	r30, r18
    34c0:	e9 54       	subi	r30, 0x49	; 73
    34c2:	f6 4f       	sbci	r31, 0xF6	; 246
    34c4:	90 83       	st	Z, r25
    34c6:	2f 5f       	subi	r18, 0xFF	; 255
    34c8:	3f 4f       	sbci	r19, 0xFF	; 255
    34ca:	fd 01       	movw	r30, r26
    34cc:	e4 0f       	add	r30, r20
    34ce:	f5 1f       	adc	r31, r21
    34d0:	92 81       	ldd	r25, Z+2	; 0x02
    34d2:	9f 70       	andi	r25, 0x0F	; 15
    34d4:	49 2f       	mov	r20, r25
    34d6:	50 e0       	ldi	r21, 0x00	; 0
    34d8:	4a 30       	cpi	r20, 0x0A	; 10
    34da:	51 05       	cpc	r21, r1
    34dc:	14 f0       	brlt	.+4      	; 0x34e2 <lora_driver_sent_upload_message+0x62>
    34de:	99 5c       	subi	r25, 0xC9	; 201
    34e0:	01 c0       	rjmp	.+2      	; 0x34e4 <lora_driver_sent_upload_message+0x64>
    34e2:	90 5d       	subi	r25, 0xD0	; 208
    34e4:	f9 01       	movw	r30, r18
    34e6:	e9 54       	subi	r30, 0x49	; 73
    34e8:	f6 4f       	sbci	r31, 0xF6	; 246
    34ea:	90 83       	st	Z, r25
    34ec:	7e 5f       	subi	r23, 0xFE	; 254
    34ee:	6f 5f       	subi	r22, 0xFF	; 255
    34f0:	11 96       	adiw	r26, 0x01	; 1
    34f2:	9c 91       	ld	r25, X
    34f4:	11 97       	sbiw	r26, 0x01	; 1
    34f6:	69 17       	cp	r22, r25
    34f8:	98 f2       	brcs	.-90     	; 0x34a0 <lora_driver_sent_upload_message+0x20>
    34fa:	01 c0       	rjmp	.+2      	; 0x34fe <lora_driver_sent_upload_message+0x7e>
    34fc:	70 e0       	ldi	r23, 0x00	; 0
    34fe:	e7 2f       	mov	r30, r23
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	e9 54       	subi	r30, 0x49	; 73
    3504:	f6 4f       	sbci	r31, 0xF6	; 246
    3506:	10 82       	st	Z, r1
    3508:	4c 91       	ld	r20, X
    350a:	81 11       	cpse	r24, r1
    350c:	03 c0       	rjmp	.+6      	; 0x3514 <lora_driver_sent_upload_message+0x94>
    350e:	81 eb       	ldi	r24, 0xB1	; 177
    3510:	96 e0       	ldi	r25, 0x06	; 6
    3512:	02 c0       	rjmp	.+4      	; 0x3518 <lora_driver_sent_upload_message+0x98>
    3514:	83 eb       	ldi	r24, 0xB3	; 179
    3516:	96 e0       	ldi	r25, 0x06	; 6
    3518:	27 eb       	ldi	r18, 0xB7	; 183
    351a:	39 e0       	ldi	r19, 0x09	; 9
    351c:	3f 93       	push	r19
    351e:	2f 93       	push	r18
    3520:	1f 92       	push	r1
    3522:	4f 93       	push	r20
    3524:	9f 93       	push	r25
    3526:	8f 93       	push	r24
    3528:	87 eb       	ldi	r24, 0xB7	; 183
    352a:	96 e0       	ldi	r25, 0x06	; 6
    352c:	9f 93       	push	r25
    352e:	8f 93       	push	r24
    3530:	89 ef       	ldi	r24, 0xF9	; 249
    3532:	99 e0       	ldi	r25, 0x09	; 9
    3534:	9f 93       	push	r25
    3536:	8f 93       	push	r24
    3538:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <sprintf>
    353c:	60 e0       	ldi	r22, 0x00	; 0
    353e:	70 e0       	ldi	r23, 0x00	; 0
    3540:	89 ef       	ldi	r24, 0xF9	; 249
    3542:	99 e0       	ldi	r25, 0x09	; 9
    3544:	b9 de       	rcall	.-654    	; 0x32b8 <_upload_message_rc>
    3546:	0f b6       	in	r0, 0x3f	; 63
    3548:	f8 94       	cli
    354a:	de bf       	out	0x3e, r29	; 62
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	cd bf       	out	0x3d, r28	; 61
    3550:	8e 30       	cpi	r24, 0x0E	; 14
    3552:	51 f5       	brne	.+84     	; 0x35a8 <lora_driver_sent_upload_message+0x128>
    3554:	87 e0       	ldi	r24, 0x07	; 7
    3556:	89 83       	std	Y+1, r24	; 0x01
    3558:	be 01       	movw	r22, r28
    355a:	6f 5f       	subi	r22, 0xFF	; 255
    355c:	7f 4f       	sbci	r23, 0xFF	; 255
    355e:	86 e2       	ldi	r24, 0x26	; 38
    3560:	9a e0       	ldi	r25, 0x0A	; 10
    3562:	3c d1       	rcall	.+632    	; 0x37dc <decode_port_no>
    3564:	80 93 a1 09 	sts	0x09A1, r24	; 0x8009a1 <_downlink_payload>
    3568:	e9 81       	ldd	r30, Y+1	; 0x01
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	ea 5d       	subi	r30, 0xDA	; 218
    356e:	f5 4f       	sbci	r31, 0xF5	; 245
    3570:	df 01       	movw	r26, r30
    3572:	0d 90       	ld	r0, X+
    3574:	00 20       	and	r0, r0
    3576:	e9 f7       	brne	.-6      	; 0x3572 <lora_driver_sent_upload_message+0xf2>
    3578:	11 97       	sbiw	r26, 0x01	; 1
    357a:	ae 1b       	sub	r26, r30
    357c:	bf 0b       	sbc	r27, r31
    357e:	aa 23       	and	r26, r26
    3580:	81 f0       	breq	.+32     	; 0x35a2 <lora_driver_sent_upload_message+0x122>
    3582:	bb 27       	eor	r27, r27
    3584:	11 97       	sbiw	r26, 0x01	; 1
    3586:	cd 01       	movw	r24, r26
    3588:	0a f4       	brpl	.+2      	; 0x358c <lora_driver_sent_upload_message+0x10c>
    358a:	01 96       	adiw	r24, 0x01	; 1
    358c:	95 95       	asr	r25
    358e:	87 95       	ror	r24
    3590:	80 93 a2 09 	sts	0x09A2, r24	; 0x8009a2 <_downlink_payload+0x1>
    3594:	af 01       	movw	r20, r30
    3596:	4f 5f       	subi	r20, 0xFF	; 255
    3598:	5f 4f       	sbci	r21, 0xFF	; 255
    359a:	64 e1       	ldi	r22, 0x14	; 20
    359c:	83 ea       	ldi	r24, 0xA3	; 163
    359e:	99 e0       	ldi	r25, 0x09	; 9
    35a0:	49 d1       	rcall	.+658    	; 0x3834 <decode_hexadecimal_string_bytes>
    35a2:	8e e0       	ldi	r24, 0x0E	; 14
    35a4:	01 c0       	rjmp	.+2      	; 0x35a8 <lora_driver_sent_upload_message+0x128>
    35a6:	84 e1       	ldi	r24, 0x14	; 20
    35a8:	0f 90       	pop	r0
    35aa:	df 91       	pop	r29
    35ac:	cf 91       	pop	r28
    35ae:	08 95       	ret

000035b0 <lora_driver_set_adaptive_data_rate>:
    35b0:	81 30       	cpi	r24, 0x01	; 1
    35b2:	19 f0       	breq	.+6      	; 0x35ba <lora_driver_set_adaptive_data_rate+0xa>
    35b4:	67 ec       	ldi	r22, 0xC7	; 199
    35b6:	76 e0       	ldi	r23, 0x06	; 6
    35b8:	02 c0       	rjmp	.+4      	; 0x35be <lora_driver_set_adaptive_data_rate+0xe>
    35ba:	67 e8       	ldi	r22, 0x87	; 135
    35bc:	77 e0       	ldi	r23, 0x07	; 7
    35be:	8b ec       	ldi	r24, 0xCB	; 203
    35c0:	96 e0       	ldi	r25, 0x06	; 6
    35c2:	7a ce       	rjmp	.-780    	; 0x32b8 <_upload_message_rc>
    35c4:	08 95       	ret

000035c6 <lora_driver_configure_to_eu868>:
    35c6:	2f 92       	push	r2
    35c8:	3f 92       	push	r3
    35ca:	4f 92       	push	r4
    35cc:	5f 92       	push	r5
    35ce:	6f 92       	push	r6
    35d0:	7f 92       	push	r7
    35d2:	8f 92       	push	r8
    35d4:	9f 92       	push	r9
    35d6:	af 92       	push	r10
    35d8:	bf 92       	push	r11
    35da:	cf 92       	push	r12
    35dc:	df 92       	push	r13
    35de:	ef 92       	push	r14
    35e0:	ff 92       	push	r15
    35e2:	0f 93       	push	r16
    35e4:	1f 93       	push	r17
    35e6:	cf 93       	push	r28
    35e8:	df 93       	push	r29
    35ea:	cd b7       	in	r28, 0x3d	; 61
    35ec:	de b7       	in	r29, 0x3e	; 62
    35ee:	a0 97       	sbiw	r28, 0x20	; 32
    35f0:	0f b6       	in	r0, 0x3f	; 63
    35f2:	f8 94       	cli
    35f4:	de bf       	out	0x3e, r29	; 62
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	cd bf       	out	0x3d, r28	; 61
    35fa:	60 e1       	ldi	r22, 0x10	; 16
    35fc:	77 e0       	ldi	r23, 0x07	; 7
    35fe:	8c e1       	ldi	r24, 0x1C	; 28
    3600:	97 e0       	ldi	r25, 0x07	; 7
    3602:	c7 dd       	rcall	.-1138   	; 0x3192 <_upload_message>
    3604:	1e de       	rcall	.-964    	; 0x3242 <_reply2return_code>
    3606:	81 11       	cpse	r24, r1
    3608:	a3 c0       	rjmp	.+326    	; 0x3750 <lora_driver_configure_to_eu868+0x18a>
    360a:	80 e2       	ldi	r24, 0x20	; 32
    360c:	e1 e2       	ldi	r30, 0x21	; 33
    360e:	f2 e0       	ldi	r31, 0x02	; 2
    3610:	de 01       	movw	r26, r28
    3612:	11 96       	adiw	r26, 0x01	; 1
    3614:	01 90       	ld	r0, Z+
    3616:	0d 92       	st	X+, r0
    3618:	8a 95       	dec	r24
    361a:	e1 f7       	brne	.-8      	; 0x3614 <lora_driver_configure_to_eu868+0x4e>
    361c:	9e 01       	movw	r18, r28
    361e:	2f 5f       	subi	r18, 0xFF	; 255
    3620:	3f 4f       	sbci	r19, 0xFF	; 255
    3622:	69 01       	movw	r12, r18
    3624:	e1 2c       	mov	r14, r1
    3626:	f1 2c       	mov	r15, r1
    3628:	0f 2e       	mov	r0, r31
    362a:	f8 e2       	ldi	r31, 0x28	; 40
    362c:	af 2e       	mov	r10, r31
    362e:	f7 e0       	ldi	r31, 0x07	; 7
    3630:	bf 2e       	mov	r11, r31
    3632:	f0 2d       	mov	r31, r0
    3634:	09 ef       	ldi	r16, 0xF9	; 249
    3636:	19 e0       	ldi	r17, 0x09	; 9
    3638:	0f 2e       	mov	r0, r31
    363a:	f1 e4       	ldi	r31, 0x41	; 65
    363c:	4f 2e       	mov	r4, r31
    363e:	f7 e0       	ldi	r31, 0x07	; 7
    3640:	5f 2e       	mov	r5, r31
    3642:	f0 2d       	mov	r31, r0
    3644:	0f 2e       	mov	r0, r31
    3646:	f8 e5       	ldi	r31, 0x58	; 88
    3648:	8f 2e       	mov	r8, r31
    364a:	f7 e0       	ldi	r31, 0x07	; 7
    364c:	9f 2e       	mov	r9, r31
    364e:	f0 2d       	mov	r31, r0
    3650:	0f 2e       	mov	r0, r31
    3652:	f2 e7       	ldi	r31, 0x72	; 114
    3654:	6f 2e       	mov	r6, r31
    3656:	f7 e0       	ldi	r31, 0x07	; 7
    3658:	7f 2e       	mov	r7, r31
    365a:	f0 2d       	mov	r31, r0
    365c:	3e 2c       	mov	r3, r14
    365e:	2f 2c       	mov	r2, r15
    3660:	ff 92       	push	r15
    3662:	ef 92       	push	r14
    3664:	bf 92       	push	r11
    3666:	af 92       	push	r10
    3668:	1f 93       	push	r17
    366a:	0f 93       	push	r16
    366c:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <sprintf>
    3670:	60 e0       	ldi	r22, 0x00	; 0
    3672:	70 e0       	ldi	r23, 0x00	; 0
    3674:	c8 01       	movw	r24, r16
    3676:	8d dd       	rcall	.-1254   	; 0x3192 <_upload_message>
    3678:	e4 dd       	rcall	.-1080   	; 0x3242 <_reply2return_code>
    367a:	0f 90       	pop	r0
    367c:	0f 90       	pop	r0
    367e:	0f 90       	pop	r0
    3680:	0f 90       	pop	r0
    3682:	0f 90       	pop	r0
    3684:	0f 90       	pop	r0
    3686:	81 11       	cpse	r24, r1
    3688:	63 c0       	rjmp	.+198    	; 0x3750 <lora_driver_configure_to_eu868+0x18a>
    368a:	32 e0       	ldi	r19, 0x02	; 2
    368c:	3e 15       	cp	r19, r14
    368e:	e8 f4       	brcc	.+58     	; 0x36ca <lora_driver_configure_to_eu868+0x104>
    3690:	f6 01       	movw	r30, r12
    3692:	83 81       	ldd	r24, Z+3	; 0x03
    3694:	8f 93       	push	r24
    3696:	82 81       	ldd	r24, Z+2	; 0x02
    3698:	8f 93       	push	r24
    369a:	81 81       	ldd	r24, Z+1	; 0x01
    369c:	8f 93       	push	r24
    369e:	80 81       	ld	r24, Z
    36a0:	8f 93       	push	r24
    36a2:	ff 92       	push	r15
    36a4:	ef 92       	push	r14
    36a6:	5f 92       	push	r5
    36a8:	4f 92       	push	r4
    36aa:	1f 93       	push	r17
    36ac:	0f 93       	push	r16
    36ae:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <sprintf>
    36b2:	60 e0       	ldi	r22, 0x00	; 0
    36b4:	70 e0       	ldi	r23, 0x00	; 0
    36b6:	c8 01       	movw	r24, r16
    36b8:	6c dd       	rcall	.-1320   	; 0x3192 <_upload_message>
    36ba:	c3 dd       	rcall	.-1146   	; 0x3242 <_reply2return_code>
    36bc:	0f b6       	in	r0, 0x3f	; 63
    36be:	f8 94       	cli
    36c0:	de bf       	out	0x3e, r29	; 62
    36c2:	0f be       	out	0x3f, r0	; 63
    36c4:	cd bf       	out	0x3d, r28	; 61
    36c6:	81 11       	cpse	r24, r1
    36c8:	43 c0       	rjmp	.+134    	; 0x3750 <lora_driver_configure_to_eu868+0x18a>
    36ca:	2f 92       	push	r2
    36cc:	3f 92       	push	r3
    36ce:	9f 92       	push	r9
    36d0:	8f 92       	push	r8
    36d2:	1f 93       	push	r17
    36d4:	0f 93       	push	r16
    36d6:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <sprintf>
    36da:	60 e0       	ldi	r22, 0x00	; 0
    36dc:	70 e0       	ldi	r23, 0x00	; 0
    36de:	c8 01       	movw	r24, r16
    36e0:	58 dd       	rcall	.-1360   	; 0x3192 <_upload_message>
    36e2:	af dd       	rcall	.-1186   	; 0x3242 <_reply2return_code>
    36e4:	0f 90       	pop	r0
    36e6:	0f 90       	pop	r0
    36e8:	0f 90       	pop	r0
    36ea:	0f 90       	pop	r0
    36ec:	0f 90       	pop	r0
    36ee:	0f 90       	pop	r0
    36f0:	81 11       	cpse	r24, r1
    36f2:	2e c0       	rjmp	.+92     	; 0x3750 <lora_driver_configure_to_eu868+0x18a>
    36f4:	2f 92       	push	r2
    36f6:	3f 92       	push	r3
    36f8:	7f 92       	push	r7
    36fa:	6f 92       	push	r6
    36fc:	1f 93       	push	r17
    36fe:	0f 93       	push	r16
    3700:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <sprintf>
    3704:	60 e0       	ldi	r22, 0x00	; 0
    3706:	70 e0       	ldi	r23, 0x00	; 0
    3708:	c8 01       	movw	r24, r16
    370a:	43 dd       	rcall	.-1402   	; 0x3192 <_upload_message>
    370c:	9a dd       	rcall	.-1228   	; 0x3242 <_reply2return_code>
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	0f 90       	pop	r0
    3718:	0f 90       	pop	r0
    371a:	81 11       	cpse	r24, r1
    371c:	19 c0       	rjmp	.+50     	; 0x3750 <lora_driver_configure_to_eu868+0x18a>
    371e:	3f ef       	ldi	r19, 0xFF	; 255
    3720:	e3 1a       	sub	r14, r19
    3722:	f3 0a       	sbc	r15, r19
    3724:	84 e0       	ldi	r24, 0x04	; 4
    3726:	c8 0e       	add	r12, r24
    3728:	d1 1c       	adc	r13, r1
    372a:	98 e0       	ldi	r25, 0x08	; 8
    372c:	e9 16       	cp	r14, r25
    372e:	f1 04       	cpc	r15, r1
    3730:	09 f0       	breq	.+2      	; 0x3734 <lora_driver_configure_to_eu868+0x16e>
    3732:	94 cf       	rjmp	.-216    	; 0x365c <lora_driver_configure_to_eu868+0x96>
    3734:	60 e0       	ldi	r22, 0x00	; 0
    3736:	70 e0       	ldi	r23, 0x00	; 0
    3738:	8a e8       	ldi	r24, 0x8A	; 138
    373a:	97 e0       	ldi	r25, 0x07	; 7
    373c:	2a dd       	rcall	.-1452   	; 0x3192 <_upload_message>
    373e:	81 dd       	rcall	.-1278   	; 0x3242 <_reply2return_code>
    3740:	81 11       	cpse	r24, r1
    3742:	06 c0       	rjmp	.+12     	; 0x3750 <lora_driver_configure_to_eu868+0x18a>
    3744:	60 e0       	ldi	r22, 0x00	; 0
    3746:	70 e0       	ldi	r23, 0x00	; 0
    3748:	8b e9       	ldi	r24, 0x9B	; 155
    374a:	97 e0       	ldi	r25, 0x07	; 7
    374c:	22 dd       	rcall	.-1468   	; 0x3192 <_upload_message>
    374e:	79 dd       	rcall	.-1294   	; 0x3242 <_reply2return_code>
    3750:	a0 96       	adiw	r28, 0x20	; 32
    3752:	0f b6       	in	r0, 0x3f	; 63
    3754:	f8 94       	cli
    3756:	de bf       	out	0x3e, r29	; 62
    3758:	0f be       	out	0x3f, r0	; 63
    375a:	cd bf       	out	0x3d, r28	; 61
    375c:	df 91       	pop	r29
    375e:	cf 91       	pop	r28
    3760:	1f 91       	pop	r17
    3762:	0f 91       	pop	r16
    3764:	ff 90       	pop	r15
    3766:	ef 90       	pop	r14
    3768:	df 90       	pop	r13
    376a:	cf 90       	pop	r12
    376c:	bf 90       	pop	r11
    376e:	af 90       	pop	r10
    3770:	9f 90       	pop	r9
    3772:	8f 90       	pop	r8
    3774:	7f 90       	pop	r7
    3776:	6f 90       	pop	r6
    3778:	5f 90       	pop	r5
    377a:	4f 90       	pop	r4
    377c:	3f 90       	pop	r3
    377e:	2f 90       	pop	r2
    3780:	08 95       	ret

00003782 <lora_driver_set_otaa_identity>:
    3782:	ef 92       	push	r14
    3784:	ff 92       	push	r15
    3786:	0f 93       	push	r16
    3788:	1f 93       	push	r17
    378a:	cf 93       	push	r28
    378c:	df 93       	push	r29
    378e:	ec 01       	movw	r28, r24
    3790:	8b 01       	movw	r16, r22
    3792:	7a 01       	movw	r14, r20
    3794:	81 e0       	ldi	r24, 0x01	; 1
    3796:	0c df       	rcall	.-488    	; 0x35b0 <lora_driver_set_adaptive_data_rate>
    3798:	81 11       	cpse	r24, r1
    379a:	0d c0       	rjmp	.+26     	; 0x37b6 <lora_driver_set_otaa_identity+0x34>
    379c:	ce 01       	movw	r24, r28
    379e:	25 de       	rcall	.-950    	; 0x33ea <lora_driver_set_application_identifier>
    37a0:	81 11       	cpse	r24, r1
    37a2:	09 c0       	rjmp	.+18     	; 0x37b6 <lora_driver_set_otaa_identity+0x34>
    37a4:	c8 01       	movw	r24, r16
    37a6:	32 de       	rcall	.-924    	; 0x340c <lora_driver_set_application_key>
    37a8:	81 11       	cpse	r24, r1
    37aa:	05 c0       	rjmp	.+10     	; 0x37b6 <lora_driver_set_otaa_identity+0x34>
    37ac:	c7 01       	movw	r24, r14
    37ae:	0c de       	rcall	.-1000   	; 0x33c8 <lora_driver_set_device_identifier>
    37b0:	81 11       	cpse	r24, r1
    37b2:	01 c0       	rjmp	.+2      	; 0x37b6 <lora_driver_set_otaa_identity+0x34>
    37b4:	3c de       	rcall	.-904    	; 0x342e <lora_driver_save_mac>
    37b6:	df 91       	pop	r29
    37b8:	cf 91       	pop	r28
    37ba:	1f 91       	pop	r17
    37bc:	0f 91       	pop	r16
    37be:	ff 90       	pop	r15
    37c0:	ef 90       	pop	r14
    37c2:	08 95       	ret

000037c4 <lora_driver_map_return_code_to_text>:
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	fc 01       	movw	r30, r24
    37c8:	ee 0f       	add	r30, r30
    37ca:	ff 1f       	adc	r31, r31
    37cc:	8e 0f       	add	r24, r30
    37ce:	9f 1f       	adc	r25, r31
    37d0:	fc 01       	movw	r30, r24
    37d2:	e9 5a       	subi	r30, 0xA9	; 169
    37d4:	f7 4f       	sbci	r31, 0xF7	; 247
    37d6:	81 81       	ldd	r24, Z+1	; 0x01
    37d8:	92 81       	ldd	r25, Z+2	; 0x02
    37da:	08 95       	ret

000037dc <decode_port_no>:
    37dc:	dc 01       	movw	r26, r24
    37de:	00 97       	sbiw	r24, 0x00	; 0
    37e0:	29 f1       	breq	.+74     	; 0x382c <decode_port_no+0x50>
    37e2:	fb 01       	movw	r30, r22
    37e4:	20 81       	ld	r18, Z
    37e6:	fc 01       	movw	r30, r24
    37e8:	01 90       	ld	r0, Z+
    37ea:	00 20       	and	r0, r0
    37ec:	e9 f7       	brne	.-6      	; 0x37e8 <decode_port_no+0xc>
    37ee:	31 97       	sbiw	r30, 0x01	; 1
    37f0:	e8 1b       	sub	r30, r24
    37f2:	f9 0b       	sbc	r31, r25
    37f4:	82 2f       	mov	r24, r18
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	e8 17       	cp	r30, r24
    37fa:	f9 07       	cpc	r31, r25
    37fc:	c8 f0       	brcs	.+50     	; 0x3830 <decode_port_no+0x54>
    37fe:	80 e0       	ldi	r24, 0x00	; 0
    3800:	08 c0       	rjmp	.+16     	; 0x3812 <decode_port_no+0x36>
    3802:	88 0f       	add	r24, r24
    3804:	38 2f       	mov	r19, r24
    3806:	33 0f       	add	r19, r19
    3808:	33 0f       	add	r19, r19
    380a:	83 0f       	add	r24, r19
    380c:	80 53       	subi	r24, 0x30	; 48
    380e:	89 0f       	add	r24, r25
    3810:	2f 5f       	subi	r18, 0xFF	; 255
    3812:	fd 01       	movw	r30, r26
    3814:	e2 0f       	add	r30, r18
    3816:	f1 1d       	adc	r31, r1
    3818:	90 81       	ld	r25, Z
    381a:	30 ed       	ldi	r19, 0xD0	; 208
    381c:	39 0f       	add	r19, r25
    381e:	3a 30       	cpi	r19, 0x0A	; 10
    3820:	10 f4       	brcc	.+4      	; 0x3826 <decode_port_no+0x4a>
    3822:	91 11       	cpse	r25, r1
    3824:	ee cf       	rjmp	.-36     	; 0x3802 <decode_port_no+0x26>
    3826:	fb 01       	movw	r30, r22
    3828:	20 83       	st	Z, r18
    382a:	08 95       	ret
    382c:	80 e0       	ldi	r24, 0x00	; 0
    382e:	08 95       	ret
    3830:	80 e0       	ldi	r24, 0x00	; 0
    3832:	08 95       	ret

00003834 <decode_hexadecimal_string_bytes>:
    3834:	0f 93       	push	r16
    3836:	1f 93       	push	r17
    3838:	cf 93       	push	r28
    383a:	df 93       	push	r29
    383c:	dc 01       	movw	r26, r24
    383e:	ea 01       	movw	r28, r20
    3840:	20 97       	sbiw	r28, 0x00	; 0
    3842:	e1 f1       	breq	.+120    	; 0x38bc <decode_hexadecimal_string_bytes+0x88>
    3844:	fa 01       	movw	r30, r20
    3846:	01 90       	ld	r0, Z+
    3848:	00 20       	and	r0, r0
    384a:	e9 f7       	brne	.-6      	; 0x3846 <decode_hexadecimal_string_bytes+0x12>
    384c:	31 97       	sbiw	r30, 0x01	; 1
    384e:	e4 1b       	sub	r30, r20
    3850:	f5 0b       	sbc	r31, r21
    3852:	32 97       	sbiw	r30, 0x02	; 2
    3854:	10 f5       	brcc	.+68     	; 0x389a <decode_hexadecimal_string_bytes+0x66>
    3856:	32 c0       	rjmp	.+100    	; 0x38bc <decode_hexadecimal_string_bytes+0x88>
    3858:	8d 01       	movw	r16, r26
    385a:	04 0f       	add	r16, r20
    385c:	15 1f       	adc	r17, r21
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	ae 01       	movw	r20, r28
    3862:	42 0f       	add	r20, r18
    3864:	53 1f       	adc	r21, r19
    3866:	fa 01       	movw	r30, r20
    3868:	90 81       	ld	r25, Z
    386a:	91 34       	cpi	r25, 0x41	; 65
    386c:	28 f0       	brcs	.+10     	; 0x3878 <decode_hexadecimal_string_bytes+0x44>
    386e:	97 53       	subi	r25, 0x37	; 55
    3870:	59 2f       	mov	r21, r25
    3872:	52 95       	swap	r21
    3874:	50 7f       	andi	r21, 0xF0	; 240
    3876:	03 c0       	rjmp	.+6      	; 0x387e <decode_hexadecimal_string_bytes+0x4a>
    3878:	59 2f       	mov	r21, r25
    387a:	52 95       	swap	r21
    387c:	50 7f       	andi	r21, 0xF0	; 240
    387e:	2c 0f       	add	r18, r28
    3880:	3d 1f       	adc	r19, r29
    3882:	f9 01       	movw	r30, r18
    3884:	91 81       	ldd	r25, Z+1	; 0x01
    3886:	91 34       	cpi	r25, 0x41	; 65
    3888:	10 f0       	brcs	.+4      	; 0x388e <decode_hexadecimal_string_bytes+0x5a>
    388a:	97 53       	subi	r25, 0x37	; 55
    388c:	01 c0       	rjmp	.+2      	; 0x3890 <decode_hexadecimal_string_bytes+0x5c>
    388e:	90 53       	subi	r25, 0x30	; 48
    3890:	95 0f       	add	r25, r21
    3892:	f8 01       	movw	r30, r16
    3894:	90 83       	st	Z, r25
    3896:	8f 5f       	subi	r24, 0xFF	; 255
    3898:	01 c0       	rjmp	.+2      	; 0x389c <decode_hexadecimal_string_bytes+0x68>
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	28 2f       	mov	r18, r24
    389e:	22 0f       	add	r18, r18
    38a0:	48 2f       	mov	r20, r24
    38a2:	50 e0       	ldi	r21, 0x00	; 0
    38a4:	fe 01       	movw	r30, r28
    38a6:	01 90       	ld	r0, Z+
    38a8:	00 20       	and	r0, r0
    38aa:	e9 f7       	brne	.-6      	; 0x38a6 <decode_hexadecimal_string_bytes+0x72>
    38ac:	31 97       	sbiw	r30, 0x01	; 1
    38ae:	ec 1b       	sub	r30, r28
    38b0:	fd 0b       	sbc	r31, r29
    38b2:	4e 17       	cp	r20, r30
    38b4:	5f 07       	cpc	r21, r31
    38b6:	10 f4       	brcc	.+4      	; 0x38bc <decode_hexadecimal_string_bytes+0x88>
    38b8:	86 13       	cpse	r24, r22
    38ba:	ce cf       	rjmp	.-100    	; 0x3858 <decode_hexadecimal_string_bytes+0x24>
    38bc:	df 91       	pop	r29
    38be:	cf 91       	pop	r28
    38c0:	1f 91       	pop	r17
    38c2:	0f 91       	pop	r16
    38c4:	08 95       	ret

000038c6 <reg_read_register>:
    38c6:	fc 01       	movw	r30, r24
    38c8:	80 81       	ld	r24, Z
    38ca:	08 95       	ret

000038cc <reg_read_bit>:
    38cc:	fc 01       	movw	r30, r24
    38ce:	20 81       	ld	r18, Z
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	02 c0       	rjmp	.+4      	; 0x38da <reg_read_bit+0xe>
    38d6:	88 0f       	add	r24, r24
    38d8:	99 1f       	adc	r25, r25
    38da:	6a 95       	dec	r22
    38dc:	e2 f7       	brpl	.-8      	; 0x38d6 <reg_read_bit+0xa>
    38de:	82 23       	and	r24, r18
    38e0:	08 95       	ret

000038e2 <reg_read_bits>:
    38e2:	fc 01       	movw	r30, r24
    38e4:	80 81       	ld	r24, Z
    38e6:	86 23       	and	r24, r22
    38e8:	08 95       	ret

000038ea <reg_set_register>:
    38ea:	fc 01       	movw	r30, r24
    38ec:	60 83       	st	Z, r22
    38ee:	08 95       	ret

000038f0 <reg_clear_register>:
    38f0:	fc 01       	movw	r30, r24
    38f2:	10 82       	st	Z, r1
    38f4:	08 95       	ret

000038f6 <reg_set_bit>:
    38f6:	fc 01       	movw	r30, r24
    38f8:	40 81       	ld	r20, Z
    38fa:	21 e0       	ldi	r18, 0x01	; 1
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	02 c0       	rjmp	.+4      	; 0x3904 <reg_set_bit+0xe>
    3900:	22 0f       	add	r18, r18
    3902:	33 1f       	adc	r19, r19
    3904:	6a 95       	dec	r22
    3906:	e2 f7       	brpl	.-8      	; 0x3900 <reg_set_bit+0xa>
    3908:	24 2b       	or	r18, r20
    390a:	20 83       	st	Z, r18
    390c:	08 95       	ret

0000390e <reg_set_bits>:
    390e:	fc 01       	movw	r30, r24
    3910:	20 81       	ld	r18, Z
    3912:	62 2b       	or	r22, r18
    3914:	60 83       	st	Z, r22
    3916:	08 95       	ret

00003918 <reg_toggle_bit>:
    3918:	fc 01       	movw	r30, r24
    391a:	40 81       	ld	r20, Z
    391c:	21 e0       	ldi	r18, 0x01	; 1
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	02 c0       	rjmp	.+4      	; 0x3926 <reg_toggle_bit+0xe>
    3922:	22 0f       	add	r18, r18
    3924:	33 1f       	adc	r19, r19
    3926:	6a 95       	dec	r22
    3928:	e2 f7       	brpl	.-8      	; 0x3922 <reg_toggle_bit+0xa>
    392a:	24 27       	eor	r18, r20
    392c:	20 83       	st	Z, r18
    392e:	08 95       	ret

00003930 <reg_toggle_bits>:
    3930:	fc 01       	movw	r30, r24
    3932:	20 81       	ld	r18, Z
    3934:	62 27       	eor	r22, r18
    3936:	60 83       	st	Z, r22
    3938:	08 95       	ret

0000393a <reg_clear_bit>:
    393a:	fc 01       	movw	r30, r24
    393c:	90 81       	ld	r25, Z
    393e:	21 e0       	ldi	r18, 0x01	; 1
    3940:	30 e0       	ldi	r19, 0x00	; 0
    3942:	02 c0       	rjmp	.+4      	; 0x3948 <reg_clear_bit+0xe>
    3944:	22 0f       	add	r18, r18
    3946:	33 1f       	adc	r19, r19
    3948:	6a 95       	dec	r22
    394a:	e2 f7       	brpl	.-8      	; 0x3944 <reg_clear_bit+0xa>
    394c:	20 95       	com	r18
    394e:	29 23       	and	r18, r25
    3950:	20 83       	st	Z, r18
    3952:	08 95       	ret

00003954 <reg_clear_bits>:
    3954:	fc 01       	movw	r30, r24
    3956:	90 81       	ld	r25, Z
    3958:	60 95       	com	r22
    395a:	69 23       	and	r22, r25
    395c:	60 83       	st	Z, r22
    395e:	08 95       	ret

00003960 <_serial_call_back>:
    3960:	80 91 56 0a 	lds	r24, 0x0A56	; 0x800a56 <crc_sum.1941>
    3964:	86 0f       	add	r24, r22
    3966:	80 93 56 0a 	sts	0x0A56, r24	; 0x800a56 <crc_sum.1941>
    396a:	90 91 59 0a 	lds	r25, 0x0A59	; 0x800a59 <_mh_state>
    396e:	91 30       	cpi	r25, 0x01	; 1
    3970:	79 f0       	breq	.+30     	; 0x3990 <_serial_call_back+0x30>
    3972:	28 f0       	brcs	.+10     	; 0x397e <_serial_call_back+0x1e>
    3974:	92 30       	cpi	r25, 0x02	; 2
    3976:	a9 f0       	breq	.+42     	; 0x39a2 <_serial_call_back+0x42>
    3978:	93 30       	cpi	r25, 0x03	; 3
    397a:	19 f1       	breq	.+70     	; 0x39c2 <_serial_call_back+0x62>
    397c:	08 95       	ret
    397e:	6f 3f       	cpi	r22, 0xFF	; 255
    3980:	09 f0       	breq	.+2      	; 0x3984 <_serial_call_back+0x24>
    3982:	48 c0       	rjmp	.+144    	; 0x3a14 <_serial_call_back+0xb4>
    3984:	10 92 56 0a 	sts	0x0A56, r1	; 0x800a56 <crc_sum.1941>
    3988:	81 e0       	ldi	r24, 0x01	; 1
    398a:	80 93 59 0a 	sts	0x0A59, r24	; 0x800a59 <_mh_state>
    398e:	08 95       	ret
    3990:	66 38       	cpi	r22, 0x86	; 134
    3992:	09 f0       	breq	.+2      	; 0x3996 <_serial_call_back+0x36>
    3994:	3f c0       	rjmp	.+126    	; 0x3a14 <_serial_call_back+0xb4>
    3996:	10 92 55 0a 	sts	0x0A55, r1	; 0x800a55 <inDex.1939>
    399a:	82 e0       	ldi	r24, 0x02	; 2
    399c:	80 93 59 0a 	sts	0x0A59, r24	; 0x800a59 <_mh_state>
    39a0:	08 95       	ret
    39a2:	e0 91 55 0a 	lds	r30, 0x0A55	; 0x800a55 <inDex.1939>
    39a6:	81 e0       	ldi	r24, 0x01	; 1
    39a8:	8e 0f       	add	r24, r30
    39aa:	80 93 55 0a 	sts	0x0A55, r24	; 0x800a55 <inDex.1939>
    39ae:	f0 e0       	ldi	r31, 0x00	; 0
    39b0:	ed 5a       	subi	r30, 0xAD	; 173
    39b2:	f5 4f       	sbci	r31, 0xF5	; 245
    39b4:	60 83       	st	Z, r22
    39b6:	82 30       	cpi	r24, 0x02	; 2
    39b8:	69 f5       	brne	.+90     	; 0x3a14 <_serial_call_back+0xb4>
    39ba:	83 e0       	ldi	r24, 0x03	; 3
    39bc:	80 93 59 0a 	sts	0x0A59, r24	; 0x800a59 <_mh_state>
    39c0:	08 95       	ret
    39c2:	90 91 55 0a 	lds	r25, 0x0A55	; 0x800a55 <inDex.1939>
    39c6:	21 e0       	ldi	r18, 0x01	; 1
    39c8:	29 0f       	add	r18, r25
    39ca:	20 93 55 0a 	sts	0x0A55, r18	; 0x800a55 <inDex.1939>
    39ce:	96 30       	cpi	r25, 0x06	; 6
    39d0:	09 f5       	brne	.+66     	; 0x3a14 <_serial_call_back+0xb4>
    39d2:	81 11       	cpse	r24, r1
    39d4:	0e c0       	rjmp	.+28     	; 0x39f2 <_serial_call_back+0x92>
    39d6:	e3 e5       	ldi	r30, 0x53	; 83
    39d8:	fa e0       	ldi	r31, 0x0A	; 10
    39da:	80 81       	ld	r24, Z
    39dc:	90 e0       	ldi	r25, 0x00	; 0
    39de:	98 2f       	mov	r25, r24
    39e0:	88 27       	eor	r24, r24
    39e2:	21 81       	ldd	r18, Z+1	; 0x01
    39e4:	82 0f       	add	r24, r18
    39e6:	91 1d       	adc	r25, r1
    39e8:	90 93 5b 0a 	sts	0x0A5B, r25	; 0x800a5b <_ppm+0x1>
    39ec:	80 93 5a 0a 	sts	0x0A5A, r24	; 0x800a5a <_ppm>
    39f0:	04 c0       	rjmp	.+8      	; 0x39fa <_serial_call_back+0x9a>
    39f2:	10 92 5b 0a 	sts	0x0A5B, r1	; 0x800a5b <_ppm+0x1>
    39f6:	10 92 5a 0a 	sts	0x0A5A, r1	; 0x800a5a <_ppm>
    39fa:	10 92 59 0a 	sts	0x0A59, r1	; 0x800a59 <_mh_state>
    39fe:	e0 91 57 0a 	lds	r30, 0x0A57	; 0x800a57 <_app_call_back>
    3a02:	f0 91 58 0a 	lds	r31, 0x0A58	; 0x800a58 <_app_call_back+0x1>
    3a06:	30 97       	sbiw	r30, 0x00	; 0
    3a08:	29 f0       	breq	.+10     	; 0x3a14 <_serial_call_back+0xb4>
    3a0a:	80 91 5a 0a 	lds	r24, 0x0A5A	; 0x800a5a <_ppm>
    3a0e:	90 91 5b 0a 	lds	r25, 0x0A5B	; 0x800a5b <_ppm+0x1>
    3a12:	19 95       	eicall
    3a14:	08 95       	ret

00003a16 <mh_z19_create>:
    3a16:	8f 92       	push	r8
    3a18:	9f 92       	push	r9
    3a1a:	af 92       	push	r10
    3a1c:	cf 92       	push	r12
    3a1e:	ef 92       	push	r14
    3a20:	0f 93       	push	r16
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	eb 01       	movw	r28, r22
    3a28:	0f 2e       	mov	r0, r31
    3a2a:	f0 eb       	ldi	r31, 0xB0	; 176
    3a2c:	8f 2e       	mov	r8, r31
    3a2e:	fc e1       	ldi	r31, 0x1C	; 28
    3a30:	9f 2e       	mov	r9, r31
    3a32:	f0 2d       	mov	r31, r0
    3a34:	68 94       	set
    3a36:	aa 24       	eor	r10, r10
    3a38:	a4 f8       	bld	r10, 4
    3a3a:	68 94       	set
    3a3c:	cc 24       	eor	r12, r12
    3a3e:	c4 f8       	bld	r12, 4
    3a40:	e1 2c       	mov	r14, r1
    3a42:	00 e0       	ldi	r16, 0x00	; 0
    3a44:	23 e0       	ldi	r18, 0x03	; 3
    3a46:	40 e8       	ldi	r20, 0x80	; 128
    3a48:	55 e2       	ldi	r21, 0x25	; 37
    3a4a:	60 e0       	ldi	r22, 0x00	; 0
    3a4c:	70 e0       	ldi	r23, 0x00	; 0
    3a4e:	40 d0       	rcall	.+128    	; 0x3ad0 <serial_new_instance>
    3a50:	90 93 5d 0a 	sts	0x0A5D, r25	; 0x800a5d <_serial+0x1>
    3a54:	80 93 5c 0a 	sts	0x0A5C, r24	; 0x800a5c <_serial>
    3a58:	d0 93 58 0a 	sts	0x0A58, r29	; 0x800a58 <_app_call_back+0x1>
    3a5c:	c0 93 57 0a 	sts	0x0A57, r28	; 0x800a57 <_app_call_back>
    3a60:	df 91       	pop	r29
    3a62:	cf 91       	pop	r28
    3a64:	0f 91       	pop	r16
    3a66:	ef 90       	pop	r14
    3a68:	cf 90       	pop	r12
    3a6a:	af 90       	pop	r10
    3a6c:	9f 90       	pop	r9
    3a6e:	8f 90       	pop	r8
    3a70:	08 95       	ret

00003a72 <mh_z19_take_meassuring>:
    3a72:	cf 93       	push	r28
    3a74:	df 93       	push	r29
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
    3a7a:	29 97       	sbiw	r28, 0x09	; 9
    3a7c:	0f b6       	in	r0, 0x3f	; 63
    3a7e:	f8 94       	cli
    3a80:	de bf       	out	0x3e, r29	; 62
    3a82:	0f be       	out	0x3f, r0	; 63
    3a84:	cd bf       	out	0x3d, r28	; 61
    3a86:	89 e0       	ldi	r24, 0x09	; 9
    3a88:	e1 e4       	ldi	r30, 0x41	; 65
    3a8a:	f2 e0       	ldi	r31, 0x02	; 2
    3a8c:	9e 01       	movw	r18, r28
    3a8e:	2f 5f       	subi	r18, 0xFF	; 255
    3a90:	3f 4f       	sbci	r19, 0xFF	; 255
    3a92:	d9 01       	movw	r26, r18
    3a94:	01 90       	ld	r0, Z+
    3a96:	0d 92       	st	X+, r0
    3a98:	8a 95       	dec	r24
    3a9a:	e1 f7       	brne	.-8      	; 0x3a94 <mh_z19_take_meassuring+0x22>
    3a9c:	10 92 5b 0a 	sts	0x0A5B, r1	; 0x800a5b <_ppm+0x1>
    3aa0:	10 92 5a 0a 	sts	0x0A5A, r1	; 0x800a5a <_ppm>
    3aa4:	80 91 5c 0a 	lds	r24, 0x0A5C	; 0x800a5c <_serial>
    3aa8:	90 91 5d 0a 	lds	r25, 0x0A5D	; 0x800a5d <_serial+0x1>
    3aac:	00 97       	sbiw	r24, 0x00	; 0
    3aae:	31 f0       	breq	.+12     	; 0x3abc <mh_z19_take_meassuring+0x4a>
    3ab0:	42 2f       	mov	r20, r18
    3ab2:	53 2f       	mov	r21, r19
    3ab4:	69 e0       	ldi	r22, 0x09	; 9
    3ab6:	c7 d0       	rcall	.+398    	; 0x3c46 <serial_send_bytes>
    3ab8:	80 e0       	ldi	r24, 0x00	; 0
    3aba:	01 c0       	rjmp	.+2      	; 0x3abe <mh_z19_take_meassuring+0x4c>
    3abc:	82 e0       	ldi	r24, 0x02	; 2
    3abe:	29 96       	adiw	r28, 0x09	; 9
    3ac0:	0f b6       	in	r0, 0x3f	; 63
    3ac2:	f8 94       	cli
    3ac4:	de bf       	out	0x3e, r29	; 62
    3ac6:	0f be       	out	0x3f, r0	; 63
    3ac8:	cd bf       	out	0x3d, r28	; 61
    3aca:	df 91       	pop	r29
    3acc:	cf 91       	pop	r28
    3ace:	08 95       	ret

00003ad0 <serial_new_instance>:
    3ad0:	2f 92       	push	r2
    3ad2:	3f 92       	push	r3
    3ad4:	4f 92       	push	r4
    3ad6:	5f 92       	push	r5
    3ad8:	6f 92       	push	r6
    3ada:	7f 92       	push	r7
    3adc:	8f 92       	push	r8
    3ade:	9f 92       	push	r9
    3ae0:	af 92       	push	r10
    3ae2:	cf 92       	push	r12
    3ae4:	ef 92       	push	r14
    3ae6:	ff 92       	push	r15
    3ae8:	0f 93       	push	r16
    3aea:	1f 93       	push	r17
    3aec:	cf 93       	push	r28
    3aee:	df 93       	push	r29
    3af0:	cd b7       	in	r28, 0x3d	; 61
    3af2:	de b7       	in	r29, 0x3e	; 62
    3af4:	f8 2e       	mov	r15, r24
    3af6:	2a 01       	movw	r4, r20
    3af8:	3b 01       	movw	r6, r22
    3afa:	88 e0       	ldi	r24, 0x08	; 8
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	9b d7       	rcall	.+3894   	; 0x4a36 <malloc>
    3b00:	8c 01       	movw	r16, r24
    3b02:	8f 2d       	mov	r24, r15
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	88 0f       	add	r24, r24
    3b08:	99 1f       	adc	r25, r25
    3b0a:	fc 01       	movw	r30, r24
    3b0c:	e2 5a       	subi	r30, 0xA2	; 162
    3b0e:	f5 4f       	sbci	r31, 0xF5	; 245
    3b10:	11 83       	std	Z+1, r17	; 0x01
    3b12:	00 83       	st	Z, r16
    3b14:	fc 01       	movw	r30, r24
    3b16:	e6 5f       	subi	r30, 0xF6	; 246
    3b18:	fd 4f       	sbci	r31, 0xFD	; 253
    3b1a:	80 81       	ld	r24, Z
    3b1c:	91 81       	ldd	r25, Z+1	; 0x01
    3b1e:	d8 01       	movw	r26, r16
    3b20:	8d 93       	st	X+, r24
    3b22:	9c 93       	st	X, r25
    3b24:	6c 2d       	mov	r22, r12
    3b26:	70 e0       	ldi	r23, 0x00	; 0
    3b28:	84 e0       	ldi	r24, 0x04	; 4
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	6a d7       	rcall	.+3796   	; 0x4a02 <calloc>
    3b2e:	1c 01       	movw	r2, r24
    3b30:	61 e0       	ldi	r22, 0x01	; 1
    3b32:	70 e0       	ldi	r23, 0x00	; 0
    3b34:	86 e0       	ldi	r24, 0x06	; 6
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	64 d7       	rcall	.+3784   	; 0x4a02 <calloc>
    3b3a:	7c 01       	movw	r14, r24
    3b3c:	4c 2d       	mov	r20, r12
    3b3e:	b1 01       	movw	r22, r2
    3b40:	2b d5       	rcall	.+2646   	; 0x4598 <fifo_init>
    3b42:	f8 01       	movw	r30, r16
    3b44:	f5 82       	std	Z+5, r15	; 0x05
    3b46:	e4 82       	std	Z+4, r14	; 0x04
    3b48:	6a 2d       	mov	r22, r10
    3b4a:	70 e0       	ldi	r23, 0x00	; 0
    3b4c:	84 e0       	ldi	r24, 0x04	; 4
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	58 d7       	rcall	.+3760   	; 0x4a02 <calloc>
    3b52:	1c 01       	movw	r2, r24
    3b54:	61 e0       	ldi	r22, 0x01	; 1
    3b56:	70 e0       	ldi	r23, 0x00	; 0
    3b58:	86 e0       	ldi	r24, 0x06	; 6
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	52 d7       	rcall	.+3748   	; 0x4a02 <calloc>
    3b5e:	7c 01       	movw	r14, r24
    3b60:	4a 2d       	mov	r20, r10
    3b62:	b1 01       	movw	r22, r2
    3b64:	19 d5       	rcall	.+2610   	; 0x4598 <fifo_init>
    3b66:	d8 01       	movw	r26, r16
    3b68:	13 96       	adiw	r26, 0x03	; 3
    3b6a:	fc 92       	st	X, r15
    3b6c:	ee 92       	st	-X, r14
    3b6e:	12 97       	sbiw	r26, 0x02	; 2
    3b70:	17 96       	adiw	r26, 0x07	; 7
    3b72:	9c 92       	st	X, r9
    3b74:	8e 92       	st	-X, r8
    3b76:	16 97       	sbiw	r26, 0x06	; 6
    3b78:	ff b6       	in	r15, 0x3f	; 63
    3b7a:	f8 94       	cli
    3b7c:	ed 91       	ld	r30, X+
    3b7e:	fc 91       	ld	r31, X
    3b80:	11 97       	sbiw	r26, 0x01	; 1
    3b82:	36 97       	sbiw	r30, 0x06	; 6
    3b84:	80 81       	ld	r24, Z
    3b86:	82 60       	ori	r24, 0x02	; 2
    3b88:	80 83       	st	Z, r24
    3b8a:	8d 90       	ld	r8, X+
    3b8c:	9c 90       	ld	r9, X
    3b8e:	c3 01       	movw	r24, r6
    3b90:	b2 01       	movw	r22, r4
    3b92:	1c d6       	rcall	.+3128   	; 0x47cc <__floatunsisf>
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	40 e0       	ldi	r20, 0x00	; 0
    3b9a:	51 e4       	ldi	r21, 0x41	; 65
    3b9c:	a5 d6       	rcall	.+3402   	; 0x48e8 <__mulsf3>
    3b9e:	9b 01       	movw	r18, r22
    3ba0:	ac 01       	movw	r20, r24
    3ba2:	60 e0       	ldi	r22, 0x00	; 0
    3ba4:	74 e2       	ldi	r23, 0x24	; 36
    3ba6:	84 e7       	ldi	r24, 0x74	; 116
    3ba8:	9b e4       	ldi	r25, 0x4B	; 75
    3baa:	77 d5       	rcall	.+2798   	; 0x469a <__divsf3>
    3bac:	20 e0       	ldi	r18, 0x00	; 0
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	40 e8       	ldi	r20, 0x80	; 128
    3bb2:	5f e3       	ldi	r21, 0x3F	; 63
    3bb4:	0d d5       	rcall	.+2586   	; 0x45d0 <__subsf3>
    3bb6:	de d5       	rcall	.+3004   	; 0x4774 <__fixunssfsi>
    3bb8:	f4 01       	movw	r30, r8
    3bba:	32 97       	sbiw	r30, 0x02	; 2
    3bbc:	60 83       	st	Z, r22
    3bbe:	d8 01       	movw	r26, r16
    3bc0:	ed 91       	ld	r30, X+
    3bc2:	fc 91       	ld	r31, X
    3bc4:	11 97       	sbiw	r26, 0x01	; 1
    3bc6:	35 97       	sbiw	r30, 0x05	; 5
    3bc8:	88 e9       	ldi	r24, 0x98	; 152
    3bca:	80 83       	st	Z, r24
    3bcc:	ed 91       	ld	r30, X+
    3bce:	fc 91       	ld	r31, X
    3bd0:	34 97       	sbiw	r30, 0x04	; 4
    3bd2:	86 e0       	ldi	r24, 0x06	; 6
    3bd4:	80 83       	st	Z, r24
    3bd6:	ff be       	out	0x3f, r15	; 63
    3bd8:	c8 01       	movw	r24, r16
    3bda:	df 91       	pop	r29
    3bdc:	cf 91       	pop	r28
    3bde:	1f 91       	pop	r17
    3be0:	0f 91       	pop	r16
    3be2:	ff 90       	pop	r15
    3be4:	ef 90       	pop	r14
    3be6:	cf 90       	pop	r12
    3be8:	af 90       	pop	r10
    3bea:	9f 90       	pop	r9
    3bec:	8f 90       	pop	r8
    3bee:	7f 90       	pop	r7
    3bf0:	6f 90       	pop	r6
    3bf2:	5f 90       	pop	r5
    3bf4:	4f 90       	pop	r4
    3bf6:	3f 90       	pop	r3
    3bf8:	2f 90       	pop	r2
    3bfa:	08 95       	ret

00003bfc <serial_send_byte>:
    3bfc:	cf 93       	push	r28
    3bfe:	df 93       	push	r29
    3c00:	ec 01       	movw	r28, r24
    3c02:	ea 81       	ldd	r30, Y+2	; 0x02
    3c04:	fb 81       	ldd	r31, Y+3	; 0x03
    3c06:	93 81       	ldd	r25, Z+3	; 0x03
    3c08:	82 81       	ldd	r24, Z+2	; 0x02
    3c0a:	25 81       	ldd	r18, Z+5	; 0x05
    3c0c:	98 1b       	sub	r25, r24
    3c0e:	92 23       	and	r25, r18
    3c10:	84 81       	ldd	r24, Z+4	; 0x04
    3c12:	98 17       	cp	r25, r24
    3c14:	a1 f0       	breq	.+40     	; 0x3c3e <serial_send_byte+0x42>
    3c16:	93 81       	ldd	r25, Z+3	; 0x03
    3c18:	26 95       	lsr	r18
    3c1a:	29 23       	and	r18, r25
    3c1c:	a0 81       	ld	r26, Z
    3c1e:	b1 81       	ldd	r27, Z+1	; 0x01
    3c20:	a2 0f       	add	r26, r18
    3c22:	b1 1d       	adc	r27, r1
    3c24:	6c 93       	st	X, r22
    3c26:	9f 5f       	subi	r25, 0xFF	; 255
    3c28:	25 81       	ldd	r18, Z+5	; 0x05
    3c2a:	92 23       	and	r25, r18
    3c2c:	93 83       	std	Z+3, r25	; 0x03
    3c2e:	e8 81       	ld	r30, Y
    3c30:	f9 81       	ldd	r31, Y+1	; 0x01
    3c32:	35 97       	sbiw	r30, 0x05	; 5
    3c34:	80 81       	ld	r24, Z
    3c36:	80 62       	ori	r24, 0x20	; 32
    3c38:	80 83       	st	Z, r24
    3c3a:	80 e0       	ldi	r24, 0x00	; 0
    3c3c:	01 c0       	rjmp	.+2      	; 0x3c40 <serial_send_byte+0x44>
    3c3e:	82 e0       	ldi	r24, 0x02	; 2
    3c40:	df 91       	pop	r29
    3c42:	cf 91       	pop	r28
    3c44:	08 95       	ret

00003c46 <serial_send_bytes>:
    3c46:	ef 92       	push	r14
    3c48:	ff 92       	push	r15
    3c4a:	0f 93       	push	r16
    3c4c:	1f 93       	push	r17
    3c4e:	cf 93       	push	r28
    3c50:	df 93       	push	r29
    3c52:	7c 01       	movw	r14, r24
    3c54:	dc 01       	movw	r26, r24
    3c56:	12 96       	adiw	r26, 0x02	; 2
    3c58:	ed 91       	ld	r30, X+
    3c5a:	fc 91       	ld	r31, X
    3c5c:	13 97       	sbiw	r26, 0x03	; 3
    3c5e:	93 81       	ldd	r25, Z+3	; 0x03
    3c60:	82 81       	ldd	r24, Z+2	; 0x02
    3c62:	98 1b       	sub	r25, r24
    3c64:	85 81       	ldd	r24, Z+5	; 0x05
    3c66:	98 23       	and	r25, r24
    3c68:	84 81       	ldd	r24, Z+4	; 0x04
    3c6a:	89 1b       	sub	r24, r25
    3c6c:	86 17       	cp	r24, r22
    3c6e:	98 f1       	brcs	.+102    	; 0x3cd6 <serial_send_bytes+0x90>
    3c70:	66 23       	and	r22, r22
    3c72:	41 f1       	breq	.+80     	; 0x3cc4 <serial_send_bytes+0x7e>
    3c74:	84 2f       	mov	r24, r20
    3c76:	95 2f       	mov	r25, r21
    3c78:	dc 01       	movw	r26, r24
    3c7a:	61 50       	subi	r22, 0x01	; 1
    3c7c:	46 2f       	mov	r20, r22
    3c7e:	50 e0       	ldi	r21, 0x00	; 0
    3c80:	4f 5f       	subi	r20, 0xFF	; 255
    3c82:	5f 4f       	sbci	r21, 0xFF	; 255
    3c84:	48 0f       	add	r20, r24
    3c86:	59 1f       	adc	r21, r25
    3c88:	e7 01       	movw	r28, r14
    3c8a:	ea 81       	ldd	r30, Y+2	; 0x02
    3c8c:	fb 81       	ldd	r31, Y+3	; 0x03
    3c8e:	93 81       	ldd	r25, Z+3	; 0x03
    3c90:	82 81       	ldd	r24, Z+2	; 0x02
    3c92:	25 81       	ldd	r18, Z+5	; 0x05
    3c94:	98 1b       	sub	r25, r24
    3c96:	92 23       	and	r25, r18
    3c98:	84 81       	ldd	r24, Z+4	; 0x04
    3c9a:	98 17       	cp	r25, r24
    3c9c:	79 f0       	breq	.+30     	; 0x3cbc <serial_send_bytes+0x76>
    3c9e:	8c 91       	ld	r24, X
    3ca0:	93 81       	ldd	r25, Z+3	; 0x03
    3ca2:	26 95       	lsr	r18
    3ca4:	29 23       	and	r18, r25
    3ca6:	60 81       	ld	r22, Z
    3ca8:	71 81       	ldd	r23, Z+1	; 0x01
    3caa:	8b 01       	movw	r16, r22
    3cac:	02 0f       	add	r16, r18
    3cae:	11 1d       	adc	r17, r1
    3cb0:	e8 01       	movw	r28, r16
    3cb2:	88 83       	st	Y, r24
    3cb4:	9f 5f       	subi	r25, 0xFF	; 255
    3cb6:	85 81       	ldd	r24, Z+5	; 0x05
    3cb8:	98 23       	and	r25, r24
    3cba:	93 83       	std	Z+3, r25	; 0x03
    3cbc:	11 96       	adiw	r26, 0x01	; 1
    3cbe:	a4 17       	cp	r26, r20
    3cc0:	b5 07       	cpc	r27, r21
    3cc2:	11 f7       	brne	.-60     	; 0x3c88 <serial_send_bytes+0x42>
    3cc4:	d7 01       	movw	r26, r14
    3cc6:	ed 91       	ld	r30, X+
    3cc8:	fc 91       	ld	r31, X
    3cca:	35 97       	sbiw	r30, 0x05	; 5
    3ccc:	80 81       	ld	r24, Z
    3cce:	80 62       	ori	r24, 0x20	; 32
    3cd0:	80 83       	st	Z, r24
    3cd2:	80 e0       	ldi	r24, 0x00	; 0
    3cd4:	01 c0       	rjmp	.+2      	; 0x3cd8 <serial_send_bytes+0x92>
    3cd6:	82 e0       	ldi	r24, 0x02	; 2
    3cd8:	df 91       	pop	r29
    3cda:	cf 91       	pop	r28
    3cdc:	1f 91       	pop	r17
    3cde:	0f 91       	pop	r16
    3ce0:	ff 90       	pop	r15
    3ce2:	ef 90       	pop	r14
    3ce4:	08 95       	ret

00003ce6 <serial_get_byte>:
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	14 96       	adiw	r26, 0x04	; 4
    3cea:	ed 91       	ld	r30, X+
    3cec:	fc 91       	ld	r31, X
    3cee:	15 97       	sbiw	r26, 0x05	; 5
    3cf0:	93 81       	ldd	r25, Z+3	; 0x03
    3cf2:	82 81       	ldd	r24, Z+2	; 0x02
    3cf4:	98 17       	cp	r25, r24
    3cf6:	89 f0       	breq	.+34     	; 0x3d1a <serial_get_byte+0x34>
    3cf8:	92 81       	ldd	r25, Z+2	; 0x02
    3cfa:	85 81       	ldd	r24, Z+5	; 0x05
    3cfc:	86 95       	lsr	r24
    3cfe:	89 23       	and	r24, r25
    3d00:	a0 81       	ld	r26, Z
    3d02:	b1 81       	ldd	r27, Z+1	; 0x01
    3d04:	a8 0f       	add	r26, r24
    3d06:	b1 1d       	adc	r27, r1
    3d08:	8c 91       	ld	r24, X
    3d0a:	db 01       	movw	r26, r22
    3d0c:	8c 93       	st	X, r24
    3d0e:	9f 5f       	subi	r25, 0xFF	; 255
    3d10:	85 81       	ldd	r24, Z+5	; 0x05
    3d12:	98 23       	and	r25, r24
    3d14:	92 83       	std	Z+2, r25	; 0x02
    3d16:	80 e0       	ldi	r24, 0x00	; 0
    3d18:	08 95       	ret
    3d1a:	83 e0       	ldi	r24, 0x03	; 3
    3d1c:	08 95       	ret

00003d1e <__vector_25>:
    3d1e:	1f 92       	push	r1
    3d20:	0f 92       	push	r0
    3d22:	0f b6       	in	r0, 0x3f	; 63
    3d24:	0f 92       	push	r0
    3d26:	11 24       	eor	r1, r1
    3d28:	0b b6       	in	r0, 0x3b	; 59
    3d2a:	0f 92       	push	r0
    3d2c:	2f 93       	push	r18
    3d2e:	3f 93       	push	r19
    3d30:	4f 93       	push	r20
    3d32:	5f 93       	push	r21
    3d34:	6f 93       	push	r22
    3d36:	7f 93       	push	r23
    3d38:	8f 93       	push	r24
    3d3a:	9f 93       	push	r25
    3d3c:	af 93       	push	r26
    3d3e:	bf 93       	push	r27
    3d40:	cf 93       	push	r28
    3d42:	df 93       	push	r29
    3d44:	ef 93       	push	r30
    3d46:	ff 93       	push	r31
    3d48:	a0 91 5e 0a 	lds	r26, 0x0A5E	; 0x800a5e <_ser_handle>
    3d4c:	b0 91 5f 0a 	lds	r27, 0x0A5F	; 0x800a5f <_ser_handle+0x1>
    3d50:	10 97       	sbiw	r26, 0x00	; 0
    3d52:	11 f1       	breq	.+68     	; 0x3d98 <__vector_25+0x7a>
    3d54:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3d58:	14 96       	adiw	r26, 0x04	; 4
    3d5a:	ed 91       	ld	r30, X+
    3d5c:	fc 91       	ld	r31, X
    3d5e:	15 97       	sbiw	r26, 0x05	; 5
    3d60:	93 81       	ldd	r25, Z+3	; 0x03
    3d62:	82 81       	ldd	r24, Z+2	; 0x02
    3d64:	25 81       	ldd	r18, Z+5	; 0x05
    3d66:	98 1b       	sub	r25, r24
    3d68:	92 23       	and	r25, r18
    3d6a:	84 81       	ldd	r24, Z+4	; 0x04
    3d6c:	98 17       	cp	r25, r24
    3d6e:	61 f0       	breq	.+24     	; 0x3d88 <__vector_25+0x6a>
    3d70:	83 81       	ldd	r24, Z+3	; 0x03
    3d72:	26 95       	lsr	r18
    3d74:	28 23       	and	r18, r24
    3d76:	c0 81       	ld	r28, Z
    3d78:	d1 81       	ldd	r29, Z+1	; 0x01
    3d7a:	c2 0f       	add	r28, r18
    3d7c:	d1 1d       	adc	r29, r1
    3d7e:	68 83       	st	Y, r22
    3d80:	8f 5f       	subi	r24, 0xFF	; 255
    3d82:	95 81       	ldd	r25, Z+5	; 0x05
    3d84:	89 23       	and	r24, r25
    3d86:	83 83       	std	Z+3, r24	; 0x03
    3d88:	16 96       	adiw	r26, 0x06	; 6
    3d8a:	ed 91       	ld	r30, X+
    3d8c:	fc 91       	ld	r31, X
    3d8e:	17 97       	sbiw	r26, 0x07	; 7
    3d90:	30 97       	sbiw	r30, 0x00	; 0
    3d92:	11 f0       	breq	.+4      	; 0x3d98 <__vector_25+0x7a>
    3d94:	cd 01       	movw	r24, r26
    3d96:	19 95       	eicall
    3d98:	ff 91       	pop	r31
    3d9a:	ef 91       	pop	r30
    3d9c:	df 91       	pop	r29
    3d9e:	cf 91       	pop	r28
    3da0:	bf 91       	pop	r27
    3da2:	af 91       	pop	r26
    3da4:	9f 91       	pop	r25
    3da6:	8f 91       	pop	r24
    3da8:	7f 91       	pop	r23
    3daa:	6f 91       	pop	r22
    3dac:	5f 91       	pop	r21
    3dae:	4f 91       	pop	r20
    3db0:	3f 91       	pop	r19
    3db2:	2f 91       	pop	r18
    3db4:	0f 90       	pop	r0
    3db6:	0b be       	out	0x3b, r0	; 59
    3db8:	0f 90       	pop	r0
    3dba:	0f be       	out	0x3f, r0	; 63
    3dbc:	0f 90       	pop	r0
    3dbe:	1f 90       	pop	r1
    3dc0:	18 95       	reti

00003dc2 <__vector_26>:
    3dc2:	1f 92       	push	r1
    3dc4:	0f 92       	push	r0
    3dc6:	0f b6       	in	r0, 0x3f	; 63
    3dc8:	0f 92       	push	r0
    3dca:	11 24       	eor	r1, r1
    3dcc:	0b b6       	in	r0, 0x3b	; 59
    3dce:	0f 92       	push	r0
    3dd0:	2f 93       	push	r18
    3dd2:	8f 93       	push	r24
    3dd4:	9f 93       	push	r25
    3dd6:	af 93       	push	r26
    3dd8:	bf 93       	push	r27
    3dda:	ef 93       	push	r30
    3ddc:	ff 93       	push	r31
    3dde:	e0 91 5e 0a 	lds	r30, 0x0A5E	; 0x800a5e <_ser_handle>
    3de2:	f0 91 5f 0a 	lds	r31, 0x0A5F	; 0x800a5f <_ser_handle+0x1>
    3de6:	30 97       	sbiw	r30, 0x00	; 0
    3de8:	b9 f0       	breq	.+46     	; 0x3e18 <__vector_26+0x56>
    3dea:	02 80       	ldd	r0, Z+2	; 0x02
    3dec:	f3 81       	ldd	r31, Z+3	; 0x03
    3dee:	e0 2d       	mov	r30, r0
    3df0:	93 81       	ldd	r25, Z+3	; 0x03
    3df2:	82 81       	ldd	r24, Z+2	; 0x02
    3df4:	98 17       	cp	r25, r24
    3df6:	b1 f0       	breq	.+44     	; 0x3e24 <__vector_26+0x62>
    3df8:	92 81       	ldd	r25, Z+2	; 0x02
    3dfa:	85 81       	ldd	r24, Z+5	; 0x05
    3dfc:	28 2f       	mov	r18, r24
    3dfe:	26 95       	lsr	r18
    3e00:	29 23       	and	r18, r25
    3e02:	a0 81       	ld	r26, Z
    3e04:	b1 81       	ldd	r27, Z+1	; 0x01
    3e06:	a2 0f       	add	r26, r18
    3e08:	b1 1d       	adc	r27, r1
    3e0a:	2c 91       	ld	r18, X
    3e0c:	9f 5f       	subi	r25, 0xFF	; 255
    3e0e:	89 23       	and	r24, r25
    3e10:	82 83       	std	Z+2, r24	; 0x02
    3e12:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3e16:	0b c0       	rjmp	.+22     	; 0x3e2e <__vector_26+0x6c>
    3e18:	e1 ec       	ldi	r30, 0xC1	; 193
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	80 81       	ld	r24, Z
    3e1e:	8f 7d       	andi	r24, 0xDF	; 223
    3e20:	80 83       	st	Z, r24
    3e22:	05 c0       	rjmp	.+10     	; 0x3e2e <__vector_26+0x6c>
    3e24:	e1 ec       	ldi	r30, 0xC1	; 193
    3e26:	f0 e0       	ldi	r31, 0x00	; 0
    3e28:	80 81       	ld	r24, Z
    3e2a:	8f 7d       	andi	r24, 0xDF	; 223
    3e2c:	80 83       	st	Z, r24
    3e2e:	ff 91       	pop	r31
    3e30:	ef 91       	pop	r30
    3e32:	bf 91       	pop	r27
    3e34:	af 91       	pop	r26
    3e36:	9f 91       	pop	r25
    3e38:	8f 91       	pop	r24
    3e3a:	2f 91       	pop	r18
    3e3c:	0f 90       	pop	r0
    3e3e:	0b be       	out	0x3b, r0	; 59
    3e40:	0f 90       	pop	r0
    3e42:	0f be       	out	0x3f, r0	; 63
    3e44:	0f 90       	pop	r0
    3e46:	1f 90       	pop	r1
    3e48:	18 95       	reti

00003e4a <__vector_36>:
    3e4a:	1f 92       	push	r1
    3e4c:	0f 92       	push	r0
    3e4e:	0f b6       	in	r0, 0x3f	; 63
    3e50:	0f 92       	push	r0
    3e52:	11 24       	eor	r1, r1
    3e54:	0b b6       	in	r0, 0x3b	; 59
    3e56:	0f 92       	push	r0
    3e58:	2f 93       	push	r18
    3e5a:	3f 93       	push	r19
    3e5c:	4f 93       	push	r20
    3e5e:	5f 93       	push	r21
    3e60:	6f 93       	push	r22
    3e62:	7f 93       	push	r23
    3e64:	8f 93       	push	r24
    3e66:	9f 93       	push	r25
    3e68:	af 93       	push	r26
    3e6a:	bf 93       	push	r27
    3e6c:	cf 93       	push	r28
    3e6e:	df 93       	push	r29
    3e70:	ef 93       	push	r30
    3e72:	ff 93       	push	r31
    3e74:	a0 91 60 0a 	lds	r26, 0x0A60	; 0x800a60 <_ser_handle+0x2>
    3e78:	b0 91 61 0a 	lds	r27, 0x0A61	; 0x800a61 <_ser_handle+0x3>
    3e7c:	10 97       	sbiw	r26, 0x00	; 0
    3e7e:	11 f1       	breq	.+68     	; 0x3ec4 <__vector_36+0x7a>
    3e80:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3e84:	14 96       	adiw	r26, 0x04	; 4
    3e86:	ed 91       	ld	r30, X+
    3e88:	fc 91       	ld	r31, X
    3e8a:	15 97       	sbiw	r26, 0x05	; 5
    3e8c:	93 81       	ldd	r25, Z+3	; 0x03
    3e8e:	82 81       	ldd	r24, Z+2	; 0x02
    3e90:	25 81       	ldd	r18, Z+5	; 0x05
    3e92:	98 1b       	sub	r25, r24
    3e94:	92 23       	and	r25, r18
    3e96:	84 81       	ldd	r24, Z+4	; 0x04
    3e98:	98 17       	cp	r25, r24
    3e9a:	61 f0       	breq	.+24     	; 0x3eb4 <__vector_36+0x6a>
    3e9c:	83 81       	ldd	r24, Z+3	; 0x03
    3e9e:	26 95       	lsr	r18
    3ea0:	28 23       	and	r18, r24
    3ea2:	c0 81       	ld	r28, Z
    3ea4:	d1 81       	ldd	r29, Z+1	; 0x01
    3ea6:	c2 0f       	add	r28, r18
    3ea8:	d1 1d       	adc	r29, r1
    3eaa:	68 83       	st	Y, r22
    3eac:	8f 5f       	subi	r24, 0xFF	; 255
    3eae:	95 81       	ldd	r25, Z+5	; 0x05
    3eb0:	89 23       	and	r24, r25
    3eb2:	83 83       	std	Z+3, r24	; 0x03
    3eb4:	16 96       	adiw	r26, 0x06	; 6
    3eb6:	ed 91       	ld	r30, X+
    3eb8:	fc 91       	ld	r31, X
    3eba:	17 97       	sbiw	r26, 0x07	; 7
    3ebc:	30 97       	sbiw	r30, 0x00	; 0
    3ebe:	11 f0       	breq	.+4      	; 0x3ec4 <__vector_36+0x7a>
    3ec0:	cd 01       	movw	r24, r26
    3ec2:	19 95       	eicall
    3ec4:	ff 91       	pop	r31
    3ec6:	ef 91       	pop	r30
    3ec8:	df 91       	pop	r29
    3eca:	cf 91       	pop	r28
    3ecc:	bf 91       	pop	r27
    3ece:	af 91       	pop	r26
    3ed0:	9f 91       	pop	r25
    3ed2:	8f 91       	pop	r24
    3ed4:	7f 91       	pop	r23
    3ed6:	6f 91       	pop	r22
    3ed8:	5f 91       	pop	r21
    3eda:	4f 91       	pop	r20
    3edc:	3f 91       	pop	r19
    3ede:	2f 91       	pop	r18
    3ee0:	0f 90       	pop	r0
    3ee2:	0b be       	out	0x3b, r0	; 59
    3ee4:	0f 90       	pop	r0
    3ee6:	0f be       	out	0x3f, r0	; 63
    3ee8:	0f 90       	pop	r0
    3eea:	1f 90       	pop	r1
    3eec:	18 95       	reti

00003eee <__vector_37>:
    3eee:	1f 92       	push	r1
    3ef0:	0f 92       	push	r0
    3ef2:	0f b6       	in	r0, 0x3f	; 63
    3ef4:	0f 92       	push	r0
    3ef6:	11 24       	eor	r1, r1
    3ef8:	0b b6       	in	r0, 0x3b	; 59
    3efa:	0f 92       	push	r0
    3efc:	2f 93       	push	r18
    3efe:	8f 93       	push	r24
    3f00:	9f 93       	push	r25
    3f02:	af 93       	push	r26
    3f04:	bf 93       	push	r27
    3f06:	ef 93       	push	r30
    3f08:	ff 93       	push	r31
    3f0a:	e0 91 60 0a 	lds	r30, 0x0A60	; 0x800a60 <_ser_handle+0x2>
    3f0e:	f0 91 61 0a 	lds	r31, 0x0A61	; 0x800a61 <_ser_handle+0x3>
    3f12:	30 97       	sbiw	r30, 0x00	; 0
    3f14:	b9 f0       	breq	.+46     	; 0x3f44 <__vector_37+0x56>
    3f16:	02 80       	ldd	r0, Z+2	; 0x02
    3f18:	f3 81       	ldd	r31, Z+3	; 0x03
    3f1a:	e0 2d       	mov	r30, r0
    3f1c:	93 81       	ldd	r25, Z+3	; 0x03
    3f1e:	82 81       	ldd	r24, Z+2	; 0x02
    3f20:	98 17       	cp	r25, r24
    3f22:	b1 f0       	breq	.+44     	; 0x3f50 <__vector_37+0x62>
    3f24:	92 81       	ldd	r25, Z+2	; 0x02
    3f26:	85 81       	ldd	r24, Z+5	; 0x05
    3f28:	28 2f       	mov	r18, r24
    3f2a:	26 95       	lsr	r18
    3f2c:	29 23       	and	r18, r25
    3f2e:	a0 81       	ld	r26, Z
    3f30:	b1 81       	ldd	r27, Z+1	; 0x01
    3f32:	a2 0f       	add	r26, r18
    3f34:	b1 1d       	adc	r27, r1
    3f36:	2c 91       	ld	r18, X
    3f38:	9f 5f       	subi	r25, 0xFF	; 255
    3f3a:	89 23       	and	r24, r25
    3f3c:	82 83       	std	Z+2, r24	; 0x02
    3f3e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3f42:	0b c0       	rjmp	.+22     	; 0x3f5a <__vector_37+0x6c>
    3f44:	e9 ec       	ldi	r30, 0xC9	; 201
    3f46:	f0 e0       	ldi	r31, 0x00	; 0
    3f48:	80 81       	ld	r24, Z
    3f4a:	8f 7d       	andi	r24, 0xDF	; 223
    3f4c:	80 83       	st	Z, r24
    3f4e:	05 c0       	rjmp	.+10     	; 0x3f5a <__vector_37+0x6c>
    3f50:	e9 ec       	ldi	r30, 0xC9	; 201
    3f52:	f0 e0       	ldi	r31, 0x00	; 0
    3f54:	80 81       	ld	r24, Z
    3f56:	8f 7d       	andi	r24, 0xDF	; 223
    3f58:	80 83       	st	Z, r24
    3f5a:	ff 91       	pop	r31
    3f5c:	ef 91       	pop	r30
    3f5e:	bf 91       	pop	r27
    3f60:	af 91       	pop	r26
    3f62:	9f 91       	pop	r25
    3f64:	8f 91       	pop	r24
    3f66:	2f 91       	pop	r18
    3f68:	0f 90       	pop	r0
    3f6a:	0b be       	out	0x3b, r0	; 59
    3f6c:	0f 90       	pop	r0
    3f6e:	0f be       	out	0x3f, r0	; 63
    3f70:	0f 90       	pop	r0
    3f72:	1f 90       	pop	r1
    3f74:	18 95       	reti

00003f76 <__vector_51>:
    3f76:	1f 92       	push	r1
    3f78:	0f 92       	push	r0
    3f7a:	0f b6       	in	r0, 0x3f	; 63
    3f7c:	0f 92       	push	r0
    3f7e:	11 24       	eor	r1, r1
    3f80:	0b b6       	in	r0, 0x3b	; 59
    3f82:	0f 92       	push	r0
    3f84:	2f 93       	push	r18
    3f86:	3f 93       	push	r19
    3f88:	4f 93       	push	r20
    3f8a:	5f 93       	push	r21
    3f8c:	6f 93       	push	r22
    3f8e:	7f 93       	push	r23
    3f90:	8f 93       	push	r24
    3f92:	9f 93       	push	r25
    3f94:	af 93       	push	r26
    3f96:	bf 93       	push	r27
    3f98:	cf 93       	push	r28
    3f9a:	df 93       	push	r29
    3f9c:	ef 93       	push	r30
    3f9e:	ff 93       	push	r31
    3fa0:	a0 91 62 0a 	lds	r26, 0x0A62	; 0x800a62 <_ser_handle+0x4>
    3fa4:	b0 91 63 0a 	lds	r27, 0x0A63	; 0x800a63 <_ser_handle+0x5>
    3fa8:	10 97       	sbiw	r26, 0x00	; 0
    3faa:	11 f1       	breq	.+68     	; 0x3ff0 <__vector_51+0x7a>
    3fac:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3fb0:	14 96       	adiw	r26, 0x04	; 4
    3fb2:	ed 91       	ld	r30, X+
    3fb4:	fc 91       	ld	r31, X
    3fb6:	15 97       	sbiw	r26, 0x05	; 5
    3fb8:	93 81       	ldd	r25, Z+3	; 0x03
    3fba:	82 81       	ldd	r24, Z+2	; 0x02
    3fbc:	25 81       	ldd	r18, Z+5	; 0x05
    3fbe:	98 1b       	sub	r25, r24
    3fc0:	92 23       	and	r25, r18
    3fc2:	84 81       	ldd	r24, Z+4	; 0x04
    3fc4:	98 17       	cp	r25, r24
    3fc6:	61 f0       	breq	.+24     	; 0x3fe0 <__vector_51+0x6a>
    3fc8:	83 81       	ldd	r24, Z+3	; 0x03
    3fca:	26 95       	lsr	r18
    3fcc:	28 23       	and	r18, r24
    3fce:	c0 81       	ld	r28, Z
    3fd0:	d1 81       	ldd	r29, Z+1	; 0x01
    3fd2:	c2 0f       	add	r28, r18
    3fd4:	d1 1d       	adc	r29, r1
    3fd6:	68 83       	st	Y, r22
    3fd8:	8f 5f       	subi	r24, 0xFF	; 255
    3fda:	95 81       	ldd	r25, Z+5	; 0x05
    3fdc:	89 23       	and	r24, r25
    3fde:	83 83       	std	Z+3, r24	; 0x03
    3fe0:	16 96       	adiw	r26, 0x06	; 6
    3fe2:	ed 91       	ld	r30, X+
    3fe4:	fc 91       	ld	r31, X
    3fe6:	17 97       	sbiw	r26, 0x07	; 7
    3fe8:	30 97       	sbiw	r30, 0x00	; 0
    3fea:	11 f0       	breq	.+4      	; 0x3ff0 <__vector_51+0x7a>
    3fec:	cd 01       	movw	r24, r26
    3fee:	19 95       	eicall
    3ff0:	ff 91       	pop	r31
    3ff2:	ef 91       	pop	r30
    3ff4:	df 91       	pop	r29
    3ff6:	cf 91       	pop	r28
    3ff8:	bf 91       	pop	r27
    3ffa:	af 91       	pop	r26
    3ffc:	9f 91       	pop	r25
    3ffe:	8f 91       	pop	r24
    4000:	7f 91       	pop	r23
    4002:	6f 91       	pop	r22
    4004:	5f 91       	pop	r21
    4006:	4f 91       	pop	r20
    4008:	3f 91       	pop	r19
    400a:	2f 91       	pop	r18
    400c:	0f 90       	pop	r0
    400e:	0b be       	out	0x3b, r0	; 59
    4010:	0f 90       	pop	r0
    4012:	0f be       	out	0x3f, r0	; 63
    4014:	0f 90       	pop	r0
    4016:	1f 90       	pop	r1
    4018:	18 95       	reti

0000401a <__vector_52>:
    401a:	1f 92       	push	r1
    401c:	0f 92       	push	r0
    401e:	0f b6       	in	r0, 0x3f	; 63
    4020:	0f 92       	push	r0
    4022:	11 24       	eor	r1, r1
    4024:	0b b6       	in	r0, 0x3b	; 59
    4026:	0f 92       	push	r0
    4028:	2f 93       	push	r18
    402a:	8f 93       	push	r24
    402c:	9f 93       	push	r25
    402e:	af 93       	push	r26
    4030:	bf 93       	push	r27
    4032:	ef 93       	push	r30
    4034:	ff 93       	push	r31
    4036:	e0 91 62 0a 	lds	r30, 0x0A62	; 0x800a62 <_ser_handle+0x4>
    403a:	f0 91 63 0a 	lds	r31, 0x0A63	; 0x800a63 <_ser_handle+0x5>
    403e:	30 97       	sbiw	r30, 0x00	; 0
    4040:	b9 f0       	breq	.+46     	; 0x4070 <__vector_52+0x56>
    4042:	02 80       	ldd	r0, Z+2	; 0x02
    4044:	f3 81       	ldd	r31, Z+3	; 0x03
    4046:	e0 2d       	mov	r30, r0
    4048:	93 81       	ldd	r25, Z+3	; 0x03
    404a:	82 81       	ldd	r24, Z+2	; 0x02
    404c:	98 17       	cp	r25, r24
    404e:	b1 f0       	breq	.+44     	; 0x407c <__vector_52+0x62>
    4050:	92 81       	ldd	r25, Z+2	; 0x02
    4052:	85 81       	ldd	r24, Z+5	; 0x05
    4054:	28 2f       	mov	r18, r24
    4056:	26 95       	lsr	r18
    4058:	29 23       	and	r18, r25
    405a:	a0 81       	ld	r26, Z
    405c:	b1 81       	ldd	r27, Z+1	; 0x01
    405e:	a2 0f       	add	r26, r18
    4060:	b1 1d       	adc	r27, r1
    4062:	2c 91       	ld	r18, X
    4064:	9f 5f       	subi	r25, 0xFF	; 255
    4066:	89 23       	and	r24, r25
    4068:	82 83       	std	Z+2, r24	; 0x02
    406a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    406e:	0b c0       	rjmp	.+22     	; 0x4086 <__vector_52+0x6c>
    4070:	e1 ed       	ldi	r30, 0xD1	; 209
    4072:	f0 e0       	ldi	r31, 0x00	; 0
    4074:	80 81       	ld	r24, Z
    4076:	8f 7d       	andi	r24, 0xDF	; 223
    4078:	80 83       	st	Z, r24
    407a:	05 c0       	rjmp	.+10     	; 0x4086 <__vector_52+0x6c>
    407c:	e1 ed       	ldi	r30, 0xD1	; 209
    407e:	f0 e0       	ldi	r31, 0x00	; 0
    4080:	80 81       	ld	r24, Z
    4082:	8f 7d       	andi	r24, 0xDF	; 223
    4084:	80 83       	st	Z, r24
    4086:	ff 91       	pop	r31
    4088:	ef 91       	pop	r30
    408a:	bf 91       	pop	r27
    408c:	af 91       	pop	r26
    408e:	9f 91       	pop	r25
    4090:	8f 91       	pop	r24
    4092:	2f 91       	pop	r18
    4094:	0f 90       	pop	r0
    4096:	0b be       	out	0x3b, r0	; 59
    4098:	0f 90       	pop	r0
    409a:	0f be       	out	0x3f, r0	; 63
    409c:	0f 90       	pop	r0
    409e:	1f 90       	pop	r1
    40a0:	18 95       	reti

000040a2 <__vector_54>:
    40a2:	1f 92       	push	r1
    40a4:	0f 92       	push	r0
    40a6:	0f b6       	in	r0, 0x3f	; 63
    40a8:	0f 92       	push	r0
    40aa:	11 24       	eor	r1, r1
    40ac:	0b b6       	in	r0, 0x3b	; 59
    40ae:	0f 92       	push	r0
    40b0:	2f 93       	push	r18
    40b2:	3f 93       	push	r19
    40b4:	4f 93       	push	r20
    40b6:	5f 93       	push	r21
    40b8:	6f 93       	push	r22
    40ba:	7f 93       	push	r23
    40bc:	8f 93       	push	r24
    40be:	9f 93       	push	r25
    40c0:	af 93       	push	r26
    40c2:	bf 93       	push	r27
    40c4:	cf 93       	push	r28
    40c6:	df 93       	push	r29
    40c8:	ef 93       	push	r30
    40ca:	ff 93       	push	r31
    40cc:	a0 91 64 0a 	lds	r26, 0x0A64	; 0x800a64 <_ser_handle+0x6>
    40d0:	b0 91 65 0a 	lds	r27, 0x0A65	; 0x800a65 <_ser_handle+0x7>
    40d4:	10 97       	sbiw	r26, 0x00	; 0
    40d6:	11 f1       	breq	.+68     	; 0x411c <__vector_54+0x7a>
    40d8:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    40dc:	14 96       	adiw	r26, 0x04	; 4
    40de:	ed 91       	ld	r30, X+
    40e0:	fc 91       	ld	r31, X
    40e2:	15 97       	sbiw	r26, 0x05	; 5
    40e4:	93 81       	ldd	r25, Z+3	; 0x03
    40e6:	82 81       	ldd	r24, Z+2	; 0x02
    40e8:	25 81       	ldd	r18, Z+5	; 0x05
    40ea:	98 1b       	sub	r25, r24
    40ec:	92 23       	and	r25, r18
    40ee:	84 81       	ldd	r24, Z+4	; 0x04
    40f0:	98 17       	cp	r25, r24
    40f2:	61 f0       	breq	.+24     	; 0x410c <__vector_54+0x6a>
    40f4:	83 81       	ldd	r24, Z+3	; 0x03
    40f6:	26 95       	lsr	r18
    40f8:	28 23       	and	r18, r24
    40fa:	c0 81       	ld	r28, Z
    40fc:	d1 81       	ldd	r29, Z+1	; 0x01
    40fe:	c2 0f       	add	r28, r18
    4100:	d1 1d       	adc	r29, r1
    4102:	68 83       	st	Y, r22
    4104:	8f 5f       	subi	r24, 0xFF	; 255
    4106:	95 81       	ldd	r25, Z+5	; 0x05
    4108:	89 23       	and	r24, r25
    410a:	83 83       	std	Z+3, r24	; 0x03
    410c:	16 96       	adiw	r26, 0x06	; 6
    410e:	ed 91       	ld	r30, X+
    4110:	fc 91       	ld	r31, X
    4112:	17 97       	sbiw	r26, 0x07	; 7
    4114:	30 97       	sbiw	r30, 0x00	; 0
    4116:	11 f0       	breq	.+4      	; 0x411c <__vector_54+0x7a>
    4118:	cd 01       	movw	r24, r26
    411a:	19 95       	eicall
    411c:	ff 91       	pop	r31
    411e:	ef 91       	pop	r30
    4120:	df 91       	pop	r29
    4122:	cf 91       	pop	r28
    4124:	bf 91       	pop	r27
    4126:	af 91       	pop	r26
    4128:	9f 91       	pop	r25
    412a:	8f 91       	pop	r24
    412c:	7f 91       	pop	r23
    412e:	6f 91       	pop	r22
    4130:	5f 91       	pop	r21
    4132:	4f 91       	pop	r20
    4134:	3f 91       	pop	r19
    4136:	2f 91       	pop	r18
    4138:	0f 90       	pop	r0
    413a:	0b be       	out	0x3b, r0	; 59
    413c:	0f 90       	pop	r0
    413e:	0f be       	out	0x3f, r0	; 63
    4140:	0f 90       	pop	r0
    4142:	1f 90       	pop	r1
    4144:	18 95       	reti

00004146 <__vector_55>:
    4146:	1f 92       	push	r1
    4148:	0f 92       	push	r0
    414a:	0f b6       	in	r0, 0x3f	; 63
    414c:	0f 92       	push	r0
    414e:	11 24       	eor	r1, r1
    4150:	0b b6       	in	r0, 0x3b	; 59
    4152:	0f 92       	push	r0
    4154:	2f 93       	push	r18
    4156:	8f 93       	push	r24
    4158:	9f 93       	push	r25
    415a:	af 93       	push	r26
    415c:	bf 93       	push	r27
    415e:	ef 93       	push	r30
    4160:	ff 93       	push	r31
    4162:	e0 91 64 0a 	lds	r30, 0x0A64	; 0x800a64 <_ser_handle+0x6>
    4166:	f0 91 65 0a 	lds	r31, 0x0A65	; 0x800a65 <_ser_handle+0x7>
    416a:	30 97       	sbiw	r30, 0x00	; 0
    416c:	b9 f0       	breq	.+46     	; 0x419c <__vector_55+0x56>
    416e:	02 80       	ldd	r0, Z+2	; 0x02
    4170:	f3 81       	ldd	r31, Z+3	; 0x03
    4172:	e0 2d       	mov	r30, r0
    4174:	93 81       	ldd	r25, Z+3	; 0x03
    4176:	82 81       	ldd	r24, Z+2	; 0x02
    4178:	98 17       	cp	r25, r24
    417a:	b1 f0       	breq	.+44     	; 0x41a8 <__vector_55+0x62>
    417c:	92 81       	ldd	r25, Z+2	; 0x02
    417e:	85 81       	ldd	r24, Z+5	; 0x05
    4180:	28 2f       	mov	r18, r24
    4182:	26 95       	lsr	r18
    4184:	29 23       	and	r18, r25
    4186:	a0 81       	ld	r26, Z
    4188:	b1 81       	ldd	r27, Z+1	; 0x01
    418a:	a2 0f       	add	r26, r18
    418c:	b1 1d       	adc	r27, r1
    418e:	2c 91       	ld	r18, X
    4190:	9f 5f       	subi	r25, 0xFF	; 255
    4192:	89 23       	and	r24, r25
    4194:	82 83       	std	Z+2, r24	; 0x02
    4196:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    419a:	0b c0       	rjmp	.+22     	; 0x41b2 <__vector_55+0x6c>
    419c:	e1 e3       	ldi	r30, 0x31	; 49
    419e:	f1 e0       	ldi	r31, 0x01	; 1
    41a0:	80 81       	ld	r24, Z
    41a2:	8f 7d       	andi	r24, 0xDF	; 223
    41a4:	80 83       	st	Z, r24
    41a6:	05 c0       	rjmp	.+10     	; 0x41b2 <__vector_55+0x6c>
    41a8:	e1 e3       	ldi	r30, 0x31	; 49
    41aa:	f1 e0       	ldi	r31, 0x01	; 1
    41ac:	80 81       	ld	r24, Z
    41ae:	8f 7d       	andi	r24, 0xDF	; 223
    41b0:	80 83       	st	Z, r24
    41b2:	ff 91       	pop	r31
    41b4:	ef 91       	pop	r30
    41b6:	bf 91       	pop	r27
    41b8:	af 91       	pop	r26
    41ba:	9f 91       	pop	r25
    41bc:	8f 91       	pop	r24
    41be:	2f 91       	pop	r18
    41c0:	0f 90       	pop	r0
    41c2:	0b be       	out	0x3b, r0	; 59
    41c4:	0f 90       	pop	r0
    41c6:	0f be       	out	0x3f, r0	; 63
    41c8:	0f 90       	pop	r0
    41ca:	1f 90       	pop	r1
    41cc:	18 95       	reti

000041ce <usart_getchar>:
    41ce:	cf 93       	push	r28
    41d0:	df 93       	push	r29
    41d2:	1f 92       	push	r1
    41d4:	cd b7       	in	r28, 0x3d	; 61
    41d6:	de b7       	in	r29, 0x3e	; 62
    41d8:	be 01       	movw	r22, r28
    41da:	6f 5f       	subi	r22, 0xFF	; 255
    41dc:	7f 4f       	sbci	r23, 0xFF	; 255
    41de:	80 91 66 0a 	lds	r24, 0x0A66	; 0x800a66 <_com_serial_instance>
    41e2:	90 91 67 0a 	lds	r25, 0x0A67	; 0x800a67 <_com_serial_instance+0x1>
    41e6:	7f dd       	rcall	.-1282   	; 0x3ce6 <serial_get_byte>
    41e8:	81 11       	cpse	r24, r1
    41ea:	f6 cf       	rjmp	.-20     	; 0x41d8 <usart_getchar+0xa>
    41ec:	89 81       	ldd	r24, Y+1	; 0x01
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	0f 90       	pop	r0
    41f2:	df 91       	pop	r29
    41f4:	cf 91       	pop	r28
    41f6:	08 95       	ret

000041f8 <usart_putchar>:
    41f8:	68 2f       	mov	r22, r24
    41fa:	80 91 66 0a 	lds	r24, 0x0A66	; 0x800a66 <_com_serial_instance>
    41fe:	90 91 67 0a 	lds	r25, 0x0A67	; 0x800a67 <_com_serial_instance+0x1>
    4202:	fc dc       	rcall	.-1544   	; 0x3bfc <serial_send_byte>
    4204:	80 e0       	ldi	r24, 0x00	; 0
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	08 95       	ret

0000420a <stdioCreate>:
    420a:	8f 92       	push	r8
    420c:	9f 92       	push	r9
    420e:	af 92       	push	r10
    4210:	cf 92       	push	r12
    4212:	ef 92       	push	r14
    4214:	0f 93       	push	r16
    4216:	81 2c       	mov	r8, r1
    4218:	91 2c       	mov	r9, r1
    421a:	68 94       	set
    421c:	aa 24       	eor	r10, r10
    421e:	a7 f8       	bld	r10, 7
    4220:	68 94       	set
    4222:	cc 24       	eor	r12, r12
    4224:	c7 f8       	bld	r12, 7
    4226:	e1 2c       	mov	r14, r1
    4228:	00 e0       	ldi	r16, 0x00	; 0
    422a:	23 e0       	ldi	r18, 0x03	; 3
    422c:	40 e0       	ldi	r20, 0x00	; 0
    422e:	51 ee       	ldi	r21, 0xE1	; 225
    4230:	60 e0       	ldi	r22, 0x00	; 0
    4232:	70 e0       	ldi	r23, 0x00	; 0
    4234:	4d dc       	rcall	.-1894   	; 0x3ad0 <serial_new_instance>
    4236:	90 93 67 0a 	sts	0x0A67, r25	; 0x800a67 <_com_serial_instance+0x1>
    423a:	80 93 66 0a 	sts	0x0A66, r24	; 0x800a66 <_com_serial_instance>
    423e:	ed ea       	ldi	r30, 0xAD	; 173
    4240:	fa e0       	ldi	r31, 0x0A	; 10
    4242:	82 e1       	ldi	r24, 0x12	; 18
    4244:	92 e0       	ldi	r25, 0x02	; 2
    4246:	91 83       	std	Z+1, r25	; 0x01
    4248:	80 83       	st	Z, r24
    424a:	93 83       	std	Z+3, r25	; 0x03
    424c:	82 83       	std	Z+2, r24	; 0x02
    424e:	0f 91       	pop	r16
    4250:	ef 90       	pop	r14
    4252:	cf 90       	pop	r12
    4254:	af 90       	pop	r10
    4256:	9f 90       	pop	r9
    4258:	8f 90       	pop	r8
    425a:	08 95       	ret

0000425c <_initTwiInterface>:
    425c:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <_twiIsInitiated>
    4260:	81 11       	cpse	r24, r1
    4262:	0c c0       	rjmp	.+24     	; 0x427c <_initTwiInterface+0x20>
    4264:	8c e0       	ldi	r24, 0x0C	; 12
    4266:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    426a:	8f ef       	ldi	r24, 0xFF	; 255
    426c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4270:	84 e0       	ldi	r24, 0x04	; 4
    4272:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4276:	81 e0       	ldi	r24, 0x01	; 1
    4278:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <_twiIsInitiated>
    427c:	08 95       	ret

0000427e <twiCreate>:
    427e:	af 92       	push	r10
    4280:	bf 92       	push	r11
    4282:	cf 92       	push	r12
    4284:	df 92       	push	r13
    4286:	ef 92       	push	r14
    4288:	ff 92       	push	r15
    428a:	0f 93       	push	r16
    428c:	1f 93       	push	r17
    428e:	cf 93       	push	r28
    4290:	df 93       	push	r29
    4292:	a8 2e       	mov	r10, r24
    4294:	b6 2e       	mov	r11, r22
    4296:	69 01       	movw	r12, r18
    4298:	7a 01       	movw	r14, r20
    429a:	84 e0       	ldi	r24, 0x04	; 4
    429c:	90 e0       	ldi	r25, 0x00	; 0
    429e:	cb d3       	rcall	.+1942   	; 0x4a36 <malloc>
    42a0:	ec 01       	movw	r28, r24
    42a2:	89 2b       	or	r24, r25
    42a4:	61 f1       	breq	.+88     	; 0x42fe <twiCreate+0x80>
    42a6:	a8 82       	st	Y, r10
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	b8 12       	cpse	r11, r24
    42ac:	12 c0       	rjmp	.+36     	; 0x42d2 <twiCreate+0x54>
    42ae:	c7 01       	movw	r24, r14
    42b0:	b6 01       	movw	r22, r12
    42b2:	20 ea       	ldi	r18, 0xA0	; 160
    42b4:	36 e8       	ldi	r19, 0x86	; 134
    42b6:	41 e0       	ldi	r20, 0x01	; 1
    42b8:	50 e0       	ldi	r21, 0x00	; 0
    42ba:	79 d3       	rcall	.+1778   	; 0x49ae <__udivmodsi4>
    42bc:	da 01       	movw	r26, r20
    42be:	c9 01       	movw	r24, r18
    42c0:	40 97       	sbiw	r24, 0x10	; 16
    42c2:	a1 09       	sbc	r26, r1
    42c4:	b1 09       	sbc	r27, r1
    42c6:	b6 95       	lsr	r27
    42c8:	a7 95       	ror	r26
    42ca:	97 95       	ror	r25
    42cc:	87 95       	ror	r24
    42ce:	89 83       	std	Y+1, r24	; 0x01
    42d0:	11 c0       	rjmp	.+34     	; 0x42f4 <twiCreate+0x76>
    42d2:	c7 01       	movw	r24, r14
    42d4:	b6 01       	movw	r22, r12
    42d6:	20 e8       	ldi	r18, 0x80	; 128
    42d8:	3a e1       	ldi	r19, 0x1A	; 26
    42da:	46 e0       	ldi	r20, 0x06	; 6
    42dc:	50 e0       	ldi	r21, 0x00	; 0
    42de:	67 d3       	rcall	.+1742   	; 0x49ae <__udivmodsi4>
    42e0:	da 01       	movw	r26, r20
    42e2:	c9 01       	movw	r24, r18
    42e4:	40 97       	sbiw	r24, 0x10	; 16
    42e6:	a1 09       	sbc	r26, r1
    42e8:	b1 09       	sbc	r27, r1
    42ea:	b6 95       	lsr	r27
    42ec:	a7 95       	ror	r26
    42ee:	97 95       	ror	r25
    42f0:	87 95       	ror	r24
    42f2:	89 83       	std	Y+1, r24	; 0x01
    42f4:	1b 83       	std	Y+3, r17	; 0x03
    42f6:	0a 83       	std	Y+2, r16	; 0x02
    42f8:	8c 2f       	mov	r24, r28
    42fa:	9d 2f       	mov	r25, r29
    42fc:	02 c0       	rjmp	.+4      	; 0x4302 <twiCreate+0x84>
    42fe:	80 e0       	ldi	r24, 0x00	; 0
    4300:	90 e0       	ldi	r25, 0x00	; 0
    4302:	df 91       	pop	r29
    4304:	cf 91       	pop	r28
    4306:	1f 91       	pop	r17
    4308:	0f 91       	pop	r16
    430a:	ff 90       	pop	r15
    430c:	ef 90       	pop	r14
    430e:	df 90       	pop	r13
    4310:	cf 90       	pop	r12
    4312:	bf 90       	pop	r11
    4314:	af 90       	pop	r10
    4316:	08 95       	ret

00004318 <twiIsBusy>:
    4318:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    431c:	81 70       	andi	r24, 0x01	; 1
    431e:	08 95       	ret

00004320 <twiTransmit>:
    4320:	ff 92       	push	r15
    4322:	0f 93       	push	r16
    4324:	1f 93       	push	r17
    4326:	cf 93       	push	r28
    4328:	df 93       	push	r29
    432a:	00 97       	sbiw	r24, 0x00	; 0
    432c:	d1 f1       	breq	.+116    	; 0x43a2 <twiTransmit+0x82>
    432e:	4a 30       	cpi	r20, 0x0A	; 10
    4330:	d0 f5       	brcc	.+116    	; 0x43a6 <twiTransmit+0x86>
    4332:	f4 2e       	mov	r15, r20
    4334:	8b 01       	movw	r16, r22
    4336:	ec 01       	movw	r28, r24
    4338:	ef df       	rcall	.-34     	; 0x4318 <twiIsBusy>
    433a:	81 11       	cpse	r24, r1
    433c:	36 c0       	rjmp	.+108    	; 0x43aa <twiTransmit+0x8a>
    433e:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <_twiCurrentHandler>
    4342:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <_twiCurrentHandler+0x1>
    4346:	c8 17       	cp	r28, r24
    4348:	d9 07       	cpc	r29, r25
    434a:	41 f0       	breq	.+16     	; 0x435c <twiTransmit+0x3c>
    434c:	87 df       	rcall	.-242    	; 0x425c <_initTwiInterface>
    434e:	89 81       	ldd	r24, Y+1	; 0x01
    4350:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4354:	d0 93 6a 0a 	sts	0x0A6A, r29	; 0x800a6a <_twiCurrentHandler+0x1>
    4358:	c0 93 69 0a 	sts	0x0A69, r28	; 0x800a69 <_twiCurrentHandler>
    435c:	81 e0       	ldi	r24, 0x01	; 1
    435e:	8f 0d       	add	r24, r15
    4360:	80 93 6b 0a 	sts	0x0A6B, r24	; 0x800a6b <_twiMessageLen>
    4364:	88 81       	ld	r24, Y
    4366:	88 0f       	add	r24, r24
    4368:	80 93 6c 0a 	sts	0x0A6C, r24	; 0x800a6c <_twiMessageBuffer>
    436c:	ff 20       	and	r15, r15
    436e:	89 f0       	breq	.+34     	; 0x4392 <twiTransmit+0x72>
    4370:	f8 01       	movw	r30, r16
    4372:	ad e6       	ldi	r26, 0x6D	; 109
    4374:	ba e0       	ldi	r27, 0x0A	; 10
    4376:	4f ef       	ldi	r20, 0xFF	; 255
    4378:	4f 0d       	add	r20, r15
    437a:	64 2f       	mov	r22, r20
    437c:	70 e0       	ldi	r23, 0x00	; 0
    437e:	cb 01       	movw	r24, r22
    4380:	01 96       	adiw	r24, 0x01	; 1
    4382:	b8 01       	movw	r22, r16
    4384:	68 0f       	add	r22, r24
    4386:	79 1f       	adc	r23, r25
    4388:	81 91       	ld	r24, Z+
    438a:	8d 93       	st	X+, r24
    438c:	e6 17       	cp	r30, r22
    438e:	f7 07       	cpc	r31, r23
    4390:	d9 f7       	brne	.-10     	; 0x4388 <twiTransmit+0x68>
    4392:	88 ef       	ldi	r24, 0xF8	; 248
    4394:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4398:	85 ea       	ldi	r24, 0xA5	; 165
    439a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    439e:	84 e0       	ldi	r24, 0x04	; 4
    43a0:	05 c0       	rjmp	.+10     	; 0x43ac <twiTransmit+0x8c>
    43a2:	86 e0       	ldi	r24, 0x06	; 6
    43a4:	03 c0       	rjmp	.+6      	; 0x43ac <twiTransmit+0x8c>
    43a6:	87 e0       	ldi	r24, 0x07	; 7
    43a8:	01 c0       	rjmp	.+2      	; 0x43ac <twiTransmit+0x8c>
    43aa:	82 e0       	ldi	r24, 0x02	; 2
    43ac:	df 91       	pop	r29
    43ae:	cf 91       	pop	r28
    43b0:	1f 91       	pop	r17
    43b2:	0f 91       	pop	r16
    43b4:	ff 90       	pop	r15
    43b6:	08 95       	ret

000043b8 <twiReceive>:
    43b8:	1f 93       	push	r17
    43ba:	cf 93       	push	r28
    43bc:	df 93       	push	r29
    43be:	00 97       	sbiw	r24, 0x00	; 0
    43c0:	29 f1       	breq	.+74     	; 0x440c <twiReceive+0x54>
    43c2:	6b 30       	cpi	r22, 0x0B	; 11
    43c4:	28 f5       	brcc	.+74     	; 0x4410 <twiReceive+0x58>
    43c6:	16 2f       	mov	r17, r22
    43c8:	ec 01       	movw	r28, r24
    43ca:	a6 df       	rcall	.-180    	; 0x4318 <twiIsBusy>
    43cc:	81 11       	cpse	r24, r1
    43ce:	22 c0       	rjmp	.+68     	; 0x4414 <twiReceive+0x5c>
    43d0:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <_twiCurrentHandler>
    43d4:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <_twiCurrentHandler+0x1>
    43d8:	c8 17       	cp	r28, r24
    43da:	d9 07       	cpc	r29, r25
    43dc:	41 f0       	breq	.+16     	; 0x43ee <twiReceive+0x36>
    43de:	3e df       	rcall	.-388    	; 0x425c <_initTwiInterface>
    43e0:	89 81       	ldd	r24, Y+1	; 0x01
    43e2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    43e6:	d0 93 6a 0a 	sts	0x0A6A, r29	; 0x800a6a <_twiCurrentHandler+0x1>
    43ea:	c0 93 69 0a 	sts	0x0A69, r28	; 0x800a69 <_twiCurrentHandler>
    43ee:	10 93 6b 0a 	sts	0x0A6B, r17	; 0x800a6b <_twiMessageLen>
    43f2:	88 81       	ld	r24, Y
    43f4:	88 0f       	add	r24, r24
    43f6:	81 60       	ori	r24, 0x01	; 1
    43f8:	80 93 6c 0a 	sts	0x0A6C, r24	; 0x800a6c <_twiMessageBuffer>
    43fc:	88 ef       	ldi	r24, 0xF8	; 248
    43fe:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    4402:	85 ea       	ldi	r24, 0xA5	; 165
    4404:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4408:	85 e0       	ldi	r24, 0x05	; 5
    440a:	05 c0       	rjmp	.+10     	; 0x4416 <twiReceive+0x5e>
    440c:	86 e0       	ldi	r24, 0x06	; 6
    440e:	03 c0       	rjmp	.+6      	; 0x4416 <twiReceive+0x5e>
    4410:	87 e0       	ldi	r24, 0x07	; 7
    4412:	01 c0       	rjmp	.+2      	; 0x4416 <twiReceive+0x5e>
    4414:	82 e0       	ldi	r24, 0x02	; 2
    4416:	df 91       	pop	r29
    4418:	cf 91       	pop	r28
    441a:	1f 91       	pop	r17
    441c:	08 95       	ret

0000441e <__vector_39>:
    441e:	1f 92       	push	r1
    4420:	0f 92       	push	r0
    4422:	0f b6       	in	r0, 0x3f	; 63
    4424:	0f 92       	push	r0
    4426:	11 24       	eor	r1, r1
    4428:	0b b6       	in	r0, 0x3b	; 59
    442a:	0f 92       	push	r0
    442c:	2f 93       	push	r18
    442e:	3f 93       	push	r19
    4430:	4f 93       	push	r20
    4432:	5f 93       	push	r21
    4434:	6f 93       	push	r22
    4436:	7f 93       	push	r23
    4438:	8f 93       	push	r24
    443a:	9f 93       	push	r25
    443c:	af 93       	push	r26
    443e:	bf 93       	push	r27
    4440:	ef 93       	push	r30
    4442:	ff 93       	push	r31
    4444:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4448:	8e 2f       	mov	r24, r30
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	fc 01       	movw	r30, r24
    444e:	38 97       	sbiw	r30, 0x08	; 8
    4450:	e1 35       	cpi	r30, 0x51	; 81
    4452:	f1 05       	cpc	r31, r1
    4454:	08 f0       	brcs	.+2      	; 0x4458 <__vector_39+0x3a>
    4456:	75 c0       	rjmp	.+234    	; 0x4542 <__vector_39+0x124>
    4458:	88 27       	eor	r24, r24
    445a:	e4 58       	subi	r30, 0x84	; 132
    445c:	ff 4f       	sbci	r31, 0xFF	; 255
    445e:	8f 4f       	sbci	r24, 0xFF	; 255
    4460:	c8 c2       	rjmp	.+1424   	; 0x49f2 <__tablejump2__>
    4462:	10 92 68 0a 	sts	0x0A68, r1	; 0x800a68 <_index.1885>
    4466:	e0 91 68 0a 	lds	r30, 0x0A68	; 0x800a68 <_index.1885>
    446a:	80 91 6b 0a 	lds	r24, 0x0A6B	; 0x800a6b <_twiMessageLen>
    446e:	e8 17       	cp	r30, r24
    4470:	70 f4       	brcc	.+28     	; 0x448e <__vector_39+0x70>
    4472:	81 e0       	ldi	r24, 0x01	; 1
    4474:	8e 0f       	add	r24, r30
    4476:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <_index.1885>
    447a:	f0 e0       	ldi	r31, 0x00	; 0
    447c:	e4 59       	subi	r30, 0x94	; 148
    447e:	f5 4f       	sbci	r31, 0xF5	; 245
    4480:	80 81       	ld	r24, Z
    4482:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4486:	85 e8       	ldi	r24, 0x85	; 133
    4488:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    448c:	72 c0       	rjmp	.+228    	; 0x4572 <__vector_39+0x154>
    448e:	84 e9       	ldi	r24, 0x94	; 148
    4490:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4494:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <_twiCurrentHandler>
    4498:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <_twiCurrentHandler+0x1>
    449c:	dc 01       	movw	r26, r24
    449e:	12 96       	adiw	r26, 0x02	; 2
    44a0:	ed 91       	ld	r30, X+
    44a2:	fc 91       	ld	r31, X
    44a4:	13 97       	sbiw	r26, 0x03	; 3
    44a6:	30 97       	sbiw	r30, 0x00	; 0
    44a8:	09 f4       	brne	.+2      	; 0x44ac <__vector_39+0x8e>
    44aa:	63 c0       	rjmp	.+198    	; 0x4572 <__vector_39+0x154>
    44ac:	20 e0       	ldi	r18, 0x00	; 0
    44ae:	40 e0       	ldi	r20, 0x00	; 0
    44b0:	50 e0       	ldi	r21, 0x00	; 0
    44b2:	64 e0       	ldi	r22, 0x04	; 4
    44b4:	19 95       	eicall
    44b6:	5d c0       	rjmp	.+186    	; 0x4572 <__vector_39+0x154>
    44b8:	e0 91 68 0a 	lds	r30, 0x0A68	; 0x800a68 <_index.1885>
    44bc:	81 e0       	ldi	r24, 0x01	; 1
    44be:	8e 0f       	add	r24, r30
    44c0:	80 93 68 0a 	sts	0x0A68, r24	; 0x800a68 <_index.1885>
    44c4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    44c8:	f0 e0       	ldi	r31, 0x00	; 0
    44ca:	e4 59       	subi	r30, 0x94	; 148
    44cc:	f5 4f       	sbci	r31, 0xF5	; 245
    44ce:	80 83       	st	Z, r24
    44d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    44d4:	80 34       	cpi	r24, 0x40	; 64
    44d6:	11 f4       	brne	.+4      	; 0x44dc <__vector_39+0xbe>
    44d8:	10 92 68 0a 	sts	0x0A68, r1	; 0x800a68 <_index.1885>
    44dc:	20 91 68 0a 	lds	r18, 0x0A68	; 0x800a68 <_index.1885>
    44e0:	30 e0       	ldi	r19, 0x00	; 0
    44e2:	80 91 6b 0a 	lds	r24, 0x0A6B	; 0x800a6b <_twiMessageLen>
    44e6:	90 e0       	ldi	r25, 0x00	; 0
    44e8:	01 97       	sbiw	r24, 0x01	; 1
    44ea:	28 17       	cp	r18, r24
    44ec:	39 07       	cpc	r19, r25
    44ee:	24 f4       	brge	.+8      	; 0x44f8 <__vector_39+0xda>
    44f0:	85 ec       	ldi	r24, 0xC5	; 197
    44f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    44f6:	3d c0       	rjmp	.+122    	; 0x4572 <__vector_39+0x154>
    44f8:	85 e8       	ldi	r24, 0x85	; 133
    44fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    44fe:	39 c0       	rjmp	.+114    	; 0x4572 <__vector_39+0x154>
    4500:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4504:	e0 91 68 0a 	lds	r30, 0x0A68	; 0x800a68 <_index.1885>
    4508:	f0 e0       	ldi	r31, 0x00	; 0
    450a:	e4 59       	subi	r30, 0x94	; 148
    450c:	f5 4f       	sbci	r31, 0xF5	; 245
    450e:	80 83       	st	Z, r24
    4510:	84 e9       	ldi	r24, 0x94	; 148
    4512:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4516:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <_twiCurrentHandler>
    451a:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <_twiCurrentHandler+0x1>
    451e:	dc 01       	movw	r26, r24
    4520:	12 96       	adiw	r26, 0x02	; 2
    4522:	ed 91       	ld	r30, X+
    4524:	fc 91       	ld	r31, X
    4526:	13 97       	sbiw	r26, 0x03	; 3
    4528:	30 97       	sbiw	r30, 0x00	; 0
    452a:	19 f1       	breq	.+70     	; 0x4572 <__vector_39+0x154>
    452c:	20 91 6b 0a 	lds	r18, 0x0A6B	; 0x800a6b <_twiMessageLen>
    4530:	4c e6       	ldi	r20, 0x6C	; 108
    4532:	5a e0       	ldi	r21, 0x0A	; 10
    4534:	65 e0       	ldi	r22, 0x05	; 5
    4536:	19 95       	eicall
    4538:	1c c0       	rjmp	.+56     	; 0x4572 <__vector_39+0x154>
    453a:	85 ea       	ldi	r24, 0xA5	; 165
    453c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4540:	18 c0       	rjmp	.+48     	; 0x4572 <__vector_39+0x154>
    4542:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4546:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    454a:	84 e0       	ldi	r24, 0x04	; 4
    454c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4550:	80 91 69 0a 	lds	r24, 0x0A69	; 0x800a69 <_twiCurrentHandler>
    4554:	90 91 6a 0a 	lds	r25, 0x0A6A	; 0x800a6a <_twiCurrentHandler+0x1>
    4558:	dc 01       	movw	r26, r24
    455a:	12 96       	adiw	r26, 0x02	; 2
    455c:	ed 91       	ld	r30, X+
    455e:	fc 91       	ld	r31, X
    4560:	13 97       	sbiw	r26, 0x03	; 3
    4562:	30 97       	sbiw	r30, 0x00	; 0
    4564:	31 f0       	breq	.+12     	; 0x4572 <__vector_39+0x154>
    4566:	20 e0       	ldi	r18, 0x00	; 0
    4568:	40 e0       	ldi	r20, 0x00	; 0
    456a:	50 e0       	ldi	r21, 0x00	; 0
    456c:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    4570:	19 95       	eicall
    4572:	ff 91       	pop	r31
    4574:	ef 91       	pop	r30
    4576:	bf 91       	pop	r27
    4578:	af 91       	pop	r26
    457a:	9f 91       	pop	r25
    457c:	8f 91       	pop	r24
    457e:	7f 91       	pop	r23
    4580:	6f 91       	pop	r22
    4582:	5f 91       	pop	r21
    4584:	4f 91       	pop	r20
    4586:	3f 91       	pop	r19
    4588:	2f 91       	pop	r18
    458a:	0f 90       	pop	r0
    458c:	0b be       	out	0x3b, r0	; 59
    458e:	0f 90       	pop	r0
    4590:	0f be       	out	0x3f, r0	; 63
    4592:	0f 90       	pop	r0
    4594:	1f 90       	pop	r1
    4596:	18 95       	reti

00004598 <fifo_init>:
    4598:	fc 01       	movw	r30, r24
    459a:	41 11       	cpse	r20, r1
    459c:	01 c0       	rjmp	.+2      	; 0x45a0 <fifo_init+0x8>
    459e:	6c d3       	rcall	.+1752   	; 0x4c78 <abort>
    45a0:	84 2f       	mov	r24, r20
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	9c 01       	movw	r18, r24
    45a6:	21 50       	subi	r18, 0x01	; 1
    45a8:	31 09       	sbc	r19, r1
    45aa:	82 23       	and	r24, r18
    45ac:	93 23       	and	r25, r19
    45ae:	89 2b       	or	r24, r25
    45b0:	09 f0       	breq	.+2      	; 0x45b4 <fifo_init+0x1c>
    45b2:	62 d3       	rcall	.+1732   	; 0x4c78 <abort>
    45b4:	41 38       	cpi	r20, 0x81	; 129
    45b6:	08 f0       	brcs	.+2      	; 0x45ba <fifo_init+0x22>
    45b8:	5f d3       	rcall	.+1726   	; 0x4c78 <abort>
    45ba:	12 82       	std	Z+2, r1	; 0x02
    45bc:	13 82       	std	Z+3, r1	; 0x03
    45be:	44 83       	std	Z+4, r20	; 0x04
    45c0:	44 0f       	add	r20, r20
    45c2:	41 50       	subi	r20, 0x01	; 1
    45c4:	45 83       	std	Z+5, r20	; 0x05
    45c6:	71 83       	std	Z+1, r23	; 0x01
    45c8:	60 83       	st	Z, r22
    45ca:	80 e0       	ldi	r24, 0x00	; 0
    45cc:	90 e0       	ldi	r25, 0x00	; 0
    45ce:	08 95       	ret

000045d0 <__subsf3>:
    45d0:	50 58       	subi	r21, 0x80	; 128

000045d2 <__addsf3>:
    45d2:	bb 27       	eor	r27, r27
    45d4:	aa 27       	eor	r26, r26
    45d6:	0e d0       	rcall	.+28     	; 0x45f4 <__addsf3x>
    45d8:	4d c1       	rjmp	.+666    	; 0x4874 <__fp_round>
    45da:	3e d1       	rcall	.+636    	; 0x4858 <__fp_pscA>
    45dc:	30 f0       	brcs	.+12     	; 0x45ea <__addsf3+0x18>
    45de:	43 d1       	rcall	.+646    	; 0x4866 <__fp_pscB>
    45e0:	20 f0       	brcs	.+8      	; 0x45ea <__addsf3+0x18>
    45e2:	31 f4       	brne	.+12     	; 0x45f0 <__addsf3+0x1e>
    45e4:	9f 3f       	cpi	r25, 0xFF	; 255
    45e6:	11 f4       	brne	.+4      	; 0x45ec <__addsf3+0x1a>
    45e8:	1e f4       	brtc	.+6      	; 0x45f0 <__addsf3+0x1e>
    45ea:	33 c1       	rjmp	.+614    	; 0x4852 <__fp_nan>
    45ec:	0e f4       	brtc	.+2      	; 0x45f0 <__addsf3+0x1e>
    45ee:	e0 95       	com	r30
    45f0:	e7 fb       	bst	r30, 7
    45f2:	29 c1       	rjmp	.+594    	; 0x4846 <__fp_inf>

000045f4 <__addsf3x>:
    45f4:	e9 2f       	mov	r30, r25
    45f6:	4f d1       	rcall	.+670    	; 0x4896 <__fp_split3>
    45f8:	80 f3       	brcs	.-32     	; 0x45da <__addsf3+0x8>
    45fa:	ba 17       	cp	r27, r26
    45fc:	62 07       	cpc	r22, r18
    45fe:	73 07       	cpc	r23, r19
    4600:	84 07       	cpc	r24, r20
    4602:	95 07       	cpc	r25, r21
    4604:	18 f0       	brcs	.+6      	; 0x460c <__addsf3x+0x18>
    4606:	71 f4       	brne	.+28     	; 0x4624 <__addsf3x+0x30>
    4608:	9e f5       	brtc	.+102    	; 0x4670 <__addsf3x+0x7c>
    460a:	67 c1       	rjmp	.+718    	; 0x48da <__fp_zero>
    460c:	0e f4       	brtc	.+2      	; 0x4610 <__addsf3x+0x1c>
    460e:	e0 95       	com	r30
    4610:	0b 2e       	mov	r0, r27
    4612:	ba 2f       	mov	r27, r26
    4614:	a0 2d       	mov	r26, r0
    4616:	0b 01       	movw	r0, r22
    4618:	b9 01       	movw	r22, r18
    461a:	90 01       	movw	r18, r0
    461c:	0c 01       	movw	r0, r24
    461e:	ca 01       	movw	r24, r20
    4620:	a0 01       	movw	r20, r0
    4622:	11 24       	eor	r1, r1
    4624:	ff 27       	eor	r31, r31
    4626:	59 1b       	sub	r21, r25
    4628:	99 f0       	breq	.+38     	; 0x4650 <__addsf3x+0x5c>
    462a:	59 3f       	cpi	r21, 0xF9	; 249
    462c:	50 f4       	brcc	.+20     	; 0x4642 <__addsf3x+0x4e>
    462e:	50 3e       	cpi	r21, 0xE0	; 224
    4630:	68 f1       	brcs	.+90     	; 0x468c <__addsf3x+0x98>
    4632:	1a 16       	cp	r1, r26
    4634:	f0 40       	sbci	r31, 0x00	; 0
    4636:	a2 2f       	mov	r26, r18
    4638:	23 2f       	mov	r18, r19
    463a:	34 2f       	mov	r19, r20
    463c:	44 27       	eor	r20, r20
    463e:	58 5f       	subi	r21, 0xF8	; 248
    4640:	f3 cf       	rjmp	.-26     	; 0x4628 <__addsf3x+0x34>
    4642:	46 95       	lsr	r20
    4644:	37 95       	ror	r19
    4646:	27 95       	ror	r18
    4648:	a7 95       	ror	r26
    464a:	f0 40       	sbci	r31, 0x00	; 0
    464c:	53 95       	inc	r21
    464e:	c9 f7       	brne	.-14     	; 0x4642 <__addsf3x+0x4e>
    4650:	7e f4       	brtc	.+30     	; 0x4670 <__addsf3x+0x7c>
    4652:	1f 16       	cp	r1, r31
    4654:	ba 0b       	sbc	r27, r26
    4656:	62 0b       	sbc	r22, r18
    4658:	73 0b       	sbc	r23, r19
    465a:	84 0b       	sbc	r24, r20
    465c:	ba f0       	brmi	.+46     	; 0x468c <__addsf3x+0x98>
    465e:	91 50       	subi	r25, 0x01	; 1
    4660:	a1 f0       	breq	.+40     	; 0x468a <__addsf3x+0x96>
    4662:	ff 0f       	add	r31, r31
    4664:	bb 1f       	adc	r27, r27
    4666:	66 1f       	adc	r22, r22
    4668:	77 1f       	adc	r23, r23
    466a:	88 1f       	adc	r24, r24
    466c:	c2 f7       	brpl	.-16     	; 0x465e <__addsf3x+0x6a>
    466e:	0e c0       	rjmp	.+28     	; 0x468c <__addsf3x+0x98>
    4670:	ba 0f       	add	r27, r26
    4672:	62 1f       	adc	r22, r18
    4674:	73 1f       	adc	r23, r19
    4676:	84 1f       	adc	r24, r20
    4678:	48 f4       	brcc	.+18     	; 0x468c <__addsf3x+0x98>
    467a:	87 95       	ror	r24
    467c:	77 95       	ror	r23
    467e:	67 95       	ror	r22
    4680:	b7 95       	ror	r27
    4682:	f7 95       	ror	r31
    4684:	9e 3f       	cpi	r25, 0xFE	; 254
    4686:	08 f0       	brcs	.+2      	; 0x468a <__addsf3x+0x96>
    4688:	b3 cf       	rjmp	.-154    	; 0x45f0 <__addsf3+0x1e>
    468a:	93 95       	inc	r25
    468c:	88 0f       	add	r24, r24
    468e:	08 f0       	brcs	.+2      	; 0x4692 <__addsf3x+0x9e>
    4690:	99 27       	eor	r25, r25
    4692:	ee 0f       	add	r30, r30
    4694:	97 95       	ror	r25
    4696:	87 95       	ror	r24
    4698:	08 95       	ret

0000469a <__divsf3>:
    469a:	0c d0       	rcall	.+24     	; 0x46b4 <__divsf3x>
    469c:	eb c0       	rjmp	.+470    	; 0x4874 <__fp_round>
    469e:	e3 d0       	rcall	.+454    	; 0x4866 <__fp_pscB>
    46a0:	40 f0       	brcs	.+16     	; 0x46b2 <__divsf3+0x18>
    46a2:	da d0       	rcall	.+436    	; 0x4858 <__fp_pscA>
    46a4:	30 f0       	brcs	.+12     	; 0x46b2 <__divsf3+0x18>
    46a6:	21 f4       	brne	.+8      	; 0x46b0 <__divsf3+0x16>
    46a8:	5f 3f       	cpi	r21, 0xFF	; 255
    46aa:	19 f0       	breq	.+6      	; 0x46b2 <__divsf3+0x18>
    46ac:	cc c0       	rjmp	.+408    	; 0x4846 <__fp_inf>
    46ae:	51 11       	cpse	r21, r1
    46b0:	15 c1       	rjmp	.+554    	; 0x48dc <__fp_szero>
    46b2:	cf c0       	rjmp	.+414    	; 0x4852 <__fp_nan>

000046b4 <__divsf3x>:
    46b4:	f0 d0       	rcall	.+480    	; 0x4896 <__fp_split3>
    46b6:	98 f3       	brcs	.-26     	; 0x469e <__divsf3+0x4>

000046b8 <__divsf3_pse>:
    46b8:	99 23       	and	r25, r25
    46ba:	c9 f3       	breq	.-14     	; 0x46ae <__divsf3+0x14>
    46bc:	55 23       	and	r21, r21
    46be:	b1 f3       	breq	.-20     	; 0x46ac <__divsf3+0x12>
    46c0:	95 1b       	sub	r25, r21
    46c2:	55 0b       	sbc	r21, r21
    46c4:	bb 27       	eor	r27, r27
    46c6:	aa 27       	eor	r26, r26
    46c8:	62 17       	cp	r22, r18
    46ca:	73 07       	cpc	r23, r19
    46cc:	84 07       	cpc	r24, r20
    46ce:	38 f0       	brcs	.+14     	; 0x46de <__divsf3_pse+0x26>
    46d0:	9f 5f       	subi	r25, 0xFF	; 255
    46d2:	5f 4f       	sbci	r21, 0xFF	; 255
    46d4:	22 0f       	add	r18, r18
    46d6:	33 1f       	adc	r19, r19
    46d8:	44 1f       	adc	r20, r20
    46da:	aa 1f       	adc	r26, r26
    46dc:	a9 f3       	breq	.-22     	; 0x46c8 <__divsf3_pse+0x10>
    46de:	33 d0       	rcall	.+102    	; 0x4746 <__divsf3_pse+0x8e>
    46e0:	0e 2e       	mov	r0, r30
    46e2:	3a f0       	brmi	.+14     	; 0x46f2 <__divsf3_pse+0x3a>
    46e4:	e0 e8       	ldi	r30, 0x80	; 128
    46e6:	30 d0       	rcall	.+96     	; 0x4748 <__divsf3_pse+0x90>
    46e8:	91 50       	subi	r25, 0x01	; 1
    46ea:	50 40       	sbci	r21, 0x00	; 0
    46ec:	e6 95       	lsr	r30
    46ee:	00 1c       	adc	r0, r0
    46f0:	ca f7       	brpl	.-14     	; 0x46e4 <__divsf3_pse+0x2c>
    46f2:	29 d0       	rcall	.+82     	; 0x4746 <__divsf3_pse+0x8e>
    46f4:	fe 2f       	mov	r31, r30
    46f6:	27 d0       	rcall	.+78     	; 0x4746 <__divsf3_pse+0x8e>
    46f8:	66 0f       	add	r22, r22
    46fa:	77 1f       	adc	r23, r23
    46fc:	88 1f       	adc	r24, r24
    46fe:	bb 1f       	adc	r27, r27
    4700:	26 17       	cp	r18, r22
    4702:	37 07       	cpc	r19, r23
    4704:	48 07       	cpc	r20, r24
    4706:	ab 07       	cpc	r26, r27
    4708:	b0 e8       	ldi	r27, 0x80	; 128
    470a:	09 f0       	breq	.+2      	; 0x470e <__divsf3_pse+0x56>
    470c:	bb 0b       	sbc	r27, r27
    470e:	80 2d       	mov	r24, r0
    4710:	bf 01       	movw	r22, r30
    4712:	ff 27       	eor	r31, r31
    4714:	93 58       	subi	r25, 0x83	; 131
    4716:	5f 4f       	sbci	r21, 0xFF	; 255
    4718:	2a f0       	brmi	.+10     	; 0x4724 <__divsf3_pse+0x6c>
    471a:	9e 3f       	cpi	r25, 0xFE	; 254
    471c:	51 05       	cpc	r21, r1
    471e:	68 f0       	brcs	.+26     	; 0x473a <__divsf3_pse+0x82>
    4720:	92 c0       	rjmp	.+292    	; 0x4846 <__fp_inf>
    4722:	dc c0       	rjmp	.+440    	; 0x48dc <__fp_szero>
    4724:	5f 3f       	cpi	r21, 0xFF	; 255
    4726:	ec f3       	brlt	.-6      	; 0x4722 <__divsf3_pse+0x6a>
    4728:	98 3e       	cpi	r25, 0xE8	; 232
    472a:	dc f3       	brlt	.-10     	; 0x4722 <__divsf3_pse+0x6a>
    472c:	86 95       	lsr	r24
    472e:	77 95       	ror	r23
    4730:	67 95       	ror	r22
    4732:	b7 95       	ror	r27
    4734:	f7 95       	ror	r31
    4736:	9f 5f       	subi	r25, 0xFF	; 255
    4738:	c9 f7       	brne	.-14     	; 0x472c <__divsf3_pse+0x74>
    473a:	88 0f       	add	r24, r24
    473c:	91 1d       	adc	r25, r1
    473e:	96 95       	lsr	r25
    4740:	87 95       	ror	r24
    4742:	97 f9       	bld	r25, 7
    4744:	08 95       	ret
    4746:	e1 e0       	ldi	r30, 0x01	; 1
    4748:	66 0f       	add	r22, r22
    474a:	77 1f       	adc	r23, r23
    474c:	88 1f       	adc	r24, r24
    474e:	bb 1f       	adc	r27, r27
    4750:	62 17       	cp	r22, r18
    4752:	73 07       	cpc	r23, r19
    4754:	84 07       	cpc	r24, r20
    4756:	ba 07       	cpc	r27, r26
    4758:	20 f0       	brcs	.+8      	; 0x4762 <__divsf3_pse+0xaa>
    475a:	62 1b       	sub	r22, r18
    475c:	73 0b       	sbc	r23, r19
    475e:	84 0b       	sbc	r24, r20
    4760:	ba 0b       	sbc	r27, r26
    4762:	ee 1f       	adc	r30, r30
    4764:	88 f7       	brcc	.-30     	; 0x4748 <__divsf3_pse+0x90>
    4766:	e0 95       	com	r30
    4768:	08 95       	ret

0000476a <__fixsfsi>:
    476a:	04 d0       	rcall	.+8      	; 0x4774 <__fixunssfsi>
    476c:	68 94       	set
    476e:	b1 11       	cpse	r27, r1
    4770:	b5 c0       	rjmp	.+362    	; 0x48dc <__fp_szero>
    4772:	08 95       	ret

00004774 <__fixunssfsi>:
    4774:	98 d0       	rcall	.+304    	; 0x48a6 <__fp_splitA>
    4776:	88 f0       	brcs	.+34     	; 0x479a <__fixunssfsi+0x26>
    4778:	9f 57       	subi	r25, 0x7F	; 127
    477a:	90 f0       	brcs	.+36     	; 0x47a0 <__fixunssfsi+0x2c>
    477c:	b9 2f       	mov	r27, r25
    477e:	99 27       	eor	r25, r25
    4780:	b7 51       	subi	r27, 0x17	; 23
    4782:	a0 f0       	brcs	.+40     	; 0x47ac <__fixunssfsi+0x38>
    4784:	d1 f0       	breq	.+52     	; 0x47ba <__fixunssfsi+0x46>
    4786:	66 0f       	add	r22, r22
    4788:	77 1f       	adc	r23, r23
    478a:	88 1f       	adc	r24, r24
    478c:	99 1f       	adc	r25, r25
    478e:	1a f0       	brmi	.+6      	; 0x4796 <__fixunssfsi+0x22>
    4790:	ba 95       	dec	r27
    4792:	c9 f7       	brne	.-14     	; 0x4786 <__fixunssfsi+0x12>
    4794:	12 c0       	rjmp	.+36     	; 0x47ba <__fixunssfsi+0x46>
    4796:	b1 30       	cpi	r27, 0x01	; 1
    4798:	81 f0       	breq	.+32     	; 0x47ba <__fixunssfsi+0x46>
    479a:	9f d0       	rcall	.+318    	; 0x48da <__fp_zero>
    479c:	b1 e0       	ldi	r27, 0x01	; 1
    479e:	08 95       	ret
    47a0:	9c c0       	rjmp	.+312    	; 0x48da <__fp_zero>
    47a2:	67 2f       	mov	r22, r23
    47a4:	78 2f       	mov	r23, r24
    47a6:	88 27       	eor	r24, r24
    47a8:	b8 5f       	subi	r27, 0xF8	; 248
    47aa:	39 f0       	breq	.+14     	; 0x47ba <__fixunssfsi+0x46>
    47ac:	b9 3f       	cpi	r27, 0xF9	; 249
    47ae:	cc f3       	brlt	.-14     	; 0x47a2 <__fixunssfsi+0x2e>
    47b0:	86 95       	lsr	r24
    47b2:	77 95       	ror	r23
    47b4:	67 95       	ror	r22
    47b6:	b3 95       	inc	r27
    47b8:	d9 f7       	brne	.-10     	; 0x47b0 <__fixunssfsi+0x3c>
    47ba:	3e f4       	brtc	.+14     	; 0x47ca <__fixunssfsi+0x56>
    47bc:	90 95       	com	r25
    47be:	80 95       	com	r24
    47c0:	70 95       	com	r23
    47c2:	61 95       	neg	r22
    47c4:	7f 4f       	sbci	r23, 0xFF	; 255
    47c6:	8f 4f       	sbci	r24, 0xFF	; 255
    47c8:	9f 4f       	sbci	r25, 0xFF	; 255
    47ca:	08 95       	ret

000047cc <__floatunsisf>:
    47cc:	e8 94       	clt
    47ce:	09 c0       	rjmp	.+18     	; 0x47e2 <__floatsisf+0x12>

000047d0 <__floatsisf>:
    47d0:	97 fb       	bst	r25, 7
    47d2:	3e f4       	brtc	.+14     	; 0x47e2 <__floatsisf+0x12>
    47d4:	90 95       	com	r25
    47d6:	80 95       	com	r24
    47d8:	70 95       	com	r23
    47da:	61 95       	neg	r22
    47dc:	7f 4f       	sbci	r23, 0xFF	; 255
    47de:	8f 4f       	sbci	r24, 0xFF	; 255
    47e0:	9f 4f       	sbci	r25, 0xFF	; 255
    47e2:	99 23       	and	r25, r25
    47e4:	a9 f0       	breq	.+42     	; 0x4810 <__floatsisf+0x40>
    47e6:	f9 2f       	mov	r31, r25
    47e8:	96 e9       	ldi	r25, 0x96	; 150
    47ea:	bb 27       	eor	r27, r27
    47ec:	93 95       	inc	r25
    47ee:	f6 95       	lsr	r31
    47f0:	87 95       	ror	r24
    47f2:	77 95       	ror	r23
    47f4:	67 95       	ror	r22
    47f6:	b7 95       	ror	r27
    47f8:	f1 11       	cpse	r31, r1
    47fa:	f8 cf       	rjmp	.-16     	; 0x47ec <__floatsisf+0x1c>
    47fc:	fa f4       	brpl	.+62     	; 0x483c <__floatsisf+0x6c>
    47fe:	bb 0f       	add	r27, r27
    4800:	11 f4       	brne	.+4      	; 0x4806 <__floatsisf+0x36>
    4802:	60 ff       	sbrs	r22, 0
    4804:	1b c0       	rjmp	.+54     	; 0x483c <__floatsisf+0x6c>
    4806:	6f 5f       	subi	r22, 0xFF	; 255
    4808:	7f 4f       	sbci	r23, 0xFF	; 255
    480a:	8f 4f       	sbci	r24, 0xFF	; 255
    480c:	9f 4f       	sbci	r25, 0xFF	; 255
    480e:	16 c0       	rjmp	.+44     	; 0x483c <__floatsisf+0x6c>
    4810:	88 23       	and	r24, r24
    4812:	11 f0       	breq	.+4      	; 0x4818 <__floatsisf+0x48>
    4814:	96 e9       	ldi	r25, 0x96	; 150
    4816:	11 c0       	rjmp	.+34     	; 0x483a <__floatsisf+0x6a>
    4818:	77 23       	and	r23, r23
    481a:	21 f0       	breq	.+8      	; 0x4824 <__floatsisf+0x54>
    481c:	9e e8       	ldi	r25, 0x8E	; 142
    481e:	87 2f       	mov	r24, r23
    4820:	76 2f       	mov	r23, r22
    4822:	05 c0       	rjmp	.+10     	; 0x482e <__floatsisf+0x5e>
    4824:	66 23       	and	r22, r22
    4826:	71 f0       	breq	.+28     	; 0x4844 <__floatsisf+0x74>
    4828:	96 e8       	ldi	r25, 0x86	; 134
    482a:	86 2f       	mov	r24, r22
    482c:	70 e0       	ldi	r23, 0x00	; 0
    482e:	60 e0       	ldi	r22, 0x00	; 0
    4830:	2a f0       	brmi	.+10     	; 0x483c <__floatsisf+0x6c>
    4832:	9a 95       	dec	r25
    4834:	66 0f       	add	r22, r22
    4836:	77 1f       	adc	r23, r23
    4838:	88 1f       	adc	r24, r24
    483a:	da f7       	brpl	.-10     	; 0x4832 <__floatsisf+0x62>
    483c:	88 0f       	add	r24, r24
    483e:	96 95       	lsr	r25
    4840:	87 95       	ror	r24
    4842:	97 f9       	bld	r25, 7
    4844:	08 95       	ret

00004846 <__fp_inf>:
    4846:	97 f9       	bld	r25, 7
    4848:	9f 67       	ori	r25, 0x7F	; 127
    484a:	80 e8       	ldi	r24, 0x80	; 128
    484c:	70 e0       	ldi	r23, 0x00	; 0
    484e:	60 e0       	ldi	r22, 0x00	; 0
    4850:	08 95       	ret

00004852 <__fp_nan>:
    4852:	9f ef       	ldi	r25, 0xFF	; 255
    4854:	80 ec       	ldi	r24, 0xC0	; 192
    4856:	08 95       	ret

00004858 <__fp_pscA>:
    4858:	00 24       	eor	r0, r0
    485a:	0a 94       	dec	r0
    485c:	16 16       	cp	r1, r22
    485e:	17 06       	cpc	r1, r23
    4860:	18 06       	cpc	r1, r24
    4862:	09 06       	cpc	r0, r25
    4864:	08 95       	ret

00004866 <__fp_pscB>:
    4866:	00 24       	eor	r0, r0
    4868:	0a 94       	dec	r0
    486a:	12 16       	cp	r1, r18
    486c:	13 06       	cpc	r1, r19
    486e:	14 06       	cpc	r1, r20
    4870:	05 06       	cpc	r0, r21
    4872:	08 95       	ret

00004874 <__fp_round>:
    4874:	09 2e       	mov	r0, r25
    4876:	03 94       	inc	r0
    4878:	00 0c       	add	r0, r0
    487a:	11 f4       	brne	.+4      	; 0x4880 <__fp_round+0xc>
    487c:	88 23       	and	r24, r24
    487e:	52 f0       	brmi	.+20     	; 0x4894 <__fp_round+0x20>
    4880:	bb 0f       	add	r27, r27
    4882:	40 f4       	brcc	.+16     	; 0x4894 <__fp_round+0x20>
    4884:	bf 2b       	or	r27, r31
    4886:	11 f4       	brne	.+4      	; 0x488c <__fp_round+0x18>
    4888:	60 ff       	sbrs	r22, 0
    488a:	04 c0       	rjmp	.+8      	; 0x4894 <__fp_round+0x20>
    488c:	6f 5f       	subi	r22, 0xFF	; 255
    488e:	7f 4f       	sbci	r23, 0xFF	; 255
    4890:	8f 4f       	sbci	r24, 0xFF	; 255
    4892:	9f 4f       	sbci	r25, 0xFF	; 255
    4894:	08 95       	ret

00004896 <__fp_split3>:
    4896:	57 fd       	sbrc	r21, 7
    4898:	90 58       	subi	r25, 0x80	; 128
    489a:	44 0f       	add	r20, r20
    489c:	55 1f       	adc	r21, r21
    489e:	59 f0       	breq	.+22     	; 0x48b6 <__fp_splitA+0x10>
    48a0:	5f 3f       	cpi	r21, 0xFF	; 255
    48a2:	71 f0       	breq	.+28     	; 0x48c0 <__fp_splitA+0x1a>
    48a4:	47 95       	ror	r20

000048a6 <__fp_splitA>:
    48a6:	88 0f       	add	r24, r24
    48a8:	97 fb       	bst	r25, 7
    48aa:	99 1f       	adc	r25, r25
    48ac:	61 f0       	breq	.+24     	; 0x48c6 <__fp_splitA+0x20>
    48ae:	9f 3f       	cpi	r25, 0xFF	; 255
    48b0:	79 f0       	breq	.+30     	; 0x48d0 <__fp_splitA+0x2a>
    48b2:	87 95       	ror	r24
    48b4:	08 95       	ret
    48b6:	12 16       	cp	r1, r18
    48b8:	13 06       	cpc	r1, r19
    48ba:	14 06       	cpc	r1, r20
    48bc:	55 1f       	adc	r21, r21
    48be:	f2 cf       	rjmp	.-28     	; 0x48a4 <__fp_split3+0xe>
    48c0:	46 95       	lsr	r20
    48c2:	f1 df       	rcall	.-30     	; 0x48a6 <__fp_splitA>
    48c4:	08 c0       	rjmp	.+16     	; 0x48d6 <__fp_splitA+0x30>
    48c6:	16 16       	cp	r1, r22
    48c8:	17 06       	cpc	r1, r23
    48ca:	18 06       	cpc	r1, r24
    48cc:	99 1f       	adc	r25, r25
    48ce:	f1 cf       	rjmp	.-30     	; 0x48b2 <__fp_splitA+0xc>
    48d0:	86 95       	lsr	r24
    48d2:	71 05       	cpc	r23, r1
    48d4:	61 05       	cpc	r22, r1
    48d6:	08 94       	sec
    48d8:	08 95       	ret

000048da <__fp_zero>:
    48da:	e8 94       	clt

000048dc <__fp_szero>:
    48dc:	bb 27       	eor	r27, r27
    48de:	66 27       	eor	r22, r22
    48e0:	77 27       	eor	r23, r23
    48e2:	cb 01       	movw	r24, r22
    48e4:	97 f9       	bld	r25, 7
    48e6:	08 95       	ret

000048e8 <__mulsf3>:
    48e8:	0b d0       	rcall	.+22     	; 0x4900 <__mulsf3x>
    48ea:	c4 cf       	rjmp	.-120    	; 0x4874 <__fp_round>
    48ec:	b5 df       	rcall	.-150    	; 0x4858 <__fp_pscA>
    48ee:	28 f0       	brcs	.+10     	; 0x48fa <__mulsf3+0x12>
    48f0:	ba df       	rcall	.-140    	; 0x4866 <__fp_pscB>
    48f2:	18 f0       	brcs	.+6      	; 0x48fa <__mulsf3+0x12>
    48f4:	95 23       	and	r25, r21
    48f6:	09 f0       	breq	.+2      	; 0x48fa <__mulsf3+0x12>
    48f8:	a6 cf       	rjmp	.-180    	; 0x4846 <__fp_inf>
    48fa:	ab cf       	rjmp	.-170    	; 0x4852 <__fp_nan>
    48fc:	11 24       	eor	r1, r1
    48fe:	ee cf       	rjmp	.-36     	; 0x48dc <__fp_szero>

00004900 <__mulsf3x>:
    4900:	ca df       	rcall	.-108    	; 0x4896 <__fp_split3>
    4902:	a0 f3       	brcs	.-24     	; 0x48ec <__mulsf3+0x4>

00004904 <__mulsf3_pse>:
    4904:	95 9f       	mul	r25, r21
    4906:	d1 f3       	breq	.-12     	; 0x48fc <__mulsf3+0x14>
    4908:	95 0f       	add	r25, r21
    490a:	50 e0       	ldi	r21, 0x00	; 0
    490c:	55 1f       	adc	r21, r21
    490e:	62 9f       	mul	r22, r18
    4910:	f0 01       	movw	r30, r0
    4912:	72 9f       	mul	r23, r18
    4914:	bb 27       	eor	r27, r27
    4916:	f0 0d       	add	r31, r0
    4918:	b1 1d       	adc	r27, r1
    491a:	63 9f       	mul	r22, r19
    491c:	aa 27       	eor	r26, r26
    491e:	f0 0d       	add	r31, r0
    4920:	b1 1d       	adc	r27, r1
    4922:	aa 1f       	adc	r26, r26
    4924:	64 9f       	mul	r22, r20
    4926:	66 27       	eor	r22, r22
    4928:	b0 0d       	add	r27, r0
    492a:	a1 1d       	adc	r26, r1
    492c:	66 1f       	adc	r22, r22
    492e:	82 9f       	mul	r24, r18
    4930:	22 27       	eor	r18, r18
    4932:	b0 0d       	add	r27, r0
    4934:	a1 1d       	adc	r26, r1
    4936:	62 1f       	adc	r22, r18
    4938:	73 9f       	mul	r23, r19
    493a:	b0 0d       	add	r27, r0
    493c:	a1 1d       	adc	r26, r1
    493e:	62 1f       	adc	r22, r18
    4940:	83 9f       	mul	r24, r19
    4942:	a0 0d       	add	r26, r0
    4944:	61 1d       	adc	r22, r1
    4946:	22 1f       	adc	r18, r18
    4948:	74 9f       	mul	r23, r20
    494a:	33 27       	eor	r19, r19
    494c:	a0 0d       	add	r26, r0
    494e:	61 1d       	adc	r22, r1
    4950:	23 1f       	adc	r18, r19
    4952:	84 9f       	mul	r24, r20
    4954:	60 0d       	add	r22, r0
    4956:	21 1d       	adc	r18, r1
    4958:	82 2f       	mov	r24, r18
    495a:	76 2f       	mov	r23, r22
    495c:	6a 2f       	mov	r22, r26
    495e:	11 24       	eor	r1, r1
    4960:	9f 57       	subi	r25, 0x7F	; 127
    4962:	50 40       	sbci	r21, 0x00	; 0
    4964:	8a f0       	brmi	.+34     	; 0x4988 <__mulsf3_pse+0x84>
    4966:	e1 f0       	breq	.+56     	; 0x49a0 <__mulsf3_pse+0x9c>
    4968:	88 23       	and	r24, r24
    496a:	4a f0       	brmi	.+18     	; 0x497e <__mulsf3_pse+0x7a>
    496c:	ee 0f       	add	r30, r30
    496e:	ff 1f       	adc	r31, r31
    4970:	bb 1f       	adc	r27, r27
    4972:	66 1f       	adc	r22, r22
    4974:	77 1f       	adc	r23, r23
    4976:	88 1f       	adc	r24, r24
    4978:	91 50       	subi	r25, 0x01	; 1
    497a:	50 40       	sbci	r21, 0x00	; 0
    497c:	a9 f7       	brne	.-22     	; 0x4968 <__mulsf3_pse+0x64>
    497e:	9e 3f       	cpi	r25, 0xFE	; 254
    4980:	51 05       	cpc	r21, r1
    4982:	70 f0       	brcs	.+28     	; 0x49a0 <__mulsf3_pse+0x9c>
    4984:	60 cf       	rjmp	.-320    	; 0x4846 <__fp_inf>
    4986:	aa cf       	rjmp	.-172    	; 0x48dc <__fp_szero>
    4988:	5f 3f       	cpi	r21, 0xFF	; 255
    498a:	ec f3       	brlt	.-6      	; 0x4986 <__mulsf3_pse+0x82>
    498c:	98 3e       	cpi	r25, 0xE8	; 232
    498e:	dc f3       	brlt	.-10     	; 0x4986 <__mulsf3_pse+0x82>
    4990:	86 95       	lsr	r24
    4992:	77 95       	ror	r23
    4994:	67 95       	ror	r22
    4996:	b7 95       	ror	r27
    4998:	f7 95       	ror	r31
    499a:	e7 95       	ror	r30
    499c:	9f 5f       	subi	r25, 0xFF	; 255
    499e:	c1 f7       	brne	.-16     	; 0x4990 <__mulsf3_pse+0x8c>
    49a0:	fe 2b       	or	r31, r30
    49a2:	88 0f       	add	r24, r24
    49a4:	91 1d       	adc	r25, r1
    49a6:	96 95       	lsr	r25
    49a8:	87 95       	ror	r24
    49aa:	97 f9       	bld	r25, 7
    49ac:	08 95       	ret

000049ae <__udivmodsi4>:
    49ae:	a1 e2       	ldi	r26, 0x21	; 33
    49b0:	1a 2e       	mov	r1, r26
    49b2:	aa 1b       	sub	r26, r26
    49b4:	bb 1b       	sub	r27, r27
    49b6:	fd 01       	movw	r30, r26
    49b8:	0d c0       	rjmp	.+26     	; 0x49d4 <__udivmodsi4_ep>

000049ba <__udivmodsi4_loop>:
    49ba:	aa 1f       	adc	r26, r26
    49bc:	bb 1f       	adc	r27, r27
    49be:	ee 1f       	adc	r30, r30
    49c0:	ff 1f       	adc	r31, r31
    49c2:	a2 17       	cp	r26, r18
    49c4:	b3 07       	cpc	r27, r19
    49c6:	e4 07       	cpc	r30, r20
    49c8:	f5 07       	cpc	r31, r21
    49ca:	20 f0       	brcs	.+8      	; 0x49d4 <__udivmodsi4_ep>
    49cc:	a2 1b       	sub	r26, r18
    49ce:	b3 0b       	sbc	r27, r19
    49d0:	e4 0b       	sbc	r30, r20
    49d2:	f5 0b       	sbc	r31, r21

000049d4 <__udivmodsi4_ep>:
    49d4:	66 1f       	adc	r22, r22
    49d6:	77 1f       	adc	r23, r23
    49d8:	88 1f       	adc	r24, r24
    49da:	99 1f       	adc	r25, r25
    49dc:	1a 94       	dec	r1
    49de:	69 f7       	brne	.-38     	; 0x49ba <__udivmodsi4_loop>
    49e0:	60 95       	com	r22
    49e2:	70 95       	com	r23
    49e4:	80 95       	com	r24
    49e6:	90 95       	com	r25
    49e8:	9b 01       	movw	r18, r22
    49ea:	ac 01       	movw	r20, r24
    49ec:	bd 01       	movw	r22, r26
    49ee:	cf 01       	movw	r24, r30
    49f0:	08 95       	ret

000049f2 <__tablejump2__>:
    49f2:	ee 0f       	add	r30, r30
    49f4:	ff 1f       	adc	r31, r31
    49f6:	88 1f       	adc	r24, r24
    49f8:	8b bf       	out	0x3b, r24	; 59
    49fa:	07 90       	elpm	r0, Z+
    49fc:	f6 91       	elpm	r31, Z
    49fe:	e0 2d       	mov	r30, r0
    4a00:	19 94       	eijmp

00004a02 <calloc>:
    4a02:	0f 93       	push	r16
    4a04:	1f 93       	push	r17
    4a06:	cf 93       	push	r28
    4a08:	df 93       	push	r29
    4a0a:	86 9f       	mul	r24, r22
    4a0c:	80 01       	movw	r16, r0
    4a0e:	87 9f       	mul	r24, r23
    4a10:	10 0d       	add	r17, r0
    4a12:	96 9f       	mul	r25, r22
    4a14:	10 0d       	add	r17, r0
    4a16:	11 24       	eor	r1, r1
    4a18:	c8 01       	movw	r24, r16
    4a1a:	0d d0       	rcall	.+26     	; 0x4a36 <malloc>
    4a1c:	ec 01       	movw	r28, r24
    4a1e:	00 97       	sbiw	r24, 0x00	; 0
    4a20:	21 f0       	breq	.+8      	; 0x4a2a <calloc+0x28>
    4a22:	a8 01       	movw	r20, r16
    4a24:	60 e0       	ldi	r22, 0x00	; 0
    4a26:	70 e0       	ldi	r23, 0x00	; 0
    4a28:	34 d1       	rcall	.+616    	; 0x4c92 <memset>
    4a2a:	ce 01       	movw	r24, r28
    4a2c:	df 91       	pop	r29
    4a2e:	cf 91       	pop	r28
    4a30:	1f 91       	pop	r17
    4a32:	0f 91       	pop	r16
    4a34:	08 95       	ret

00004a36 <malloc>:
    4a36:	0f 93       	push	r16
    4a38:	1f 93       	push	r17
    4a3a:	cf 93       	push	r28
    4a3c:	df 93       	push	r29
    4a3e:	82 30       	cpi	r24, 0x02	; 2
    4a40:	91 05       	cpc	r25, r1
    4a42:	10 f4       	brcc	.+4      	; 0x4a48 <malloc+0x12>
    4a44:	82 e0       	ldi	r24, 0x02	; 2
    4a46:	90 e0       	ldi	r25, 0x00	; 0
    4a48:	e0 91 ab 0a 	lds	r30, 0x0AAB	; 0x800aab <__flp>
    4a4c:	f0 91 ac 0a 	lds	r31, 0x0AAC	; 0x800aac <__flp+0x1>
    4a50:	20 e0       	ldi	r18, 0x00	; 0
    4a52:	30 e0       	ldi	r19, 0x00	; 0
    4a54:	a0 e0       	ldi	r26, 0x00	; 0
    4a56:	b0 e0       	ldi	r27, 0x00	; 0
    4a58:	30 97       	sbiw	r30, 0x00	; 0
    4a5a:	19 f1       	breq	.+70     	; 0x4aa2 <malloc+0x6c>
    4a5c:	40 81       	ld	r20, Z
    4a5e:	51 81       	ldd	r21, Z+1	; 0x01
    4a60:	02 81       	ldd	r16, Z+2	; 0x02
    4a62:	13 81       	ldd	r17, Z+3	; 0x03
    4a64:	48 17       	cp	r20, r24
    4a66:	59 07       	cpc	r21, r25
    4a68:	c8 f0       	brcs	.+50     	; 0x4a9c <malloc+0x66>
    4a6a:	84 17       	cp	r24, r20
    4a6c:	95 07       	cpc	r25, r21
    4a6e:	69 f4       	brne	.+26     	; 0x4a8a <malloc+0x54>
    4a70:	10 97       	sbiw	r26, 0x00	; 0
    4a72:	31 f0       	breq	.+12     	; 0x4a80 <malloc+0x4a>
    4a74:	12 96       	adiw	r26, 0x02	; 2
    4a76:	0c 93       	st	X, r16
    4a78:	12 97       	sbiw	r26, 0x02	; 2
    4a7a:	13 96       	adiw	r26, 0x03	; 3
    4a7c:	1c 93       	st	X, r17
    4a7e:	27 c0       	rjmp	.+78     	; 0x4ace <malloc+0x98>
    4a80:	00 93 ab 0a 	sts	0x0AAB, r16	; 0x800aab <__flp>
    4a84:	10 93 ac 0a 	sts	0x0AAC, r17	; 0x800aac <__flp+0x1>
    4a88:	22 c0       	rjmp	.+68     	; 0x4ace <malloc+0x98>
    4a8a:	21 15       	cp	r18, r1
    4a8c:	31 05       	cpc	r19, r1
    4a8e:	19 f0       	breq	.+6      	; 0x4a96 <malloc+0x60>
    4a90:	42 17       	cp	r20, r18
    4a92:	53 07       	cpc	r21, r19
    4a94:	18 f4       	brcc	.+6      	; 0x4a9c <malloc+0x66>
    4a96:	9a 01       	movw	r18, r20
    4a98:	bd 01       	movw	r22, r26
    4a9a:	ef 01       	movw	r28, r30
    4a9c:	df 01       	movw	r26, r30
    4a9e:	f8 01       	movw	r30, r16
    4aa0:	db cf       	rjmp	.-74     	; 0x4a58 <malloc+0x22>
    4aa2:	21 15       	cp	r18, r1
    4aa4:	31 05       	cpc	r19, r1
    4aa6:	f9 f0       	breq	.+62     	; 0x4ae6 <malloc+0xb0>
    4aa8:	28 1b       	sub	r18, r24
    4aaa:	39 0b       	sbc	r19, r25
    4aac:	24 30       	cpi	r18, 0x04	; 4
    4aae:	31 05       	cpc	r19, r1
    4ab0:	80 f4       	brcc	.+32     	; 0x4ad2 <malloc+0x9c>
    4ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab4:	9b 81       	ldd	r25, Y+3	; 0x03
    4ab6:	61 15       	cp	r22, r1
    4ab8:	71 05       	cpc	r23, r1
    4aba:	21 f0       	breq	.+8      	; 0x4ac4 <malloc+0x8e>
    4abc:	fb 01       	movw	r30, r22
    4abe:	93 83       	std	Z+3, r25	; 0x03
    4ac0:	82 83       	std	Z+2, r24	; 0x02
    4ac2:	04 c0       	rjmp	.+8      	; 0x4acc <malloc+0x96>
    4ac4:	90 93 ac 0a 	sts	0x0AAC, r25	; 0x800aac <__flp+0x1>
    4ac8:	80 93 ab 0a 	sts	0x0AAB, r24	; 0x800aab <__flp>
    4acc:	fe 01       	movw	r30, r28
    4ace:	32 96       	adiw	r30, 0x02	; 2
    4ad0:	44 c0       	rjmp	.+136    	; 0x4b5a <malloc+0x124>
    4ad2:	fe 01       	movw	r30, r28
    4ad4:	e2 0f       	add	r30, r18
    4ad6:	f3 1f       	adc	r31, r19
    4ad8:	81 93       	st	Z+, r24
    4ada:	91 93       	st	Z+, r25
    4adc:	22 50       	subi	r18, 0x02	; 2
    4ade:	31 09       	sbc	r19, r1
    4ae0:	39 83       	std	Y+1, r19	; 0x01
    4ae2:	28 83       	st	Y, r18
    4ae4:	3a c0       	rjmp	.+116    	; 0x4b5a <malloc+0x124>
    4ae6:	20 91 a9 0a 	lds	r18, 0x0AA9	; 0x800aa9 <__brkval>
    4aea:	30 91 aa 0a 	lds	r19, 0x0AAA	; 0x800aaa <__brkval+0x1>
    4aee:	23 2b       	or	r18, r19
    4af0:	41 f4       	brne	.+16     	; 0x4b02 <malloc+0xcc>
    4af2:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4af6:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4afa:	30 93 aa 0a 	sts	0x0AAA, r19	; 0x800aaa <__brkval+0x1>
    4afe:	20 93 a9 0a 	sts	0x0AA9, r18	; 0x800aa9 <__brkval>
    4b02:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4b06:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    4b0a:	21 15       	cp	r18, r1
    4b0c:	31 05       	cpc	r19, r1
    4b0e:	41 f4       	brne	.+16     	; 0x4b20 <malloc+0xea>
    4b10:	2d b7       	in	r18, 0x3d	; 61
    4b12:	3e b7       	in	r19, 0x3e	; 62
    4b14:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4b18:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4b1c:	24 1b       	sub	r18, r20
    4b1e:	35 0b       	sbc	r19, r21
    4b20:	e0 91 a9 0a 	lds	r30, 0x0AA9	; 0x800aa9 <__brkval>
    4b24:	f0 91 aa 0a 	lds	r31, 0x0AAA	; 0x800aaa <__brkval+0x1>
    4b28:	e2 17       	cp	r30, r18
    4b2a:	f3 07       	cpc	r31, r19
    4b2c:	a0 f4       	brcc	.+40     	; 0x4b56 <malloc+0x120>
    4b2e:	2e 1b       	sub	r18, r30
    4b30:	3f 0b       	sbc	r19, r31
    4b32:	28 17       	cp	r18, r24
    4b34:	39 07       	cpc	r19, r25
    4b36:	78 f0       	brcs	.+30     	; 0x4b56 <malloc+0x120>
    4b38:	ac 01       	movw	r20, r24
    4b3a:	4e 5f       	subi	r20, 0xFE	; 254
    4b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b3e:	24 17       	cp	r18, r20
    4b40:	35 07       	cpc	r19, r21
    4b42:	48 f0       	brcs	.+18     	; 0x4b56 <malloc+0x120>
    4b44:	4e 0f       	add	r20, r30
    4b46:	5f 1f       	adc	r21, r31
    4b48:	50 93 aa 0a 	sts	0x0AAA, r21	; 0x800aaa <__brkval+0x1>
    4b4c:	40 93 a9 0a 	sts	0x0AA9, r20	; 0x800aa9 <__brkval>
    4b50:	81 93       	st	Z+, r24
    4b52:	91 93       	st	Z+, r25
    4b54:	02 c0       	rjmp	.+4      	; 0x4b5a <malloc+0x124>
    4b56:	e0 e0       	ldi	r30, 0x00	; 0
    4b58:	f0 e0       	ldi	r31, 0x00	; 0
    4b5a:	cf 01       	movw	r24, r30
    4b5c:	df 91       	pop	r29
    4b5e:	cf 91       	pop	r28
    4b60:	1f 91       	pop	r17
    4b62:	0f 91       	pop	r16
    4b64:	08 95       	ret

00004b66 <free>:
    4b66:	cf 93       	push	r28
    4b68:	df 93       	push	r29
    4b6a:	00 97       	sbiw	r24, 0x00	; 0
    4b6c:	09 f4       	brne	.+2      	; 0x4b70 <free+0xa>
    4b6e:	81 c0       	rjmp	.+258    	; 0x4c72 <free+0x10c>
    4b70:	fc 01       	movw	r30, r24
    4b72:	32 97       	sbiw	r30, 0x02	; 2
    4b74:	13 82       	std	Z+3, r1	; 0x03
    4b76:	12 82       	std	Z+2, r1	; 0x02
    4b78:	a0 91 ab 0a 	lds	r26, 0x0AAB	; 0x800aab <__flp>
    4b7c:	b0 91 ac 0a 	lds	r27, 0x0AAC	; 0x800aac <__flp+0x1>
    4b80:	10 97       	sbiw	r26, 0x00	; 0
    4b82:	81 f4       	brne	.+32     	; 0x4ba4 <free+0x3e>
    4b84:	20 81       	ld	r18, Z
    4b86:	31 81       	ldd	r19, Z+1	; 0x01
    4b88:	82 0f       	add	r24, r18
    4b8a:	93 1f       	adc	r25, r19
    4b8c:	20 91 a9 0a 	lds	r18, 0x0AA9	; 0x800aa9 <__brkval>
    4b90:	30 91 aa 0a 	lds	r19, 0x0AAA	; 0x800aaa <__brkval+0x1>
    4b94:	28 17       	cp	r18, r24
    4b96:	39 07       	cpc	r19, r25
    4b98:	51 f5       	brne	.+84     	; 0x4bee <free+0x88>
    4b9a:	f0 93 aa 0a 	sts	0x0AAA, r31	; 0x800aaa <__brkval+0x1>
    4b9e:	e0 93 a9 0a 	sts	0x0AA9, r30	; 0x800aa9 <__brkval>
    4ba2:	67 c0       	rjmp	.+206    	; 0x4c72 <free+0x10c>
    4ba4:	ed 01       	movw	r28, r26
    4ba6:	20 e0       	ldi	r18, 0x00	; 0
    4ba8:	30 e0       	ldi	r19, 0x00	; 0
    4baa:	ce 17       	cp	r28, r30
    4bac:	df 07       	cpc	r29, r31
    4bae:	40 f4       	brcc	.+16     	; 0x4bc0 <free+0x5a>
    4bb0:	4a 81       	ldd	r20, Y+2	; 0x02
    4bb2:	5b 81       	ldd	r21, Y+3	; 0x03
    4bb4:	9e 01       	movw	r18, r28
    4bb6:	41 15       	cp	r20, r1
    4bb8:	51 05       	cpc	r21, r1
    4bba:	f1 f0       	breq	.+60     	; 0x4bf8 <free+0x92>
    4bbc:	ea 01       	movw	r28, r20
    4bbe:	f5 cf       	rjmp	.-22     	; 0x4baa <free+0x44>
    4bc0:	d3 83       	std	Z+3, r29	; 0x03
    4bc2:	c2 83       	std	Z+2, r28	; 0x02
    4bc4:	40 81       	ld	r20, Z
    4bc6:	51 81       	ldd	r21, Z+1	; 0x01
    4bc8:	84 0f       	add	r24, r20
    4bca:	95 1f       	adc	r25, r21
    4bcc:	c8 17       	cp	r28, r24
    4bce:	d9 07       	cpc	r29, r25
    4bd0:	59 f4       	brne	.+22     	; 0x4be8 <free+0x82>
    4bd2:	88 81       	ld	r24, Y
    4bd4:	99 81       	ldd	r25, Y+1	; 0x01
    4bd6:	84 0f       	add	r24, r20
    4bd8:	95 1f       	adc	r25, r21
    4bda:	02 96       	adiw	r24, 0x02	; 2
    4bdc:	91 83       	std	Z+1, r25	; 0x01
    4bde:	80 83       	st	Z, r24
    4be0:	8a 81       	ldd	r24, Y+2	; 0x02
    4be2:	9b 81       	ldd	r25, Y+3	; 0x03
    4be4:	93 83       	std	Z+3, r25	; 0x03
    4be6:	82 83       	std	Z+2, r24	; 0x02
    4be8:	21 15       	cp	r18, r1
    4bea:	31 05       	cpc	r19, r1
    4bec:	29 f4       	brne	.+10     	; 0x4bf8 <free+0x92>
    4bee:	f0 93 ac 0a 	sts	0x0AAC, r31	; 0x800aac <__flp+0x1>
    4bf2:	e0 93 ab 0a 	sts	0x0AAB, r30	; 0x800aab <__flp>
    4bf6:	3d c0       	rjmp	.+122    	; 0x4c72 <free+0x10c>
    4bf8:	e9 01       	movw	r28, r18
    4bfa:	fb 83       	std	Y+3, r31	; 0x03
    4bfc:	ea 83       	std	Y+2, r30	; 0x02
    4bfe:	49 91       	ld	r20, Y+
    4c00:	59 91       	ld	r21, Y+
    4c02:	c4 0f       	add	r28, r20
    4c04:	d5 1f       	adc	r29, r21
    4c06:	ec 17       	cp	r30, r28
    4c08:	fd 07       	cpc	r31, r29
    4c0a:	61 f4       	brne	.+24     	; 0x4c24 <free+0xbe>
    4c0c:	80 81       	ld	r24, Z
    4c0e:	91 81       	ldd	r25, Z+1	; 0x01
    4c10:	84 0f       	add	r24, r20
    4c12:	95 1f       	adc	r25, r21
    4c14:	02 96       	adiw	r24, 0x02	; 2
    4c16:	e9 01       	movw	r28, r18
    4c18:	99 83       	std	Y+1, r25	; 0x01
    4c1a:	88 83       	st	Y, r24
    4c1c:	82 81       	ldd	r24, Z+2	; 0x02
    4c1e:	93 81       	ldd	r25, Z+3	; 0x03
    4c20:	9b 83       	std	Y+3, r25	; 0x03
    4c22:	8a 83       	std	Y+2, r24	; 0x02
    4c24:	e0 e0       	ldi	r30, 0x00	; 0
    4c26:	f0 e0       	ldi	r31, 0x00	; 0
    4c28:	12 96       	adiw	r26, 0x02	; 2
    4c2a:	8d 91       	ld	r24, X+
    4c2c:	9c 91       	ld	r25, X
    4c2e:	13 97       	sbiw	r26, 0x03	; 3
    4c30:	00 97       	sbiw	r24, 0x00	; 0
    4c32:	19 f0       	breq	.+6      	; 0x4c3a <free+0xd4>
    4c34:	fd 01       	movw	r30, r26
    4c36:	dc 01       	movw	r26, r24
    4c38:	f7 cf       	rjmp	.-18     	; 0x4c28 <free+0xc2>
    4c3a:	8d 91       	ld	r24, X+
    4c3c:	9c 91       	ld	r25, X
    4c3e:	11 97       	sbiw	r26, 0x01	; 1
    4c40:	9d 01       	movw	r18, r26
    4c42:	2e 5f       	subi	r18, 0xFE	; 254
    4c44:	3f 4f       	sbci	r19, 0xFF	; 255
    4c46:	82 0f       	add	r24, r18
    4c48:	93 1f       	adc	r25, r19
    4c4a:	20 91 a9 0a 	lds	r18, 0x0AA9	; 0x800aa9 <__brkval>
    4c4e:	30 91 aa 0a 	lds	r19, 0x0AAA	; 0x800aaa <__brkval+0x1>
    4c52:	28 17       	cp	r18, r24
    4c54:	39 07       	cpc	r19, r25
    4c56:	69 f4       	brne	.+26     	; 0x4c72 <free+0x10c>
    4c58:	30 97       	sbiw	r30, 0x00	; 0
    4c5a:	29 f4       	brne	.+10     	; 0x4c66 <free+0x100>
    4c5c:	10 92 ac 0a 	sts	0x0AAC, r1	; 0x800aac <__flp+0x1>
    4c60:	10 92 ab 0a 	sts	0x0AAB, r1	; 0x800aab <__flp>
    4c64:	02 c0       	rjmp	.+4      	; 0x4c6a <free+0x104>
    4c66:	13 82       	std	Z+3, r1	; 0x03
    4c68:	12 82       	std	Z+2, r1	; 0x02
    4c6a:	b0 93 aa 0a 	sts	0x0AAA, r27	; 0x800aaa <__brkval+0x1>
    4c6e:	a0 93 a9 0a 	sts	0x0AA9, r26	; 0x800aa9 <__brkval>
    4c72:	df 91       	pop	r29
    4c74:	cf 91       	pop	r28
    4c76:	08 95       	ret

00004c78 <abort>:
    4c78:	81 e0       	ldi	r24, 0x01	; 1
    4c7a:	90 e0       	ldi	r25, 0x00	; 0
    4c7c:	f8 94       	cli
    4c7e:	58 c3       	rjmp	.+1712   	; 0x5330 <_exit>

00004c80 <memcpy>:
    4c80:	fb 01       	movw	r30, r22
    4c82:	dc 01       	movw	r26, r24
    4c84:	02 c0       	rjmp	.+4      	; 0x4c8a <memcpy+0xa>
    4c86:	01 90       	ld	r0, Z+
    4c88:	0d 92       	st	X+, r0
    4c8a:	41 50       	subi	r20, 0x01	; 1
    4c8c:	50 40       	sbci	r21, 0x00	; 0
    4c8e:	d8 f7       	brcc	.-10     	; 0x4c86 <memcpy+0x6>
    4c90:	08 95       	ret

00004c92 <memset>:
    4c92:	dc 01       	movw	r26, r24
    4c94:	01 c0       	rjmp	.+2      	; 0x4c98 <memset+0x6>
    4c96:	6d 93       	st	X+, r22
    4c98:	41 50       	subi	r20, 0x01	; 1
    4c9a:	50 40       	sbci	r21, 0x00	; 0
    4c9c:	e0 f7       	brcc	.-8      	; 0x4c96 <memset+0x4>
    4c9e:	08 95       	ret

00004ca0 <strcat>:
    4ca0:	fb 01       	movw	r30, r22
    4ca2:	dc 01       	movw	r26, r24
    4ca4:	0d 90       	ld	r0, X+
    4ca6:	00 20       	and	r0, r0
    4ca8:	e9 f7       	brne	.-6      	; 0x4ca4 <strcat+0x4>
    4caa:	11 97       	sbiw	r26, 0x01	; 1
    4cac:	01 90       	ld	r0, Z+
    4cae:	0d 92       	st	X+, r0
    4cb0:	00 20       	and	r0, r0
    4cb2:	e1 f7       	brne	.-8      	; 0x4cac <strcat+0xc>
    4cb4:	08 95       	ret

00004cb6 <strcpy>:
    4cb6:	fb 01       	movw	r30, r22
    4cb8:	dc 01       	movw	r26, r24
    4cba:	01 90       	ld	r0, Z+
    4cbc:	0d 92       	st	X+, r0
    4cbe:	00 20       	and	r0, r0
    4cc0:	e1 f7       	brne	.-8      	; 0x4cba <strcpy+0x4>
    4cc2:	08 95       	ret

00004cc4 <strncasecmp>:
    4cc4:	fb 01       	movw	r30, r22
    4cc6:	dc 01       	movw	r26, r24
    4cc8:	41 50       	subi	r20, 0x01	; 1
    4cca:	50 40       	sbci	r21, 0x00	; 0
    4ccc:	88 f0       	brcs	.+34     	; 0x4cf0 <strncasecmp+0x2c>
    4cce:	8d 91       	ld	r24, X+
    4cd0:	81 34       	cpi	r24, 0x41	; 65
    4cd2:	1c f0       	brlt	.+6      	; 0x4cda <strncasecmp+0x16>
    4cd4:	8b 35       	cpi	r24, 0x5B	; 91
    4cd6:	0c f4       	brge	.+2      	; 0x4cda <strncasecmp+0x16>
    4cd8:	80 5e       	subi	r24, 0xE0	; 224
    4cda:	61 91       	ld	r22, Z+
    4cdc:	61 34       	cpi	r22, 0x41	; 65
    4cde:	1c f0       	brlt	.+6      	; 0x4ce6 <strncasecmp+0x22>
    4ce0:	6b 35       	cpi	r22, 0x5B	; 91
    4ce2:	0c f4       	brge	.+2      	; 0x4ce6 <strncasecmp+0x22>
    4ce4:	60 5e       	subi	r22, 0xE0	; 224
    4ce6:	86 1b       	sub	r24, r22
    4ce8:	61 11       	cpse	r22, r1
    4cea:	71 f3       	breq	.-36     	; 0x4cc8 <strncasecmp+0x4>
    4cec:	99 0b       	sbc	r25, r25
    4cee:	08 95       	ret
    4cf0:	88 1b       	sub	r24, r24
    4cf2:	fc cf       	rjmp	.-8      	; 0x4cec <strncasecmp+0x28>

00004cf4 <printf>:
    4cf4:	cf 93       	push	r28
    4cf6:	df 93       	push	r29
    4cf8:	cd b7       	in	r28, 0x3d	; 61
    4cfa:	de b7       	in	r29, 0x3e	; 62
    4cfc:	ae 01       	movw	r20, r28
    4cfe:	4a 5f       	subi	r20, 0xFA	; 250
    4d00:	5f 4f       	sbci	r21, 0xFF	; 255
    4d02:	fa 01       	movw	r30, r20
    4d04:	61 91       	ld	r22, Z+
    4d06:	71 91       	ld	r23, Z+
    4d08:	af 01       	movw	r20, r30
    4d0a:	80 91 af 0a 	lds	r24, 0x0AAF	; 0x800aaf <__iob+0x2>
    4d0e:	90 91 b0 0a 	lds	r25, 0x0AB0	; 0x800ab0 <__iob+0x3>
    4d12:	61 d0       	rcall	.+194    	; 0x4dd6 <vfprintf>
    4d14:	df 91       	pop	r29
    4d16:	cf 91       	pop	r28
    4d18:	08 95       	ret

00004d1a <puts>:
    4d1a:	0f 93       	push	r16
    4d1c:	1f 93       	push	r17
    4d1e:	cf 93       	push	r28
    4d20:	df 93       	push	r29
    4d22:	e0 91 af 0a 	lds	r30, 0x0AAF	; 0x800aaf <__iob+0x2>
    4d26:	f0 91 b0 0a 	lds	r31, 0x0AB0	; 0x800ab0 <__iob+0x3>
    4d2a:	23 81       	ldd	r18, Z+3	; 0x03
    4d2c:	21 ff       	sbrs	r18, 1
    4d2e:	1b c0       	rjmp	.+54     	; 0x4d66 <puts+0x4c>
    4d30:	8c 01       	movw	r16, r24
    4d32:	d0 e0       	ldi	r29, 0x00	; 0
    4d34:	c0 e0       	ldi	r28, 0x00	; 0
    4d36:	f8 01       	movw	r30, r16
    4d38:	81 91       	ld	r24, Z+
    4d3a:	8f 01       	movw	r16, r30
    4d3c:	60 91 af 0a 	lds	r22, 0x0AAF	; 0x800aaf <__iob+0x2>
    4d40:	70 91 b0 0a 	lds	r23, 0x0AB0	; 0x800ab0 <__iob+0x3>
    4d44:	db 01       	movw	r26, r22
    4d46:	18 96       	adiw	r26, 0x08	; 8
    4d48:	ed 91       	ld	r30, X+
    4d4a:	fc 91       	ld	r31, X
    4d4c:	19 97       	sbiw	r26, 0x09	; 9
    4d4e:	88 23       	and	r24, r24
    4d50:	31 f0       	breq	.+12     	; 0x4d5e <puts+0x44>
    4d52:	19 95       	eicall
    4d54:	89 2b       	or	r24, r25
    4d56:	79 f3       	breq	.-34     	; 0x4d36 <puts+0x1c>
    4d58:	df ef       	ldi	r29, 0xFF	; 255
    4d5a:	cf ef       	ldi	r28, 0xFF	; 255
    4d5c:	ec cf       	rjmp	.-40     	; 0x4d36 <puts+0x1c>
    4d5e:	8a e0       	ldi	r24, 0x0A	; 10
    4d60:	19 95       	eicall
    4d62:	89 2b       	or	r24, r25
    4d64:	19 f0       	breq	.+6      	; 0x4d6c <puts+0x52>
    4d66:	8f ef       	ldi	r24, 0xFF	; 255
    4d68:	9f ef       	ldi	r25, 0xFF	; 255
    4d6a:	02 c0       	rjmp	.+4      	; 0x4d70 <puts+0x56>
    4d6c:	8d 2f       	mov	r24, r29
    4d6e:	9c 2f       	mov	r25, r28
    4d70:	df 91       	pop	r29
    4d72:	cf 91       	pop	r28
    4d74:	1f 91       	pop	r17
    4d76:	0f 91       	pop	r16
    4d78:	08 95       	ret

00004d7a <sprintf>:
    4d7a:	0f 93       	push	r16
    4d7c:	1f 93       	push	r17
    4d7e:	cf 93       	push	r28
    4d80:	df 93       	push	r29
    4d82:	cd b7       	in	r28, 0x3d	; 61
    4d84:	de b7       	in	r29, 0x3e	; 62
    4d86:	2e 97       	sbiw	r28, 0x0e	; 14
    4d88:	0f b6       	in	r0, 0x3f	; 63
    4d8a:	f8 94       	cli
    4d8c:	de bf       	out	0x3e, r29	; 62
    4d8e:	0f be       	out	0x3f, r0	; 63
    4d90:	cd bf       	out	0x3d, r28	; 61
    4d92:	0e 89       	ldd	r16, Y+22	; 0x16
    4d94:	1f 89       	ldd	r17, Y+23	; 0x17
    4d96:	86 e0       	ldi	r24, 0x06	; 6
    4d98:	8c 83       	std	Y+4, r24	; 0x04
    4d9a:	1a 83       	std	Y+2, r17	; 0x02
    4d9c:	09 83       	std	Y+1, r16	; 0x01
    4d9e:	8f ef       	ldi	r24, 0xFF	; 255
    4da0:	9f e7       	ldi	r25, 0x7F	; 127
    4da2:	9e 83       	std	Y+6, r25	; 0x06
    4da4:	8d 83       	std	Y+5, r24	; 0x05
    4da6:	ae 01       	movw	r20, r28
    4da8:	46 5e       	subi	r20, 0xE6	; 230
    4daa:	5f 4f       	sbci	r21, 0xFF	; 255
    4dac:	68 8d       	ldd	r22, Y+24	; 0x18
    4dae:	79 8d       	ldd	r23, Y+25	; 0x19
    4db0:	ce 01       	movw	r24, r28
    4db2:	01 96       	adiw	r24, 0x01	; 1
    4db4:	10 d0       	rcall	.+32     	; 0x4dd6 <vfprintf>
    4db6:	ef 81       	ldd	r30, Y+7	; 0x07
    4db8:	f8 85       	ldd	r31, Y+8	; 0x08
    4dba:	e0 0f       	add	r30, r16
    4dbc:	f1 1f       	adc	r31, r17
    4dbe:	10 82       	st	Z, r1
    4dc0:	2e 96       	adiw	r28, 0x0e	; 14
    4dc2:	0f b6       	in	r0, 0x3f	; 63
    4dc4:	f8 94       	cli
    4dc6:	de bf       	out	0x3e, r29	; 62
    4dc8:	0f be       	out	0x3f, r0	; 63
    4dca:	cd bf       	out	0x3d, r28	; 61
    4dcc:	df 91       	pop	r29
    4dce:	cf 91       	pop	r28
    4dd0:	1f 91       	pop	r17
    4dd2:	0f 91       	pop	r16
    4dd4:	08 95       	ret

00004dd6 <vfprintf>:
    4dd6:	2f 92       	push	r2
    4dd8:	3f 92       	push	r3
    4dda:	4f 92       	push	r4
    4ddc:	5f 92       	push	r5
    4dde:	6f 92       	push	r6
    4de0:	7f 92       	push	r7
    4de2:	8f 92       	push	r8
    4de4:	9f 92       	push	r9
    4de6:	af 92       	push	r10
    4de8:	bf 92       	push	r11
    4dea:	cf 92       	push	r12
    4dec:	df 92       	push	r13
    4dee:	ef 92       	push	r14
    4df0:	ff 92       	push	r15
    4df2:	0f 93       	push	r16
    4df4:	1f 93       	push	r17
    4df6:	cf 93       	push	r28
    4df8:	df 93       	push	r29
    4dfa:	cd b7       	in	r28, 0x3d	; 61
    4dfc:	de b7       	in	r29, 0x3e	; 62
    4dfe:	2b 97       	sbiw	r28, 0x0b	; 11
    4e00:	0f b6       	in	r0, 0x3f	; 63
    4e02:	f8 94       	cli
    4e04:	de bf       	out	0x3e, r29	; 62
    4e06:	0f be       	out	0x3f, r0	; 63
    4e08:	cd bf       	out	0x3d, r28	; 61
    4e0a:	6c 01       	movw	r12, r24
    4e0c:	7b 01       	movw	r14, r22
    4e0e:	8a 01       	movw	r16, r20
    4e10:	fc 01       	movw	r30, r24
    4e12:	17 82       	std	Z+7, r1	; 0x07
    4e14:	16 82       	std	Z+6, r1	; 0x06
    4e16:	83 81       	ldd	r24, Z+3	; 0x03
    4e18:	81 ff       	sbrs	r24, 1
    4e1a:	bf c1       	rjmp	.+894    	; 0x519a <vfprintf+0x3c4>
    4e1c:	ce 01       	movw	r24, r28
    4e1e:	01 96       	adiw	r24, 0x01	; 1
    4e20:	3c 01       	movw	r6, r24
    4e22:	f6 01       	movw	r30, r12
    4e24:	93 81       	ldd	r25, Z+3	; 0x03
    4e26:	f7 01       	movw	r30, r14
    4e28:	93 fd       	sbrc	r25, 3
    4e2a:	85 91       	lpm	r24, Z+
    4e2c:	93 ff       	sbrs	r25, 3
    4e2e:	81 91       	ld	r24, Z+
    4e30:	7f 01       	movw	r14, r30
    4e32:	88 23       	and	r24, r24
    4e34:	09 f4       	brne	.+2      	; 0x4e38 <vfprintf+0x62>
    4e36:	ad c1       	rjmp	.+858    	; 0x5192 <vfprintf+0x3bc>
    4e38:	85 32       	cpi	r24, 0x25	; 37
    4e3a:	39 f4       	brne	.+14     	; 0x4e4a <vfprintf+0x74>
    4e3c:	93 fd       	sbrc	r25, 3
    4e3e:	85 91       	lpm	r24, Z+
    4e40:	93 ff       	sbrs	r25, 3
    4e42:	81 91       	ld	r24, Z+
    4e44:	7f 01       	movw	r14, r30
    4e46:	85 32       	cpi	r24, 0x25	; 37
    4e48:	21 f4       	brne	.+8      	; 0x4e52 <vfprintf+0x7c>
    4e4a:	b6 01       	movw	r22, r12
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	d6 d1       	rcall	.+940    	; 0x51fc <fputc>
    4e50:	e8 cf       	rjmp	.-48     	; 0x4e22 <vfprintf+0x4c>
    4e52:	91 2c       	mov	r9, r1
    4e54:	21 2c       	mov	r2, r1
    4e56:	31 2c       	mov	r3, r1
    4e58:	ff e1       	ldi	r31, 0x1F	; 31
    4e5a:	f3 15       	cp	r31, r3
    4e5c:	d8 f0       	brcs	.+54     	; 0x4e94 <vfprintf+0xbe>
    4e5e:	8b 32       	cpi	r24, 0x2B	; 43
    4e60:	79 f0       	breq	.+30     	; 0x4e80 <vfprintf+0xaa>
    4e62:	38 f4       	brcc	.+14     	; 0x4e72 <vfprintf+0x9c>
    4e64:	80 32       	cpi	r24, 0x20	; 32
    4e66:	79 f0       	breq	.+30     	; 0x4e86 <vfprintf+0xb0>
    4e68:	83 32       	cpi	r24, 0x23	; 35
    4e6a:	a1 f4       	brne	.+40     	; 0x4e94 <vfprintf+0xbe>
    4e6c:	23 2d       	mov	r18, r3
    4e6e:	20 61       	ori	r18, 0x10	; 16
    4e70:	1d c0       	rjmp	.+58     	; 0x4eac <vfprintf+0xd6>
    4e72:	8d 32       	cpi	r24, 0x2D	; 45
    4e74:	61 f0       	breq	.+24     	; 0x4e8e <vfprintf+0xb8>
    4e76:	80 33       	cpi	r24, 0x30	; 48
    4e78:	69 f4       	brne	.+26     	; 0x4e94 <vfprintf+0xbe>
    4e7a:	23 2d       	mov	r18, r3
    4e7c:	21 60       	ori	r18, 0x01	; 1
    4e7e:	16 c0       	rjmp	.+44     	; 0x4eac <vfprintf+0xd6>
    4e80:	83 2d       	mov	r24, r3
    4e82:	82 60       	ori	r24, 0x02	; 2
    4e84:	38 2e       	mov	r3, r24
    4e86:	e3 2d       	mov	r30, r3
    4e88:	e4 60       	ori	r30, 0x04	; 4
    4e8a:	3e 2e       	mov	r3, r30
    4e8c:	2a c0       	rjmp	.+84     	; 0x4ee2 <vfprintf+0x10c>
    4e8e:	f3 2d       	mov	r31, r3
    4e90:	f8 60       	ori	r31, 0x08	; 8
    4e92:	1d c0       	rjmp	.+58     	; 0x4ece <vfprintf+0xf8>
    4e94:	37 fc       	sbrc	r3, 7
    4e96:	2d c0       	rjmp	.+90     	; 0x4ef2 <vfprintf+0x11c>
    4e98:	20 ed       	ldi	r18, 0xD0	; 208
    4e9a:	28 0f       	add	r18, r24
    4e9c:	2a 30       	cpi	r18, 0x0A	; 10
    4e9e:	40 f0       	brcs	.+16     	; 0x4eb0 <vfprintf+0xda>
    4ea0:	8e 32       	cpi	r24, 0x2E	; 46
    4ea2:	b9 f4       	brne	.+46     	; 0x4ed2 <vfprintf+0xfc>
    4ea4:	36 fc       	sbrc	r3, 6
    4ea6:	75 c1       	rjmp	.+746    	; 0x5192 <vfprintf+0x3bc>
    4ea8:	23 2d       	mov	r18, r3
    4eaa:	20 64       	ori	r18, 0x40	; 64
    4eac:	32 2e       	mov	r3, r18
    4eae:	19 c0       	rjmp	.+50     	; 0x4ee2 <vfprintf+0x10c>
    4eb0:	36 fe       	sbrs	r3, 6
    4eb2:	06 c0       	rjmp	.+12     	; 0x4ec0 <vfprintf+0xea>
    4eb4:	8a e0       	ldi	r24, 0x0A	; 10
    4eb6:	98 9e       	mul	r9, r24
    4eb8:	20 0d       	add	r18, r0
    4eba:	11 24       	eor	r1, r1
    4ebc:	92 2e       	mov	r9, r18
    4ebe:	11 c0       	rjmp	.+34     	; 0x4ee2 <vfprintf+0x10c>
    4ec0:	ea e0       	ldi	r30, 0x0A	; 10
    4ec2:	2e 9e       	mul	r2, r30
    4ec4:	20 0d       	add	r18, r0
    4ec6:	11 24       	eor	r1, r1
    4ec8:	22 2e       	mov	r2, r18
    4eca:	f3 2d       	mov	r31, r3
    4ecc:	f0 62       	ori	r31, 0x20	; 32
    4ece:	3f 2e       	mov	r3, r31
    4ed0:	08 c0       	rjmp	.+16     	; 0x4ee2 <vfprintf+0x10c>
    4ed2:	8c 36       	cpi	r24, 0x6C	; 108
    4ed4:	21 f4       	brne	.+8      	; 0x4ede <vfprintf+0x108>
    4ed6:	83 2d       	mov	r24, r3
    4ed8:	80 68       	ori	r24, 0x80	; 128
    4eda:	38 2e       	mov	r3, r24
    4edc:	02 c0       	rjmp	.+4      	; 0x4ee2 <vfprintf+0x10c>
    4ede:	88 36       	cpi	r24, 0x68	; 104
    4ee0:	41 f4       	brne	.+16     	; 0x4ef2 <vfprintf+0x11c>
    4ee2:	f7 01       	movw	r30, r14
    4ee4:	93 fd       	sbrc	r25, 3
    4ee6:	85 91       	lpm	r24, Z+
    4ee8:	93 ff       	sbrs	r25, 3
    4eea:	81 91       	ld	r24, Z+
    4eec:	7f 01       	movw	r14, r30
    4eee:	81 11       	cpse	r24, r1
    4ef0:	b3 cf       	rjmp	.-154    	; 0x4e58 <vfprintf+0x82>
    4ef2:	98 2f       	mov	r25, r24
    4ef4:	9f 7d       	andi	r25, 0xDF	; 223
    4ef6:	95 54       	subi	r25, 0x45	; 69
    4ef8:	93 30       	cpi	r25, 0x03	; 3
    4efa:	28 f4       	brcc	.+10     	; 0x4f06 <vfprintf+0x130>
    4efc:	0c 5f       	subi	r16, 0xFC	; 252
    4efe:	1f 4f       	sbci	r17, 0xFF	; 255
    4f00:	9f e3       	ldi	r25, 0x3F	; 63
    4f02:	99 83       	std	Y+1, r25	; 0x01
    4f04:	0d c0       	rjmp	.+26     	; 0x4f20 <vfprintf+0x14a>
    4f06:	83 36       	cpi	r24, 0x63	; 99
    4f08:	31 f0       	breq	.+12     	; 0x4f16 <vfprintf+0x140>
    4f0a:	83 37       	cpi	r24, 0x73	; 115
    4f0c:	71 f0       	breq	.+28     	; 0x4f2a <vfprintf+0x154>
    4f0e:	83 35       	cpi	r24, 0x53	; 83
    4f10:	09 f0       	breq	.+2      	; 0x4f14 <vfprintf+0x13e>
    4f12:	55 c0       	rjmp	.+170    	; 0x4fbe <vfprintf+0x1e8>
    4f14:	20 c0       	rjmp	.+64     	; 0x4f56 <vfprintf+0x180>
    4f16:	f8 01       	movw	r30, r16
    4f18:	80 81       	ld	r24, Z
    4f1a:	89 83       	std	Y+1, r24	; 0x01
    4f1c:	0e 5f       	subi	r16, 0xFE	; 254
    4f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    4f20:	88 24       	eor	r8, r8
    4f22:	83 94       	inc	r8
    4f24:	91 2c       	mov	r9, r1
    4f26:	53 01       	movw	r10, r6
    4f28:	12 c0       	rjmp	.+36     	; 0x4f4e <vfprintf+0x178>
    4f2a:	28 01       	movw	r4, r16
    4f2c:	f2 e0       	ldi	r31, 0x02	; 2
    4f2e:	4f 0e       	add	r4, r31
    4f30:	51 1c       	adc	r5, r1
    4f32:	f8 01       	movw	r30, r16
    4f34:	a0 80       	ld	r10, Z
    4f36:	b1 80       	ldd	r11, Z+1	; 0x01
    4f38:	36 fe       	sbrs	r3, 6
    4f3a:	03 c0       	rjmp	.+6      	; 0x4f42 <vfprintf+0x16c>
    4f3c:	69 2d       	mov	r22, r9
    4f3e:	70 e0       	ldi	r23, 0x00	; 0
    4f40:	02 c0       	rjmp	.+4      	; 0x4f46 <vfprintf+0x170>
    4f42:	6f ef       	ldi	r22, 0xFF	; 255
    4f44:	7f ef       	ldi	r23, 0xFF	; 255
    4f46:	c5 01       	movw	r24, r10
    4f48:	4e d1       	rcall	.+668    	; 0x51e6 <strnlen>
    4f4a:	4c 01       	movw	r8, r24
    4f4c:	82 01       	movw	r16, r4
    4f4e:	f3 2d       	mov	r31, r3
    4f50:	ff 77       	andi	r31, 0x7F	; 127
    4f52:	3f 2e       	mov	r3, r31
    4f54:	15 c0       	rjmp	.+42     	; 0x4f80 <vfprintf+0x1aa>
    4f56:	28 01       	movw	r4, r16
    4f58:	22 e0       	ldi	r18, 0x02	; 2
    4f5a:	42 0e       	add	r4, r18
    4f5c:	51 1c       	adc	r5, r1
    4f5e:	f8 01       	movw	r30, r16
    4f60:	a0 80       	ld	r10, Z
    4f62:	b1 80       	ldd	r11, Z+1	; 0x01
    4f64:	36 fe       	sbrs	r3, 6
    4f66:	03 c0       	rjmp	.+6      	; 0x4f6e <vfprintf+0x198>
    4f68:	69 2d       	mov	r22, r9
    4f6a:	70 e0       	ldi	r23, 0x00	; 0
    4f6c:	02 c0       	rjmp	.+4      	; 0x4f72 <vfprintf+0x19c>
    4f6e:	6f ef       	ldi	r22, 0xFF	; 255
    4f70:	7f ef       	ldi	r23, 0xFF	; 255
    4f72:	c5 01       	movw	r24, r10
    4f74:	2d d1       	rcall	.+602    	; 0x51d0 <strnlen_P>
    4f76:	4c 01       	movw	r8, r24
    4f78:	f3 2d       	mov	r31, r3
    4f7a:	f0 68       	ori	r31, 0x80	; 128
    4f7c:	3f 2e       	mov	r3, r31
    4f7e:	82 01       	movw	r16, r4
    4f80:	33 fc       	sbrc	r3, 3
    4f82:	19 c0       	rjmp	.+50     	; 0x4fb6 <vfprintf+0x1e0>
    4f84:	82 2d       	mov	r24, r2
    4f86:	90 e0       	ldi	r25, 0x00	; 0
    4f88:	88 16       	cp	r8, r24
    4f8a:	99 06       	cpc	r9, r25
    4f8c:	a0 f4       	brcc	.+40     	; 0x4fb6 <vfprintf+0x1e0>
    4f8e:	b6 01       	movw	r22, r12
    4f90:	80 e2       	ldi	r24, 0x20	; 32
    4f92:	90 e0       	ldi	r25, 0x00	; 0
    4f94:	33 d1       	rcall	.+614    	; 0x51fc <fputc>
    4f96:	2a 94       	dec	r2
    4f98:	f5 cf       	rjmp	.-22     	; 0x4f84 <vfprintf+0x1ae>
    4f9a:	f5 01       	movw	r30, r10
    4f9c:	37 fc       	sbrc	r3, 7
    4f9e:	85 91       	lpm	r24, Z+
    4fa0:	37 fe       	sbrs	r3, 7
    4fa2:	81 91       	ld	r24, Z+
    4fa4:	5f 01       	movw	r10, r30
    4fa6:	b6 01       	movw	r22, r12
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	28 d1       	rcall	.+592    	; 0x51fc <fputc>
    4fac:	21 10       	cpse	r2, r1
    4fae:	2a 94       	dec	r2
    4fb0:	21 e0       	ldi	r18, 0x01	; 1
    4fb2:	82 1a       	sub	r8, r18
    4fb4:	91 08       	sbc	r9, r1
    4fb6:	81 14       	cp	r8, r1
    4fb8:	91 04       	cpc	r9, r1
    4fba:	79 f7       	brne	.-34     	; 0x4f9a <vfprintf+0x1c4>
    4fbc:	e1 c0       	rjmp	.+450    	; 0x5180 <vfprintf+0x3aa>
    4fbe:	84 36       	cpi	r24, 0x64	; 100
    4fc0:	11 f0       	breq	.+4      	; 0x4fc6 <vfprintf+0x1f0>
    4fc2:	89 36       	cpi	r24, 0x69	; 105
    4fc4:	39 f5       	brne	.+78     	; 0x5014 <vfprintf+0x23e>
    4fc6:	f8 01       	movw	r30, r16
    4fc8:	37 fe       	sbrs	r3, 7
    4fca:	07 c0       	rjmp	.+14     	; 0x4fda <vfprintf+0x204>
    4fcc:	60 81       	ld	r22, Z
    4fce:	71 81       	ldd	r23, Z+1	; 0x01
    4fd0:	82 81       	ldd	r24, Z+2	; 0x02
    4fd2:	93 81       	ldd	r25, Z+3	; 0x03
    4fd4:	0c 5f       	subi	r16, 0xFC	; 252
    4fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    4fd8:	08 c0       	rjmp	.+16     	; 0x4fea <vfprintf+0x214>
    4fda:	60 81       	ld	r22, Z
    4fdc:	71 81       	ldd	r23, Z+1	; 0x01
    4fde:	07 2e       	mov	r0, r23
    4fe0:	00 0c       	add	r0, r0
    4fe2:	88 0b       	sbc	r24, r24
    4fe4:	99 0b       	sbc	r25, r25
    4fe6:	0e 5f       	subi	r16, 0xFE	; 254
    4fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fea:	f3 2d       	mov	r31, r3
    4fec:	ff 76       	andi	r31, 0x6F	; 111
    4fee:	3f 2e       	mov	r3, r31
    4ff0:	97 ff       	sbrs	r25, 7
    4ff2:	09 c0       	rjmp	.+18     	; 0x5006 <vfprintf+0x230>
    4ff4:	90 95       	com	r25
    4ff6:	80 95       	com	r24
    4ff8:	70 95       	com	r23
    4ffa:	61 95       	neg	r22
    4ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    4ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    5000:	9f 4f       	sbci	r25, 0xFF	; 255
    5002:	f0 68       	ori	r31, 0x80	; 128
    5004:	3f 2e       	mov	r3, r31
    5006:	2a e0       	ldi	r18, 0x0A	; 10
    5008:	30 e0       	ldi	r19, 0x00	; 0
    500a:	a3 01       	movw	r20, r6
    500c:	33 d1       	rcall	.+614    	; 0x5274 <__ultoa_invert>
    500e:	88 2e       	mov	r8, r24
    5010:	86 18       	sub	r8, r6
    5012:	44 c0       	rjmp	.+136    	; 0x509c <vfprintf+0x2c6>
    5014:	85 37       	cpi	r24, 0x75	; 117
    5016:	31 f4       	brne	.+12     	; 0x5024 <vfprintf+0x24e>
    5018:	23 2d       	mov	r18, r3
    501a:	2f 7e       	andi	r18, 0xEF	; 239
    501c:	b2 2e       	mov	r11, r18
    501e:	2a e0       	ldi	r18, 0x0A	; 10
    5020:	30 e0       	ldi	r19, 0x00	; 0
    5022:	25 c0       	rjmp	.+74     	; 0x506e <vfprintf+0x298>
    5024:	93 2d       	mov	r25, r3
    5026:	99 7f       	andi	r25, 0xF9	; 249
    5028:	b9 2e       	mov	r11, r25
    502a:	8f 36       	cpi	r24, 0x6F	; 111
    502c:	c1 f0       	breq	.+48     	; 0x505e <vfprintf+0x288>
    502e:	18 f4       	brcc	.+6      	; 0x5036 <vfprintf+0x260>
    5030:	88 35       	cpi	r24, 0x58	; 88
    5032:	79 f0       	breq	.+30     	; 0x5052 <vfprintf+0x27c>
    5034:	ae c0       	rjmp	.+348    	; 0x5192 <vfprintf+0x3bc>
    5036:	80 37       	cpi	r24, 0x70	; 112
    5038:	19 f0       	breq	.+6      	; 0x5040 <vfprintf+0x26a>
    503a:	88 37       	cpi	r24, 0x78	; 120
    503c:	21 f0       	breq	.+8      	; 0x5046 <vfprintf+0x270>
    503e:	a9 c0       	rjmp	.+338    	; 0x5192 <vfprintf+0x3bc>
    5040:	e9 2f       	mov	r30, r25
    5042:	e0 61       	ori	r30, 0x10	; 16
    5044:	be 2e       	mov	r11, r30
    5046:	b4 fe       	sbrs	r11, 4
    5048:	0d c0       	rjmp	.+26     	; 0x5064 <vfprintf+0x28e>
    504a:	fb 2d       	mov	r31, r11
    504c:	f4 60       	ori	r31, 0x04	; 4
    504e:	bf 2e       	mov	r11, r31
    5050:	09 c0       	rjmp	.+18     	; 0x5064 <vfprintf+0x28e>
    5052:	34 fe       	sbrs	r3, 4
    5054:	0a c0       	rjmp	.+20     	; 0x506a <vfprintf+0x294>
    5056:	29 2f       	mov	r18, r25
    5058:	26 60       	ori	r18, 0x06	; 6
    505a:	b2 2e       	mov	r11, r18
    505c:	06 c0       	rjmp	.+12     	; 0x506a <vfprintf+0x294>
    505e:	28 e0       	ldi	r18, 0x08	; 8
    5060:	30 e0       	ldi	r19, 0x00	; 0
    5062:	05 c0       	rjmp	.+10     	; 0x506e <vfprintf+0x298>
    5064:	20 e1       	ldi	r18, 0x10	; 16
    5066:	30 e0       	ldi	r19, 0x00	; 0
    5068:	02 c0       	rjmp	.+4      	; 0x506e <vfprintf+0x298>
    506a:	20 e1       	ldi	r18, 0x10	; 16
    506c:	32 e0       	ldi	r19, 0x02	; 2
    506e:	f8 01       	movw	r30, r16
    5070:	b7 fe       	sbrs	r11, 7
    5072:	07 c0       	rjmp	.+14     	; 0x5082 <vfprintf+0x2ac>
    5074:	60 81       	ld	r22, Z
    5076:	71 81       	ldd	r23, Z+1	; 0x01
    5078:	82 81       	ldd	r24, Z+2	; 0x02
    507a:	93 81       	ldd	r25, Z+3	; 0x03
    507c:	0c 5f       	subi	r16, 0xFC	; 252
    507e:	1f 4f       	sbci	r17, 0xFF	; 255
    5080:	06 c0       	rjmp	.+12     	; 0x508e <vfprintf+0x2b8>
    5082:	60 81       	ld	r22, Z
    5084:	71 81       	ldd	r23, Z+1	; 0x01
    5086:	80 e0       	ldi	r24, 0x00	; 0
    5088:	90 e0       	ldi	r25, 0x00	; 0
    508a:	0e 5f       	subi	r16, 0xFE	; 254
    508c:	1f 4f       	sbci	r17, 0xFF	; 255
    508e:	a3 01       	movw	r20, r6
    5090:	f1 d0       	rcall	.+482    	; 0x5274 <__ultoa_invert>
    5092:	88 2e       	mov	r8, r24
    5094:	86 18       	sub	r8, r6
    5096:	fb 2d       	mov	r31, r11
    5098:	ff 77       	andi	r31, 0x7F	; 127
    509a:	3f 2e       	mov	r3, r31
    509c:	36 fe       	sbrs	r3, 6
    509e:	0d c0       	rjmp	.+26     	; 0x50ba <vfprintf+0x2e4>
    50a0:	23 2d       	mov	r18, r3
    50a2:	2e 7f       	andi	r18, 0xFE	; 254
    50a4:	a2 2e       	mov	r10, r18
    50a6:	89 14       	cp	r8, r9
    50a8:	58 f4       	brcc	.+22     	; 0x50c0 <vfprintf+0x2ea>
    50aa:	34 fe       	sbrs	r3, 4
    50ac:	0b c0       	rjmp	.+22     	; 0x50c4 <vfprintf+0x2ee>
    50ae:	32 fc       	sbrc	r3, 2
    50b0:	09 c0       	rjmp	.+18     	; 0x50c4 <vfprintf+0x2ee>
    50b2:	83 2d       	mov	r24, r3
    50b4:	8e 7e       	andi	r24, 0xEE	; 238
    50b6:	a8 2e       	mov	r10, r24
    50b8:	05 c0       	rjmp	.+10     	; 0x50c4 <vfprintf+0x2ee>
    50ba:	b8 2c       	mov	r11, r8
    50bc:	a3 2c       	mov	r10, r3
    50be:	03 c0       	rjmp	.+6      	; 0x50c6 <vfprintf+0x2f0>
    50c0:	b8 2c       	mov	r11, r8
    50c2:	01 c0       	rjmp	.+2      	; 0x50c6 <vfprintf+0x2f0>
    50c4:	b9 2c       	mov	r11, r9
    50c6:	a4 fe       	sbrs	r10, 4
    50c8:	0f c0       	rjmp	.+30     	; 0x50e8 <vfprintf+0x312>
    50ca:	fe 01       	movw	r30, r28
    50cc:	e8 0d       	add	r30, r8
    50ce:	f1 1d       	adc	r31, r1
    50d0:	80 81       	ld	r24, Z
    50d2:	80 33       	cpi	r24, 0x30	; 48
    50d4:	21 f4       	brne	.+8      	; 0x50de <vfprintf+0x308>
    50d6:	9a 2d       	mov	r25, r10
    50d8:	99 7e       	andi	r25, 0xE9	; 233
    50da:	a9 2e       	mov	r10, r25
    50dc:	09 c0       	rjmp	.+18     	; 0x50f0 <vfprintf+0x31a>
    50de:	a2 fe       	sbrs	r10, 2
    50e0:	06 c0       	rjmp	.+12     	; 0x50ee <vfprintf+0x318>
    50e2:	b3 94       	inc	r11
    50e4:	b3 94       	inc	r11
    50e6:	04 c0       	rjmp	.+8      	; 0x50f0 <vfprintf+0x31a>
    50e8:	8a 2d       	mov	r24, r10
    50ea:	86 78       	andi	r24, 0x86	; 134
    50ec:	09 f0       	breq	.+2      	; 0x50f0 <vfprintf+0x31a>
    50ee:	b3 94       	inc	r11
    50f0:	a3 fc       	sbrc	r10, 3
    50f2:	10 c0       	rjmp	.+32     	; 0x5114 <vfprintf+0x33e>
    50f4:	a0 fe       	sbrs	r10, 0
    50f6:	06 c0       	rjmp	.+12     	; 0x5104 <vfprintf+0x32e>
    50f8:	b2 14       	cp	r11, r2
    50fa:	80 f4       	brcc	.+32     	; 0x511c <vfprintf+0x346>
    50fc:	28 0c       	add	r2, r8
    50fe:	92 2c       	mov	r9, r2
    5100:	9b 18       	sub	r9, r11
    5102:	0d c0       	rjmp	.+26     	; 0x511e <vfprintf+0x348>
    5104:	b2 14       	cp	r11, r2
    5106:	58 f4       	brcc	.+22     	; 0x511e <vfprintf+0x348>
    5108:	b6 01       	movw	r22, r12
    510a:	80 e2       	ldi	r24, 0x20	; 32
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	76 d0       	rcall	.+236    	; 0x51fc <fputc>
    5110:	b3 94       	inc	r11
    5112:	f8 cf       	rjmp	.-16     	; 0x5104 <vfprintf+0x32e>
    5114:	b2 14       	cp	r11, r2
    5116:	18 f4       	brcc	.+6      	; 0x511e <vfprintf+0x348>
    5118:	2b 18       	sub	r2, r11
    511a:	02 c0       	rjmp	.+4      	; 0x5120 <vfprintf+0x34a>
    511c:	98 2c       	mov	r9, r8
    511e:	21 2c       	mov	r2, r1
    5120:	a4 fe       	sbrs	r10, 4
    5122:	0f c0       	rjmp	.+30     	; 0x5142 <vfprintf+0x36c>
    5124:	b6 01       	movw	r22, r12
    5126:	80 e3       	ldi	r24, 0x30	; 48
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	68 d0       	rcall	.+208    	; 0x51fc <fputc>
    512c:	a2 fe       	sbrs	r10, 2
    512e:	16 c0       	rjmp	.+44     	; 0x515c <vfprintf+0x386>
    5130:	a1 fc       	sbrc	r10, 1
    5132:	03 c0       	rjmp	.+6      	; 0x513a <vfprintf+0x364>
    5134:	88 e7       	ldi	r24, 0x78	; 120
    5136:	90 e0       	ldi	r25, 0x00	; 0
    5138:	02 c0       	rjmp	.+4      	; 0x513e <vfprintf+0x368>
    513a:	88 e5       	ldi	r24, 0x58	; 88
    513c:	90 e0       	ldi	r25, 0x00	; 0
    513e:	b6 01       	movw	r22, r12
    5140:	0c c0       	rjmp	.+24     	; 0x515a <vfprintf+0x384>
    5142:	8a 2d       	mov	r24, r10
    5144:	86 78       	andi	r24, 0x86	; 134
    5146:	51 f0       	breq	.+20     	; 0x515c <vfprintf+0x386>
    5148:	a1 fe       	sbrs	r10, 1
    514a:	02 c0       	rjmp	.+4      	; 0x5150 <vfprintf+0x37a>
    514c:	8b e2       	ldi	r24, 0x2B	; 43
    514e:	01 c0       	rjmp	.+2      	; 0x5152 <vfprintf+0x37c>
    5150:	80 e2       	ldi	r24, 0x20	; 32
    5152:	a7 fc       	sbrc	r10, 7
    5154:	8d e2       	ldi	r24, 0x2D	; 45
    5156:	b6 01       	movw	r22, r12
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	50 d0       	rcall	.+160    	; 0x51fc <fputc>
    515c:	89 14       	cp	r8, r9
    515e:	30 f4       	brcc	.+12     	; 0x516c <vfprintf+0x396>
    5160:	b6 01       	movw	r22, r12
    5162:	80 e3       	ldi	r24, 0x30	; 48
    5164:	90 e0       	ldi	r25, 0x00	; 0
    5166:	4a d0       	rcall	.+148    	; 0x51fc <fputc>
    5168:	9a 94       	dec	r9
    516a:	f8 cf       	rjmp	.-16     	; 0x515c <vfprintf+0x386>
    516c:	8a 94       	dec	r8
    516e:	f3 01       	movw	r30, r6
    5170:	e8 0d       	add	r30, r8
    5172:	f1 1d       	adc	r31, r1
    5174:	80 81       	ld	r24, Z
    5176:	b6 01       	movw	r22, r12
    5178:	90 e0       	ldi	r25, 0x00	; 0
    517a:	40 d0       	rcall	.+128    	; 0x51fc <fputc>
    517c:	81 10       	cpse	r8, r1
    517e:	f6 cf       	rjmp	.-20     	; 0x516c <vfprintf+0x396>
    5180:	22 20       	and	r2, r2
    5182:	09 f4       	brne	.+2      	; 0x5186 <vfprintf+0x3b0>
    5184:	4e ce       	rjmp	.-868    	; 0x4e22 <vfprintf+0x4c>
    5186:	b6 01       	movw	r22, r12
    5188:	80 e2       	ldi	r24, 0x20	; 32
    518a:	90 e0       	ldi	r25, 0x00	; 0
    518c:	37 d0       	rcall	.+110    	; 0x51fc <fputc>
    518e:	2a 94       	dec	r2
    5190:	f7 cf       	rjmp	.-18     	; 0x5180 <vfprintf+0x3aa>
    5192:	f6 01       	movw	r30, r12
    5194:	86 81       	ldd	r24, Z+6	; 0x06
    5196:	97 81       	ldd	r25, Z+7	; 0x07
    5198:	02 c0       	rjmp	.+4      	; 0x519e <vfprintf+0x3c8>
    519a:	8f ef       	ldi	r24, 0xFF	; 255
    519c:	9f ef       	ldi	r25, 0xFF	; 255
    519e:	2b 96       	adiw	r28, 0x0b	; 11
    51a0:	0f b6       	in	r0, 0x3f	; 63
    51a2:	f8 94       	cli
    51a4:	de bf       	out	0x3e, r29	; 62
    51a6:	0f be       	out	0x3f, r0	; 63
    51a8:	cd bf       	out	0x3d, r28	; 61
    51aa:	df 91       	pop	r29
    51ac:	cf 91       	pop	r28
    51ae:	1f 91       	pop	r17
    51b0:	0f 91       	pop	r16
    51b2:	ff 90       	pop	r15
    51b4:	ef 90       	pop	r14
    51b6:	df 90       	pop	r13
    51b8:	cf 90       	pop	r12
    51ba:	bf 90       	pop	r11
    51bc:	af 90       	pop	r10
    51be:	9f 90       	pop	r9
    51c0:	8f 90       	pop	r8
    51c2:	7f 90       	pop	r7
    51c4:	6f 90       	pop	r6
    51c6:	5f 90       	pop	r5
    51c8:	4f 90       	pop	r4
    51ca:	3f 90       	pop	r3
    51cc:	2f 90       	pop	r2
    51ce:	08 95       	ret

000051d0 <strnlen_P>:
    51d0:	fc 01       	movw	r30, r24
    51d2:	05 90       	lpm	r0, Z+
    51d4:	61 50       	subi	r22, 0x01	; 1
    51d6:	70 40       	sbci	r23, 0x00	; 0
    51d8:	01 10       	cpse	r0, r1
    51da:	d8 f7       	brcc	.-10     	; 0x51d2 <strnlen_P+0x2>
    51dc:	80 95       	com	r24
    51de:	90 95       	com	r25
    51e0:	8e 0f       	add	r24, r30
    51e2:	9f 1f       	adc	r25, r31
    51e4:	08 95       	ret

000051e6 <strnlen>:
    51e6:	fc 01       	movw	r30, r24
    51e8:	61 50       	subi	r22, 0x01	; 1
    51ea:	70 40       	sbci	r23, 0x00	; 0
    51ec:	01 90       	ld	r0, Z+
    51ee:	01 10       	cpse	r0, r1
    51f0:	d8 f7       	brcc	.-10     	; 0x51e8 <strnlen+0x2>
    51f2:	80 95       	com	r24
    51f4:	90 95       	com	r25
    51f6:	8e 0f       	add	r24, r30
    51f8:	9f 1f       	adc	r25, r31
    51fa:	08 95       	ret

000051fc <fputc>:
    51fc:	0f 93       	push	r16
    51fe:	1f 93       	push	r17
    5200:	cf 93       	push	r28
    5202:	df 93       	push	r29
    5204:	fb 01       	movw	r30, r22
    5206:	23 81       	ldd	r18, Z+3	; 0x03
    5208:	21 fd       	sbrc	r18, 1
    520a:	03 c0       	rjmp	.+6      	; 0x5212 <fputc+0x16>
    520c:	8f ef       	ldi	r24, 0xFF	; 255
    520e:	9f ef       	ldi	r25, 0xFF	; 255
    5210:	2c c0       	rjmp	.+88     	; 0x526a <fputc+0x6e>
    5212:	22 ff       	sbrs	r18, 2
    5214:	16 c0       	rjmp	.+44     	; 0x5242 <fputc+0x46>
    5216:	46 81       	ldd	r20, Z+6	; 0x06
    5218:	57 81       	ldd	r21, Z+7	; 0x07
    521a:	24 81       	ldd	r18, Z+4	; 0x04
    521c:	35 81       	ldd	r19, Z+5	; 0x05
    521e:	42 17       	cp	r20, r18
    5220:	53 07       	cpc	r21, r19
    5222:	44 f4       	brge	.+16     	; 0x5234 <fputc+0x38>
    5224:	a0 81       	ld	r26, Z
    5226:	b1 81       	ldd	r27, Z+1	; 0x01
    5228:	9d 01       	movw	r18, r26
    522a:	2f 5f       	subi	r18, 0xFF	; 255
    522c:	3f 4f       	sbci	r19, 0xFF	; 255
    522e:	31 83       	std	Z+1, r19	; 0x01
    5230:	20 83       	st	Z, r18
    5232:	8c 93       	st	X, r24
    5234:	26 81       	ldd	r18, Z+6	; 0x06
    5236:	37 81       	ldd	r19, Z+7	; 0x07
    5238:	2f 5f       	subi	r18, 0xFF	; 255
    523a:	3f 4f       	sbci	r19, 0xFF	; 255
    523c:	37 83       	std	Z+7, r19	; 0x07
    523e:	26 83       	std	Z+6, r18	; 0x06
    5240:	14 c0       	rjmp	.+40     	; 0x526a <fputc+0x6e>
    5242:	8b 01       	movw	r16, r22
    5244:	ec 01       	movw	r28, r24
    5246:	fb 01       	movw	r30, r22
    5248:	00 84       	ldd	r0, Z+8	; 0x08
    524a:	f1 85       	ldd	r31, Z+9	; 0x09
    524c:	e0 2d       	mov	r30, r0
    524e:	19 95       	eicall
    5250:	89 2b       	or	r24, r25
    5252:	e1 f6       	brne	.-72     	; 0x520c <fputc+0x10>
    5254:	d8 01       	movw	r26, r16
    5256:	16 96       	adiw	r26, 0x06	; 6
    5258:	8d 91       	ld	r24, X+
    525a:	9c 91       	ld	r25, X
    525c:	17 97       	sbiw	r26, 0x07	; 7
    525e:	01 96       	adiw	r24, 0x01	; 1
    5260:	17 96       	adiw	r26, 0x07	; 7
    5262:	9c 93       	st	X, r25
    5264:	8e 93       	st	-X, r24
    5266:	16 97       	sbiw	r26, 0x06	; 6
    5268:	ce 01       	movw	r24, r28
    526a:	df 91       	pop	r29
    526c:	cf 91       	pop	r28
    526e:	1f 91       	pop	r17
    5270:	0f 91       	pop	r16
    5272:	08 95       	ret

00005274 <__ultoa_invert>:
    5274:	fa 01       	movw	r30, r20
    5276:	aa 27       	eor	r26, r26
    5278:	28 30       	cpi	r18, 0x08	; 8
    527a:	51 f1       	breq	.+84     	; 0x52d0 <__ultoa_invert+0x5c>
    527c:	20 31       	cpi	r18, 0x10	; 16
    527e:	81 f1       	breq	.+96     	; 0x52e0 <__ultoa_invert+0x6c>
    5280:	e8 94       	clt
    5282:	6f 93       	push	r22
    5284:	6e 7f       	andi	r22, 0xFE	; 254
    5286:	6e 5f       	subi	r22, 0xFE	; 254
    5288:	7f 4f       	sbci	r23, 0xFF	; 255
    528a:	8f 4f       	sbci	r24, 0xFF	; 255
    528c:	9f 4f       	sbci	r25, 0xFF	; 255
    528e:	af 4f       	sbci	r26, 0xFF	; 255
    5290:	b1 e0       	ldi	r27, 0x01	; 1
    5292:	3e d0       	rcall	.+124    	; 0x5310 <__ultoa_invert+0x9c>
    5294:	b4 e0       	ldi	r27, 0x04	; 4
    5296:	3c d0       	rcall	.+120    	; 0x5310 <__ultoa_invert+0x9c>
    5298:	67 0f       	add	r22, r23
    529a:	78 1f       	adc	r23, r24
    529c:	89 1f       	adc	r24, r25
    529e:	9a 1f       	adc	r25, r26
    52a0:	a1 1d       	adc	r26, r1
    52a2:	68 0f       	add	r22, r24
    52a4:	79 1f       	adc	r23, r25
    52a6:	8a 1f       	adc	r24, r26
    52a8:	91 1d       	adc	r25, r1
    52aa:	a1 1d       	adc	r26, r1
    52ac:	6a 0f       	add	r22, r26
    52ae:	71 1d       	adc	r23, r1
    52b0:	81 1d       	adc	r24, r1
    52b2:	91 1d       	adc	r25, r1
    52b4:	a1 1d       	adc	r26, r1
    52b6:	20 d0       	rcall	.+64     	; 0x52f8 <__ultoa_invert+0x84>
    52b8:	09 f4       	brne	.+2      	; 0x52bc <__ultoa_invert+0x48>
    52ba:	68 94       	set
    52bc:	3f 91       	pop	r19
    52be:	2a e0       	ldi	r18, 0x0A	; 10
    52c0:	26 9f       	mul	r18, r22
    52c2:	11 24       	eor	r1, r1
    52c4:	30 19       	sub	r19, r0
    52c6:	30 5d       	subi	r19, 0xD0	; 208
    52c8:	31 93       	st	Z+, r19
    52ca:	de f6       	brtc	.-74     	; 0x5282 <__ultoa_invert+0xe>
    52cc:	cf 01       	movw	r24, r30
    52ce:	08 95       	ret
    52d0:	46 2f       	mov	r20, r22
    52d2:	47 70       	andi	r20, 0x07	; 7
    52d4:	40 5d       	subi	r20, 0xD0	; 208
    52d6:	41 93       	st	Z+, r20
    52d8:	b3 e0       	ldi	r27, 0x03	; 3
    52da:	0f d0       	rcall	.+30     	; 0x52fa <__ultoa_invert+0x86>
    52dc:	c9 f7       	brne	.-14     	; 0x52d0 <__ultoa_invert+0x5c>
    52de:	f6 cf       	rjmp	.-20     	; 0x52cc <__ultoa_invert+0x58>
    52e0:	46 2f       	mov	r20, r22
    52e2:	4f 70       	andi	r20, 0x0F	; 15
    52e4:	40 5d       	subi	r20, 0xD0	; 208
    52e6:	4a 33       	cpi	r20, 0x3A	; 58
    52e8:	18 f0       	brcs	.+6      	; 0x52f0 <__ultoa_invert+0x7c>
    52ea:	49 5d       	subi	r20, 0xD9	; 217
    52ec:	31 fd       	sbrc	r19, 1
    52ee:	40 52       	subi	r20, 0x20	; 32
    52f0:	41 93       	st	Z+, r20
    52f2:	02 d0       	rcall	.+4      	; 0x52f8 <__ultoa_invert+0x84>
    52f4:	a9 f7       	brne	.-22     	; 0x52e0 <__ultoa_invert+0x6c>
    52f6:	ea cf       	rjmp	.-44     	; 0x52cc <__ultoa_invert+0x58>
    52f8:	b4 e0       	ldi	r27, 0x04	; 4
    52fa:	a6 95       	lsr	r26
    52fc:	97 95       	ror	r25
    52fe:	87 95       	ror	r24
    5300:	77 95       	ror	r23
    5302:	67 95       	ror	r22
    5304:	ba 95       	dec	r27
    5306:	c9 f7       	brne	.-14     	; 0x52fa <__ultoa_invert+0x86>
    5308:	00 97       	sbiw	r24, 0x00	; 0
    530a:	61 05       	cpc	r22, r1
    530c:	71 05       	cpc	r23, r1
    530e:	08 95       	ret
    5310:	9b 01       	movw	r18, r22
    5312:	ac 01       	movw	r20, r24
    5314:	0a 2e       	mov	r0, r26
    5316:	06 94       	lsr	r0
    5318:	57 95       	ror	r21
    531a:	47 95       	ror	r20
    531c:	37 95       	ror	r19
    531e:	27 95       	ror	r18
    5320:	ba 95       	dec	r27
    5322:	c9 f7       	brne	.-14     	; 0x5316 <__ultoa_invert+0xa2>
    5324:	62 0f       	add	r22, r18
    5326:	73 1f       	adc	r23, r19
    5328:	84 1f       	adc	r24, r20
    532a:	95 1f       	adc	r25, r21
    532c:	a0 1d       	adc	r26, r0
    532e:	08 95       	ret

00005330 <_exit>:
    5330:	f8 94       	cli

00005332 <__stop_program>:
    5332:	ff cf       	rjmp	.-2      	; 0x5332 <__stop_program>
