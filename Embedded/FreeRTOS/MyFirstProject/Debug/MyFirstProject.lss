
MyFirstProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800200  00002f5e  00002ff2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a5  00800282  00800282  00003074  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003074  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000030d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000638  00000000  00000000  00003110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000083a5  00000000  00000000  00003748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002448  00000000  00000000  0000baed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000417f  00000000  00000000  0000df35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001404  00000000  00000000  000120b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002818  00000000  00000000  000134b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000763b  00000000  00000000  00015cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006c8  00000000  00000000  0001d30b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	b2 c1       	rjmp	.+868    	; 0x366 <__ctors_end>
       2:	00 00       	nop
       4:	d1 c1       	rjmp	.+930    	; 0x3a8 <__bad_interrupt>
       6:	00 00       	nop
       8:	cf c1       	rjmp	.+926    	; 0x3a8 <__bad_interrupt>
       a:	00 00       	nop
       c:	cd c1       	rjmp	.+922    	; 0x3a8 <__bad_interrupt>
       e:	00 00       	nop
      10:	cb c1       	rjmp	.+918    	; 0x3a8 <__bad_interrupt>
      12:	00 00       	nop
      14:	c9 c1       	rjmp	.+914    	; 0x3a8 <__bad_interrupt>
      16:	00 00       	nop
      18:	c7 c1       	rjmp	.+910    	; 0x3a8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c5 c1       	rjmp	.+906    	; 0x3a8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c3 c1       	rjmp	.+902    	; 0x3a8 <__bad_interrupt>
      22:	00 00       	nop
      24:	c1 c1       	rjmp	.+898    	; 0x3a8 <__bad_interrupt>
      26:	00 00       	nop
      28:	bf c1       	rjmp	.+894    	; 0x3a8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	bd c1       	rjmp	.+890    	; 0x3a8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	11 c4       	rjmp	.+2082   	; 0x854 <__vector_12>
      32:	00 00       	nop
      34:	b9 c1       	rjmp	.+882    	; 0x3a8 <__bad_interrupt>
      36:	00 00       	nop
      38:	b7 c1       	rjmp	.+878    	; 0x3a8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b5 c1       	rjmp	.+874    	; 0x3a8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b3 c1       	rjmp	.+870    	; 0x3a8 <__bad_interrupt>
      42:	00 00       	nop
      44:	b1 c1       	rjmp	.+866    	; 0x3a8 <__bad_interrupt>
      46:	00 00       	nop
      48:	af c1       	rjmp	.+862    	; 0x3a8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ad c1       	rjmp	.+858    	; 0x3a8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ab c1       	rjmp	.+854    	; 0x3a8 <__bad_interrupt>
      52:	00 00       	nop
      54:	a9 c1       	rjmp	.+850    	; 0x3a8 <__bad_interrupt>
      56:	00 00       	nop
      58:	a7 c1       	rjmp	.+846    	; 0x3a8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a5 c1       	rjmp	.+842    	; 0x3a8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a3 c1       	rjmp	.+838    	; 0x3a8 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 c1 0e 	jmp	0x1d82	; 0x1d82 <__vector_25>
      68:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__vector_26>
      6c:	9d c1       	rjmp	.+826    	; 0x3a8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	9b c1       	rjmp	.+822    	; 0x3a8 <__bad_interrupt>
      72:	00 00       	nop
      74:	99 c1       	rjmp	.+818    	; 0x3a8 <__bad_interrupt>
      76:	00 00       	nop
      78:	97 c1       	rjmp	.+814    	; 0x3a8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	95 c1       	rjmp	.+810    	; 0x3a8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	93 c1       	rjmp	.+806    	; 0x3a8 <__bad_interrupt>
      82:	00 00       	nop
      84:	91 c1       	rjmp	.+802    	; 0x3a8 <__bad_interrupt>
      86:	00 00       	nop
      88:	8f c1       	rjmp	.+798    	; 0x3a8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8d c1       	rjmp	.+794    	; 0x3a8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 57 0f 	jmp	0x1eae	; 0x1eae <__vector_36>
      94:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__vector_37>
      98:	87 c1       	rjmp	.+782    	; 0x3a8 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	85 c1       	rjmp	.+778    	; 0x3a8 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	83 c1       	rjmp	.+774    	; 0x3a8 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	81 c1       	rjmp	.+770    	; 0x3a8 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	7f c1       	rjmp	.+766    	; 0x3a8 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	7d c1       	rjmp	.+762    	; 0x3a8 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	7b c1       	rjmp	.+758    	; 0x3a8 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	79 c1       	rjmp	.+754    	; 0x3a8 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	77 c1       	rjmp	.+750    	; 0x3a8 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	75 c1       	rjmp	.+746    	; 0x3a8 <__bad_interrupt>
      be:	00 00       	nop
      c0:	73 c1       	rjmp	.+742    	; 0x3a8 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	71 c1       	rjmp	.+738    	; 0x3a8 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	6f c1       	rjmp	.+734    	; 0x3a8 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__vector_51>
      d0:	0c 94 3f 10 	jmp	0x207e	; 0x207e <__vector_52>
      d4:	69 c1       	rjmp	.+722    	; 0x3a8 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 83 10 	jmp	0x2106	; 0x2106 <__vector_54>
      dc:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <__vector_55>
      e0:	63 c1       	rjmp	.+710    	; 0x3a8 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	43 01       	movw	r8, r6
      e6:	43 01       	movw	r8, r6
      e8:	43 01       	movw	r8, r6
      ea:	72 01       	movw	r14, r4
      ec:	7a 01       	movw	r14, r20
      ee:	89 01       	movw	r16, r18
      f0:	43 01       	movw	r8, r6
      f2:	43 01       	movw	r8, r6
      f4:	72 01       	movw	r14, r4
      f6:	7a 01       	movw	r14, r20

000000f8 <prvIdleTask>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
      f8:	0a e9       	ldi	r16, 0x9A	; 154
      fa:	12 e0       	ldi	r17, 0x02	; 2
      fc:	0f 2e       	mov	r0, r31
      fe:	f2 ec       	ldi	r31, 0xC2	; 194
     100:	ef 2e       	mov	r14, r31
     102:	f2 e0       	ldi	r31, 0x02	; 2
     104:	ff 2e       	mov	r15, r31
     106:	f0 2d       	mov	r31, r0
     108:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <uxDeletedTasksWaitingCleanUp>
     10c:	88 23       	and	r24, r24
     10e:	11 f1       	breq	.+68     	; 0x154 <prvIdleTask+0x5c>
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	0f 92       	push	r0
     116:	d8 01       	movw	r26, r16
     118:	15 96       	adiw	r26, 0x05	; 5
     11a:	ed 91       	ld	r30, X+
     11c:	fc 91       	ld	r31, X
     11e:	16 97       	sbiw	r26, 0x06	; 6
     120:	c6 81       	ldd	r28, Z+6	; 0x06
     122:	d7 81       	ldd	r29, Z+7	; 0x07
     124:	ce 01       	movw	r24, r28
     126:	02 96       	adiw	r24, 0x02	; 2
     128:	fd d1       	rcall	.+1018   	; 0x524 <uxListRemove>
     12a:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <uxCurrentNumberOfTasks>
     12e:	81 50       	subi	r24, 0x01	; 1
     130:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <uxCurrentNumberOfTasks>
     134:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <uxDeletedTasksWaitingCleanUp>
     138:	81 50       	subi	r24, 0x01	; 1
     13a:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <uxDeletedTasksWaitingCleanUp>
     13e:	0f 90       	pop	r0
     140:	0f be       	out	0x3f, r0	; 63
     142:	8f 89       	ldd	r24, Y+23	; 0x17
     144:	98 8d       	ldd	r25, Y+24	; 0x18
     146:	7d d1       	rcall	.+762    	; 0x442 <vPortFree>
     148:	ce 01       	movw	r24, r28
     14a:	7b d1       	rcall	.+758    	; 0x442 <vPortFree>
     14c:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <uxDeletedTasksWaitingCleanUp>
     150:	81 11       	cpse	r24, r1
     152:	de cf       	rjmp	.-68     	; 0x110 <prvIdleTask+0x18>
     154:	f7 01       	movw	r30, r14
     156:	80 81       	ld	r24, Z
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	08 f0       	brcs	.+2      	; 0x15e <prvIdleTask+0x66>
     15c:	b8 d2       	rcall	.+1392   	; 0x6ce <vPortYield>
     15e:	0e 94 91 0c 	call	0x1922	; 0x1922 <vApplicationIdleHook>
     162:	d2 cf       	rjmp	.-92     	; 0x108 <prvIdleTask+0x10>

00000164 <prvTimerTask>:
     164:	cf 93       	push	r28
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
     166:	df 93       	push	r29
     168:	00 d0       	rcall	.+0      	; 0x16a <prvTimerTask+0x6>
     16a:	00 d0       	rcall	.+0      	; 0x16c <prvTimerTask+0x8>
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
     170:	ce 01       	movw	r24, r28
     172:	01 96       	adiw	r24, 0x01	; 1
     174:	4c 01       	movw	r8, r24
     176:	44 24       	eor	r4, r4
     178:	43 94       	inc	r4
     17a:	e1 2c       	mov	r14, r1
     17c:	f1 2c       	mov	r15, r1
     17e:	51 2c       	mov	r5, r1
     180:	c8 2e       	mov	r12, r24
     182:	d9 2c       	mov	r13, r9
     184:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <pxCurrentTimerList>
     188:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <pxCurrentTimerList+0x1>
     18c:	80 81       	ld	r24, Z
     18e:	88 23       	and	r24, r24
     190:	09 f4       	brne	.+2      	; 0x194 <prvTimerTask+0x30>
     192:	d6 c0       	rjmp	.+428    	; 0x340 <prvTimerTask+0x1dc>
     194:	05 80       	ldd	r0, Z+5	; 0x05
     196:	f6 81       	ldd	r31, Z+6	; 0x06
     198:	e0 2d       	mov	r30, r0
     19a:	a0 80       	ld	r10, Z
     19c:	b1 80       	ldd	r11, Z+1	; 0x01
     19e:	b8 d7       	rcall	.+3952   	; 0x1110 <vTaskSuspendAll>
     1a0:	c4 01       	movw	r24, r8
     1a2:	0e 94 23 0c 	call	0x1846	; 0x1846 <prvSampleTimeNow>
     1a6:	8c 01       	movw	r16, r24
     1a8:	89 81       	ldd	r24, Y+1	; 0x01
     1aa:	81 11       	cpse	r24, r1
     1ac:	48 c0       	rjmp	.+144    	; 0x23e <prvTimerTask+0xda>
     1ae:	0a 15       	cp	r16, r10
     1b0:	1b 05       	cpc	r17, r11
     1b2:	b0 f1       	brcs	.+108    	; 0x220 <prvTimerTask+0xbc>
     1b4:	0e 94 4f 09 	call	0x129e	; 0x129e <xTaskResumeAll>
     1b8:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <pxCurrentTimerList>
     1bc:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <pxCurrentTimerList+0x1>
     1c0:	05 80       	ldd	r0, Z+5	; 0x05
     1c2:	f6 81       	ldd	r31, Z+6	; 0x06
     1c4:	e0 2d       	mov	r30, r0
     1c6:	66 80       	ldd	r6, Z+6	; 0x06
     1c8:	77 80       	ldd	r7, Z+7	; 0x07
     1ca:	c3 01       	movw	r24, r6
     1cc:	02 96       	adiw	r24, 0x02	; 2
     1ce:	aa d1       	rcall	.+852    	; 0x524 <uxListRemove>
     1d0:	d3 01       	movw	r26, r6
     1d2:	53 96       	adiw	r26, 0x13	; 19
     1d4:	8c 91       	ld	r24, X
     1d6:	53 97       	sbiw	r26, 0x13	; 19
     1d8:	82 ff       	sbrs	r24, 2
     1da:	17 c0       	rjmp	.+46     	; 0x20a <prvTimerTask+0xa6>
     1dc:	1c 96       	adiw	r26, 0x0c	; 12
     1de:	6d 91       	ld	r22, X+
     1e0:	7c 91       	ld	r23, X
     1e2:	1d 97       	sbiw	r26, 0x0d	; 13
     1e4:	6a 0d       	add	r22, r10
     1e6:	7b 1d       	adc	r23, r11
     1e8:	95 01       	movw	r18, r10
     1ea:	a8 01       	movw	r20, r16
     1ec:	c3 01       	movw	r24, r6
     1ee:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <prvInsertTimerInActiveList>
     1f2:	88 23       	and	r24, r24
     1f4:	69 f0       	breq	.+26     	; 0x210 <prvTimerTask+0xac>
     1f6:	0e 2d       	mov	r16, r14
     1f8:	1f 2d       	mov	r17, r15
     1fa:	2e 2d       	mov	r18, r14
     1fc:	3f 2d       	mov	r19, r15
     1fe:	a5 01       	movw	r20, r10
     200:	65 2d       	mov	r22, r5
     202:	c3 01       	movw	r24, r6
     204:	0e 94 df 0b 	call	0x17be	; 0x17be <xTimerGenericCommand>
     208:	03 c0       	rjmp	.+6      	; 0x210 <prvTimerTask+0xac>
     20a:	8e 7f       	andi	r24, 0xFE	; 254
     20c:	f3 01       	movw	r30, r6
     20e:	83 8b       	std	Z+19, r24	; 0x13
     210:	d3 01       	movw	r26, r6
     212:	50 96       	adiw	r26, 0x10	; 16
     214:	ed 91       	ld	r30, X+
     216:	fc 91       	ld	r31, X
     218:	51 97       	sbiw	r26, 0x11	; 17
     21a:	c3 01       	movw	r24, r6
     21c:	19 95       	eicall
     21e:	84 c0       	rjmp	.+264    	; 0x328 <prvTimerTask+0x1c4>
     220:	45 2d       	mov	r20, r5
     222:	b5 01       	movw	r22, r10
     224:	60 1b       	sub	r22, r16
     226:	71 0b       	sbc	r23, r17
     228:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <xTimerQueue>
     22c:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <xTimerQueue+0x1>
     230:	a2 d5       	rcall	.+2884   	; 0xd76 <vQueueWaitForMessageRestricted>
     232:	0e 94 4f 09 	call	0x129e	; 0x129e <xTaskResumeAll>
     236:	81 11       	cpse	r24, r1
     238:	77 c0       	rjmp	.+238    	; 0x328 <prvTimerTask+0x1c4>
     23a:	49 d2       	rcall	.+1170   	; 0x6ce <vPortYield>
     23c:	75 c0       	rjmp	.+234    	; 0x328 <prvTimerTask+0x1c4>
     23e:	0e 94 4f 09 	call	0x129e	; 0x129e <xTaskResumeAll>
     242:	72 c0       	rjmp	.+228    	; 0x328 <prvTimerTask+0x1c4>
     244:	89 81       	ldd	r24, Y+1	; 0x01
     246:	88 23       	and	r24, r24
     248:	0c f4       	brge	.+2      	; 0x24c <prvTimerTask+0xe8>
     24a:	6e c0       	rjmp	.+220    	; 0x328 <prvTimerTask+0x1c4>
     24c:	ac 80       	ldd	r10, Y+4	; 0x04
     24e:	bd 80       	ldd	r11, Y+5	; 0x05
     250:	f5 01       	movw	r30, r10
     252:	82 85       	ldd	r24, Z+10	; 0x0a
     254:	93 85       	ldd	r25, Z+11	; 0x0b
     256:	89 2b       	or	r24, r25
     258:	19 f0       	breq	.+6      	; 0x260 <prvTimerTask+0xfc>
     25a:	c5 01       	movw	r24, r10
     25c:	02 96       	adiw	r24, 0x02	; 2
     25e:	62 d1       	rcall	.+708    	; 0x524 <uxListRemove>
     260:	ce 01       	movw	r24, r28
     262:	06 96       	adiw	r24, 0x06	; 6
     264:	0e 94 23 0c 	call	0x1846	; 0x1846 <prvSampleTimeNow>
     268:	ac 01       	movw	r20, r24
     26a:	e9 81       	ldd	r30, Y+1	; 0x01
     26c:	0e 2e       	mov	r0, r30
     26e:	00 0c       	add	r0, r0
     270:	ff 0b       	sbc	r31, r31
     272:	ea 30       	cpi	r30, 0x0A	; 10
     274:	f1 05       	cpc	r31, r1
     276:	08 f0       	brcs	.+2      	; 0x27a <prvTimerTask+0x116>
     278:	57 c0       	rjmp	.+174    	; 0x328 <prvTimerTask+0x1c4>
     27a:	88 27       	eor	r24, r24
     27c:	ee 58       	subi	r30, 0x8E	; 142
     27e:	ff 4f       	sbci	r31, 0xFF	; 255
     280:	8f 4f       	sbci	r24, 0xFF	; 255
     282:	0c 94 66 13 	jmp	0x26cc	; 0x26cc <__tablejump2__>
     286:	d5 01       	movw	r26, r10
     288:	53 96       	adiw	r26, 0x13	; 19
     28a:	8c 91       	ld	r24, X
     28c:	53 97       	sbiw	r26, 0x13	; 19
     28e:	81 60       	ori	r24, 0x01	; 1
     290:	53 96       	adiw	r26, 0x13	; 19
     292:	8c 93       	st	X, r24
     294:	53 97       	sbiw	r26, 0x13	; 19
     296:	2a 81       	ldd	r18, Y+2	; 0x02
     298:	3b 81       	ldd	r19, Y+3	; 0x03
     29a:	1c 96       	adiw	r26, 0x0c	; 12
     29c:	6d 91       	ld	r22, X+
     29e:	7c 91       	ld	r23, X
     2a0:	1d 97       	sbiw	r26, 0x0d	; 13
     2a2:	62 0f       	add	r22, r18
     2a4:	73 1f       	adc	r23, r19
     2a6:	c5 01       	movw	r24, r10
     2a8:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <prvInsertTimerInActiveList>
     2ac:	88 23       	and	r24, r24
     2ae:	e1 f1       	breq	.+120    	; 0x328 <prvTimerTask+0x1c4>
     2b0:	d5 01       	movw	r26, r10
     2b2:	50 96       	adiw	r26, 0x10	; 16
     2b4:	ed 91       	ld	r30, X+
     2b6:	fc 91       	ld	r31, X
     2b8:	51 97       	sbiw	r26, 0x11	; 17
     2ba:	c5 01       	movw	r24, r10
     2bc:	19 95       	eicall
     2be:	f5 01       	movw	r30, r10
     2c0:	83 89       	ldd	r24, Z+19	; 0x13
     2c2:	82 ff       	sbrs	r24, 2
     2c4:	31 c0       	rjmp	.+98     	; 0x328 <prvTimerTask+0x1c4>
     2c6:	4a 81       	ldd	r20, Y+2	; 0x02
     2c8:	5b 81       	ldd	r21, Y+3	; 0x03
     2ca:	84 85       	ldd	r24, Z+12	; 0x0c
     2cc:	95 85       	ldd	r25, Z+13	; 0x0d
     2ce:	48 0f       	add	r20, r24
     2d0:	59 1f       	adc	r21, r25
     2d2:	0e 2d       	mov	r16, r14
     2d4:	1f 2d       	mov	r17, r15
     2d6:	2e 2d       	mov	r18, r14
     2d8:	3f 2d       	mov	r19, r15
     2da:	65 2d       	mov	r22, r5
     2dc:	c5 01       	movw	r24, r10
     2de:	0e 94 df 0b 	call	0x17be	; 0x17be <xTimerGenericCommand>
     2e2:	22 c0       	rjmp	.+68     	; 0x328 <prvTimerTask+0x1c4>
     2e4:	d5 01       	movw	r26, r10
     2e6:	53 96       	adiw	r26, 0x13	; 19
     2e8:	8c 91       	ld	r24, X
     2ea:	53 97       	sbiw	r26, 0x13	; 19
     2ec:	8e 7f       	andi	r24, 0xFE	; 254
     2ee:	53 96       	adiw	r26, 0x13	; 19
     2f0:	8c 93       	st	X, r24
     2f2:	1a c0       	rjmp	.+52     	; 0x328 <prvTimerTask+0x1c4>
     2f4:	f5 01       	movw	r30, r10
     2f6:	83 89       	ldd	r24, Z+19	; 0x13
     2f8:	81 60       	ori	r24, 0x01	; 1
     2fa:	83 8b       	std	Z+19, r24	; 0x13
     2fc:	6a 81       	ldd	r22, Y+2	; 0x02
     2fe:	7b 81       	ldd	r23, Y+3	; 0x03
     300:	75 87       	std	Z+13, r23	; 0x0d
     302:	64 87       	std	Z+12, r22	; 0x0c
     304:	64 0f       	add	r22, r20
     306:	75 1f       	adc	r23, r21
     308:	9a 01       	movw	r18, r20
     30a:	c5 01       	movw	r24, r10
     30c:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <prvInsertTimerInActiveList>
     310:	0b c0       	rjmp	.+22     	; 0x328 <prvTimerTask+0x1c4>
     312:	d5 01       	movw	r26, r10
     314:	53 96       	adiw	r26, 0x13	; 19
     316:	8c 91       	ld	r24, X
     318:	81 fd       	sbrc	r24, 1
     31a:	03 c0       	rjmp	.+6      	; 0x322 <prvTimerTask+0x1be>
     31c:	c5 01       	movw	r24, r10
     31e:	91 d0       	rcall	.+290    	; 0x442 <vPortFree>
     320:	03 c0       	rjmp	.+6      	; 0x328 <prvTimerTask+0x1c4>
     322:	8e 7f       	andi	r24, 0xFE	; 254
     324:	f5 01       	movw	r30, r10
     326:	83 8b       	std	Z+19, r24	; 0x13
     328:	4e 2d       	mov	r20, r14
     32a:	5f 2d       	mov	r21, r15
     32c:	6c 2d       	mov	r22, r12
     32e:	7d 2d       	mov	r23, r13
     330:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <xTimerQueue>
     334:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <xTimerQueue+0x1>
     338:	95 d4       	rcall	.+2346   	; 0xc64 <xQueueReceive>
     33a:	81 11       	cpse	r24, r1
     33c:	83 cf       	rjmp	.-250    	; 0x244 <prvTimerTask+0xe0>
     33e:	22 cf       	rjmp	.-444    	; 0x184 <prvTimerTask+0x20>
     340:	e7 d6       	rcall	.+3534   	; 0x1110 <vTaskSuspendAll>
     342:	c4 01       	movw	r24, r8
     344:	0e 94 23 0c 	call	0x1846	; 0x1846 <prvSampleTimeNow>
     348:	8c 01       	movw	r16, r24
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	81 11       	cpse	r24, r1
     34e:	77 cf       	rjmp	.-274    	; 0x23e <prvTimerTask+0xda>
     350:	e0 91 ee 02 	lds	r30, 0x02EE	; 0x8002ee <pxOverflowTimerList>
     354:	f0 91 ef 02 	lds	r31, 0x02EF	; 0x8002ef <pxOverflowTimerList+0x1>
     358:	80 81       	ld	r24, Z
     35a:	44 2d       	mov	r20, r4
     35c:	81 11       	cpse	r24, r1
     35e:	45 2d       	mov	r20, r5
     360:	ae 2c       	mov	r10, r14
     362:	bf 2c       	mov	r11, r15
     364:	5e cf       	rjmp	.-324    	; 0x222 <prvTimerTask+0xbe>

00000366 <__ctors_end>:
     366:	11 24       	eor	r1, r1
     368:	1f be       	out	0x3f, r1	; 63
     36a:	cf ef       	ldi	r28, 0xFF	; 255
     36c:	d1 e2       	ldi	r29, 0x21	; 33
     36e:	de bf       	out	0x3e, r29	; 62
     370:	cd bf       	out	0x3d, r28	; 61
     372:	00 e0       	ldi	r16, 0x00	; 0
     374:	0c bf       	out	0x3c, r16	; 60

00000376 <__do_copy_data>:
     376:	12 e0       	ldi	r17, 0x02	; 2
     378:	a0 e0       	ldi	r26, 0x00	; 0
     37a:	b2 e0       	ldi	r27, 0x02	; 2
     37c:	ee e5       	ldi	r30, 0x5E	; 94
     37e:	ff e2       	ldi	r31, 0x2F	; 47
     380:	00 e0       	ldi	r16, 0x00	; 0
     382:	0b bf       	out	0x3b, r16	; 59
     384:	02 c0       	rjmp	.+4      	; 0x38a <__do_copy_data+0x14>
     386:	07 90       	elpm	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	a2 38       	cpi	r26, 0x82	; 130
     38c:	b1 07       	cpc	r27, r17
     38e:	d9 f7       	brne	.-10     	; 0x386 <__do_copy_data+0x10>

00000390 <__do_clear_bss>:
     390:	23 e0       	ldi	r18, 0x03	; 3
     392:	a2 e8       	ldi	r26, 0x82	; 130
     394:	b2 e0       	ldi	r27, 0x02	; 2
     396:	01 c0       	rjmp	.+2      	; 0x39a <.do_clear_bss_start>

00000398 <.do_clear_bss_loop>:
     398:	1d 92       	st	X+, r1

0000039a <.do_clear_bss_start>:
     39a:	a7 32       	cpi	r26, 0x27	; 39
     39c:	b2 07       	cpc	r27, r18
     39e:	e1 f7       	brne	.-8      	; 0x398 <.do_clear_bss_loop>
     3a0:	0e 94 ac 0c 	call	0x1958	; 0x1958 <main>
     3a4:	0c 94 ad 17 	jmp	0x2f5a	; 0x2f5a <_exit>

000003a8 <__bad_interrupt>:
     3a8:	2b ce       	rjmp	.-938    	; 0x0 <__vectors>

000003aa <co2_callback>:
		//vTaskDelayUntil(&xLastWakeTimeCO2,SENSOR_TIMER*60);
	//}
}

// call back function for getting co2 value
void co2_callback(uint16_t co2_ppm) {
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	1f 92       	push	r1
     3b0:	1f 92       	push	r1
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
	co2_ppm_pointer = &co2_ppm;
     3b6:	ce 01       	movw	r24, r28
     3b8:	01 96       	adiw	r24, 0x01	; 1
     3ba:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <co2_ppm_pointer+0x1>
     3be:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <co2_ppm_pointer>
}
     3c2:	0f 90       	pop	r0
     3c4:	0f 90       	pop	r0
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	08 95       	ret

000003cc <co2_sensor_init>:

uint16_t* co2_ppm_pointer;

// create drivers
void co2_sensor_init() {	
	mh_z19_create(ser_USART3, co2_callback);
     3cc:	65 ed       	ldi	r22, 0xD5	; 213
     3ce:	71 e0       	ldi	r23, 0x01	; 1
     3d0:	83 e0       	ldi	r24, 0x03	; 3
     3d2:	0c 94 3d 0d 	jmp	0x1a7a	; 0x1a7a <mh_z19_create>
     3d6:	08 95       	ret

000003d8 <co2_measure>:
	while(1){
		//xSemaphoreTake(*semaphore,SENSOR_TIMER*60);
		printf("CO2 TASK %d \n",xLastWakeTimeCO2);*/
	mh_z19_return_code_t rc;
	
	if ((rc = mh_z19_take_meassuring()) != MHZ19_OK) {
     3d8:	0e 94 6b 0d 	call	0x1ad6	; 0x1ad6 <mh_z19_take_meassuring>
     3dc:	88 23       	and	r24, r24
     3de:	21 f0       	breq	.+8      	; 0x3e8 <co2_measure+0x10>
		printf("CO2_SENSOR_ERROR\n");
     3e0:	89 e4       	ldi	r24, 0x49	; 73
     3e2:	92 e0       	ldi	r25, 0x02	; 2
     3e4:	0c 94 d0 14 	jmp	0x29a0	; 0x29a0 <puts>
     3e8:	08 95       	ret

000003ea <co2_get_value>:
}


uint16_t* co2_get_value() {
	return co2_ppm_pointer;
}
     3ea:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <co2_ppm_pointer>
     3ee:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <co2_ppm_pointer+0x1>
     3f2:	08 95       	ret

000003f4 <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     3f4:	e7 e0       	ldi	r30, 0x07	; 7
     3f6:	f1 e0       	ldi	r31, 0x01	; 1
     3f8:	80 81       	ld	r24, Z
     3fa:	8f 60       	ori	r24, 0x0F	; 15
     3fc:	80 83       	st	Z, r24
     3fe:	08 95       	ret

00000400 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     400:	e8 e0       	ldi	r30, 0x08	; 8
     402:	f1 e0       	ldi	r31, 0x01	; 1
     404:	90 81       	ld	r25, Z
     406:	90 7f       	andi	r25, 0xF0	; 240
     408:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     40a:	90 81       	ld	r25, Z
     40c:	8f 70       	andi	r24, 0x0F	; 15
     40e:	98 2b       	or	r25, r24
     410:	90 83       	st	Z, r25
     412:	08 95       	ret

00000414 <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     414:	e8 e0       	ldi	r30, 0x08	; 8
     416:	f1 e0       	ldi	r31, 0x01	; 1
     418:	80 81       	ld	r24, Z
     41a:	80 7f       	andi	r24, 0xF0	; 240
     41c:	80 83       	st	Z, r24
     41e:	08 95       	ret

00000420 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     426:	74 d6       	rcall	.+3304   	; 0x1110 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     428:	ce 01       	movw	r24, r28
     42a:	0e 94 88 13 	call	0x2710	; 0x2710 <malloc>
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     42e:	ec 01       	movw	r28, r24
     430:	36 d7       	rcall	.+3692   	; 0x129e <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     432:	20 97       	sbiw	r28, 0x00	; 0
     434:	11 f4       	brne	.+4      	; 0x43a <pvPortMalloc+0x1a>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     436:	0e 94 92 0c 	call	0x1924	; 0x1924 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     43a:	ce 01       	movw	r24, r28
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	08 95       	ret

00000442 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     442:	cf 93       	push	r28
     444:	df 93       	push	r29
    if( pv )
     446:	00 97       	sbiw	r24, 0x00	; 0
     448:	31 f0       	breq	.+12     	; 0x456 <vPortFree+0x14>
     44a:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     44c:	61 d6       	rcall	.+3266   	; 0x1110 <vTaskSuspendAll>
        {
            free( pv );
     44e:	ce 01       	movw	r24, r28
     450:	0e 94 20 14 	call	0x2840	; 0x2840 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     454:	24 d7       	rcall	.+3656   	; 0x129e <xTaskResumeAll>
    }
}
     456:	df 91       	pop	r29
     458:	cf 91       	pop	r28
     45a:	08 95       	ret

0000045c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     45c:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     45e:	03 96       	adiw	r24, 0x03	; 3
     460:	92 83       	std	Z+2, r25	; 0x02
     462:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     464:	2f ef       	ldi	r18, 0xFF	; 255
     466:	3f ef       	ldi	r19, 0xFF	; 255
     468:	34 83       	std	Z+4, r19	; 0x04
     46a:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     46c:	96 83       	std	Z+6, r25	; 0x06
     46e:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     470:	90 87       	std	Z+8, r25	; 0x08
     472:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     474:	10 82       	st	Z, r1
     476:	08 95       	ret

00000478 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     478:	fc 01       	movw	r30, r24
     47a:	11 86       	std	Z+9, r1	; 0x09
     47c:	10 86       	std	Z+8, r1	; 0x08
     47e:	08 95       	ret

00000480 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	9c 01       	movw	r18, r24
     486:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     488:	dc 01       	movw	r26, r24
     48a:	11 96       	adiw	r26, 0x01	; 1
     48c:	cd 91       	ld	r28, X+
     48e:	dc 91       	ld	r29, X
     490:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     492:	d3 83       	std	Z+3, r29	; 0x03
     494:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     496:	8c 81       	ldd	r24, Y+4	; 0x04
     498:	9d 81       	ldd	r25, Y+5	; 0x05
     49a:	95 83       	std	Z+5, r25	; 0x05
     49c:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     49e:	8c 81       	ldd	r24, Y+4	; 0x04
     4a0:	9d 81       	ldd	r25, Y+5	; 0x05
     4a2:	dc 01       	movw	r26, r24
     4a4:	13 96       	adiw	r26, 0x03	; 3
     4a6:	7c 93       	st	X, r23
     4a8:	6e 93       	st	-X, r22
     4aa:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     4ac:	7d 83       	std	Y+5, r23	; 0x05
     4ae:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     4b0:	31 87       	std	Z+9, r19	; 0x09
     4b2:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     4b4:	f9 01       	movw	r30, r18
     4b6:	80 81       	ld	r24, Z
     4b8:	8f 5f       	subi	r24, 0xFF	; 255
     4ba:	80 83       	st	Z, r24
}
     4bc:	df 91       	pop	r29
     4be:	cf 91       	pop	r28
     4c0:	08 95       	ret

000004c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
     4c6:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     4c8:	48 81       	ld	r20, Y
     4ca:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     4cc:	4f 3f       	cpi	r20, 0xFF	; 255
     4ce:	2f ef       	ldi	r18, 0xFF	; 255
     4d0:	52 07       	cpc	r21, r18
     4d2:	21 f4       	brne	.+8      	; 0x4dc <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     4d4:	fc 01       	movw	r30, r24
     4d6:	a7 81       	ldd	r26, Z+7	; 0x07
     4d8:	b0 85       	ldd	r27, Z+8	; 0x08
     4da:	0d c0       	rjmp	.+26     	; 0x4f6 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     4dc:	dc 01       	movw	r26, r24
     4de:	13 96       	adiw	r26, 0x03	; 3
     4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <vListInsert+0x22>
     4e2:	df 01       	movw	r26, r30
     4e4:	12 96       	adiw	r26, 0x02	; 2
     4e6:	ed 91       	ld	r30, X+
     4e8:	fc 91       	ld	r31, X
     4ea:	13 97       	sbiw	r26, 0x03	; 3
     4ec:	20 81       	ld	r18, Z
     4ee:	31 81       	ldd	r19, Z+1	; 0x01
     4f0:	42 17       	cp	r20, r18
     4f2:	53 07       	cpc	r21, r19
     4f4:	b0 f7       	brcc	.-20     	; 0x4e2 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     4f6:	12 96       	adiw	r26, 0x02	; 2
     4f8:	ed 91       	ld	r30, X+
     4fa:	fc 91       	ld	r31, X
     4fc:	13 97       	sbiw	r26, 0x03	; 3
     4fe:	fb 83       	std	Y+3, r31	; 0x03
     500:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     502:	d5 83       	std	Z+5, r29	; 0x05
     504:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     506:	bd 83       	std	Y+5, r27	; 0x05
     508:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     50a:	13 96       	adiw	r26, 0x03	; 3
     50c:	dc 93       	st	X, r29
     50e:	ce 93       	st	-X, r28
     510:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     512:	99 87       	std	Y+9, r25	; 0x09
     514:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     516:	fc 01       	movw	r30, r24
     518:	20 81       	ld	r18, Z
     51a:	2f 5f       	subi	r18, 0xFF	; 255
     51c:	20 83       	st	Z, r18
}
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	08 95       	ret

00000524 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     52a:	a0 85       	ldd	r26, Z+8	; 0x08
     52c:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     52e:	c2 81       	ldd	r28, Z+2	; 0x02
     530:	d3 81       	ldd	r29, Z+3	; 0x03
     532:	84 81       	ldd	r24, Z+4	; 0x04
     534:	95 81       	ldd	r25, Z+5	; 0x05
     536:	9d 83       	std	Y+5, r25	; 0x05
     538:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     53a:	c4 81       	ldd	r28, Z+4	; 0x04
     53c:	d5 81       	ldd	r29, Z+5	; 0x05
     53e:	82 81       	ldd	r24, Z+2	; 0x02
     540:	93 81       	ldd	r25, Z+3	; 0x03
     542:	9b 83       	std	Y+3, r25	; 0x03
     544:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     546:	11 96       	adiw	r26, 0x01	; 1
     548:	8d 91       	ld	r24, X+
     54a:	9c 91       	ld	r25, X
     54c:	12 97       	sbiw	r26, 0x02	; 2
     54e:	e8 17       	cp	r30, r24
     550:	f9 07       	cpc	r31, r25
     552:	31 f4       	brne	.+12     	; 0x560 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     554:	84 81       	ldd	r24, Z+4	; 0x04
     556:	95 81       	ldd	r25, Z+5	; 0x05
     558:	12 96       	adiw	r26, 0x02	; 2
     55a:	9c 93       	st	X, r25
     55c:	8e 93       	st	-X, r24
     55e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     560:	11 86       	std	Z+9, r1	; 0x09
     562:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     564:	8c 91       	ld	r24, X
     566:	81 50       	subi	r24, 0x01	; 1
     568:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     56a:	8c 91       	ld	r24, X
}
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     572:	31 e1       	ldi	r19, 0x11	; 17
     574:	fc 01       	movw	r30, r24
     576:	30 83       	st	Z, r19
     578:	31 97       	sbiw	r30, 0x01	; 1
     57a:	22 e2       	ldi	r18, 0x22	; 34
     57c:	20 83       	st	Z, r18
     57e:	31 97       	sbiw	r30, 0x01	; 1
     580:	a3 e3       	ldi	r26, 0x33	; 51
     582:	a0 83       	st	Z, r26
     584:	31 97       	sbiw	r30, 0x01	; 1
     586:	60 83       	st	Z, r22
     588:	31 97       	sbiw	r30, 0x01	; 1
     58a:	70 83       	st	Z, r23
     58c:	31 97       	sbiw	r30, 0x01	; 1
     58e:	10 82       	st	Z, r1
     590:	31 97       	sbiw	r30, 0x01	; 1
     592:	10 82       	st	Z, r1
     594:	31 97       	sbiw	r30, 0x01	; 1
     596:	60 e8       	ldi	r22, 0x80	; 128
     598:	60 83       	st	Z, r22
     59a:	31 97       	sbiw	r30, 0x01	; 1
     59c:	10 82       	st	Z, r1
     59e:	31 97       	sbiw	r30, 0x01	; 1
     5a0:	10 82       	st	Z, r1
     5a2:	31 97       	sbiw	r30, 0x01	; 1
     5a4:	10 82       	st	Z, r1
     5a6:	31 97       	sbiw	r30, 0x01	; 1
     5a8:	62 e0       	ldi	r22, 0x02	; 2
     5aa:	60 83       	st	Z, r22
     5ac:	31 97       	sbiw	r30, 0x01	; 1
     5ae:	63 e0       	ldi	r22, 0x03	; 3
     5b0:	60 83       	st	Z, r22
     5b2:	31 97       	sbiw	r30, 0x01	; 1
     5b4:	64 e0       	ldi	r22, 0x04	; 4
     5b6:	60 83       	st	Z, r22
     5b8:	31 97       	sbiw	r30, 0x01	; 1
     5ba:	65 e0       	ldi	r22, 0x05	; 5
     5bc:	60 83       	st	Z, r22
     5be:	31 97       	sbiw	r30, 0x01	; 1
     5c0:	66 e0       	ldi	r22, 0x06	; 6
     5c2:	60 83       	st	Z, r22
     5c4:	31 97       	sbiw	r30, 0x01	; 1
     5c6:	67 e0       	ldi	r22, 0x07	; 7
     5c8:	60 83       	st	Z, r22
     5ca:	31 97       	sbiw	r30, 0x01	; 1
     5cc:	68 e0       	ldi	r22, 0x08	; 8
     5ce:	60 83       	st	Z, r22
     5d0:	31 97       	sbiw	r30, 0x01	; 1
     5d2:	69 e0       	ldi	r22, 0x09	; 9
     5d4:	60 83       	st	Z, r22
     5d6:	31 97       	sbiw	r30, 0x01	; 1
     5d8:	60 e1       	ldi	r22, 0x10	; 16
     5da:	60 83       	st	Z, r22
     5dc:	31 97       	sbiw	r30, 0x01	; 1
     5de:	30 83       	st	Z, r19
     5e0:	31 97       	sbiw	r30, 0x01	; 1
     5e2:	32 e1       	ldi	r19, 0x12	; 18
     5e4:	30 83       	st	Z, r19
     5e6:	31 97       	sbiw	r30, 0x01	; 1
     5e8:	33 e1       	ldi	r19, 0x13	; 19
     5ea:	30 83       	st	Z, r19
     5ec:	31 97       	sbiw	r30, 0x01	; 1
     5ee:	34 e1       	ldi	r19, 0x14	; 20
     5f0:	30 83       	st	Z, r19
     5f2:	31 97       	sbiw	r30, 0x01	; 1
     5f4:	35 e1       	ldi	r19, 0x15	; 21
     5f6:	30 83       	st	Z, r19
     5f8:	31 97       	sbiw	r30, 0x01	; 1
     5fa:	36 e1       	ldi	r19, 0x16	; 22
     5fc:	30 83       	st	Z, r19
     5fe:	31 97       	sbiw	r30, 0x01	; 1
     600:	37 e1       	ldi	r19, 0x17	; 23
     602:	30 83       	st	Z, r19
     604:	31 97       	sbiw	r30, 0x01	; 1
     606:	38 e1       	ldi	r19, 0x18	; 24
     608:	30 83       	st	Z, r19
     60a:	31 97       	sbiw	r30, 0x01	; 1
     60c:	39 e1       	ldi	r19, 0x19	; 25
     60e:	30 83       	st	Z, r19
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	30 e2       	ldi	r19, 0x20	; 32
     614:	30 83       	st	Z, r19
     616:	31 97       	sbiw	r30, 0x01	; 1
     618:	31 e2       	ldi	r19, 0x21	; 33
     61a:	30 83       	st	Z, r19
     61c:	31 97       	sbiw	r30, 0x01	; 1
     61e:	20 83       	st	Z, r18
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	23 e2       	ldi	r18, 0x23	; 35
     624:	20 83       	st	Z, r18
     626:	31 97       	sbiw	r30, 0x01	; 1
     628:	40 83       	st	Z, r20
     62a:	31 97       	sbiw	r30, 0x01	; 1
     62c:	50 83       	st	Z, r21
     62e:	31 97       	sbiw	r30, 0x01	; 1
     630:	26 e2       	ldi	r18, 0x26	; 38
     632:	20 83       	st	Z, r18
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	27 e2       	ldi	r18, 0x27	; 39
     638:	20 83       	st	Z, r18
     63a:	31 97       	sbiw	r30, 0x01	; 1
     63c:	28 e2       	ldi	r18, 0x28	; 40
     63e:	20 83       	st	Z, r18
     640:	31 97       	sbiw	r30, 0x01	; 1
     642:	29 e2       	ldi	r18, 0x29	; 41
     644:	20 83       	st	Z, r18
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	20 e3       	ldi	r18, 0x30	; 48
     64a:	20 83       	st	Z, r18
     64c:	31 97       	sbiw	r30, 0x01	; 1
     64e:	21 e3       	ldi	r18, 0x31	; 49
     650:	20 83       	st	Z, r18
     652:	89 97       	sbiw	r24, 0x29	; 41
     654:	08 95       	ret

00000656 <xPortStartScheduler>:
     656:	a8 95       	wdr
     658:	90 ec       	ldi	r25, 0xC0	; 192
     65a:	88 e1       	ldi	r24, 0x18	; 24
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	a8 95       	wdr
     662:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     666:	0f be       	out	0x3f, r0	; 63
     668:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     66c:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <pxCurrentTCB>
     670:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
     674:	cd 91       	ld	r28, X+
     676:	cd bf       	out	0x3d, r28	; 61
     678:	dd 91       	ld	r29, X+
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	ff 91       	pop	r31
     67e:	ef 91       	pop	r30
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	bf 91       	pop	r27
     686:	af 91       	pop	r26
     688:	9f 91       	pop	r25
     68a:	8f 91       	pop	r24
     68c:	7f 91       	pop	r23
     68e:	6f 91       	pop	r22
     690:	5f 91       	pop	r21
     692:	4f 91       	pop	r20
     694:	3f 91       	pop	r19
     696:	2f 91       	pop	r18
     698:	1f 91       	pop	r17
     69a:	0f 91       	pop	r16
     69c:	ff 90       	pop	r15
     69e:	ef 90       	pop	r14
     6a0:	df 90       	pop	r13
     6a2:	cf 90       	pop	r12
     6a4:	bf 90       	pop	r11
     6a6:	af 90       	pop	r10
     6a8:	9f 90       	pop	r9
     6aa:	8f 90       	pop	r8
     6ac:	7f 90       	pop	r7
     6ae:	6f 90       	pop	r6
     6b0:	5f 90       	pop	r5
     6b2:	4f 90       	pop	r4
     6b4:	3f 90       	pop	r3
     6b6:	2f 90       	pop	r2
     6b8:	1f 90       	pop	r1
     6ba:	0f 90       	pop	r0
     6bc:	0c be       	out	0x3c, r0	; 60
     6be:	0f 90       	pop	r0
     6c0:	0b be       	out	0x3b, r0	; 59
     6c2:	0f 90       	pop	r0
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	0f 90       	pop	r0
     6c8:	08 95       	ret
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	08 95       	ret

000006ce <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     6ce:	0f 92       	push	r0
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	f8 94       	cli
     6d4:	0f 92       	push	r0
     6d6:	0b b6       	in	r0, 0x3b	; 59
     6d8:	0f 92       	push	r0
     6da:	0c b6       	in	r0, 0x3c	; 60
     6dc:	0f 92       	push	r0
     6de:	1f 92       	push	r1
     6e0:	11 24       	eor	r1, r1
     6e2:	2f 92       	push	r2
     6e4:	3f 92       	push	r3
     6e6:	4f 92       	push	r4
     6e8:	5f 92       	push	r5
     6ea:	6f 92       	push	r6
     6ec:	7f 92       	push	r7
     6ee:	8f 92       	push	r8
     6f0:	9f 92       	push	r9
     6f2:	af 92       	push	r10
     6f4:	bf 92       	push	r11
     6f6:	cf 92       	push	r12
     6f8:	df 92       	push	r13
     6fa:	ef 92       	push	r14
     6fc:	ff 92       	push	r15
     6fe:	0f 93       	push	r16
     700:	1f 93       	push	r17
     702:	2f 93       	push	r18
     704:	3f 93       	push	r19
     706:	4f 93       	push	r20
     708:	5f 93       	push	r21
     70a:	6f 93       	push	r22
     70c:	7f 93       	push	r23
     70e:	8f 93       	push	r24
     710:	9f 93       	push	r25
     712:	af 93       	push	r26
     714:	bf 93       	push	r27
     716:	cf 93       	push	r28
     718:	df 93       	push	r29
     71a:	ef 93       	push	r30
     71c:	ff 93       	push	r31
     71e:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <pxCurrentTCB>
     722:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
     726:	0d b6       	in	r0, 0x3d	; 61
     728:	0d 92       	st	X+, r0
     72a:	0e b6       	in	r0, 0x3e	; 62
     72c:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     72e:	40 d6       	rcall	.+3200   	; 0x13b0 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     730:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <pxCurrentTCB>
     734:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
     738:	cd 91       	ld	r28, X+
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	dd 91       	ld	r29, X+
     73e:	de bf       	out	0x3e, r29	; 62
     740:	ff 91       	pop	r31
     742:	ef 91       	pop	r30
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	bf 91       	pop	r27
     74a:	af 91       	pop	r26
     74c:	9f 91       	pop	r25
     74e:	8f 91       	pop	r24
     750:	7f 91       	pop	r23
     752:	6f 91       	pop	r22
     754:	5f 91       	pop	r21
     756:	4f 91       	pop	r20
     758:	3f 91       	pop	r19
     75a:	2f 91       	pop	r18
     75c:	1f 91       	pop	r17
     75e:	0f 91       	pop	r16
     760:	ff 90       	pop	r15
     762:	ef 90       	pop	r14
     764:	df 90       	pop	r13
     766:	cf 90       	pop	r12
     768:	bf 90       	pop	r11
     76a:	af 90       	pop	r10
     76c:	9f 90       	pop	r9
     76e:	8f 90       	pop	r8
     770:	7f 90       	pop	r7
     772:	6f 90       	pop	r6
     774:	5f 90       	pop	r5
     776:	4f 90       	pop	r4
     778:	3f 90       	pop	r3
     77a:	2f 90       	pop	r2
     77c:	1f 90       	pop	r1
     77e:	0f 90       	pop	r0
     780:	0c be       	out	0x3c, r0	; 60
     782:	0f 90       	pop	r0
     784:	0b be       	out	0x3b, r0	; 59
     786:	0f 90       	pop	r0
     788:	0f be       	out	0x3f, r0	; 63
     78a:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     78c:	08 95       	ret

0000078e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     78e:	0f 92       	push	r0
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	0f 92       	push	r0
     796:	0b b6       	in	r0, 0x3b	; 59
     798:	0f 92       	push	r0
     79a:	0c b6       	in	r0, 0x3c	; 60
     79c:	0f 92       	push	r0
     79e:	1f 92       	push	r1
     7a0:	11 24       	eor	r1, r1
     7a2:	2f 92       	push	r2
     7a4:	3f 92       	push	r3
     7a6:	4f 92       	push	r4
     7a8:	5f 92       	push	r5
     7aa:	6f 92       	push	r6
     7ac:	7f 92       	push	r7
     7ae:	8f 92       	push	r8
     7b0:	9f 92       	push	r9
     7b2:	af 92       	push	r10
     7b4:	bf 92       	push	r11
     7b6:	cf 92       	push	r12
     7b8:	df 92       	push	r13
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	0f 93       	push	r16
     7c0:	1f 93       	push	r17
     7c2:	2f 93       	push	r18
     7c4:	3f 93       	push	r19
     7c6:	4f 93       	push	r20
     7c8:	5f 93       	push	r21
     7ca:	6f 93       	push	r22
     7cc:	7f 93       	push	r23
     7ce:	8f 93       	push	r24
     7d0:	9f 93       	push	r25
     7d2:	af 93       	push	r26
     7d4:	bf 93       	push	r27
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	ef 93       	push	r30
     7dc:	ff 93       	push	r31
     7de:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <pxCurrentTCB>
     7e2:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
     7e6:	0d b6       	in	r0, 0x3d	; 61
     7e8:	0d 92       	st	X+, r0
     7ea:	0e b6       	in	r0, 0x3e	; 62
     7ec:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     7ee:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     7f0:	9f d4       	rcall	.+2366   	; 0x1130 <xTaskIncrementTick>
     7f2:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     7f4:	dd d5       	rcall	.+3002   	; 0x13b0 <vTaskSwitchContext>
     7f6:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    }

    portRESTORE_CONTEXT();
     7fa:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
     7fe:	cd 91       	ld	r28, X+
     800:	cd bf       	out	0x3d, r28	; 61
     802:	dd 91       	ld	r29, X+
     804:	de bf       	out	0x3e, r29	; 62
     806:	ff 91       	pop	r31
     808:	ef 91       	pop	r30
     80a:	df 91       	pop	r29
     80c:	cf 91       	pop	r28
     80e:	bf 91       	pop	r27
     810:	af 91       	pop	r26
     812:	9f 91       	pop	r25
     814:	8f 91       	pop	r24
     816:	7f 91       	pop	r23
     818:	6f 91       	pop	r22
     81a:	5f 91       	pop	r21
     81c:	4f 91       	pop	r20
     81e:	3f 91       	pop	r19
     820:	2f 91       	pop	r18
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	bf 90       	pop	r11
     830:	af 90       	pop	r10
     832:	9f 90       	pop	r9
     834:	8f 90       	pop	r8
     836:	7f 90       	pop	r7
     838:	6f 90       	pop	r6
     83a:	5f 90       	pop	r5
     83c:	4f 90       	pop	r4
     83e:	3f 90       	pop	r3
     840:	2f 90       	pop	r2
     842:	1f 90       	pop	r1
     844:	0f 90       	pop	r0
     846:	0c be       	out	0x3c, r0	; 60
     848:	0f 90       	pop	r0
     84a:	0b be       	out	0x3b, r0	; 59
     84c:	0f 90       	pop	r0
     84e:	0f be       	out	0x3f, r0	; 63
     850:	0f 90       	pop	r0
     852:	08 95       	ret

00000854 <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     854:	9c df       	rcall	.-200    	; 0x78e <vPortYieldFromTick>
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     856:	18 95       	reti

00000858 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     858:	0f b6       	in	r0, 0x3f	; 63
     85a:	f8 94       	cli
     85c:	0f 92       	push	r0
     85e:	fc 01       	movw	r30, r24
     860:	92 8d       	ldd	r25, Z+26	; 0x1a
     862:	0f 90       	pop	r0
     864:	0f be       	out	0x3f, r0	; 63
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	91 11       	cpse	r25, r1
     86a:	80 e0       	ldi	r24, 0x00	; 0
     86c:	08 95       	ret

0000086e <prvCopyDataToQueue>:
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	ec 01       	movw	r28, r24
     878:	04 2f       	mov	r16, r20
     87a:	1a 8d       	ldd	r17, Y+26	; 0x1a
     87c:	4c 8d       	ldd	r20, Y+28	; 0x1c
     87e:	41 11       	cpse	r20, r1
     880:	0b c0       	rjmp	.+22     	; 0x898 <prvCopyDataToQueue+0x2a>
     882:	88 81       	ld	r24, Y
     884:	99 81       	ldd	r25, Y+1	; 0x01
     886:	89 2b       	or	r24, r25
     888:	09 f0       	breq	.+2      	; 0x88c <prvCopyDataToQueue+0x1e>
     88a:	41 c0       	rjmp	.+130    	; 0x90e <prvCopyDataToQueue+0xa0>
     88c:	8c 81       	ldd	r24, Y+4	; 0x04
     88e:	9d 81       	ldd	r25, Y+5	; 0x05
     890:	df d6       	rcall	.+3518   	; 0x1650 <xTaskPriorityDisinherit>
     892:	1d 82       	std	Y+5, r1	; 0x05
     894:	1c 82       	std	Y+4, r1	; 0x04
     896:	42 c0       	rjmp	.+132    	; 0x91c <prvCopyDataToQueue+0xae>
     898:	01 11       	cpse	r16, r1
     89a:	17 c0       	rjmp	.+46     	; 0x8ca <prvCopyDataToQueue+0x5c>
     89c:	50 e0       	ldi	r21, 0x00	; 0
     89e:	8a 81       	ldd	r24, Y+2	; 0x02
     8a0:	9b 81       	ldd	r25, Y+3	; 0x03
     8a2:	0e 94 ad 14 	call	0x295a	; 0x295a <memcpy>
     8a6:	2c 8d       	ldd	r18, Y+28	; 0x1c
     8a8:	8a 81       	ldd	r24, Y+2	; 0x02
     8aa:	9b 81       	ldd	r25, Y+3	; 0x03
     8ac:	82 0f       	add	r24, r18
     8ae:	91 1d       	adc	r25, r1
     8b0:	9b 83       	std	Y+3, r25	; 0x03
     8b2:	8a 83       	std	Y+2, r24	; 0x02
     8b4:	2c 81       	ldd	r18, Y+4	; 0x04
     8b6:	3d 81       	ldd	r19, Y+5	; 0x05
     8b8:	82 17       	cp	r24, r18
     8ba:	93 07       	cpc	r25, r19
     8bc:	50 f1       	brcs	.+84     	; 0x912 <prvCopyDataToQueue+0xa4>
     8be:	88 81       	ld	r24, Y
     8c0:	99 81       	ldd	r25, Y+1	; 0x01
     8c2:	9b 83       	std	Y+3, r25	; 0x03
     8c4:	8a 83       	std	Y+2, r24	; 0x02
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	29 c0       	rjmp	.+82     	; 0x91c <prvCopyDataToQueue+0xae>
     8ca:	50 e0       	ldi	r21, 0x00	; 0
     8cc:	8e 81       	ldd	r24, Y+6	; 0x06
     8ce:	9f 81       	ldd	r25, Y+7	; 0x07
     8d0:	0e 94 ad 14 	call	0x295a	; 0x295a <memcpy>
     8d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	91 95       	neg	r25
     8da:	81 95       	neg	r24
     8dc:	91 09       	sbc	r25, r1
     8de:	2e 81       	ldd	r18, Y+6	; 0x06
     8e0:	3f 81       	ldd	r19, Y+7	; 0x07
     8e2:	28 0f       	add	r18, r24
     8e4:	39 1f       	adc	r19, r25
     8e6:	3f 83       	std	Y+7, r19	; 0x07
     8e8:	2e 83       	std	Y+6, r18	; 0x06
     8ea:	48 81       	ld	r20, Y
     8ec:	59 81       	ldd	r21, Y+1	; 0x01
     8ee:	24 17       	cp	r18, r20
     8f0:	35 07       	cpc	r19, r21
     8f2:	30 f4       	brcc	.+12     	; 0x900 <prvCopyDataToQueue+0x92>
     8f4:	2c 81       	ldd	r18, Y+4	; 0x04
     8f6:	3d 81       	ldd	r19, Y+5	; 0x05
     8f8:	82 0f       	add	r24, r18
     8fa:	93 1f       	adc	r25, r19
     8fc:	9f 83       	std	Y+7, r25	; 0x07
     8fe:	8e 83       	std	Y+6, r24	; 0x06
     900:	02 30       	cpi	r16, 0x02	; 2
     902:	49 f4       	brne	.+18     	; 0x916 <prvCopyDataToQueue+0xa8>
     904:	11 23       	and	r17, r17
     906:	49 f0       	breq	.+18     	; 0x91a <prvCopyDataToQueue+0xac>
     908:	11 50       	subi	r17, 0x01	; 1
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	07 c0       	rjmp	.+14     	; 0x91c <prvCopyDataToQueue+0xae>
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	05 c0       	rjmp	.+10     	; 0x91c <prvCopyDataToQueue+0xae>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	03 c0       	rjmp	.+6      	; 0x91c <prvCopyDataToQueue+0xae>
     916:	80 e0       	ldi	r24, 0x00	; 0
     918:	01 c0       	rjmp	.+2      	; 0x91c <prvCopyDataToQueue+0xae>
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	1f 5f       	subi	r17, 0xFF	; 255
     91e:	1a 8f       	std	Y+26, r17	; 0x1a
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	1f 91       	pop	r17
     926:	0f 91       	pop	r16
     928:	08 95       	ret

0000092a <prvCopyDataFromQueue>:
     92a:	fc 01       	movw	r30, r24
     92c:	44 8d       	ldd	r20, Z+28	; 0x1c
     92e:	44 23       	and	r20, r20
     930:	a9 f0       	breq	.+42     	; 0x95c <prvCopyDataFromQueue+0x32>
     932:	50 e0       	ldi	r21, 0x00	; 0
     934:	26 81       	ldd	r18, Z+6	; 0x06
     936:	37 81       	ldd	r19, Z+7	; 0x07
     938:	24 0f       	add	r18, r20
     93a:	35 1f       	adc	r19, r21
     93c:	37 83       	std	Z+7, r19	; 0x07
     93e:	26 83       	std	Z+6, r18	; 0x06
     940:	84 81       	ldd	r24, Z+4	; 0x04
     942:	95 81       	ldd	r25, Z+5	; 0x05
     944:	28 17       	cp	r18, r24
     946:	39 07       	cpc	r19, r25
     948:	20 f0       	brcs	.+8      	; 0x952 <prvCopyDataFromQueue+0x28>
     94a:	80 81       	ld	r24, Z
     94c:	91 81       	ldd	r25, Z+1	; 0x01
     94e:	97 83       	std	Z+7, r25	; 0x07
     950:	86 83       	std	Z+6, r24	; 0x06
     952:	cb 01       	movw	r24, r22
     954:	66 81       	ldd	r22, Z+6	; 0x06
     956:	77 81       	ldd	r23, Z+7	; 0x07
     958:	0c 94 ad 14 	jmp	0x295a	; 0x295a <memcpy>
     95c:	08 95       	ret

0000095e <prvUnlockQueue>:
     95e:	ef 92       	push	r14
     960:	ff 92       	push	r15
     962:	0f 93       	push	r16
     964:	1f 93       	push	r17
     966:	cf 93       	push	r28
     968:	8c 01       	movw	r16, r24
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	f8 94       	cli
     96e:	0f 92       	push	r0
     970:	fc 01       	movw	r30, r24
     972:	c6 8d       	ldd	r28, Z+30	; 0x1e
     974:	1c 16       	cp	r1, r28
     976:	9c f4       	brge	.+38     	; 0x99e <prvUnlockQueue+0x40>
     978:	81 89       	ldd	r24, Z+17	; 0x11
     97a:	81 11       	cpse	r24, r1
     97c:	06 c0       	rjmp	.+12     	; 0x98a <prvUnlockQueue+0x2c>
     97e:	0f c0       	rjmp	.+30     	; 0x99e <prvUnlockQueue+0x40>
     980:	f8 01       	movw	r30, r16
     982:	81 89       	ldd	r24, Z+17	; 0x11
     984:	81 11       	cpse	r24, r1
     986:	05 c0       	rjmp	.+10     	; 0x992 <prvUnlockQueue+0x34>
     988:	0a c0       	rjmp	.+20     	; 0x99e <prvUnlockQueue+0x40>
     98a:	78 01       	movw	r14, r16
     98c:	f1 e1       	ldi	r31, 0x11	; 17
     98e:	ef 0e       	add	r14, r31
     990:	f1 1c       	adc	r15, r1
     992:	c7 01       	movw	r24, r14
     994:	c3 d5       	rcall	.+2950   	; 0x151c <xTaskRemoveFromEventList>
     996:	81 11       	cpse	r24, r1
     998:	49 d6       	rcall	.+3218   	; 0x162c <vTaskMissedYield>
     99a:	c1 50       	subi	r28, 0x01	; 1
     99c:	89 f7       	brne	.-30     	; 0x980 <prvUnlockQueue+0x22>
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	f8 01       	movw	r30, r16
     9a2:	86 8f       	std	Z+30, r24	; 0x1e
     9a4:	0f 90       	pop	r0
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	0f 92       	push	r0
     9ae:	c5 8d       	ldd	r28, Z+29	; 0x1d
     9b0:	1c 16       	cp	r1, r28
     9b2:	9c f4       	brge	.+38     	; 0x9da <prvUnlockQueue+0x7c>
     9b4:	80 85       	ldd	r24, Z+8	; 0x08
     9b6:	81 11       	cpse	r24, r1
     9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <prvUnlockQueue+0x68>
     9ba:	0f c0       	rjmp	.+30     	; 0x9da <prvUnlockQueue+0x7c>
     9bc:	f8 01       	movw	r30, r16
     9be:	80 85       	ldd	r24, Z+8	; 0x08
     9c0:	81 11       	cpse	r24, r1
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <prvUnlockQueue+0x70>
     9c4:	0a c0       	rjmp	.+20     	; 0x9da <prvUnlockQueue+0x7c>
     9c6:	78 01       	movw	r14, r16
     9c8:	f8 e0       	ldi	r31, 0x08	; 8
     9ca:	ef 0e       	add	r14, r31
     9cc:	f1 1c       	adc	r15, r1
     9ce:	c7 01       	movw	r24, r14
     9d0:	a5 d5       	rcall	.+2890   	; 0x151c <xTaskRemoveFromEventList>
     9d2:	81 11       	cpse	r24, r1
     9d4:	2b d6       	rcall	.+3158   	; 0x162c <vTaskMissedYield>
     9d6:	c1 50       	subi	r28, 0x01	; 1
     9d8:	89 f7       	brne	.-30     	; 0x9bc <prvUnlockQueue+0x5e>
     9da:	8f ef       	ldi	r24, 0xFF	; 255
     9dc:	f8 01       	movw	r30, r16
     9de:	85 8f       	std	Z+29, r24	; 0x1d
     9e0:	0f 90       	pop	r0
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	08 95       	ret

000009f0 <xQueueGenericReset>:
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	ec 01       	movw	r28, r24
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	0f 92       	push	r0
     9fc:	e8 81       	ld	r30, Y
     9fe:	f9 81       	ldd	r31, Y+1	; 0x01
     a00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a02:	2c 8d       	ldd	r18, Y+28	; 0x1c
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	82 9f       	mul	r24, r18
     a0a:	a0 01       	movw	r20, r0
     a0c:	83 9f       	mul	r24, r19
     a0e:	50 0d       	add	r21, r0
     a10:	92 9f       	mul	r25, r18
     a12:	50 0d       	add	r21, r0
     a14:	11 24       	eor	r1, r1
     a16:	4e 0f       	add	r20, r30
     a18:	5f 1f       	adc	r21, r31
     a1a:	5d 83       	std	Y+5, r21	; 0x05
     a1c:	4c 83       	std	Y+4, r20	; 0x04
     a1e:	1a 8e       	std	Y+26, r1	; 0x1a
     a20:	fb 83       	std	Y+3, r31	; 0x03
     a22:	ea 83       	std	Y+2, r30	; 0x02
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	82 9f       	mul	r24, r18
     a28:	a0 01       	movw	r20, r0
     a2a:	83 9f       	mul	r24, r19
     a2c:	50 0d       	add	r21, r0
     a2e:	92 9f       	mul	r25, r18
     a30:	50 0d       	add	r21, r0
     a32:	11 24       	eor	r1, r1
     a34:	cf 01       	movw	r24, r30
     a36:	84 0f       	add	r24, r20
     a38:	95 1f       	adc	r25, r21
     a3a:	9f 83       	std	Y+7, r25	; 0x07
     a3c:	8e 83       	std	Y+6, r24	; 0x06
     a3e:	8f ef       	ldi	r24, 0xFF	; 255
     a40:	8d 8f       	std	Y+29, r24	; 0x1d
     a42:	8e 8f       	std	Y+30, r24	; 0x1e
     a44:	61 11       	cpse	r22, r1
     a46:	0a c0       	rjmp	.+20     	; 0xa5c <xQueueGenericReset+0x6c>
     a48:	88 85       	ldd	r24, Y+8	; 0x08
     a4a:	88 23       	and	r24, r24
     a4c:	69 f0       	breq	.+26     	; 0xa68 <xQueueGenericReset+0x78>
     a4e:	ce 01       	movw	r24, r28
     a50:	08 96       	adiw	r24, 0x08	; 8
     a52:	64 d5       	rcall	.+2760   	; 0x151c <xTaskRemoveFromEventList>
     a54:	88 23       	and	r24, r24
     a56:	41 f0       	breq	.+16     	; 0xa68 <xQueueGenericReset+0x78>
     a58:	3a de       	rcall	.-908    	; 0x6ce <vPortYield>
     a5a:	06 c0       	rjmp	.+12     	; 0xa68 <xQueueGenericReset+0x78>
     a5c:	ce 01       	movw	r24, r28
     a5e:	08 96       	adiw	r24, 0x08	; 8
     a60:	fd dc       	rcall	.-1542   	; 0x45c <vListInitialise>
     a62:	ce 01       	movw	r24, r28
     a64:	41 96       	adiw	r24, 0x11	; 17
     a66:	fa dc       	rcall	.-1548   	; 0x45c <vListInitialise>
     a68:	0f 90       	pop	r0
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	08 95       	ret

00000a74 <xQueueGenericCreate>:
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	08 2f       	mov	r16, r24
     a80:	16 2f       	mov	r17, r22
     a82:	f4 2e       	mov	r15, r20
     a84:	66 23       	and	r22, r22
     a86:	b9 f0       	breq	.+46     	; 0xab6 <xQueueGenericCreate+0x42>
     a88:	86 9f       	mul	r24, r22
     a8a:	c0 01       	movw	r24, r0
     a8c:	11 24       	eor	r1, r1
     a8e:	81 96       	adiw	r24, 0x21	; 33
     a90:	c7 dc       	rcall	.-1650   	; 0x420 <pvPortMalloc>
     a92:	ec 01       	movw	r28, r24
     a94:	00 97       	sbiw	r24, 0x00	; 0
     a96:	41 f4       	brne	.+16     	; 0xaa8 <xQueueGenericCreate+0x34>
     a98:	14 c0       	rjmp	.+40     	; 0xac2 <xQueueGenericCreate+0x4e>
     a9a:	0b 8f       	std	Y+27, r16	; 0x1b
     a9c:	1c 8f       	std	Y+28, r17	; 0x1c
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	ce 01       	movw	r24, r28
     aa2:	a6 df       	rcall	.-180    	; 0x9f0 <xQueueGenericReset>
     aa4:	f8 a2       	std	Y+32, r15	; 0x20
     aa6:	0d c0       	rjmp	.+26     	; 0xac2 <xQueueGenericCreate+0x4e>
     aa8:	81 96       	adiw	r24, 0x21	; 33
     aaa:	99 83       	std	Y+1, r25	; 0x01
     aac:	88 83       	st	Y, r24
     aae:	f5 cf       	rjmp	.-22     	; 0xa9a <xQueueGenericCreate+0x26>
     ab0:	d9 83       	std	Y+1, r29	; 0x01
     ab2:	c8 83       	st	Y, r28
     ab4:	f2 cf       	rjmp	.-28     	; 0xa9a <xQueueGenericCreate+0x26>
     ab6:	81 e2       	ldi	r24, 0x21	; 33
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	b2 dc       	rcall	.-1692   	; 0x420 <pvPortMalloc>
     abc:	ec 01       	movw	r28, r24
     abe:	89 2b       	or	r24, r25
     ac0:	b9 f7       	brne	.-18     	; 0xab0 <xQueueGenericCreate+0x3c>
     ac2:	ce 01       	movw	r24, r28
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	08 95       	ret

00000ad0 <xQueueGenericSend>:
     ad0:	9f 92       	push	r9
     ad2:	af 92       	push	r10
     ad4:	bf 92       	push	r11
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	00 d0       	rcall	.+0      	; 0xae8 <xQueueGenericSend+0x18>
     ae8:	1f 92       	push	r1
     aea:	1f 92       	push	r1
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	8c 01       	movw	r16, r24
     af2:	6b 01       	movw	r12, r22
     af4:	5d 83       	std	Y+5, r21	; 0x05
     af6:	4c 83       	std	Y+4, r20	; 0x04
     af8:	a2 2e       	mov	r10, r18
     afa:	b1 2c       	mov	r11, r1
     afc:	99 24       	eor	r9, r9
     afe:	93 94       	inc	r9
     b00:	7c 01       	movw	r14, r24
     b02:	88 e0       	ldi	r24, 0x08	; 8
     b04:	e8 0e       	add	r14, r24
     b06:	f1 1c       	adc	r15, r1
     b08:	0f b6       	in	r0, 0x3f	; 63
     b0a:	f8 94       	cli
     b0c:	0f 92       	push	r0
     b0e:	f8 01       	movw	r30, r16
     b10:	92 8d       	ldd	r25, Z+26	; 0x1a
     b12:	83 8d       	ldd	r24, Z+27	; 0x1b
     b14:	98 17       	cp	r25, r24
     b16:	18 f0       	brcs	.+6      	; 0xb1e <xQueueGenericSend+0x4e>
     b18:	f2 e0       	ldi	r31, 0x02	; 2
     b1a:	af 12       	cpse	r10, r31
     b1c:	15 c0       	rjmp	.+42     	; 0xb48 <xQueueGenericSend+0x78>
     b1e:	4a 2d       	mov	r20, r10
     b20:	b6 01       	movw	r22, r12
     b22:	c8 01       	movw	r24, r16
     b24:	a4 de       	rcall	.-696    	; 0x86e <prvCopyDataToQueue>
     b26:	f8 01       	movw	r30, r16
     b28:	91 89       	ldd	r25, Z+17	; 0x11
     b2a:	99 23       	and	r25, r25
     b2c:	39 f0       	breq	.+14     	; 0xb3c <xQueueGenericSend+0x6c>
     b2e:	c8 01       	movw	r24, r16
     b30:	41 96       	adiw	r24, 0x11	; 17
     b32:	f4 d4       	rcall	.+2536   	; 0x151c <xTaskRemoveFromEventList>
     b34:	88 23       	and	r24, r24
     b36:	21 f0       	breq	.+8      	; 0xb40 <xQueueGenericSend+0x70>
     b38:	ca dd       	rcall	.-1132   	; 0x6ce <vPortYield>
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <xQueueGenericSend+0x70>
     b3c:	81 11       	cpse	r24, r1
     b3e:	c7 dd       	rcall	.-1138   	; 0x6ce <vPortYield>
     b40:	0f 90       	pop	r0
     b42:	0f be       	out	0x3f, r0	; 63
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	45 c0       	rjmp	.+138    	; 0xbd2 <xQueueGenericSend+0x102>
     b48:	8c 81       	ldd	r24, Y+4	; 0x04
     b4a:	9d 81       	ldd	r25, Y+5	; 0x05
     b4c:	89 2b       	or	r24, r25
     b4e:	21 f4       	brne	.+8      	; 0xb58 <xQueueGenericSend+0x88>
     b50:	0f 90       	pop	r0
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	3d c0       	rjmp	.+122    	; 0xbd2 <xQueueGenericSend+0x102>
     b58:	b1 10       	cpse	r11, r1
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <xQueueGenericSend+0x94>
     b5c:	ce 01       	movw	r24, r28
     b5e:	01 96       	adiw	r24, 0x01	; 1
     b60:	25 d5       	rcall	.+2634   	; 0x15ac <vTaskInternalSetTimeOutState>
     b62:	b9 2c       	mov	r11, r9
     b64:	0f 90       	pop	r0
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	d3 d2       	rcall	.+1446   	; 0x1110 <vTaskSuspendAll>
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	0f 92       	push	r0
     b70:	f8 01       	movw	r30, r16
     b72:	85 8d       	ldd	r24, Z+29	; 0x1d
     b74:	8f 3f       	cpi	r24, 0xFF	; 255
     b76:	09 f4       	brne	.+2      	; 0xb7a <xQueueGenericSend+0xaa>
     b78:	15 8e       	std	Z+29, r1	; 0x1d
     b7a:	f8 01       	movw	r30, r16
     b7c:	86 8d       	ldd	r24, Z+30	; 0x1e
     b7e:	8f 3f       	cpi	r24, 0xFF	; 255
     b80:	09 f4       	brne	.+2      	; 0xb84 <xQueueGenericSend+0xb4>
     b82:	16 8e       	std	Z+30, r1	; 0x1e
     b84:	0f 90       	pop	r0
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	be 01       	movw	r22, r28
     b8a:	6c 5f       	subi	r22, 0xFC	; 252
     b8c:	7f 4f       	sbci	r23, 0xFF	; 255
     b8e:	ce 01       	movw	r24, r28
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	17 d5       	rcall	.+2606   	; 0x15c2 <xTaskCheckForTimeOut>
     b94:	81 11       	cpse	r24, r1
     b96:	19 c0       	rjmp	.+50     	; 0xbca <xQueueGenericSend+0xfa>
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	0f 92       	push	r0
     b9e:	f8 01       	movw	r30, r16
     ba0:	92 8d       	ldd	r25, Z+26	; 0x1a
     ba2:	83 8d       	ldd	r24, Z+27	; 0x1b
     ba4:	0f 90       	pop	r0
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	98 13       	cpse	r25, r24
     baa:	0b c0       	rjmp	.+22     	; 0xbc2 <xQueueGenericSend+0xf2>
     bac:	6c 81       	ldd	r22, Y+4	; 0x04
     bae:	7d 81       	ldd	r23, Y+5	; 0x05
     bb0:	c7 01       	movw	r24, r14
     bb2:	8b d4       	rcall	.+2326   	; 0x14ca <vTaskPlaceOnEventList>
     bb4:	c8 01       	movw	r24, r16
     bb6:	d3 de       	rcall	.-602    	; 0x95e <prvUnlockQueue>
     bb8:	72 d3       	rcall	.+1764   	; 0x129e <xTaskResumeAll>
     bba:	81 11       	cpse	r24, r1
     bbc:	a5 cf       	rjmp	.-182    	; 0xb08 <xQueueGenericSend+0x38>
     bbe:	87 dd       	rcall	.-1266   	; 0x6ce <vPortYield>
     bc0:	a3 cf       	rjmp	.-186    	; 0xb08 <xQueueGenericSend+0x38>
     bc2:	c8 01       	movw	r24, r16
     bc4:	cc de       	rcall	.-616    	; 0x95e <prvUnlockQueue>
     bc6:	6b d3       	rcall	.+1750   	; 0x129e <xTaskResumeAll>
     bc8:	9f cf       	rjmp	.-194    	; 0xb08 <xQueueGenericSend+0x38>
     bca:	c8 01       	movw	r24, r16
     bcc:	c8 de       	rcall	.-624    	; 0x95e <prvUnlockQueue>
     bce:	67 d3       	rcall	.+1742   	; 0x129e <xTaskResumeAll>
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	0f 90       	pop	r0
     bd4:	0f 90       	pop	r0
     bd6:	0f 90       	pop	r0
     bd8:	0f 90       	pop	r0
     bda:	0f 90       	pop	r0
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	1f 91       	pop	r17
     be2:	0f 91       	pop	r16
     be4:	ff 90       	pop	r15
     be6:	ef 90       	pop	r14
     be8:	df 90       	pop	r13
     bea:	cf 90       	pop	r12
     bec:	bf 90       	pop	r11
     bee:	af 90       	pop	r10
     bf0:	9f 90       	pop	r9
     bf2:	08 95       	ret

00000bf4 <xQueueGenericSendFromISR>:
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
     bfc:	cf 93       	push	r28
     bfe:	df 93       	push	r29
     c00:	8a 01       	movw	r16, r20
     c02:	fc 01       	movw	r30, r24
     c04:	52 8d       	ldd	r21, Z+26	; 0x1a
     c06:	33 8d       	ldd	r19, Z+27	; 0x1b
     c08:	53 17       	cp	r21, r19
     c0a:	10 f0       	brcs	.+4      	; 0xc10 <xQueueGenericSendFromISR+0x1c>
     c0c:	22 30       	cpi	r18, 0x02	; 2
     c0e:	e1 f4       	brne	.+56     	; 0xc48 <xQueueGenericSendFromISR+0x54>
     c10:	42 2f       	mov	r20, r18
     c12:	78 01       	movw	r14, r16
     c14:	ec 01       	movw	r28, r24
     c16:	1e 8d       	ldd	r17, Y+30	; 0x1e
     c18:	2a de       	rcall	.-940    	; 0x86e <prvCopyDataToQueue>
     c1a:	1f 3f       	cpi	r17, 0xFF	; 255
     c1c:	79 f4       	brne	.+30     	; 0xc3c <xQueueGenericSendFromISR+0x48>
     c1e:	89 89       	ldd	r24, Y+17	; 0x11
     c20:	88 23       	and	r24, r24
     c22:	a1 f0       	breq	.+40     	; 0xc4c <xQueueGenericSendFromISR+0x58>
     c24:	ce 01       	movw	r24, r28
     c26:	41 96       	adiw	r24, 0x11	; 17
     c28:	79 d4       	rcall	.+2290   	; 0x151c <xTaskRemoveFromEventList>
     c2a:	88 23       	and	r24, r24
     c2c:	89 f0       	breq	.+34     	; 0xc50 <xQueueGenericSendFromISR+0x5c>
     c2e:	e1 14       	cp	r14, r1
     c30:	f1 04       	cpc	r15, r1
     c32:	81 f0       	breq	.+32     	; 0xc54 <xQueueGenericSendFromISR+0x60>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	f7 01       	movw	r30, r14
     c38:	80 83       	st	Z, r24
     c3a:	0d c0       	rjmp	.+26     	; 0xc56 <xQueueGenericSendFromISR+0x62>
     c3c:	ff 24       	eor	r15, r15
     c3e:	f3 94       	inc	r15
     c40:	f1 0e       	add	r15, r17
     c42:	fe 8e       	std	Y+30, r15	; 0x1e
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	07 c0       	rjmp	.+14     	; 0xc56 <xQueueGenericSendFromISR+0x62>
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	05 c0       	rjmp	.+10     	; 0xc56 <xQueueGenericSendFromISR+0x62>
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	03 c0       	rjmp	.+6      	; 0xc56 <xQueueGenericSendFromISR+0x62>
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	01 c0       	rjmp	.+2      	; 0xc56 <xQueueGenericSendFromISR+0x62>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	ef 90       	pop	r14
     c62:	08 95       	ret

00000c64 <xQueueReceive>:
     c64:	9f 92       	push	r9
     c66:	af 92       	push	r10
     c68:	bf 92       	push	r11
     c6a:	cf 92       	push	r12
     c6c:	df 92       	push	r13
     c6e:	ef 92       	push	r14
     c70:	ff 92       	push	r15
     c72:	0f 93       	push	r16
     c74:	1f 93       	push	r17
     c76:	cf 93       	push	r28
     c78:	df 93       	push	r29
     c7a:	00 d0       	rcall	.+0      	; 0xc7c <xQueueReceive+0x18>
     c7c:	1f 92       	push	r1
     c7e:	1f 92       	push	r1
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62
     c84:	8c 01       	movw	r16, r24
     c86:	5b 01       	movw	r10, r22
     c88:	5d 83       	std	Y+5, r21	; 0x05
     c8a:	4c 83       	std	Y+4, r20	; 0x04
     c8c:	e1 2c       	mov	r14, r1
     c8e:	99 24       	eor	r9, r9
     c90:	93 94       	inc	r9
     c92:	6c 01       	movw	r12, r24
     c94:	81 e1       	ldi	r24, 0x11	; 17
     c96:	c8 0e       	add	r12, r24
     c98:	d1 1c       	adc	r13, r1
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	0f 92       	push	r0
     ca0:	f8 01       	movw	r30, r16
     ca2:	f2 8c       	ldd	r15, Z+26	; 0x1a
     ca4:	ff 20       	and	r15, r15
     ca6:	91 f0       	breq	.+36     	; 0xccc <xQueueReceive+0x68>
     ca8:	b5 01       	movw	r22, r10
     caa:	c8 01       	movw	r24, r16
     cac:	3e de       	rcall	.-900    	; 0x92a <prvCopyDataFromQueue>
     cae:	fa 94       	dec	r15
     cb0:	f8 01       	movw	r30, r16
     cb2:	f2 8e       	std	Z+26, r15	; 0x1a
     cb4:	80 85       	ldd	r24, Z+8	; 0x08
     cb6:	88 23       	and	r24, r24
     cb8:	29 f0       	breq	.+10     	; 0xcc4 <xQueueReceive+0x60>
     cba:	c8 01       	movw	r24, r16
     cbc:	08 96       	adiw	r24, 0x08	; 8
     cbe:	2e d4       	rcall	.+2140   	; 0x151c <xTaskRemoveFromEventList>
     cc0:	81 11       	cpse	r24, r1
     cc2:	05 dd       	rcall	.-1526   	; 0x6ce <vPortYield>
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	44 c0       	rjmp	.+136    	; 0xd54 <xQueueReceive+0xf0>
     ccc:	8c 81       	ldd	r24, Y+4	; 0x04
     cce:	9d 81       	ldd	r25, Y+5	; 0x05
     cd0:	89 2b       	or	r24, r25
     cd2:	21 f4       	brne	.+8      	; 0xcdc <xQueueReceive+0x78>
     cd4:	0f 90       	pop	r0
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	3c c0       	rjmp	.+120    	; 0xd54 <xQueueReceive+0xf0>
     cdc:	e1 10       	cpse	r14, r1
     cde:	04 c0       	rjmp	.+8      	; 0xce8 <xQueueReceive+0x84>
     ce0:	ce 01       	movw	r24, r28
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	63 d4       	rcall	.+2246   	; 0x15ac <vTaskInternalSetTimeOutState>
     ce6:	e9 2c       	mov	r14, r9
     ce8:	0f 90       	pop	r0
     cea:	0f be       	out	0x3f, r0	; 63
     cec:	11 d2       	rcall	.+1058   	; 0x1110 <vTaskSuspendAll>
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	0f 92       	push	r0
     cf4:	f8 01       	movw	r30, r16
     cf6:	85 8d       	ldd	r24, Z+29	; 0x1d
     cf8:	8f 3f       	cpi	r24, 0xFF	; 255
     cfa:	09 f4       	brne	.+2      	; 0xcfe <xQueueReceive+0x9a>
     cfc:	15 8e       	std	Z+29, r1	; 0x1d
     cfe:	f8 01       	movw	r30, r16
     d00:	86 8d       	ldd	r24, Z+30	; 0x1e
     d02:	8f 3f       	cpi	r24, 0xFF	; 255
     d04:	09 f4       	brne	.+2      	; 0xd08 <xQueueReceive+0xa4>
     d06:	16 8e       	std	Z+30, r1	; 0x1e
     d08:	0f 90       	pop	r0
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	be 01       	movw	r22, r28
     d0e:	6c 5f       	subi	r22, 0xFC	; 252
     d10:	7f 4f       	sbci	r23, 0xFF	; 255
     d12:	ce 01       	movw	r24, r28
     d14:	01 96       	adiw	r24, 0x01	; 1
     d16:	55 d4       	rcall	.+2218   	; 0x15c2 <xTaskCheckForTimeOut>
     d18:	81 11       	cpse	r24, r1
     d1a:	13 c0       	rjmp	.+38     	; 0xd42 <xQueueReceive+0xde>
     d1c:	c8 01       	movw	r24, r16
     d1e:	9c dd       	rcall	.-1224   	; 0x858 <prvIsQueueEmpty>
     d20:	88 23       	and	r24, r24
     d22:	59 f0       	breq	.+22     	; 0xd3a <xQueueReceive+0xd6>
     d24:	6c 81       	ldd	r22, Y+4	; 0x04
     d26:	7d 81       	ldd	r23, Y+5	; 0x05
     d28:	c6 01       	movw	r24, r12
     d2a:	cf d3       	rcall	.+1950   	; 0x14ca <vTaskPlaceOnEventList>
     d2c:	c8 01       	movw	r24, r16
     d2e:	17 de       	rcall	.-978    	; 0x95e <prvUnlockQueue>
     d30:	b6 d2       	rcall	.+1388   	; 0x129e <xTaskResumeAll>
     d32:	81 11       	cpse	r24, r1
     d34:	b2 cf       	rjmp	.-156    	; 0xc9a <xQueueReceive+0x36>
     d36:	cb dc       	rcall	.-1642   	; 0x6ce <vPortYield>
     d38:	b0 cf       	rjmp	.-160    	; 0xc9a <xQueueReceive+0x36>
     d3a:	c8 01       	movw	r24, r16
     d3c:	10 de       	rcall	.-992    	; 0x95e <prvUnlockQueue>
     d3e:	af d2       	rcall	.+1374   	; 0x129e <xTaskResumeAll>
     d40:	ac cf       	rjmp	.-168    	; 0xc9a <xQueueReceive+0x36>
     d42:	c8 01       	movw	r24, r16
     d44:	0c de       	rcall	.-1000   	; 0x95e <prvUnlockQueue>
     d46:	ab d2       	rcall	.+1366   	; 0x129e <xTaskResumeAll>
     d48:	c8 01       	movw	r24, r16
     d4a:	86 dd       	rcall	.-1268   	; 0x858 <prvIsQueueEmpty>
     d4c:	88 23       	and	r24, r24
     d4e:	09 f4       	brne	.+2      	; 0xd52 <xQueueReceive+0xee>
     d50:	a4 cf       	rjmp	.-184    	; 0xc9a <xQueueReceive+0x36>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	0f 90       	pop	r0
     d56:	0f 90       	pop	r0
     d58:	0f 90       	pop	r0
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	1f 91       	pop	r17
     d64:	0f 91       	pop	r16
     d66:	ff 90       	pop	r15
     d68:	ef 90       	pop	r14
     d6a:	df 90       	pop	r13
     d6c:	cf 90       	pop	r12
     d6e:	bf 90       	pop	r11
     d70:	af 90       	pop	r10
     d72:	9f 90       	pop	r9
     d74:	08 95       	ret

00000d76 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     d7c:	0f b6       	in	r0, 0x3f	; 63
     d7e:	f8 94       	cli
     d80:	0f 92       	push	r0
     d82:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d84:	8f 3f       	cpi	r24, 0xFF	; 255
     d86:	09 f4       	brne	.+2      	; 0xd8a <vQueueWaitForMessageRestricted+0x14>
     d88:	1d 8e       	std	Y+29, r1	; 0x1d
     d8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d8c:	8f 3f       	cpi	r24, 0xFF	; 255
     d8e:	09 f4       	brne	.+2      	; 0xd92 <vQueueWaitForMessageRestricted+0x1c>
     d90:	1e 8e       	std	Y+30, r1	; 0x1e
     d92:	0f 90       	pop	r0
     d94:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     d96:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d98:	81 11       	cpse	r24, r1
     d9a:	03 c0       	rjmp	.+6      	; 0xda2 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     d9c:	ce 01       	movw	r24, r28
     d9e:	41 96       	adiw	r24, 0x11	; 17
     da0:	a5 d3       	rcall	.+1866   	; 0x14ec <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
     da2:	ce 01       	movw	r24, r28
     da4:	dc dd       	rcall	.-1096   	; 0x95e <prvUnlockQueue>
    }
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <prvResetNextTaskUnblockTime>:
     dac:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <pxDelayedTaskList>
     db0:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <pxDelayedTaskList+0x1>
     db4:	80 81       	ld	r24, Z
     db6:	81 11       	cpse	r24, r1
     db8:	07 c0       	rjmp	.+14     	; 0xdc8 <prvResetNextTaskUnblockTime+0x1c>
     dba:	8f ef       	ldi	r24, 0xFF	; 255
     dbc:	9f ef       	ldi	r25, 0xFF	; 255
     dbe:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <xNextTaskUnblockTime+0x1>
     dc2:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <xNextTaskUnblockTime>
     dc6:	08 95       	ret
     dc8:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <pxDelayedTaskList>
     dcc:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <pxDelayedTaskList+0x1>
     dd0:	05 80       	ldd	r0, Z+5	; 0x05
     dd2:	f6 81       	ldd	r31, Z+6	; 0x06
     dd4:	e0 2d       	mov	r30, r0
     dd6:	06 80       	ldd	r0, Z+6	; 0x06
     dd8:	f7 81       	ldd	r31, Z+7	; 0x07
     dda:	e0 2d       	mov	r30, r0
     ddc:	82 81       	ldd	r24, Z+2	; 0x02
     dde:	93 81       	ldd	r25, Z+3	; 0x03
     de0:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <xNextTaskUnblockTime+0x1>
     de4:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <xNextTaskUnblockTime>
     de8:	08 95       	ret

00000dea <prvAddCurrentTaskToDelayedList>:
     dea:	ff 92       	push	r15
     dec:	0f 93       	push	r16
     dee:	1f 93       	push	r17
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	ec 01       	movw	r28, r24
     df6:	f6 2e       	mov	r15, r22
     df8:	00 91 8d 02 	lds	r16, 0x028D	; 0x80028d <xTickCount>
     dfc:	10 91 8e 02 	lds	r17, 0x028E	; 0x80028e <xTickCount+0x1>
     e00:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <pxCurrentTCB>
     e04:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
     e08:	02 96       	adiw	r24, 0x02	; 2
     e0a:	8c db       	rcall	.-2280   	; 0x524 <uxListRemove>
     e0c:	cf 3f       	cpi	r28, 0xFF	; 255
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	d8 07       	cpc	r29, r24
     e12:	61 f4       	brne	.+24     	; 0xe2c <prvAddCurrentTaskToDelayedList+0x42>
     e14:	ff 20       	and	r15, r15
     e16:	51 f0       	breq	.+20     	; 0xe2c <prvAddCurrentTaskToDelayedList+0x42>
     e18:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <pxCurrentTCB>
     e1c:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
     e20:	6e 5f       	subi	r22, 0xFE	; 254
     e22:	7f 4f       	sbci	r23, 0xFF	; 255
     e24:	80 e9       	ldi	r24, 0x90	; 144
     e26:	92 e0       	ldi	r25, 0x02	; 2
     e28:	2b db       	rcall	.-2474   	; 0x480 <vListInsertEnd>
     e2a:	2d c0       	rjmp	.+90     	; 0xe86 <prvAddCurrentTaskToDelayedList+0x9c>
     e2c:	c0 0f       	add	r28, r16
     e2e:	d1 1f       	adc	r29, r17
     e30:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <pxCurrentTCB>
     e34:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
     e38:	d3 83       	std	Z+3, r29	; 0x03
     e3a:	c2 83       	std	Z+2, r28	; 0x02
     e3c:	c0 17       	cp	r28, r16
     e3e:	d1 07       	cpc	r29, r17
     e40:	60 f4       	brcc	.+24     	; 0xe5a <prvAddCurrentTaskToDelayedList+0x70>
     e42:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <pxCurrentTCB>
     e46:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
     e4a:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <pxOverflowDelayedTaskList>
     e4e:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <pxOverflowDelayedTaskList+0x1>
     e52:	6e 5f       	subi	r22, 0xFE	; 254
     e54:	7f 4f       	sbci	r23, 0xFF	; 255
     e56:	35 db       	rcall	.-2454   	; 0x4c2 <vListInsert>
     e58:	16 c0       	rjmp	.+44     	; 0xe86 <prvAddCurrentTaskToDelayedList+0x9c>
     e5a:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <pxCurrentTCB>
     e5e:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
     e62:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <pxDelayedTaskList>
     e66:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <pxDelayedTaskList+0x1>
     e6a:	6e 5f       	subi	r22, 0xFE	; 254
     e6c:	7f 4f       	sbci	r23, 0xFF	; 255
     e6e:	29 db       	rcall	.-2478   	; 0x4c2 <vListInsert>
     e70:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <xNextTaskUnblockTime>
     e74:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <xNextTaskUnblockTime+0x1>
     e78:	c8 17       	cp	r28, r24
     e7a:	d9 07       	cpc	r29, r25
     e7c:	20 f4       	brcc	.+8      	; 0xe86 <prvAddCurrentTaskToDelayedList+0x9c>
     e7e:	d0 93 86 02 	sts	0x0286, r29	; 0x800286 <xNextTaskUnblockTime+0x1>
     e82:	c0 93 85 02 	sts	0x0285, r28	; 0x800285 <xNextTaskUnblockTime>
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	1f 91       	pop	r17
     e8c:	0f 91       	pop	r16
     e8e:	ff 90       	pop	r15
     e90:	08 95       	ret

00000e92 <xTaskCreate>:
     e92:	4f 92       	push	r4
     e94:	5f 92       	push	r5
     e96:	6f 92       	push	r6
     e98:	7f 92       	push	r7
     e9a:	8f 92       	push	r8
     e9c:	9f 92       	push	r9
     e9e:	af 92       	push	r10
     ea0:	bf 92       	push	r11
     ea2:	cf 92       	push	r12
     ea4:	df 92       	push	r13
     ea6:	ef 92       	push	r14
     ea8:	ff 92       	push	r15
     eaa:	0f 93       	push	r16
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	4c 01       	movw	r8, r24
     eb2:	6b 01       	movw	r12, r22
     eb4:	5a 01       	movw	r10, r20
     eb6:	29 01       	movw	r4, r18
     eb8:	ca 01       	movw	r24, r20
     eba:	b2 da       	rcall	.-2716   	; 0x420 <pvPortMalloc>
     ebc:	3c 01       	movw	r6, r24
     ebe:	89 2b       	or	r24, r25
     ec0:	09 f4       	brne	.+2      	; 0xec4 <xTaskCreate+0x32>
     ec2:	e4 c0       	rjmp	.+456    	; 0x108c <xTaskCreate+0x1fa>
     ec4:	8c e2       	ldi	r24, 0x2C	; 44
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	ab da       	rcall	.-2730   	; 0x420 <pvPortMalloc>
     eca:	ec 01       	movw	r28, r24
     ecc:	89 2b       	or	r24, r25
     ece:	99 f0       	breq	.+38     	; 0xef6 <xTaskCreate+0x64>
     ed0:	78 8e       	std	Y+24, r7	; 0x18
     ed2:	6f 8a       	std	Y+23, r6	; 0x17
     ed4:	a5 01       	movw	r20, r10
     ed6:	65 ea       	ldi	r22, 0xA5	; 165
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	c3 01       	movw	r24, r6
     edc:	0e 94 b6 14 	call	0x296c	; 0x296c <memset>
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	a8 1a       	sub	r10, r24
     ee4:	b1 08       	sbc	r11, r1
     ee6:	8f 89       	ldd	r24, Y+23	; 0x17
     ee8:	98 8d       	ldd	r25, Y+24	; 0x18
     eea:	a8 0e       	add	r10, r24
     eec:	b9 1e       	adc	r11, r25
     eee:	c1 14       	cp	r12, r1
     ef0:	d1 04       	cpc	r13, r1
     ef2:	21 f4       	brne	.+8      	; 0xefc <xTaskCreate+0x6a>
     ef4:	1f c0       	rjmp	.+62     	; 0xf34 <xTaskCreate+0xa2>
     ef6:	c3 01       	movw	r24, r6
     ef8:	a4 da       	rcall	.-2744   	; 0x442 <vPortFree>
     efa:	c8 c0       	rjmp	.+400    	; 0x108c <xTaskCreate+0x1fa>
     efc:	d6 01       	movw	r26, r12
     efe:	8c 91       	ld	r24, X
     f00:	89 8f       	std	Y+25, r24	; 0x19
     f02:	8c 91       	ld	r24, X
     f04:	88 23       	and	r24, r24
     f06:	a1 f0       	breq	.+40     	; 0xf30 <xTaskCreate+0x9e>
     f08:	ae 01       	movw	r20, r28
     f0a:	46 5e       	subi	r20, 0xE6	; 230
     f0c:	5f 4f       	sbci	r21, 0xFF	; 255
     f0e:	f6 01       	movw	r30, r12
     f10:	31 96       	adiw	r30, 0x01	; 1
     f12:	b8 e0       	ldi	r27, 0x08	; 8
     f14:	cb 0e       	add	r12, r27
     f16:	d1 1c       	adc	r13, r1
     f18:	cf 01       	movw	r24, r30
     f1a:	21 91       	ld	r18, Z+
     f1c:	da 01       	movw	r26, r20
     f1e:	2d 93       	st	X+, r18
     f20:	ad 01       	movw	r20, r26
     f22:	dc 01       	movw	r26, r24
     f24:	8c 91       	ld	r24, X
     f26:	88 23       	and	r24, r24
     f28:	19 f0       	breq	.+6      	; 0xf30 <xTaskCreate+0x9e>
     f2a:	ec 15       	cp	r30, r12
     f2c:	fd 05       	cpc	r31, r13
     f2e:	a1 f7       	brne	.-24     	; 0xf18 <xTaskCreate+0x86>
     f30:	18 a2       	std	Y+32, r1	; 0x20
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <xTaskCreate+0xa4>
     f34:	19 8e       	std	Y+25, r1	; 0x19
     f36:	04 30       	cpi	r16, 0x04	; 4
     f38:	08 f0       	brcs	.+2      	; 0xf3c <xTaskCreate+0xaa>
     f3a:	03 e0       	ldi	r16, 0x03	; 3
     f3c:	0e 8b       	std	Y+22, r16	; 0x16
     f3e:	0b a3       	std	Y+35, r16	; 0x23
     f40:	1c a2       	std	Y+36, r1	; 0x24
     f42:	6e 01       	movw	r12, r28
     f44:	b2 e0       	ldi	r27, 0x02	; 2
     f46:	cb 0e       	add	r12, r27
     f48:	d1 1c       	adc	r13, r1
     f4a:	c6 01       	movw	r24, r12
     f4c:	95 da       	rcall	.-2774   	; 0x478 <vListInitialiseItem>
     f4e:	ce 01       	movw	r24, r28
     f50:	0c 96       	adiw	r24, 0x0c	; 12
     f52:	92 da       	rcall	.-2780   	; 0x478 <vListInitialiseItem>
     f54:	d9 87       	std	Y+9, r29	; 0x09
     f56:	c8 87       	std	Y+8, r28	; 0x08
     f58:	84 e0       	ldi	r24, 0x04	; 4
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	80 1b       	sub	r24, r16
     f5e:	91 09       	sbc	r25, r1
     f60:	9d 87       	std	Y+13, r25	; 0x0d
     f62:	8c 87       	std	Y+12, r24	; 0x0c
     f64:	db 8b       	std	Y+19, r29	; 0x13
     f66:	ca 8b       	std	Y+18, r28	; 0x12
     f68:	1e a2       	std	Y+38, r1	; 0x26
     f6a:	1d a2       	std	Y+37, r1	; 0x25
     f6c:	1f a2       	std	Y+39, r1	; 0x27
     f6e:	18 a6       	std	Y+40, r1	; 0x28
     f70:	19 a6       	std	Y+41, r1	; 0x29
     f72:	1a a6       	std	Y+42, r1	; 0x2a
     f74:	1b a6       	std	Y+43, r1	; 0x2b
     f76:	a2 01       	movw	r20, r4
     f78:	b4 01       	movw	r22, r8
     f7a:	c5 01       	movw	r24, r10
     f7c:	fa da       	rcall	.-2572   	; 0x572 <pxPortInitialiseStack>
     f7e:	99 83       	std	Y+1, r25	; 0x01
     f80:	88 83       	st	Y, r24
     f82:	e1 14       	cp	r14, r1
     f84:	f1 04       	cpc	r15, r1
     f86:	19 f0       	breq	.+6      	; 0xf8e <xTaskCreate+0xfc>
     f88:	f7 01       	movw	r30, r14
     f8a:	d1 83       	std	Z+1, r29	; 0x01
     f8c:	c0 83       	st	Z, r28
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	0f 92       	push	r0
     f94:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <uxCurrentNumberOfTasks>
     f98:	8f 5f       	subi	r24, 0xFF	; 255
     f9a:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <uxCurrentNumberOfTasks>
     f9e:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <pxCurrentTCB>
     fa2:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
     fa6:	89 2b       	or	r24, r25
     fa8:	89 f5       	brne	.+98     	; 0x100c <xTaskCreate+0x17a>
     faa:	d0 93 e7 02 	sts	0x02E7, r29	; 0x8002e7 <pxCurrentTCB+0x1>
     fae:	c0 93 e6 02 	sts	0x02E6, r28	; 0x8002e6 <pxCurrentTCB>
     fb2:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <uxCurrentNumberOfTasks>
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	09 f0       	breq	.+2      	; 0xfbc <xTaskCreate+0x12a>
     fba:	38 c0       	rjmp	.+112    	; 0x102c <xTaskCreate+0x19a>
     fbc:	82 ec       	ldi	r24, 0xC2	; 194
     fbe:	92 e0       	ldi	r25, 0x02	; 2
     fc0:	4d da       	rcall	.-2918   	; 0x45c <vListInitialise>
     fc2:	8b ec       	ldi	r24, 0xCB	; 203
     fc4:	92 e0       	ldi	r25, 0x02	; 2
     fc6:	4a da       	rcall	.-2924   	; 0x45c <vListInitialise>
     fc8:	84 ed       	ldi	r24, 0xD4	; 212
     fca:	92 e0       	ldi	r25, 0x02	; 2
     fcc:	47 da       	rcall	.-2930   	; 0x45c <vListInitialise>
     fce:	8d ed       	ldi	r24, 0xDD	; 221
     fd0:	92 e0       	ldi	r25, 0x02	; 2
     fd2:	44 da       	rcall	.-2936   	; 0x45c <vListInitialise>
     fd4:	89 eb       	ldi	r24, 0xB9	; 185
     fd6:	92 e0       	ldi	r25, 0x02	; 2
     fd8:	41 da       	rcall	.-2942   	; 0x45c <vListInitialise>
     fda:	80 eb       	ldi	r24, 0xB0	; 176
     fdc:	92 e0       	ldi	r25, 0x02	; 2
     fde:	3e da       	rcall	.-2948   	; 0x45c <vListInitialise>
     fe0:	83 ea       	ldi	r24, 0xA3	; 163
     fe2:	92 e0       	ldi	r25, 0x02	; 2
     fe4:	3b da       	rcall	.-2954   	; 0x45c <vListInitialise>
     fe6:	8a e9       	ldi	r24, 0x9A	; 154
     fe8:	92 e0       	ldi	r25, 0x02	; 2
     fea:	38 da       	rcall	.-2960   	; 0x45c <vListInitialise>
     fec:	80 e9       	ldi	r24, 0x90	; 144
     fee:	92 e0       	ldi	r25, 0x02	; 2
     ff0:	35 da       	rcall	.-2966   	; 0x45c <vListInitialise>
     ff2:	89 eb       	ldi	r24, 0xB9	; 185
     ff4:	92 e0       	ldi	r25, 0x02	; 2
     ff6:	90 93 af 02 	sts	0x02AF, r25	; 0x8002af <pxDelayedTaskList+0x1>
     ffa:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <pxDelayedTaskList>
     ffe:	80 eb       	ldi	r24, 0xB0	; 176
    1000:	92 e0       	ldi	r25, 0x02	; 2
    1002:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <pxOverflowDelayedTaskList+0x1>
    1006:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <pxOverflowDelayedTaskList>
    100a:	10 c0       	rjmp	.+32     	; 0x102c <xTaskCreate+0x19a>
    100c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <xSchedulerRunning>
    1010:	81 11       	cpse	r24, r1
    1012:	0c c0       	rjmp	.+24     	; 0x102c <xTaskCreate+0x19a>
    1014:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    1018:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    101c:	96 89       	ldd	r25, Z+22	; 0x16
    101e:	8e 89       	ldd	r24, Y+22	; 0x16
    1020:	89 17       	cp	r24, r25
    1022:	20 f0       	brcs	.+8      	; 0x102c <xTaskCreate+0x19a>
    1024:	d0 93 e7 02 	sts	0x02E7, r29	; 0x8002e7 <pxCurrentTCB+0x1>
    1028:	c0 93 e6 02 	sts	0x02E6, r28	; 0x8002e6 <pxCurrentTCB>
    102c:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <uxTaskNumber>
    1030:	8f 5f       	subi	r24, 0xFF	; 255
    1032:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <uxTaskNumber>
    1036:	89 a3       	std	Y+33, r24	; 0x21
    1038:	8e 89       	ldd	r24, Y+22	; 0x16
    103a:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <uxTopReadyPriority>
    103e:	98 17       	cp	r25, r24
    1040:	10 f4       	brcc	.+4      	; 0x1046 <xTaskCreate+0x1b4>
    1042:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <uxTopReadyPriority>
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	9c 01       	movw	r18, r24
    104a:	22 0f       	add	r18, r18
    104c:	33 1f       	adc	r19, r19
    104e:	22 0f       	add	r18, r18
    1050:	33 1f       	adc	r19, r19
    1052:	22 0f       	add	r18, r18
    1054:	33 1f       	adc	r19, r19
    1056:	82 0f       	add	r24, r18
    1058:	93 1f       	adc	r25, r19
    105a:	b6 01       	movw	r22, r12
    105c:	8e 53       	subi	r24, 0x3E	; 62
    105e:	9d 4f       	sbci	r25, 0xFD	; 253
    1060:	0f da       	rcall	.-3042   	; 0x480 <vListInsertEnd>
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <xSchedulerRunning>
    106a:	88 23       	and	r24, r24
    106c:	59 f0       	breq	.+22     	; 0x1084 <xTaskCreate+0x1f2>
    106e:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    1072:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    1076:	96 89       	ldd	r25, Z+22	; 0x16
    1078:	8e 89       	ldd	r24, Y+22	; 0x16
    107a:	98 17       	cp	r25, r24
    107c:	28 f4       	brcc	.+10     	; 0x1088 <xTaskCreate+0x1f6>
    107e:	27 db       	rcall	.-2482   	; 0x6ce <vPortYield>
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	05 c0       	rjmp	.+10     	; 0x108e <xTaskCreate+0x1fc>
    1084:	81 e0       	ldi	r24, 0x01	; 1
    1086:	03 c0       	rjmp	.+6      	; 0x108e <xTaskCreate+0x1fc>
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	01 c0       	rjmp	.+2      	; 0x108e <xTaskCreate+0x1fc>
    108c:	8f ef       	ldi	r24, 0xFF	; 255
    108e:	df 91       	pop	r29
    1090:	cf 91       	pop	r28
    1092:	0f 91       	pop	r16
    1094:	ff 90       	pop	r15
    1096:	ef 90       	pop	r14
    1098:	df 90       	pop	r13
    109a:	cf 90       	pop	r12
    109c:	bf 90       	pop	r11
    109e:	af 90       	pop	r10
    10a0:	9f 90       	pop	r9
    10a2:	8f 90       	pop	r8
    10a4:	7f 90       	pop	r7
    10a6:	6f 90       	pop	r6
    10a8:	5f 90       	pop	r5
    10aa:	4f 90       	pop	r4
    10ac:	08 95       	ret

000010ae <vTaskStartScheduler>:
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	0f 2e       	mov	r0, r31
    10b6:	f3 e8       	ldi	r31, 0x83	; 131
    10b8:	ef 2e       	mov	r14, r31
    10ba:	f2 e0       	ldi	r31, 0x02	; 2
    10bc:	ff 2e       	mov	r15, r31
    10be:	f0 2d       	mov	r31, r0
    10c0:	00 e0       	ldi	r16, 0x00	; 0
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 ec       	ldi	r20, 0xC0	; 192
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	6a e5       	ldi	r22, 0x5A	; 90
    10cc:	72 e0       	ldi	r23, 0x02	; 2
    10ce:	8c e7       	ldi	r24, 0x7C	; 124
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	df de       	rcall	.-578    	; 0xe92 <xTaskCreate>
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	c1 f4       	brne	.+48     	; 0x1108 <vTaskStartScheduler+0x5a>
    10d8:	52 d3       	rcall	.+1700   	; 0x177e <xTimerCreateTimerTask>
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	a9 f4       	brne	.+42     	; 0x1108 <vTaskStartScheduler+0x5a>
    10de:	f8 94       	cli
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	9f ef       	ldi	r25, 0xFF	; 255
    10e4:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <xNextTaskUnblockTime+0x1>
    10e8:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <xNextTaskUnblockTime>
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <xSchedulerRunning>
    10f2:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <xTickCount+0x1>
    10f6:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <xTickCount>
    10fa:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    10fe:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    1102:	85 a1       	ldd	r24, Z+37	; 0x25
    1104:	7d d9       	rcall	.-3334   	; 0x400 <task_switch_in>
    1106:	a7 da       	rcall	.-2738   	; 0x656 <xPortStartScheduler>
    1108:	0f 91       	pop	r16
    110a:	ff 90       	pop	r15
    110c:	ef 90       	pop	r14
    110e:	08 95       	ret

00001110 <vTaskSuspendAll>:
    1110:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
    1114:	8f 5f       	subi	r24, 0xFF	; 255
    1116:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <__data_end>
    111a:	08 95       	ret

0000111c <xTaskGetTickCount>:
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	0f 92       	push	r0
    1122:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <xTickCount>
    1126:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <xTickCount+0x1>
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	08 95       	ret

00001130 <xTaskIncrementTick>:
    1130:	cf 92       	push	r12
    1132:	df 92       	push	r13
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
    1144:	81 11       	cpse	r24, r1
    1146:	95 c0       	rjmp	.+298    	; 0x1272 <xTaskIncrementTick+0x142>
    1148:	e0 90 8d 02 	lds	r14, 0x028D	; 0x80028d <xTickCount>
    114c:	f0 90 8e 02 	lds	r15, 0x028E	; 0x80028e <xTickCount+0x1>
    1150:	8f ef       	ldi	r24, 0xFF	; 255
    1152:	e8 1a       	sub	r14, r24
    1154:	f8 0a       	sbc	r15, r24
    1156:	f0 92 8e 02 	sts	0x028E, r15	; 0x80028e <xTickCount+0x1>
    115a:	e0 92 8d 02 	sts	0x028D, r14	; 0x80028d <xTickCount>
    115e:	e1 14       	cp	r14, r1
    1160:	f1 04       	cpc	r15, r1
    1162:	b1 f4       	brne	.+44     	; 0x1190 <xTaskIncrementTick+0x60>
    1164:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <pxDelayedTaskList>
    1168:	90 91 af 02 	lds	r25, 0x02AF	; 0x8002af <pxDelayedTaskList+0x1>
    116c:	20 91 ac 02 	lds	r18, 0x02AC	; 0x8002ac <pxOverflowDelayedTaskList>
    1170:	30 91 ad 02 	lds	r19, 0x02AD	; 0x8002ad <pxOverflowDelayedTaskList+0x1>
    1174:	30 93 af 02 	sts	0x02AF, r19	; 0x8002af <pxDelayedTaskList+0x1>
    1178:	20 93 ae 02 	sts	0x02AE, r18	; 0x8002ae <pxDelayedTaskList>
    117c:	90 93 ad 02 	sts	0x02AD, r25	; 0x8002ad <pxOverflowDelayedTaskList+0x1>
    1180:	80 93 ac 02 	sts	0x02AC, r24	; 0x8002ac <pxOverflowDelayedTaskList>
    1184:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <xNumOfOverflows>
    1188:	8f 5f       	subi	r24, 0xFF	; 255
    118a:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <xNumOfOverflows>
    118e:	0e de       	rcall	.-996    	; 0xdac <prvResetNextTaskUnblockTime>
    1190:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <xNextTaskUnblockTime>
    1194:	90 91 86 02 	lds	r25, 0x0286	; 0x800286 <xNextTaskUnblockTime+0x1>
    1198:	e8 16       	cp	r14, r24
    119a:	f9 06       	cpc	r15, r25
    119c:	10 f4       	brcc	.+4      	; 0x11a2 <xTaskIncrementTick+0x72>
    119e:	d1 2c       	mov	r13, r1
    11a0:	50 c0       	rjmp	.+160    	; 0x1242 <xTaskIncrementTick+0x112>
    11a2:	d1 2c       	mov	r13, r1
    11a4:	cc 24       	eor	r12, r12
    11a6:	c3 94       	inc	r12
    11a8:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <pxDelayedTaskList>
    11ac:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <pxDelayedTaskList+0x1>
    11b0:	80 81       	ld	r24, Z
    11b2:	81 11       	cpse	r24, r1
    11b4:	07 c0       	rjmp	.+14     	; 0x11c4 <xTaskIncrementTick+0x94>
    11b6:	8f ef       	ldi	r24, 0xFF	; 255
    11b8:	9f ef       	ldi	r25, 0xFF	; 255
    11ba:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <xNextTaskUnblockTime+0x1>
    11be:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <xNextTaskUnblockTime>
    11c2:	3f c0       	rjmp	.+126    	; 0x1242 <xTaskIncrementTick+0x112>
    11c4:	e0 91 ae 02 	lds	r30, 0x02AE	; 0x8002ae <pxDelayedTaskList>
    11c8:	f0 91 af 02 	lds	r31, 0x02AF	; 0x8002af <pxDelayedTaskList+0x1>
    11cc:	05 80       	ldd	r0, Z+5	; 0x05
    11ce:	f6 81       	ldd	r31, Z+6	; 0x06
    11d0:	e0 2d       	mov	r30, r0
    11d2:	c6 81       	ldd	r28, Z+6	; 0x06
    11d4:	d7 81       	ldd	r29, Z+7	; 0x07
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	9b 81       	ldd	r25, Y+3	; 0x03
    11da:	e8 16       	cp	r14, r24
    11dc:	f9 06       	cpc	r15, r25
    11de:	28 f4       	brcc	.+10     	; 0x11ea <xTaskIncrementTick+0xba>
    11e0:	90 93 86 02 	sts	0x0286, r25	; 0x800286 <xNextTaskUnblockTime+0x1>
    11e4:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <xNextTaskUnblockTime>
    11e8:	2c c0       	rjmp	.+88     	; 0x1242 <xTaskIncrementTick+0x112>
    11ea:	8e 01       	movw	r16, r28
    11ec:	0e 5f       	subi	r16, 0xFE	; 254
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	c8 01       	movw	r24, r16
    11f2:	98 d9       	rcall	.-3280   	; 0x524 <uxListRemove>
    11f4:	8c 89       	ldd	r24, Y+20	; 0x14
    11f6:	9d 89       	ldd	r25, Y+21	; 0x15
    11f8:	89 2b       	or	r24, r25
    11fa:	19 f0       	breq	.+6      	; 0x1202 <xTaskIncrementTick+0xd2>
    11fc:	ce 01       	movw	r24, r28
    11fe:	0c 96       	adiw	r24, 0x0c	; 12
    1200:	91 d9       	rcall	.-3294   	; 0x524 <uxListRemove>
    1202:	8e 89       	ldd	r24, Y+22	; 0x16
    1204:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <uxTopReadyPriority>
    1208:	98 17       	cp	r25, r24
    120a:	10 f4       	brcc	.+4      	; 0x1210 <xTaskIncrementTick+0xe0>
    120c:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <uxTopReadyPriority>
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	9c 01       	movw	r18, r24
    1214:	22 0f       	add	r18, r18
    1216:	33 1f       	adc	r19, r19
    1218:	22 0f       	add	r18, r18
    121a:	33 1f       	adc	r19, r19
    121c:	22 0f       	add	r18, r18
    121e:	33 1f       	adc	r19, r19
    1220:	82 0f       	add	r24, r18
    1222:	93 1f       	adc	r25, r19
    1224:	b8 01       	movw	r22, r16
    1226:	8e 53       	subi	r24, 0x3E	; 62
    1228:	9d 4f       	sbci	r25, 0xFD	; 253
    122a:	2a d9       	rcall	.-3500   	; 0x480 <vListInsertEnd>
    122c:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    1230:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    1234:	9e 89       	ldd	r25, Y+22	; 0x16
    1236:	86 89       	ldd	r24, Z+22	; 0x16
    1238:	98 17       	cp	r25, r24
    123a:	08 f4       	brcc	.+2      	; 0x123e <xTaskIncrementTick+0x10e>
    123c:	b5 cf       	rjmp	.-150    	; 0x11a8 <xTaskIncrementTick+0x78>
    123e:	dc 2c       	mov	r13, r12
    1240:	b3 cf       	rjmp	.-154    	; 0x11a8 <xTaskIncrementTick+0x78>
    1242:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    1246:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    124a:	86 89       	ldd	r24, Z+22	; 0x16
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	fc 01       	movw	r30, r24
    1250:	ee 0f       	add	r30, r30
    1252:	ff 1f       	adc	r31, r31
    1254:	ee 0f       	add	r30, r30
    1256:	ff 1f       	adc	r31, r31
    1258:	ee 0f       	add	r30, r30
    125a:	ff 1f       	adc	r31, r31
    125c:	8e 0f       	add	r24, r30
    125e:	9f 1f       	adc	r25, r31
    1260:	fc 01       	movw	r30, r24
    1262:	ee 53       	subi	r30, 0x3E	; 62
    1264:	fd 4f       	sbci	r31, 0xFD	; 253
    1266:	80 81       	ld	r24, Z
    1268:	82 30       	cpi	r24, 0x02	; 2
    126a:	48 f0       	brcs	.+18     	; 0x127e <xTaskIncrementTick+0x14e>
    126c:	dd 24       	eor	r13, r13
    126e:	d3 94       	inc	r13
    1270:	06 c0       	rjmp	.+12     	; 0x127e <xTaskIncrementTick+0x14e>
    1272:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <uxPendedTicks>
    1276:	8f 5f       	subi	r24, 0xFF	; 255
    1278:	80 93 8a 02 	sts	0x028A, r24	; 0x80028a <uxPendedTicks>
    127c:	d1 2c       	mov	r13, r1
    127e:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <xYieldPending>
    1282:	88 23       	and	r24, r24
    1284:	11 f0       	breq	.+4      	; 0x128a <xTaskIncrementTick+0x15a>
    1286:	dd 24       	eor	r13, r13
    1288:	d3 94       	inc	r13
    128a:	8d 2d       	mov	r24, r13
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	ef 90       	pop	r14
    1298:	df 90       	pop	r13
    129a:	cf 90       	pop	r12
    129c:	08 95       	ret

0000129e <xTaskResumeAll>:
    129e:	df 92       	push	r13
    12a0:	ef 92       	push	r14
    12a2:	ff 92       	push	r15
    12a4:	0f 93       	push	r16
    12a6:	1f 93       	push	r17
    12a8:	cf 93       	push	r28
    12aa:	df 93       	push	r29
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	0f 92       	push	r0
    12b2:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
    12b6:	81 50       	subi	r24, 0x01	; 1
    12b8:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <__data_end>
    12bc:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
    12c0:	81 11       	cpse	r24, r1
    12c2:	59 c0       	rjmp	.+178    	; 0x1376 <xTaskResumeAll+0xd8>
    12c4:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <uxCurrentNumberOfTasks>
    12c8:	81 11       	cpse	r24, r1
    12ca:	30 c0       	rjmp	.+96     	; 0x132c <xTaskResumeAll+0x8e>
    12cc:	57 c0       	rjmp	.+174    	; 0x137c <xTaskResumeAll+0xde>
    12ce:	d7 01       	movw	r26, r14
    12d0:	15 96       	adiw	r26, 0x05	; 5
    12d2:	ed 91       	ld	r30, X+
    12d4:	fc 91       	ld	r31, X
    12d6:	16 97       	sbiw	r26, 0x06	; 6
    12d8:	c6 81       	ldd	r28, Z+6	; 0x06
    12da:	d7 81       	ldd	r29, Z+7	; 0x07
    12dc:	ce 01       	movw	r24, r28
    12de:	0c 96       	adiw	r24, 0x0c	; 12
    12e0:	21 d9       	rcall	.-3518   	; 0x524 <uxListRemove>
    12e2:	8e 01       	movw	r16, r28
    12e4:	0e 5f       	subi	r16, 0xFE	; 254
    12e6:	1f 4f       	sbci	r17, 0xFF	; 255
    12e8:	c8 01       	movw	r24, r16
    12ea:	1c d9       	rcall	.-3528   	; 0x524 <uxListRemove>
    12ec:	8e 89       	ldd	r24, Y+22	; 0x16
    12ee:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <uxTopReadyPriority>
    12f2:	98 17       	cp	r25, r24
    12f4:	10 f4       	brcc	.+4      	; 0x12fa <xTaskResumeAll+0x5c>
    12f6:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <uxTopReadyPriority>
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	9c 01       	movw	r18, r24
    12fe:	22 0f       	add	r18, r18
    1300:	33 1f       	adc	r19, r19
    1302:	22 0f       	add	r18, r18
    1304:	33 1f       	adc	r19, r19
    1306:	22 0f       	add	r18, r18
    1308:	33 1f       	adc	r19, r19
    130a:	82 0f       	add	r24, r18
    130c:	93 1f       	adc	r25, r19
    130e:	b8 01       	movw	r22, r16
    1310:	8e 53       	subi	r24, 0x3E	; 62
    1312:	9d 4f       	sbci	r25, 0xFD	; 253
    1314:	b5 d8       	rcall	.-3734   	; 0x480 <vListInsertEnd>
    1316:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    131a:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    131e:	9e 89       	ldd	r25, Y+22	; 0x16
    1320:	86 89       	ldd	r24, Z+22	; 0x16
    1322:	98 17       	cp	r25, r24
    1324:	68 f0       	brcs	.+26     	; 0x1340 <xTaskResumeAll+0xa2>
    1326:	d0 92 89 02 	sts	0x0289, r13	; 0x800289 <xYieldPending>
    132a:	0a c0       	rjmp	.+20     	; 0x1340 <xTaskResumeAll+0xa2>
    132c:	c0 e0       	ldi	r28, 0x00	; 0
    132e:	d0 e0       	ldi	r29, 0x00	; 0
    1330:	0f 2e       	mov	r0, r31
    1332:	f3 ea       	ldi	r31, 0xA3	; 163
    1334:	ef 2e       	mov	r14, r31
    1336:	f2 e0       	ldi	r31, 0x02	; 2
    1338:	ff 2e       	mov	r15, r31
    133a:	f0 2d       	mov	r31, r0
    133c:	dd 24       	eor	r13, r13
    133e:	d3 94       	inc	r13
    1340:	f7 01       	movw	r30, r14
    1342:	80 81       	ld	r24, Z
    1344:	81 11       	cpse	r24, r1
    1346:	c3 cf       	rjmp	.-122    	; 0x12ce <xTaskResumeAll+0x30>
    1348:	cd 2b       	or	r28, r29
    134a:	09 f0       	breq	.+2      	; 0x134e <xTaskResumeAll+0xb0>
    134c:	2f dd       	rcall	.-1442   	; 0xdac <prvResetNextTaskUnblockTime>
    134e:	c0 91 8a 02 	lds	r28, 0x028A	; 0x80028a <uxPendedTicks>
    1352:	cc 23       	and	r28, r28
    1354:	49 f0       	breq	.+18     	; 0x1368 <xTaskResumeAll+0xca>
    1356:	d1 e0       	ldi	r29, 0x01	; 1
    1358:	eb de       	rcall	.-554    	; 0x1130 <xTaskIncrementTick>
    135a:	81 11       	cpse	r24, r1
    135c:	d0 93 89 02 	sts	0x0289, r29	; 0x800289 <xYieldPending>
    1360:	c1 50       	subi	r28, 0x01	; 1
    1362:	d1 f7       	brne	.-12     	; 0x1358 <xTaskResumeAll+0xba>
    1364:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <uxPendedTicks>
    1368:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <xYieldPending>
    136c:	88 23       	and	r24, r24
    136e:	29 f0       	breq	.+10     	; 0x137a <xTaskResumeAll+0xdc>
    1370:	ae d9       	rcall	.-3236   	; 0x6ce <vPortYield>
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	03 c0       	rjmp	.+6      	; 0x137c <xTaskResumeAll+0xde>
    1376:	80 e0       	ldi	r24, 0x00	; 0
    1378:	01 c0       	rjmp	.+2      	; 0x137c <xTaskResumeAll+0xde>
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	0f 90       	pop	r0
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	1f 91       	pop	r17
    1386:	0f 91       	pop	r16
    1388:	ff 90       	pop	r15
    138a:	ef 90       	pop	r14
    138c:	df 90       	pop	r13
    138e:	08 95       	ret

00001390 <vTaskDelay>:
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	ec 01       	movw	r28, r24
    1396:	89 2b       	or	r24, r25
    1398:	39 f0       	breq	.+14     	; 0x13a8 <vTaskDelay+0x18>
    139a:	ba de       	rcall	.-652    	; 0x1110 <vTaskSuspendAll>
    139c:	60 e0       	ldi	r22, 0x00	; 0
    139e:	ce 01       	movw	r24, r28
    13a0:	24 dd       	rcall	.-1464   	; 0xdea <prvAddCurrentTaskToDelayedList>
    13a2:	7d df       	rcall	.-262    	; 0x129e <xTaskResumeAll>
    13a4:	81 11       	cpse	r24, r1
    13a6:	01 c0       	rjmp	.+2      	; 0x13aa <vTaskDelay+0x1a>
    13a8:	92 d9       	rcall	.-3292   	; 0x6ce <vPortYield>
    13aa:	df 91       	pop	r29
    13ac:	cf 91       	pop	r28
    13ae:	08 95       	ret

000013b0 <vTaskSwitchContext>:
    13b0:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
    13b4:	88 23       	and	r24, r24
    13b6:	21 f0       	breq	.+8      	; 0x13c0 <vTaskSwitchContext+0x10>
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <xYieldPending>
    13be:	08 95       	ret
    13c0:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <xYieldPending>
    13c4:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    13c8:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    13cc:	85 a1       	ldd	r24, Z+37	; 0x25
    13ce:	22 d8       	rcall	.-4028   	; 0x414 <task_switch_out>
    13d0:	a0 91 e6 02 	lds	r26, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    13d4:	b0 91 e7 02 	lds	r27, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    13d8:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    13dc:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    13e0:	2d 91       	ld	r18, X+
    13e2:	3c 91       	ld	r19, X
    13e4:	87 89       	ldd	r24, Z+23	; 0x17
    13e6:	90 8d       	ldd	r25, Z+24	; 0x18
    13e8:	82 17       	cp	r24, r18
    13ea:	93 07       	cpc	r25, r19
    13ec:	58 f0       	brcs	.+22     	; 0x1404 <vTaskSwitchContext+0x54>
    13ee:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    13f2:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    13f6:	80 91 e6 02 	lds	r24, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    13fa:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    13fe:	67 5e       	subi	r22, 0xE7	; 231
    1400:	7f 4f       	sbci	r23, 0xFF	; 255
    1402:	9d d2       	rcall	.+1338   	; 0x193e <vApplicationStackOverflowHook>
    1404:	20 91 8c 02 	lds	r18, 0x028C	; 0x80028c <uxTopReadyPriority>
    1408:	82 2f       	mov	r24, r18
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	fc 01       	movw	r30, r24
    140e:	ee 0f       	add	r30, r30
    1410:	ff 1f       	adc	r31, r31
    1412:	ee 0f       	add	r30, r30
    1414:	ff 1f       	adc	r31, r31
    1416:	ee 0f       	add	r30, r30
    1418:	ff 1f       	adc	r31, r31
    141a:	e8 0f       	add	r30, r24
    141c:	f9 1f       	adc	r31, r25
    141e:	ee 53       	subi	r30, 0x3E	; 62
    1420:	fd 4f       	sbci	r31, 0xFD	; 253
    1422:	30 81       	ld	r19, Z
    1424:	31 11       	cpse	r19, r1
    1426:	11 c0       	rjmp	.+34     	; 0x144a <vTaskSwitchContext+0x9a>
    1428:	21 50       	subi	r18, 0x01	; 1
    142a:	82 2f       	mov	r24, r18
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	fc 01       	movw	r30, r24
    1430:	ee 0f       	add	r30, r30
    1432:	ff 1f       	adc	r31, r31
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	ee 0f       	add	r30, r30
    143a:	ff 1f       	adc	r31, r31
    143c:	e8 0f       	add	r30, r24
    143e:	f9 1f       	adc	r31, r25
    1440:	ee 53       	subi	r30, 0x3E	; 62
    1442:	fd 4f       	sbci	r31, 0xFD	; 253
    1444:	30 81       	ld	r19, Z
    1446:	33 23       	and	r19, r19
    1448:	79 f3       	breq	.-34     	; 0x1428 <vTaskSwitchContext+0x78>
    144a:	ac 01       	movw	r20, r24
    144c:	44 0f       	add	r20, r20
    144e:	55 1f       	adc	r21, r21
    1450:	44 0f       	add	r20, r20
    1452:	55 1f       	adc	r21, r21
    1454:	44 0f       	add	r20, r20
    1456:	55 1f       	adc	r21, r21
    1458:	48 0f       	add	r20, r24
    145a:	59 1f       	adc	r21, r25
    145c:	da 01       	movw	r26, r20
    145e:	ae 53       	subi	r26, 0x3E	; 62
    1460:	bd 4f       	sbci	r27, 0xFD	; 253
    1462:	11 96       	adiw	r26, 0x01	; 1
    1464:	ed 91       	ld	r30, X+
    1466:	fc 91       	ld	r31, X
    1468:	12 97       	sbiw	r26, 0x02	; 2
    146a:	02 80       	ldd	r0, Z+2	; 0x02
    146c:	f3 81       	ldd	r31, Z+3	; 0x03
    146e:	e0 2d       	mov	r30, r0
    1470:	12 96       	adiw	r26, 0x02	; 2
    1472:	fc 93       	st	X, r31
    1474:	ee 93       	st	-X, r30
    1476:	11 97       	sbiw	r26, 0x01	; 1
    1478:	4b 53       	subi	r20, 0x3B	; 59
    147a:	5d 4f       	sbci	r21, 0xFD	; 253
    147c:	e4 17       	cp	r30, r20
    147e:	f5 07       	cpc	r31, r21
    1480:	29 f4       	brne	.+10     	; 0x148c <vTaskSwitchContext+0xdc>
    1482:	42 81       	ldd	r20, Z+2	; 0x02
    1484:	53 81       	ldd	r21, Z+3	; 0x03
    1486:	fd 01       	movw	r30, r26
    1488:	52 83       	std	Z+2, r21	; 0x02
    148a:	41 83       	std	Z+1, r20	; 0x01
    148c:	fc 01       	movw	r30, r24
    148e:	ee 0f       	add	r30, r30
    1490:	ff 1f       	adc	r31, r31
    1492:	ee 0f       	add	r30, r30
    1494:	ff 1f       	adc	r31, r31
    1496:	ee 0f       	add	r30, r30
    1498:	ff 1f       	adc	r31, r31
    149a:	8e 0f       	add	r24, r30
    149c:	9f 1f       	adc	r25, r31
    149e:	fc 01       	movw	r30, r24
    14a0:	ee 53       	subi	r30, 0x3E	; 62
    14a2:	fd 4f       	sbci	r31, 0xFD	; 253
    14a4:	01 80       	ldd	r0, Z+1	; 0x01
    14a6:	f2 81       	ldd	r31, Z+2	; 0x02
    14a8:	e0 2d       	mov	r30, r0
    14aa:	86 81       	ldd	r24, Z+6	; 0x06
    14ac:	97 81       	ldd	r25, Z+7	; 0x07
    14ae:	90 93 e7 02 	sts	0x02E7, r25	; 0x8002e7 <pxCurrentTCB+0x1>
    14b2:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <pxCurrentTCB>
    14b6:	20 93 8c 02 	sts	0x028C, r18	; 0x80028c <uxTopReadyPriority>
    14ba:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    14be:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    14c2:	85 a1       	ldd	r24, Z+37	; 0x25
    14c4:	0c 94 00 02 	jmp	0x400	; 0x400 <task_switch_in>
    14c8:	08 95       	ret

000014ca <vTaskPlaceOnEventList>:
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	eb 01       	movw	r28, r22
    14d0:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    14d4:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    14d8:	64 5f       	subi	r22, 0xF4	; 244
    14da:	7f 4f       	sbci	r23, 0xFF	; 255
    14dc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInsert>
    14e0:	61 e0       	ldi	r22, 0x01	; 1
    14e2:	ce 01       	movw	r24, r28
    14e4:	82 dc       	rcall	.-1788   	; 0xdea <prvAddCurrentTaskToDelayedList>
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	08 95       	ret

000014ec <vTaskPlaceOnEventListRestricted>:
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	8b 01       	movw	r16, r22
    14f4:	c4 2f       	mov	r28, r20
    14f6:	60 91 e6 02 	lds	r22, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    14fa:	70 91 e7 02 	lds	r23, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    14fe:	64 5f       	subi	r22, 0xF4	; 244
    1500:	7f 4f       	sbci	r23, 0xFF	; 255
    1502:	0e 94 40 02 	call	0x480	; 0x480 <vListInsertEnd>
    1506:	cc 23       	and	r28, r28
    1508:	11 f0       	breq	.+4      	; 0x150e <vTaskPlaceOnEventListRestricted+0x22>
    150a:	0f ef       	ldi	r16, 0xFF	; 255
    150c:	1f ef       	ldi	r17, 0xFF	; 255
    150e:	6c 2f       	mov	r22, r28
    1510:	c8 01       	movw	r24, r16
    1512:	6b dc       	rcall	.-1834   	; 0xdea <prvAddCurrentTaskToDelayedList>
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	08 95       	ret

0000151c <xTaskRemoveFromEventList>:
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	dc 01       	movw	r26, r24
    1526:	15 96       	adiw	r26, 0x05	; 5
    1528:	ed 91       	ld	r30, X+
    152a:	fc 91       	ld	r31, X
    152c:	16 97       	sbiw	r26, 0x06	; 6
    152e:	c6 81       	ldd	r28, Z+6	; 0x06
    1530:	d7 81       	ldd	r29, Z+7	; 0x07
    1532:	8e 01       	movw	r16, r28
    1534:	04 5f       	subi	r16, 0xF4	; 244
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	c8 01       	movw	r24, r16
    153a:	0e 94 92 02 	call	0x524	; 0x524 <uxListRemove>
    153e:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
    1542:	81 11       	cpse	r24, r1
    1544:	1c c0       	rjmp	.+56     	; 0x157e <xTaskRemoveFromEventList+0x62>
    1546:	0a 50       	subi	r16, 0x0A	; 10
    1548:	11 09       	sbc	r17, r1
    154a:	c8 01       	movw	r24, r16
    154c:	0e 94 92 02 	call	0x524	; 0x524 <uxListRemove>
    1550:	8e 89       	ldd	r24, Y+22	; 0x16
    1552:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <uxTopReadyPriority>
    1556:	98 17       	cp	r25, r24
    1558:	10 f4       	brcc	.+4      	; 0x155e <xTaskRemoveFromEventList+0x42>
    155a:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <uxTopReadyPriority>
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	9c 01       	movw	r18, r24
    1562:	22 0f       	add	r18, r18
    1564:	33 1f       	adc	r19, r19
    1566:	22 0f       	add	r18, r18
    1568:	33 1f       	adc	r19, r19
    156a:	22 0f       	add	r18, r18
    156c:	33 1f       	adc	r19, r19
    156e:	82 0f       	add	r24, r18
    1570:	93 1f       	adc	r25, r19
    1572:	b8 01       	movw	r22, r16
    1574:	8e 53       	subi	r24, 0x3E	; 62
    1576:	9d 4f       	sbci	r25, 0xFD	; 253
    1578:	0e 94 40 02 	call	0x480	; 0x480 <vListInsertEnd>
    157c:	05 c0       	rjmp	.+10     	; 0x1588 <xTaskRemoveFromEventList+0x6c>
    157e:	b8 01       	movw	r22, r16
    1580:	83 ea       	ldi	r24, 0xA3	; 163
    1582:	92 e0       	ldi	r25, 0x02	; 2
    1584:	0e 94 40 02 	call	0x480	; 0x480 <vListInsertEnd>
    1588:	e0 91 e6 02 	lds	r30, 0x02E6	; 0x8002e6 <pxCurrentTCB>
    158c:	f0 91 e7 02 	lds	r31, 0x02E7	; 0x8002e7 <pxCurrentTCB+0x1>
    1590:	9e 89       	ldd	r25, Y+22	; 0x16
    1592:	86 89       	ldd	r24, Z+22	; 0x16
    1594:	89 17       	cp	r24, r25
    1596:	20 f4       	brcc	.+8      	; 0x15a0 <xTaskRemoveFromEventList+0x84>
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <xYieldPending>
    159e:	01 c0       	rjmp	.+2      	; 0x15a2 <xTaskRemoveFromEventList+0x86>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	08 95       	ret

000015ac <vTaskInternalSetTimeOutState>:
    15ac:	20 91 88 02 	lds	r18, 0x0288	; 0x800288 <xNumOfOverflows>
    15b0:	fc 01       	movw	r30, r24
    15b2:	20 83       	st	Z, r18
    15b4:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <xTickCount>
    15b8:	30 91 8e 02 	lds	r19, 0x028E	; 0x80028e <xTickCount+0x1>
    15bc:	32 83       	std	Z+2, r19	; 0x02
    15be:	21 83       	std	Z+1, r18	; 0x01
    15c0:	08 95       	ret

000015c2 <xTaskCheckForTimeOut>:
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	f8 94       	cli
    15ca:	0f 92       	push	r0
    15cc:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <xTickCount>
    15d0:	30 91 8e 02 	lds	r19, 0x028E	; 0x80028e <xTickCount+0x1>
    15d4:	db 01       	movw	r26, r22
    15d6:	4d 91       	ld	r20, X+
    15d8:	5c 91       	ld	r21, X
    15da:	4f 3f       	cpi	r20, 0xFF	; 255
    15dc:	bf ef       	ldi	r27, 0xFF	; 255
    15de:	5b 07       	cpc	r21, r27
    15e0:	e9 f0       	breq	.+58     	; 0x161c <xTaskCheckForTimeOut+0x5a>
    15e2:	ec 01       	movw	r28, r24
    15e4:	e9 81       	ldd	r30, Y+1	; 0x01
    15e6:	fa 81       	ldd	r31, Y+2	; 0x02
    15e8:	a0 91 88 02 	lds	r26, 0x0288	; 0x800288 <xNumOfOverflows>
    15ec:	b8 81       	ld	r27, Y
    15ee:	ba 17       	cp	r27, r26
    15f0:	19 f0       	breq	.+6      	; 0x15f8 <xTaskCheckForTimeOut+0x36>
    15f2:	2e 17       	cp	r18, r30
    15f4:	3f 07       	cpc	r19, r31
    15f6:	a0 f4       	brcc	.+40     	; 0x1620 <xTaskCheckForTimeOut+0x5e>
    15f8:	2e 1b       	sub	r18, r30
    15fa:	3f 0b       	sbc	r19, r31
    15fc:	24 17       	cp	r18, r20
    15fe:	35 07       	cpc	r19, r21
    1600:	40 f4       	brcc	.+16     	; 0x1612 <xTaskCheckForTimeOut+0x50>
    1602:	fb 01       	movw	r30, r22
    1604:	42 1b       	sub	r20, r18
    1606:	53 0b       	sbc	r21, r19
    1608:	51 83       	std	Z+1, r21	; 0x01
    160a:	40 83       	st	Z, r20
    160c:	cf df       	rcall	.-98     	; 0x15ac <vTaskInternalSetTimeOutState>
    160e:	80 e0       	ldi	r24, 0x00	; 0
    1610:	08 c0       	rjmp	.+16     	; 0x1622 <xTaskCheckForTimeOut+0x60>
    1612:	fb 01       	movw	r30, r22
    1614:	11 82       	std	Z+1, r1	; 0x01
    1616:	10 82       	st	Z, r1
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	03 c0       	rjmp	.+6      	; 0x1622 <xTaskCheckForTimeOut+0x60>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <xTaskCheckForTimeOut+0x60>
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	08 95       	ret

0000162c <vTaskMissedYield>:
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <xYieldPending>
    1632:	08 95       	ret

00001634 <xTaskGetSchedulerState>:
    1634:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <xSchedulerRunning>
    1638:	88 23       	and	r24, r24
    163a:	31 f0       	breq	.+12     	; 0x1648 <xTaskGetSchedulerState+0x14>
    163c:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <__data_end>
    1640:	88 23       	and	r24, r24
    1642:	21 f0       	breq	.+8      	; 0x164c <xTaskGetSchedulerState+0x18>
    1644:	80 e0       	ldi	r24, 0x00	; 0
    1646:	08 95       	ret
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	08 95       	ret
    164c:	82 e0       	ldi	r24, 0x02	; 2
    164e:	08 95       	ret

00001650 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	df 93       	push	r29
    1658:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    165a:	89 2b       	or	r24, r25
    165c:	79 f1       	breq	.+94     	; 0x16bc <xTaskPriorityDisinherit+0x6c>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    165e:	84 a1       	ldd	r24, Z+36	; 0x24
    1660:	81 50       	subi	r24, 0x01	; 1
    1662:	84 a3       	std	Z+36, r24	; 0x24

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    1664:	26 89       	ldd	r18, Z+22	; 0x16
    1666:	93 a1       	ldd	r25, Z+35	; 0x23
    1668:	29 17       	cp	r18, r25
    166a:	51 f1       	breq	.+84     	; 0x16c0 <xTaskPriorityDisinherit+0x70>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    166c:	81 11       	cpse	r24, r1
    166e:	2a c0       	rjmp	.+84     	; 0x16c4 <xTaskPriorityDisinherit+0x74>
    1670:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    1672:	8f 01       	movw	r16, r30
    1674:	0e 5f       	subi	r16, 0xFE	; 254
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	c8 01       	movw	r24, r16
    167a:	0e 94 92 02 	call	0x524	; 0x524 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    167e:	8b a1       	ldd	r24, Y+35	; 0x23
    1680:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1682:	24 e0       	ldi	r18, 0x04	; 4
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	28 1b       	sub	r18, r24
    1688:	31 09       	sbc	r19, r1
    168a:	3d 87       	std	Y+13, r19	; 0x0d
    168c:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    168e:	90 91 8c 02 	lds	r25, 0x028C	; 0x80028c <uxTopReadyPriority>
    1692:	98 17       	cp	r25, r24
    1694:	10 f4       	brcc	.+4      	; 0x169a <xTaskPriorityDisinherit+0x4a>
    1696:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <uxTopReadyPriority>
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	9c 01       	movw	r18, r24
    169e:	22 0f       	add	r18, r18
    16a0:	33 1f       	adc	r19, r19
    16a2:	22 0f       	add	r18, r18
    16a4:	33 1f       	adc	r19, r19
    16a6:	22 0f       	add	r18, r18
    16a8:	33 1f       	adc	r19, r19
    16aa:	82 0f       	add	r24, r18
    16ac:	93 1f       	adc	r25, r19
    16ae:	b8 01       	movw	r22, r16
    16b0:	8e 53       	subi	r24, 0x3E	; 62
    16b2:	9d 4f       	sbci	r25, 0xFD	; 253
    16b4:	0e 94 40 02 	call	0x480	; 0x480 <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	05 c0       	rjmp	.+10     	; 0x16c6 <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    16bc:	80 e0       	ldi	r24, 0x00	; 0
    16be:	03 c0       	rjmp	.+6      	; 0x16c6 <xTaskPriorityDisinherit+0x76>
    16c0:	80 e0       	ldi	r24, 0x00	; 0
    16c2:	01 c0       	rjmp	.+2      	; 0x16c6 <xTaskPriorityDisinherit+0x76>
    16c4:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	08 95       	ret

000016d0 <prvInsertTimerInActiveList>:
    16d0:	fc 01       	movw	r30, r24
    16d2:	73 83       	std	Z+3, r23	; 0x03
    16d4:	62 83       	std	Z+2, r22	; 0x02
    16d6:	91 87       	std	Z+9, r25	; 0x09
    16d8:	80 87       	std	Z+8, r24	; 0x08
    16da:	46 17       	cp	r20, r22
    16dc:	57 07       	cpc	r21, r23
    16de:	90 f0       	brcs	.+36     	; 0x1704 <prvInsertTimerInActiveList+0x34>
    16e0:	42 1b       	sub	r20, r18
    16e2:	53 0b       	sbc	r21, r19
    16e4:	84 85       	ldd	r24, Z+12	; 0x0c
    16e6:	95 85       	ldd	r25, Z+13	; 0x0d
    16e8:	48 17       	cp	r20, r24
    16ea:	59 07       	cpc	r21, r25
    16ec:	e0 f4       	brcc	.+56     	; 0x1726 <prvInsertTimerInActiveList+0x56>
    16ee:	bf 01       	movw	r22, r30
    16f0:	6e 5f       	subi	r22, 0xFE	; 254
    16f2:	7f 4f       	sbci	r23, 0xFF	; 255
    16f4:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <pxOverflowTimerList>
    16f8:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <pxOverflowTimerList+0x1>
    16fc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInsert>
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	08 95       	ret
    1704:	42 17       	cp	r20, r18
    1706:	53 07       	cpc	r21, r19
    1708:	18 f4       	brcc	.+6      	; 0x1710 <prvInsertTimerInActiveList+0x40>
    170a:	62 17       	cp	r22, r18
    170c:	73 07       	cpc	r23, r19
    170e:	68 f4       	brcc	.+26     	; 0x172a <prvInsertTimerInActiveList+0x5a>
    1710:	bf 01       	movw	r22, r30
    1712:	6e 5f       	subi	r22, 0xFE	; 254
    1714:	7f 4f       	sbci	r23, 0xFF	; 255
    1716:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <pxCurrentTimerList>
    171a:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <pxCurrentTimerList+0x1>
    171e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInsert>
    1722:	80 e0       	ldi	r24, 0x00	; 0
    1724:	08 95       	ret
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	08 95       	ret
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	08 95       	ret

0000172e <prvCheckForValidListAndQueue>:
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	0f 92       	push	r0
    1734:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <xTimerQueue>
    1738:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <xTimerQueue+0x1>
    173c:	89 2b       	or	r24, r25
    173e:	e1 f4       	brne	.+56     	; 0x1778 <prvCheckForValidListAndQueue+0x4a>
    1740:	8b ef       	ldi	r24, 0xFB	; 251
    1742:	92 e0       	ldi	r25, 0x02	; 2
    1744:	0e 94 2e 02 	call	0x45c	; 0x45c <vListInitialise>
    1748:	82 ef       	ldi	r24, 0xF2	; 242
    174a:	92 e0       	ldi	r25, 0x02	; 2
    174c:	0e 94 2e 02 	call	0x45c	; 0x45c <vListInitialise>
    1750:	8b ef       	ldi	r24, 0xFB	; 251
    1752:	92 e0       	ldi	r25, 0x02	; 2
    1754:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <pxCurrentTimerList+0x1>
    1758:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <pxCurrentTimerList>
    175c:	82 ef       	ldi	r24, 0xF2	; 242
    175e:	92 e0       	ldi	r25, 0x02	; 2
    1760:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <pxOverflowTimerList+0x1>
    1764:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <pxOverflowTimerList>
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	65 e0       	ldi	r22, 0x05	; 5
    176c:	8a e0       	ldi	r24, 0x0A	; 10
    176e:	82 d9       	rcall	.-3324   	; 0xa74 <xQueueGenericCreate>
    1770:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <xTimerQueue+0x1>
    1774:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <xTimerQueue>
    1778:	0f 90       	pop	r0
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	08 95       	ret

0000177e <xTimerCreateTimerTask>:
    177e:	ef 92       	push	r14
    1780:	ff 92       	push	r15
    1782:	0f 93       	push	r16
    1784:	d4 df       	rcall	.-88     	; 0x172e <prvCheckForValidListAndQueue>
    1786:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <xTimerQueue>
    178a:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <xTimerQueue+0x1>
    178e:	89 2b       	or	r24, r25
    1790:	89 f0       	breq	.+34     	; 0x17b4 <xTimerCreateTimerTask+0x36>
    1792:	0f 2e       	mov	r0, r31
    1794:	fa ee       	ldi	r31, 0xEA	; 234
    1796:	ef 2e       	mov	r14, r31
    1798:	f2 e0       	ldi	r31, 0x02	; 2
    179a:	ff 2e       	mov	r15, r31
    179c:	f0 2d       	mov	r31, r0
    179e:	03 e0       	ldi	r16, 0x03	; 3
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	45 e5       	ldi	r20, 0x55	; 85
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	6f e5       	ldi	r22, 0x5F	; 95
    17aa:	72 e0       	ldi	r23, 0x02	; 2
    17ac:	82 eb       	ldi	r24, 0xB2	; 178
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	70 db       	rcall	.-2336   	; 0xe92 <xTaskCreate>
    17b2:	01 c0       	rjmp	.+2      	; 0x17b6 <xTimerCreateTimerTask+0x38>
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	0f 91       	pop	r16
    17b8:	ff 90       	pop	r15
    17ba:	ef 90       	pop	r14
    17bc:	08 95       	ret

000017be <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    17be:	0f 93       	push	r16
    17c0:	1f 93       	push	r17
    17c2:	cf 93       	push	r28
    17c4:	df 93       	push	r29
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <xTimerGenericCommand+0xa>
    17c8:	1f 92       	push	r1
    17ca:	1f 92       	push	r1
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    17d0:	e0 91 ec 02 	lds	r30, 0x02EC	; 0x8002ec <xTimerQueue>
    17d4:	f0 91 ed 02 	lds	r31, 0x02ED	; 0x8002ed <xTimerQueue+0x1>
    17d8:	30 97       	sbiw	r30, 0x00	; 0
    17da:	51 f1       	breq	.+84     	; 0x1830 <xTimerGenericCommand+0x72>
    17dc:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    17de:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    17e0:	5b 83       	std	Y+3, r21	; 0x03
    17e2:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    17e4:	9d 83       	std	Y+5, r25	; 0x05
    17e6:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    17e8:	66 30       	cpi	r22, 0x06	; 6
    17ea:	d4 f4       	brge	.+52     	; 0x1820 <xTimerGenericCommand+0x62>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    17ec:	23 df       	rcall	.-442    	; 0x1634 <xTaskGetSchedulerState>
    17ee:	82 30       	cpi	r24, 0x02	; 2
    17f0:	59 f4       	brne	.+22     	; 0x1808 <xTimerGenericCommand+0x4a>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	a8 01       	movw	r20, r16
    17f6:	be 01       	movw	r22, r28
    17f8:	6f 5f       	subi	r22, 0xFF	; 255
    17fa:	7f 4f       	sbci	r23, 0xFF	; 255
    17fc:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <xTimerQueue>
    1800:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <xTimerQueue+0x1>
    1804:	65 d9       	rcall	.-3382   	; 0xad0 <xQueueGenericSend>
    1806:	15 c0       	rjmp	.+42     	; 0x1832 <xTimerGenericCommand+0x74>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	40 e0       	ldi	r20, 0x00	; 0
    180c:	50 e0       	ldi	r21, 0x00	; 0
    180e:	be 01       	movw	r22, r28
    1810:	6f 5f       	subi	r22, 0xFF	; 255
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <xTimerQueue>
    1818:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <xTimerQueue+0x1>
    181c:	59 d9       	rcall	.-3406   	; 0xad0 <xQueueGenericSend>
    181e:	09 c0       	rjmp	.+18     	; 0x1832 <xTimerGenericCommand+0x74>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	ad 01       	movw	r20, r26
    1824:	be 01       	movw	r22, r28
    1826:	6f 5f       	subi	r22, 0xFF	; 255
    1828:	7f 4f       	sbci	r23, 0xFF	; 255
    182a:	cf 01       	movw	r24, r30
    182c:	e3 d9       	rcall	.-3130   	; 0xbf4 <xQueueGenericSendFromISR>
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <xTimerGenericCommand+0x74>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    1830:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	08 95       	ret

00001846 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    1846:	af 92       	push	r10
    1848:	bf 92       	push	r11
    184a:	cf 92       	push	r12
    184c:	df 92       	push	r13
    184e:	ef 92       	push	r14
    1850:	ff 92       	push	r15
    1852:	0f 93       	push	r16
    1854:	1f 93       	push	r17
    1856:	cf 93       	push	r28
    1858:	df 93       	push	r29
    185a:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    185c:	5f dc       	rcall	.-1858   	; 0x111c <xTaskGetTickCount>
    185e:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    1860:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <xLastTime.2432>
    1864:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <xLastTime.2432+0x1>
    1868:	e8 16       	cp	r14, r24
    186a:	f9 06       	cpc	r15, r25
    186c:	08 f0       	brcs	.+2      	; 0x1870 <prvSampleTimeNow+0x2a>
    186e:	47 c0       	rjmp	.+142    	; 0x18fe <prvSampleTimeNow+0xb8>
    1870:	2f c0       	rjmp	.+94     	; 0x18d0 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1872:	05 80       	ldd	r0, Z+5	; 0x05
    1874:	f6 81       	ldd	r31, Z+6	; 0x06
    1876:	e0 2d       	mov	r30, r0
    1878:	a0 80       	ld	r10, Z
    187a:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    187c:	c6 81       	ldd	r28, Z+6	; 0x06
    187e:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1880:	8e 01       	movw	r16, r28
    1882:	0e 5f       	subi	r16, 0xFE	; 254
    1884:	1f 4f       	sbci	r17, 0xFF	; 255
    1886:	c8 01       	movw	r24, r16
    1888:	0e 94 92 02 	call	0x524	; 0x524 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    188c:	e8 89       	ldd	r30, Y+16	; 0x10
    188e:	f9 89       	ldd	r31, Y+17	; 0x11
    1890:	ce 01       	movw	r24, r28
    1892:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1894:	8b 89       	ldd	r24, Y+19	; 0x13
    1896:	82 ff       	sbrs	r24, 2
    1898:	1b c0       	rjmp	.+54     	; 0x18d0 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    189a:	8c 85       	ldd	r24, Y+12	; 0x0c
    189c:	9d 85       	ldd	r25, Y+13	; 0x0d
    189e:	8a 0d       	add	r24, r10
    18a0:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    18a2:	a8 16       	cp	r10, r24
    18a4:	b9 06       	cpc	r11, r25
    18a6:	60 f4       	brcc	.+24     	; 0x18c0 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    18a8:	9b 83       	std	Y+3, r25	; 0x03
    18aa:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    18ac:	d9 87       	std	Y+9, r29	; 0x09
    18ae:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    18b0:	b8 01       	movw	r22, r16
    18b2:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <pxCurrentTimerList>
    18b6:	90 91 f1 02 	lds	r25, 0x02F1	; 0x8002f1 <pxCurrentTimerList+0x1>
    18ba:	0e 94 61 02 	call	0x4c2	; 0x4c2 <vListInsert>
    18be:	08 c0       	rjmp	.+16     	; 0x18d0 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    18c0:	00 e0       	ldi	r16, 0x00	; 0
    18c2:	10 e0       	ldi	r17, 0x00	; 0
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	a5 01       	movw	r20, r10
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	ce 01       	movw	r24, r28
    18ce:	77 df       	rcall	.-274    	; 0x17be <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    18d0:	e0 91 f0 02 	lds	r30, 0x02F0	; 0x8002f0 <pxCurrentTimerList>
    18d4:	f0 91 f1 02 	lds	r31, 0x02F1	; 0x8002f1 <pxCurrentTimerList+0x1>
    18d8:	80 81       	ld	r24, Z
    18da:	81 11       	cpse	r24, r1
    18dc:	ca cf       	rjmp	.-108    	; 0x1872 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    18de:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <pxOverflowTimerList>
    18e2:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <pxOverflowTimerList+0x1>
    18e6:	90 93 f1 02 	sts	0x02F1, r25	; 0x8002f1 <pxCurrentTimerList+0x1>
    18ea:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    18ee:	f0 93 ef 02 	sts	0x02EF, r31	; 0x8002ef <pxOverflowTimerList+0x1>
    18f2:	e0 93 ee 02 	sts	0x02EE, r30	; 0x8002ee <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	f6 01       	movw	r30, r12
    18fa:	80 83       	st	Z, r24
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    18fe:	f6 01       	movw	r30, r12
    1900:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    1902:	f0 92 e9 02 	sts	0x02E9, r15	; 0x8002e9 <xLastTime.2432+0x1>
    1906:	e0 92 e8 02 	sts	0x02E8, r14	; 0x8002e8 <xLastTime.2432>

    return xTimeNow;
}
    190a:	c7 01       	movw	r24, r14
    190c:	df 91       	pop	r29
    190e:	cf 91       	pop	r28
    1910:	1f 91       	pop	r17
    1912:	0f 91       	pop	r16
    1914:	ff 90       	pop	r15
    1916:	ef 90       	pop	r14
    1918:	df 90       	pop	r13
    191a:	cf 90       	pop	r12
    191c:	bf 90       	pop	r11
    191e:	af 90       	pop	r10
    1920:	08 95       	ret

00001922 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    1922:	08 95       	ret

00001924 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    1924:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1926:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1928:	2f ef       	ldi	r18, 0xFF	; 255
    192a:	80 e7       	ldi	r24, 0x70	; 112
    192c:	92 e0       	ldi	r25, 0x02	; 2
    192e:	21 50       	subi	r18, 0x01	; 1
    1930:	80 40       	sbci	r24, 0x00	; 0
    1932:	90 40       	sbci	r25, 0x00	; 0
    1934:	e1 f7       	brne	.-8      	; 0x192e <vApplicationMallocFailedHook+0xa>
    1936:	00 c0       	rjmp	.+0      	; 0x1938 <vApplicationMallocFailedHook+0x14>
    1938:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    193a:	1f 9a       	sbi	0x03, 7	; 3
    193c:	f5 cf       	rjmp	.-22     	; 0x1928 <vApplicationMallocFailedHook+0x4>

0000193e <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    193e:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1940:	2f 9a       	sbi	0x05, 7	; 5
    1942:	2f ef       	ldi	r18, 0xFF	; 255
    1944:	87 ea       	ldi	r24, 0xA7	; 167
    1946:	91 e6       	ldi	r25, 0x61	; 97
    1948:	21 50       	subi	r18, 0x01	; 1
    194a:	80 40       	sbci	r24, 0x00	; 0
    194c:	90 40       	sbci	r25, 0x00	; 0
    194e:	e1 f7       	brne	.-8      	; 0x1948 <vApplicationStackOverflowHook+0xa>
    1950:	00 c0       	rjmp	.+0      	; 0x1952 <vApplicationStackOverflowHook+0x14>
    1952:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1954:	1f 9a       	sbi	0x03, 7	; 3
    1956:	f5 cf       	rjmp	.-22     	; 0x1942 <vApplicationStackOverflowHook+0x4>

00001958 <main>:
#include "myTasks.h"


int main(void)
{
	DDRA |= _BV(DDA0) | _BV(DDA7);
    1958:	81 b1       	in	r24, 0x01	; 1
    195a:	81 68       	ori	r24, 0x81	; 129
    195c:	81 b9       	out	0x01, r24	; 1
	trace_init();
    195e:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <trace_init>
	
	stdioCreate(0);
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	84 d4       	rcall	.+2312   	; 0x226e <stdioCreate>

	co2_sensor_init();
    1966:	0e 94 e6 01 	call	0x3cc	; 0x3cc <co2_sensor_init>
	
	create_tasks();
	
	vTaskStartScheduler(); // initialize and run the freeRTOS scheduler. Execution should never return here.
    196a:	15 d0       	rcall	.+42     	; 0x1996 <create_tasks>
    196c:	a0 db       	rcall	.-2240   	; 0x10ae <vTaskStartScheduler>
    196e:	ff cf       	rjmp	.-2      	; 0x196e <main+0x16>

00001970 <co2_measure_task>:
	(void)pvParameters;
	
	while(1) {
		
		co2_measure();
		printf("CO2 value = %i \n", co2_get_value());
    1970:	c7 e6       	ldi	r28, 0x67	; 103
    1972:	d2 e0       	ldi	r29, 0x02	; 2
	// remove compiler warnings
	(void)pvParameters;
	
	while(1) {
		
		co2_measure();
    1974:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <co2_measure>
		printf("CO2 value = %i \n", co2_get_value());
    1978:	0e 94 f5 01 	call	0x3ea	; 0x3ea <co2_get_value>
    197c:	9f 93       	push	r25
    197e:	8f 93       	push	r24
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	fa d7       	rcall	.+4084   	; 0x297a <printf>
		
		vTaskDelay(pdMS_TO_TICKS(5000));
    1986:	8f e2       	ldi	r24, 0x2F	; 47
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	02 dd       	rcall	.-1532   	; 0x1390 <vTaskDelay>
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	ef cf       	rjmp	.-34     	; 0x1974 <co2_measure_task+0x4>

00001996 <create_tasks>:
#include "myTasks.h"
#include "co2Sensor.h"

void create_tasks(void) {
    1996:	ef 92       	push	r14
    1998:	ff 92       	push	r15
    199a:	0f 93       	push	r16
	
	xTaskCreate(
    199c:	0f 2e       	mov	r0, r31
    199e:	fb e1       	ldi	r31, 0x1B	; 27
    19a0:	ef 2e       	mov	r14, r31
    19a2:	f3 e0       	ldi	r31, 0x03	; 3
    19a4:	ff 2e       	mov	r15, r31
    19a6:	f0 2d       	mov	r31, r0
    19a8:	02 e0       	ldi	r16, 0x02	; 2
    19aa:	21 e0       	ldi	r18, 0x01	; 1
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 ec       	ldi	r20, 0xC0	; 192
    19b0:	50 e0       	ldi	r21, 0x00	; 0
    19b2:	68 e7       	ldi	r22, 0x78	; 120
    19b4:	72 e0       	ldi	r23, 0x02	; 2
    19b6:	88 eb       	ldi	r24, 0xB8	; 184
    19b8:	9c e0       	ldi	r25, 0x0C	; 12
    19ba:	6b da       	rcall	.-2858   	; 0xe92 <xTaskCreate>
		configMINIMAL_STACK_SIZE,
		(void*) 1,
		2,
		&xCO2MeasureTask
	);
}
    19bc:	0f 91       	pop	r16
    19be:	ff 90       	pop	r15
    19c0:	ef 90       	pop	r14
    19c2:	08 95       	ret

000019c4 <_serial_call_back>:
    19c4:	80 91 07 03 	lds	r24, 0x0307	; 0x800307 <crc_sum.1941>
    19c8:	86 0f       	add	r24, r22
    19ca:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <crc_sum.1941>
    19ce:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <_mh_state>
    19d2:	91 30       	cpi	r25, 0x01	; 1
    19d4:	79 f0       	breq	.+30     	; 0x19f4 <_serial_call_back+0x30>
    19d6:	28 f0       	brcs	.+10     	; 0x19e2 <_serial_call_back+0x1e>
    19d8:	92 30       	cpi	r25, 0x02	; 2
    19da:	a9 f0       	breq	.+42     	; 0x1a06 <_serial_call_back+0x42>
    19dc:	93 30       	cpi	r25, 0x03	; 3
    19de:	19 f1       	breq	.+70     	; 0x1a26 <_serial_call_back+0x62>
    19e0:	08 95       	ret
    19e2:	6f 3f       	cpi	r22, 0xFF	; 255
    19e4:	09 f0       	breq	.+2      	; 0x19e8 <_serial_call_back+0x24>
    19e6:	48 c0       	rjmp	.+144    	; 0x1a78 <_serial_call_back+0xb4>
    19e8:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <crc_sum.1941>
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <_mh_state>
    19f2:	08 95       	ret
    19f4:	66 38       	cpi	r22, 0x86	; 134
    19f6:	09 f0       	breq	.+2      	; 0x19fa <_serial_call_back+0x36>
    19f8:	3f c0       	rjmp	.+126    	; 0x1a78 <_serial_call_back+0xb4>
    19fa:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <inDex.1939>
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <_mh_state>
    1a04:	08 95       	ret
    1a06:	e0 91 06 03 	lds	r30, 0x0306	; 0x800306 <inDex.1939>
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	8e 0f       	add	r24, r30
    1a0e:	80 93 06 03 	sts	0x0306, r24	; 0x800306 <inDex.1939>
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	ec 5f       	subi	r30, 0xFC	; 252
    1a16:	fc 4f       	sbci	r31, 0xFC	; 252
    1a18:	60 83       	st	Z, r22
    1a1a:	82 30       	cpi	r24, 0x02	; 2
    1a1c:	69 f5       	brne	.+90     	; 0x1a78 <_serial_call_back+0xb4>
    1a1e:	83 e0       	ldi	r24, 0x03	; 3
    1a20:	80 93 0a 03 	sts	0x030A, r24	; 0x80030a <_mh_state>
    1a24:	08 95       	ret
    1a26:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <inDex.1939>
    1a2a:	21 e0       	ldi	r18, 0x01	; 1
    1a2c:	29 0f       	add	r18, r25
    1a2e:	20 93 06 03 	sts	0x0306, r18	; 0x800306 <inDex.1939>
    1a32:	96 30       	cpi	r25, 0x06	; 6
    1a34:	09 f5       	brne	.+66     	; 0x1a78 <_serial_call_back+0xb4>
    1a36:	81 11       	cpse	r24, r1
    1a38:	0e c0       	rjmp	.+28     	; 0x1a56 <_serial_call_back+0x92>
    1a3a:	e4 e0       	ldi	r30, 0x04	; 4
    1a3c:	f3 e0       	ldi	r31, 0x03	; 3
    1a3e:	80 81       	ld	r24, Z
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	98 2f       	mov	r25, r24
    1a44:	88 27       	eor	r24, r24
    1a46:	21 81       	ldd	r18, Z+1	; 0x01
    1a48:	82 0f       	add	r24, r18
    1a4a:	91 1d       	adc	r25, r1
    1a4c:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <_ppm+0x1>
    1a50:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <_ppm>
    1a54:	04 c0       	rjmp	.+8      	; 0x1a5e <_serial_call_back+0x9a>
    1a56:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <_ppm+0x1>
    1a5a:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <_ppm>
    1a5e:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <_mh_state>
    1a62:	e0 91 08 03 	lds	r30, 0x0308	; 0x800308 <_app_call_back>
    1a66:	f0 91 09 03 	lds	r31, 0x0309	; 0x800309 <_app_call_back+0x1>
    1a6a:	30 97       	sbiw	r30, 0x00	; 0
    1a6c:	29 f0       	breq	.+10     	; 0x1a78 <_serial_call_back+0xb4>
    1a6e:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <_ppm>
    1a72:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <_ppm+0x1>
    1a76:	19 95       	eicall
    1a78:	08 95       	ret

00001a7a <mh_z19_create>:
    1a7a:	8f 92       	push	r8
    1a7c:	9f 92       	push	r9
    1a7e:	af 92       	push	r10
    1a80:	cf 92       	push	r12
    1a82:	ef 92       	push	r14
    1a84:	0f 93       	push	r16
    1a86:	cf 93       	push	r28
    1a88:	df 93       	push	r29
    1a8a:	eb 01       	movw	r28, r22
    1a8c:	0f 2e       	mov	r0, r31
    1a8e:	f2 ee       	ldi	r31, 0xE2	; 226
    1a90:	8f 2e       	mov	r8, r31
    1a92:	fc e0       	ldi	r31, 0x0C	; 12
    1a94:	9f 2e       	mov	r9, r31
    1a96:	f0 2d       	mov	r31, r0
    1a98:	68 94       	set
    1a9a:	aa 24       	eor	r10, r10
    1a9c:	a4 f8       	bld	r10, 4
    1a9e:	68 94       	set
    1aa0:	cc 24       	eor	r12, r12
    1aa2:	c4 f8       	bld	r12, 4
    1aa4:	e1 2c       	mov	r14, r1
    1aa6:	00 e0       	ldi	r16, 0x00	; 0
    1aa8:	23 e0       	ldi	r18, 0x03	; 3
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	55 e2       	ldi	r21, 0x25	; 37
    1aae:	60 e0       	ldi	r22, 0x00	; 0
    1ab0:	70 e0       	ldi	r23, 0x00	; 0
    1ab2:	40 d0       	rcall	.+128    	; 0x1b34 <serial_new_instance>
    1ab4:	90 93 0e 03 	sts	0x030E, r25	; 0x80030e <_serial+0x1>
    1ab8:	80 93 0d 03 	sts	0x030D, r24	; 0x80030d <_serial>
    1abc:	d0 93 09 03 	sts	0x0309, r29	; 0x800309 <_app_call_back+0x1>
    1ac0:	c0 93 08 03 	sts	0x0308, r28	; 0x800308 <_app_call_back>
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	0f 91       	pop	r16
    1aca:	ef 90       	pop	r14
    1acc:	cf 90       	pop	r12
    1ace:	af 90       	pop	r10
    1ad0:	9f 90       	pop	r9
    1ad2:	8f 90       	pop	r8
    1ad4:	08 95       	ret

00001ad6 <mh_z19_take_meassuring>:
    1ad6:	cf 93       	push	r28
    1ad8:	df 93       	push	r29
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	29 97       	sbiw	r28, 0x09	; 9
    1ae0:	0f b6       	in	r0, 0x3f	; 63
    1ae2:	f8 94       	cli
    1ae4:	de bf       	out	0x3e, r29	; 62
    1ae6:	0f be       	out	0x3f, r0	; 63
    1ae8:	cd bf       	out	0x3d, r28	; 61
    1aea:	89 e0       	ldi	r24, 0x09	; 9
    1aec:	ec e1       	ldi	r30, 0x1C	; 28
    1aee:	f2 e0       	ldi	r31, 0x02	; 2
    1af0:	9e 01       	movw	r18, r28
    1af2:	2f 5f       	subi	r18, 0xFF	; 255
    1af4:	3f 4f       	sbci	r19, 0xFF	; 255
    1af6:	d9 01       	movw	r26, r18
    1af8:	01 90       	ld	r0, Z+
    1afa:	0d 92       	st	X+, r0
    1afc:	8a 95       	dec	r24
    1afe:	e1 f7       	brne	.-8      	; 0x1af8 <mh_z19_take_meassuring+0x22>
    1b00:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <_ppm+0x1>
    1b04:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <_ppm>
    1b08:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <_serial>
    1b0c:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <_serial+0x1>
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	31 f0       	breq	.+12     	; 0x1b20 <mh_z19_take_meassuring+0x4a>
    1b14:	42 2f       	mov	r20, r18
    1b16:	53 2f       	mov	r21, r19
    1b18:	69 e0       	ldi	r22, 0x09	; 9
    1b1a:	c7 d0       	rcall	.+398    	; 0x1caa <serial_send_bytes>
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	01 c0       	rjmp	.+2      	; 0x1b22 <mh_z19_take_meassuring+0x4c>
    1b20:	82 e0       	ldi	r24, 0x02	; 2
    1b22:	29 96       	adiw	r28, 0x09	; 9
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	df 91       	pop	r29
    1b30:	cf 91       	pop	r28
    1b32:	08 95       	ret

00001b34 <serial_new_instance>:
    1b34:	2f 92       	push	r2
    1b36:	3f 92       	push	r3
    1b38:	4f 92       	push	r4
    1b3a:	5f 92       	push	r5
    1b3c:	6f 92       	push	r6
    1b3e:	7f 92       	push	r7
    1b40:	8f 92       	push	r8
    1b42:	9f 92       	push	r9
    1b44:	af 92       	push	r10
    1b46:	cf 92       	push	r12
    1b48:	ef 92       	push	r14
    1b4a:	ff 92       	push	r15
    1b4c:	0f 93       	push	r16
    1b4e:	1f 93       	push	r17
    1b50:	cf 93       	push	r28
    1b52:	df 93       	push	r29
    1b54:	cd b7       	in	r28, 0x3d	; 61
    1b56:	de b7       	in	r29, 0x3e	; 62
    1b58:	f8 2e       	mov	r15, r24
    1b5a:	2a 01       	movw	r4, r20
    1b5c:	3b 01       	movw	r6, r22
    1b5e:	88 e0       	ldi	r24, 0x08	; 8
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	d6 d5       	rcall	.+2988   	; 0x2710 <malloc>
    1b64:	8c 01       	movw	r16, r24
    1b66:	8f 2d       	mov	r24, r15
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	fc 01       	movw	r30, r24
    1b70:	e1 5f       	subi	r30, 0xF1	; 241
    1b72:	fc 4f       	sbci	r31, 0xFC	; 252
    1b74:	11 83       	std	Z+1, r17	; 0x01
    1b76:	00 83       	st	Z, r16
    1b78:	fc 01       	movw	r30, r24
    1b7a:	ea 5f       	subi	r30, 0xFA	; 250
    1b7c:	fd 4f       	sbci	r31, 0xFD	; 253
    1b7e:	80 81       	ld	r24, Z
    1b80:	91 81       	ldd	r25, Z+1	; 0x01
    1b82:	d8 01       	movw	r26, r16
    1b84:	8d 93       	st	X+, r24
    1b86:	9c 93       	st	X, r25
    1b88:	6c 2d       	mov	r22, r12
    1b8a:	70 e0       	ldi	r23, 0x00	; 0
    1b8c:	84 e0       	ldi	r24, 0x04	; 4
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a5 d5       	rcall	.+2890   	; 0x26dc <calloc>
    1b92:	1c 01       	movw	r2, r24
    1b94:	61 e0       	ldi	r22, 0x01	; 1
    1b96:	70 e0       	ldi	r23, 0x00	; 0
    1b98:	86 e0       	ldi	r24, 0x06	; 6
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	9f d5       	rcall	.+2878   	; 0x26dc <calloc>
    1b9e:	7c 01       	movw	r14, r24
    1ba0:	4c 2d       	mov	r20, r12
    1ba2:	b1 01       	movw	r22, r2
    1ba4:	8d d3       	rcall	.+1818   	; 0x22c0 <fifo_init>
    1ba6:	f8 01       	movw	r30, r16
    1ba8:	f5 82       	std	Z+5, r15	; 0x05
    1baa:	e4 82       	std	Z+4, r14	; 0x04
    1bac:	6a 2d       	mov	r22, r10
    1bae:	70 e0       	ldi	r23, 0x00	; 0
    1bb0:	84 e0       	ldi	r24, 0x04	; 4
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	93 d5       	rcall	.+2854   	; 0x26dc <calloc>
    1bb6:	1c 01       	movw	r2, r24
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	86 e0       	ldi	r24, 0x06	; 6
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	8d d5       	rcall	.+2842   	; 0x26dc <calloc>
    1bc2:	7c 01       	movw	r14, r24
    1bc4:	4a 2d       	mov	r20, r10
    1bc6:	b1 01       	movw	r22, r2
    1bc8:	7b d3       	rcall	.+1782   	; 0x22c0 <fifo_init>
    1bca:	d8 01       	movw	r26, r16
    1bcc:	13 96       	adiw	r26, 0x03	; 3
    1bce:	fc 92       	st	X, r15
    1bd0:	ee 92       	st	-X, r14
    1bd2:	12 97       	sbiw	r26, 0x02	; 2
    1bd4:	17 96       	adiw	r26, 0x07	; 7
    1bd6:	9c 92       	st	X, r9
    1bd8:	8e 92       	st	-X, r8
    1bda:	16 97       	sbiw	r26, 0x06	; 6
    1bdc:	ff b6       	in	r15, 0x3f	; 63
    1bde:	f8 94       	cli
    1be0:	ed 91       	ld	r30, X+
    1be2:	fc 91       	ld	r31, X
    1be4:	11 97       	sbiw	r26, 0x01	; 1
    1be6:	36 97       	sbiw	r30, 0x06	; 6
    1be8:	80 81       	ld	r24, Z
    1bea:	82 60       	ori	r24, 0x02	; 2
    1bec:	80 83       	st	Z, r24
    1bee:	8d 90       	ld	r8, X+
    1bf0:	9c 90       	ld	r9, X
    1bf2:	c3 01       	movw	r24, r6
    1bf4:	b2 01       	movw	r22, r4
    1bf6:	79 d4       	rcall	.+2290   	; 0x24ea <__floatunsisf>
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e0       	ldi	r20, 0x00	; 0
    1bfe:	51 e4       	ldi	r21, 0x41	; 65
    1c00:	02 d5       	rcall	.+2564   	; 0x2606 <__mulsf3>
    1c02:	9b 01       	movw	r18, r22
    1c04:	ac 01       	movw	r20, r24
    1c06:	60 e0       	ldi	r22, 0x00	; 0
    1c08:	74 e2       	ldi	r23, 0x24	; 36
    1c0a:	84 e7       	ldi	r24, 0x74	; 116
    1c0c:	9b e4       	ldi	r25, 0x4B	; 75
    1c0e:	d9 d3       	rcall	.+1970   	; 0x23c2 <__divsf3>
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e8       	ldi	r20, 0x80	; 128
    1c16:	5f e3       	ldi	r21, 0x3F	; 63
    1c18:	6f d3       	rcall	.+1758   	; 0x22f8 <__subsf3>
    1c1a:	3b d4       	rcall	.+2166   	; 0x2492 <__fixunssfsi>
    1c1c:	f4 01       	movw	r30, r8
    1c1e:	32 97       	sbiw	r30, 0x02	; 2
    1c20:	60 83       	st	Z, r22
    1c22:	d8 01       	movw	r26, r16
    1c24:	ed 91       	ld	r30, X+
    1c26:	fc 91       	ld	r31, X
    1c28:	11 97       	sbiw	r26, 0x01	; 1
    1c2a:	35 97       	sbiw	r30, 0x05	; 5
    1c2c:	88 e9       	ldi	r24, 0x98	; 152
    1c2e:	80 83       	st	Z, r24
    1c30:	ed 91       	ld	r30, X+
    1c32:	fc 91       	ld	r31, X
    1c34:	34 97       	sbiw	r30, 0x04	; 4
    1c36:	86 e0       	ldi	r24, 0x06	; 6
    1c38:	80 83       	st	Z, r24
    1c3a:	ff be       	out	0x3f, r15	; 63
    1c3c:	c8 01       	movw	r24, r16
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	ff 90       	pop	r15
    1c48:	ef 90       	pop	r14
    1c4a:	cf 90       	pop	r12
    1c4c:	af 90       	pop	r10
    1c4e:	9f 90       	pop	r9
    1c50:	8f 90       	pop	r8
    1c52:	7f 90       	pop	r7
    1c54:	6f 90       	pop	r6
    1c56:	5f 90       	pop	r5
    1c58:	4f 90       	pop	r4
    1c5a:	3f 90       	pop	r3
    1c5c:	2f 90       	pop	r2
    1c5e:	08 95       	ret

00001c60 <serial_send_byte>:
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	ec 01       	movw	r28, r24
    1c66:	ea 81       	ldd	r30, Y+2	; 0x02
    1c68:	fb 81       	ldd	r31, Y+3	; 0x03
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	25 81       	ldd	r18, Z+5	; 0x05
    1c70:	98 1b       	sub	r25, r24
    1c72:	92 23       	and	r25, r18
    1c74:	84 81       	ldd	r24, Z+4	; 0x04
    1c76:	98 17       	cp	r25, r24
    1c78:	a1 f0       	breq	.+40     	; 0x1ca2 <serial_send_byte+0x42>
    1c7a:	93 81       	ldd	r25, Z+3	; 0x03
    1c7c:	26 95       	lsr	r18
    1c7e:	29 23       	and	r18, r25
    1c80:	a0 81       	ld	r26, Z
    1c82:	b1 81       	ldd	r27, Z+1	; 0x01
    1c84:	a2 0f       	add	r26, r18
    1c86:	b1 1d       	adc	r27, r1
    1c88:	6c 93       	st	X, r22
    1c8a:	9f 5f       	subi	r25, 0xFF	; 255
    1c8c:	25 81       	ldd	r18, Z+5	; 0x05
    1c8e:	92 23       	and	r25, r18
    1c90:	93 83       	std	Z+3, r25	; 0x03
    1c92:	e8 81       	ld	r30, Y
    1c94:	f9 81       	ldd	r31, Y+1	; 0x01
    1c96:	35 97       	sbiw	r30, 0x05	; 5
    1c98:	80 81       	ld	r24, Z
    1c9a:	80 62       	ori	r24, 0x20	; 32
    1c9c:	80 83       	st	Z, r24
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	01 c0       	rjmp	.+2      	; 0x1ca4 <serial_send_byte+0x44>
    1ca2:	82 e0       	ldi	r24, 0x02	; 2
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	08 95       	ret

00001caa <serial_send_bytes>:
    1caa:	ef 92       	push	r14
    1cac:	ff 92       	push	r15
    1cae:	0f 93       	push	r16
    1cb0:	1f 93       	push	r17
    1cb2:	cf 93       	push	r28
    1cb4:	df 93       	push	r29
    1cb6:	7c 01       	movw	r14, r24
    1cb8:	dc 01       	movw	r26, r24
    1cba:	12 96       	adiw	r26, 0x02	; 2
    1cbc:	ed 91       	ld	r30, X+
    1cbe:	fc 91       	ld	r31, X
    1cc0:	13 97       	sbiw	r26, 0x03	; 3
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	82 81       	ldd	r24, Z+2	; 0x02
    1cc6:	98 1b       	sub	r25, r24
    1cc8:	85 81       	ldd	r24, Z+5	; 0x05
    1cca:	98 23       	and	r25, r24
    1ccc:	84 81       	ldd	r24, Z+4	; 0x04
    1cce:	89 1b       	sub	r24, r25
    1cd0:	86 17       	cp	r24, r22
    1cd2:	98 f1       	brcs	.+102    	; 0x1d3a <serial_send_bytes+0x90>
    1cd4:	66 23       	and	r22, r22
    1cd6:	41 f1       	breq	.+80     	; 0x1d28 <serial_send_bytes+0x7e>
    1cd8:	84 2f       	mov	r24, r20
    1cda:	95 2f       	mov	r25, r21
    1cdc:	dc 01       	movw	r26, r24
    1cde:	61 50       	subi	r22, 0x01	; 1
    1ce0:	46 2f       	mov	r20, r22
    1ce2:	50 e0       	ldi	r21, 0x00	; 0
    1ce4:	4f 5f       	subi	r20, 0xFF	; 255
    1ce6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ce8:	48 0f       	add	r20, r24
    1cea:	59 1f       	adc	r21, r25
    1cec:	e7 01       	movw	r28, r14
    1cee:	ea 81       	ldd	r30, Y+2	; 0x02
    1cf0:	fb 81       	ldd	r31, Y+3	; 0x03
    1cf2:	93 81       	ldd	r25, Z+3	; 0x03
    1cf4:	82 81       	ldd	r24, Z+2	; 0x02
    1cf6:	25 81       	ldd	r18, Z+5	; 0x05
    1cf8:	98 1b       	sub	r25, r24
    1cfa:	92 23       	and	r25, r18
    1cfc:	84 81       	ldd	r24, Z+4	; 0x04
    1cfe:	98 17       	cp	r25, r24
    1d00:	79 f0       	breq	.+30     	; 0x1d20 <serial_send_bytes+0x76>
    1d02:	8c 91       	ld	r24, X
    1d04:	93 81       	ldd	r25, Z+3	; 0x03
    1d06:	26 95       	lsr	r18
    1d08:	29 23       	and	r18, r25
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	8b 01       	movw	r16, r22
    1d10:	02 0f       	add	r16, r18
    1d12:	11 1d       	adc	r17, r1
    1d14:	e8 01       	movw	r28, r16
    1d16:	88 83       	st	Y, r24
    1d18:	9f 5f       	subi	r25, 0xFF	; 255
    1d1a:	85 81       	ldd	r24, Z+5	; 0x05
    1d1c:	98 23       	and	r25, r24
    1d1e:	93 83       	std	Z+3, r25	; 0x03
    1d20:	11 96       	adiw	r26, 0x01	; 1
    1d22:	a4 17       	cp	r26, r20
    1d24:	b5 07       	cpc	r27, r21
    1d26:	11 f7       	brne	.-60     	; 0x1cec <serial_send_bytes+0x42>
    1d28:	d7 01       	movw	r26, r14
    1d2a:	ed 91       	ld	r30, X+
    1d2c:	fc 91       	ld	r31, X
    1d2e:	35 97       	sbiw	r30, 0x05	; 5
    1d30:	80 81       	ld	r24, Z
    1d32:	80 62       	ori	r24, 0x20	; 32
    1d34:	80 83       	st	Z, r24
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <serial_send_bytes+0x92>
    1d3a:	82 e0       	ldi	r24, 0x02	; 2
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	ff 90       	pop	r15
    1d46:	ef 90       	pop	r14
    1d48:	08 95       	ret

00001d4a <serial_get_byte>:
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	14 96       	adiw	r26, 0x04	; 4
    1d4e:	ed 91       	ld	r30, X+
    1d50:	fc 91       	ld	r31, X
    1d52:	15 97       	sbiw	r26, 0x05	; 5
    1d54:	93 81       	ldd	r25, Z+3	; 0x03
    1d56:	82 81       	ldd	r24, Z+2	; 0x02
    1d58:	98 17       	cp	r25, r24
    1d5a:	89 f0       	breq	.+34     	; 0x1d7e <serial_get_byte+0x34>
    1d5c:	92 81       	ldd	r25, Z+2	; 0x02
    1d5e:	85 81       	ldd	r24, Z+5	; 0x05
    1d60:	86 95       	lsr	r24
    1d62:	89 23       	and	r24, r25
    1d64:	a0 81       	ld	r26, Z
    1d66:	b1 81       	ldd	r27, Z+1	; 0x01
    1d68:	a8 0f       	add	r26, r24
    1d6a:	b1 1d       	adc	r27, r1
    1d6c:	8c 91       	ld	r24, X
    1d6e:	db 01       	movw	r26, r22
    1d70:	8c 93       	st	X, r24
    1d72:	9f 5f       	subi	r25, 0xFF	; 255
    1d74:	85 81       	ldd	r24, Z+5	; 0x05
    1d76:	98 23       	and	r25, r24
    1d78:	92 83       	std	Z+2, r25	; 0x02
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	08 95       	ret
    1d7e:	83 e0       	ldi	r24, 0x03	; 3
    1d80:	08 95       	ret

00001d82 <__vector_25>:
    1d82:	1f 92       	push	r1
    1d84:	0f 92       	push	r0
    1d86:	0f b6       	in	r0, 0x3f	; 63
    1d88:	0f 92       	push	r0
    1d8a:	11 24       	eor	r1, r1
    1d8c:	0b b6       	in	r0, 0x3b	; 59
    1d8e:	0f 92       	push	r0
    1d90:	2f 93       	push	r18
    1d92:	3f 93       	push	r19
    1d94:	4f 93       	push	r20
    1d96:	5f 93       	push	r21
    1d98:	6f 93       	push	r22
    1d9a:	7f 93       	push	r23
    1d9c:	8f 93       	push	r24
    1d9e:	9f 93       	push	r25
    1da0:	af 93       	push	r26
    1da2:	bf 93       	push	r27
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	ef 93       	push	r30
    1daa:	ff 93       	push	r31
    1dac:	a0 91 0f 03 	lds	r26, 0x030F	; 0x80030f <_ser_handle>
    1db0:	b0 91 10 03 	lds	r27, 0x0310	; 0x800310 <_ser_handle+0x1>
    1db4:	10 97       	sbiw	r26, 0x00	; 0
    1db6:	11 f1       	breq	.+68     	; 0x1dfc <__vector_25+0x7a>
    1db8:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1dbc:	14 96       	adiw	r26, 0x04	; 4
    1dbe:	ed 91       	ld	r30, X+
    1dc0:	fc 91       	ld	r31, X
    1dc2:	15 97       	sbiw	r26, 0x05	; 5
    1dc4:	93 81       	ldd	r25, Z+3	; 0x03
    1dc6:	82 81       	ldd	r24, Z+2	; 0x02
    1dc8:	25 81       	ldd	r18, Z+5	; 0x05
    1dca:	98 1b       	sub	r25, r24
    1dcc:	92 23       	and	r25, r18
    1dce:	84 81       	ldd	r24, Z+4	; 0x04
    1dd0:	98 17       	cp	r25, r24
    1dd2:	61 f0       	breq	.+24     	; 0x1dec <__vector_25+0x6a>
    1dd4:	83 81       	ldd	r24, Z+3	; 0x03
    1dd6:	26 95       	lsr	r18
    1dd8:	28 23       	and	r18, r24
    1dda:	c0 81       	ld	r28, Z
    1ddc:	d1 81       	ldd	r29, Z+1	; 0x01
    1dde:	c2 0f       	add	r28, r18
    1de0:	d1 1d       	adc	r29, r1
    1de2:	68 83       	st	Y, r22
    1de4:	8f 5f       	subi	r24, 0xFF	; 255
    1de6:	95 81       	ldd	r25, Z+5	; 0x05
    1de8:	89 23       	and	r24, r25
    1dea:	83 83       	std	Z+3, r24	; 0x03
    1dec:	16 96       	adiw	r26, 0x06	; 6
    1dee:	ed 91       	ld	r30, X+
    1df0:	fc 91       	ld	r31, X
    1df2:	17 97       	sbiw	r26, 0x07	; 7
    1df4:	30 97       	sbiw	r30, 0x00	; 0
    1df6:	11 f0       	breq	.+4      	; 0x1dfc <__vector_25+0x7a>
    1df8:	cd 01       	movw	r24, r26
    1dfa:	19 95       	eicall
    1dfc:	ff 91       	pop	r31
    1dfe:	ef 91       	pop	r30
    1e00:	df 91       	pop	r29
    1e02:	cf 91       	pop	r28
    1e04:	bf 91       	pop	r27
    1e06:	af 91       	pop	r26
    1e08:	9f 91       	pop	r25
    1e0a:	8f 91       	pop	r24
    1e0c:	7f 91       	pop	r23
    1e0e:	6f 91       	pop	r22
    1e10:	5f 91       	pop	r21
    1e12:	4f 91       	pop	r20
    1e14:	3f 91       	pop	r19
    1e16:	2f 91       	pop	r18
    1e18:	0f 90       	pop	r0
    1e1a:	0b be       	out	0x3b, r0	; 59
    1e1c:	0f 90       	pop	r0
    1e1e:	0f be       	out	0x3f, r0	; 63
    1e20:	0f 90       	pop	r0
    1e22:	1f 90       	pop	r1
    1e24:	18 95       	reti

00001e26 <__vector_26>:
    1e26:	1f 92       	push	r1
    1e28:	0f 92       	push	r0
    1e2a:	0f b6       	in	r0, 0x3f	; 63
    1e2c:	0f 92       	push	r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	0b b6       	in	r0, 0x3b	; 59
    1e32:	0f 92       	push	r0
    1e34:	2f 93       	push	r18
    1e36:	8f 93       	push	r24
    1e38:	9f 93       	push	r25
    1e3a:	af 93       	push	r26
    1e3c:	bf 93       	push	r27
    1e3e:	ef 93       	push	r30
    1e40:	ff 93       	push	r31
    1e42:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <_ser_handle>
    1e46:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <_ser_handle+0x1>
    1e4a:	30 97       	sbiw	r30, 0x00	; 0
    1e4c:	b9 f0       	breq	.+46     	; 0x1e7c <__vector_26+0x56>
    1e4e:	02 80       	ldd	r0, Z+2	; 0x02
    1e50:	f3 81       	ldd	r31, Z+3	; 0x03
    1e52:	e0 2d       	mov	r30, r0
    1e54:	93 81       	ldd	r25, Z+3	; 0x03
    1e56:	82 81       	ldd	r24, Z+2	; 0x02
    1e58:	98 17       	cp	r25, r24
    1e5a:	b1 f0       	breq	.+44     	; 0x1e88 <__vector_26+0x62>
    1e5c:	92 81       	ldd	r25, Z+2	; 0x02
    1e5e:	85 81       	ldd	r24, Z+5	; 0x05
    1e60:	28 2f       	mov	r18, r24
    1e62:	26 95       	lsr	r18
    1e64:	29 23       	and	r18, r25
    1e66:	a0 81       	ld	r26, Z
    1e68:	b1 81       	ldd	r27, Z+1	; 0x01
    1e6a:	a2 0f       	add	r26, r18
    1e6c:	b1 1d       	adc	r27, r1
    1e6e:	2c 91       	ld	r18, X
    1e70:	9f 5f       	subi	r25, 0xFF	; 255
    1e72:	89 23       	and	r24, r25
    1e74:	82 83       	std	Z+2, r24	; 0x02
    1e76:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    1e7a:	0b c0       	rjmp	.+22     	; 0x1e92 <__vector_26+0x6c>
    1e7c:	e1 ec       	ldi	r30, 0xC1	; 193
    1e7e:	f0 e0       	ldi	r31, 0x00	; 0
    1e80:	80 81       	ld	r24, Z
    1e82:	8f 7d       	andi	r24, 0xDF	; 223
    1e84:	80 83       	st	Z, r24
    1e86:	05 c0       	rjmp	.+10     	; 0x1e92 <__vector_26+0x6c>
    1e88:	e1 ec       	ldi	r30, 0xC1	; 193
    1e8a:	f0 e0       	ldi	r31, 0x00	; 0
    1e8c:	80 81       	ld	r24, Z
    1e8e:	8f 7d       	andi	r24, 0xDF	; 223
    1e90:	80 83       	st	Z, r24
    1e92:	ff 91       	pop	r31
    1e94:	ef 91       	pop	r30
    1e96:	bf 91       	pop	r27
    1e98:	af 91       	pop	r26
    1e9a:	9f 91       	pop	r25
    1e9c:	8f 91       	pop	r24
    1e9e:	2f 91       	pop	r18
    1ea0:	0f 90       	pop	r0
    1ea2:	0b be       	out	0x3b, r0	; 59
    1ea4:	0f 90       	pop	r0
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	0f 90       	pop	r0
    1eaa:	1f 90       	pop	r1
    1eac:	18 95       	reti

00001eae <__vector_36>:
    1eae:	1f 92       	push	r1
    1eb0:	0f 92       	push	r0
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	0f 92       	push	r0
    1eb6:	11 24       	eor	r1, r1
    1eb8:	0b b6       	in	r0, 0x3b	; 59
    1eba:	0f 92       	push	r0
    1ebc:	2f 93       	push	r18
    1ebe:	3f 93       	push	r19
    1ec0:	4f 93       	push	r20
    1ec2:	5f 93       	push	r21
    1ec4:	6f 93       	push	r22
    1ec6:	7f 93       	push	r23
    1ec8:	8f 93       	push	r24
    1eca:	9f 93       	push	r25
    1ecc:	af 93       	push	r26
    1ece:	bf 93       	push	r27
    1ed0:	cf 93       	push	r28
    1ed2:	df 93       	push	r29
    1ed4:	ef 93       	push	r30
    1ed6:	ff 93       	push	r31
    1ed8:	a0 91 11 03 	lds	r26, 0x0311	; 0x800311 <_ser_handle+0x2>
    1edc:	b0 91 12 03 	lds	r27, 0x0312	; 0x800312 <_ser_handle+0x3>
    1ee0:	10 97       	sbiw	r26, 0x00	; 0
    1ee2:	11 f1       	breq	.+68     	; 0x1f28 <__vector_36+0x7a>
    1ee4:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1ee8:	14 96       	adiw	r26, 0x04	; 4
    1eea:	ed 91       	ld	r30, X+
    1eec:	fc 91       	ld	r31, X
    1eee:	15 97       	sbiw	r26, 0x05	; 5
    1ef0:	93 81       	ldd	r25, Z+3	; 0x03
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	25 81       	ldd	r18, Z+5	; 0x05
    1ef6:	98 1b       	sub	r25, r24
    1ef8:	92 23       	and	r25, r18
    1efa:	84 81       	ldd	r24, Z+4	; 0x04
    1efc:	98 17       	cp	r25, r24
    1efe:	61 f0       	breq	.+24     	; 0x1f18 <__vector_36+0x6a>
    1f00:	83 81       	ldd	r24, Z+3	; 0x03
    1f02:	26 95       	lsr	r18
    1f04:	28 23       	and	r18, r24
    1f06:	c0 81       	ld	r28, Z
    1f08:	d1 81       	ldd	r29, Z+1	; 0x01
    1f0a:	c2 0f       	add	r28, r18
    1f0c:	d1 1d       	adc	r29, r1
    1f0e:	68 83       	st	Y, r22
    1f10:	8f 5f       	subi	r24, 0xFF	; 255
    1f12:	95 81       	ldd	r25, Z+5	; 0x05
    1f14:	89 23       	and	r24, r25
    1f16:	83 83       	std	Z+3, r24	; 0x03
    1f18:	16 96       	adiw	r26, 0x06	; 6
    1f1a:	ed 91       	ld	r30, X+
    1f1c:	fc 91       	ld	r31, X
    1f1e:	17 97       	sbiw	r26, 0x07	; 7
    1f20:	30 97       	sbiw	r30, 0x00	; 0
    1f22:	11 f0       	breq	.+4      	; 0x1f28 <__vector_36+0x7a>
    1f24:	cd 01       	movw	r24, r26
    1f26:	19 95       	eicall
    1f28:	ff 91       	pop	r31
    1f2a:	ef 91       	pop	r30
    1f2c:	df 91       	pop	r29
    1f2e:	cf 91       	pop	r28
    1f30:	bf 91       	pop	r27
    1f32:	af 91       	pop	r26
    1f34:	9f 91       	pop	r25
    1f36:	8f 91       	pop	r24
    1f38:	7f 91       	pop	r23
    1f3a:	6f 91       	pop	r22
    1f3c:	5f 91       	pop	r21
    1f3e:	4f 91       	pop	r20
    1f40:	3f 91       	pop	r19
    1f42:	2f 91       	pop	r18
    1f44:	0f 90       	pop	r0
    1f46:	0b be       	out	0x3b, r0	; 59
    1f48:	0f 90       	pop	r0
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	0f 90       	pop	r0
    1f4e:	1f 90       	pop	r1
    1f50:	18 95       	reti

00001f52 <__vector_37>:
    1f52:	1f 92       	push	r1
    1f54:	0f 92       	push	r0
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	0f 92       	push	r0
    1f5a:	11 24       	eor	r1, r1
    1f5c:	0b b6       	in	r0, 0x3b	; 59
    1f5e:	0f 92       	push	r0
    1f60:	2f 93       	push	r18
    1f62:	8f 93       	push	r24
    1f64:	9f 93       	push	r25
    1f66:	af 93       	push	r26
    1f68:	bf 93       	push	r27
    1f6a:	ef 93       	push	r30
    1f6c:	ff 93       	push	r31
    1f6e:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <_ser_handle+0x2>
    1f72:	f0 91 12 03 	lds	r31, 0x0312	; 0x800312 <_ser_handle+0x3>
    1f76:	30 97       	sbiw	r30, 0x00	; 0
    1f78:	b9 f0       	breq	.+46     	; 0x1fa8 <__vector_37+0x56>
    1f7a:	02 80       	ldd	r0, Z+2	; 0x02
    1f7c:	f3 81       	ldd	r31, Z+3	; 0x03
    1f7e:	e0 2d       	mov	r30, r0
    1f80:	93 81       	ldd	r25, Z+3	; 0x03
    1f82:	82 81       	ldd	r24, Z+2	; 0x02
    1f84:	98 17       	cp	r25, r24
    1f86:	b1 f0       	breq	.+44     	; 0x1fb4 <__vector_37+0x62>
    1f88:	92 81       	ldd	r25, Z+2	; 0x02
    1f8a:	85 81       	ldd	r24, Z+5	; 0x05
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	26 95       	lsr	r18
    1f90:	29 23       	and	r18, r25
    1f92:	a0 81       	ld	r26, Z
    1f94:	b1 81       	ldd	r27, Z+1	; 0x01
    1f96:	a2 0f       	add	r26, r18
    1f98:	b1 1d       	adc	r27, r1
    1f9a:	2c 91       	ld	r18, X
    1f9c:	9f 5f       	subi	r25, 0xFF	; 255
    1f9e:	89 23       	and	r24, r25
    1fa0:	82 83       	std	Z+2, r24	; 0x02
    1fa2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    1fa6:	0b c0       	rjmp	.+22     	; 0x1fbe <__vector_37+0x6c>
    1fa8:	e9 ec       	ldi	r30, 0xC9	; 201
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	8f 7d       	andi	r24, 0xDF	; 223
    1fb0:	80 83       	st	Z, r24
    1fb2:	05 c0       	rjmp	.+10     	; 0x1fbe <__vector_37+0x6c>
    1fb4:	e9 ec       	ldi	r30, 0xC9	; 201
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	8f 7d       	andi	r24, 0xDF	; 223
    1fbc:	80 83       	st	Z, r24
    1fbe:	ff 91       	pop	r31
    1fc0:	ef 91       	pop	r30
    1fc2:	bf 91       	pop	r27
    1fc4:	af 91       	pop	r26
    1fc6:	9f 91       	pop	r25
    1fc8:	8f 91       	pop	r24
    1fca:	2f 91       	pop	r18
    1fcc:	0f 90       	pop	r0
    1fce:	0b be       	out	0x3b, r0	; 59
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	0f 90       	pop	r0
    1fd6:	1f 90       	pop	r1
    1fd8:	18 95       	reti

00001fda <__vector_51>:
    1fda:	1f 92       	push	r1
    1fdc:	0f 92       	push	r0
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	0f 92       	push	r0
    1fe2:	11 24       	eor	r1, r1
    1fe4:	0b b6       	in	r0, 0x3b	; 59
    1fe6:	0f 92       	push	r0
    1fe8:	2f 93       	push	r18
    1fea:	3f 93       	push	r19
    1fec:	4f 93       	push	r20
    1fee:	5f 93       	push	r21
    1ff0:	6f 93       	push	r22
    1ff2:	7f 93       	push	r23
    1ff4:	8f 93       	push	r24
    1ff6:	9f 93       	push	r25
    1ff8:	af 93       	push	r26
    1ffa:	bf 93       	push	r27
    1ffc:	cf 93       	push	r28
    1ffe:	df 93       	push	r29
    2000:	ef 93       	push	r30
    2002:	ff 93       	push	r31
    2004:	a0 91 13 03 	lds	r26, 0x0313	; 0x800313 <_ser_handle+0x4>
    2008:	b0 91 14 03 	lds	r27, 0x0314	; 0x800314 <_ser_handle+0x5>
    200c:	10 97       	sbiw	r26, 0x00	; 0
    200e:	11 f1       	breq	.+68     	; 0x2054 <__vector_51+0x7a>
    2010:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2014:	14 96       	adiw	r26, 0x04	; 4
    2016:	ed 91       	ld	r30, X+
    2018:	fc 91       	ld	r31, X
    201a:	15 97       	sbiw	r26, 0x05	; 5
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	82 81       	ldd	r24, Z+2	; 0x02
    2020:	25 81       	ldd	r18, Z+5	; 0x05
    2022:	98 1b       	sub	r25, r24
    2024:	92 23       	and	r25, r18
    2026:	84 81       	ldd	r24, Z+4	; 0x04
    2028:	98 17       	cp	r25, r24
    202a:	61 f0       	breq	.+24     	; 0x2044 <__vector_51+0x6a>
    202c:	83 81       	ldd	r24, Z+3	; 0x03
    202e:	26 95       	lsr	r18
    2030:	28 23       	and	r18, r24
    2032:	c0 81       	ld	r28, Z
    2034:	d1 81       	ldd	r29, Z+1	; 0x01
    2036:	c2 0f       	add	r28, r18
    2038:	d1 1d       	adc	r29, r1
    203a:	68 83       	st	Y, r22
    203c:	8f 5f       	subi	r24, 0xFF	; 255
    203e:	95 81       	ldd	r25, Z+5	; 0x05
    2040:	89 23       	and	r24, r25
    2042:	83 83       	std	Z+3, r24	; 0x03
    2044:	16 96       	adiw	r26, 0x06	; 6
    2046:	ed 91       	ld	r30, X+
    2048:	fc 91       	ld	r31, X
    204a:	17 97       	sbiw	r26, 0x07	; 7
    204c:	30 97       	sbiw	r30, 0x00	; 0
    204e:	11 f0       	breq	.+4      	; 0x2054 <__vector_51+0x7a>
    2050:	cd 01       	movw	r24, r26
    2052:	19 95       	eicall
    2054:	ff 91       	pop	r31
    2056:	ef 91       	pop	r30
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	bf 91       	pop	r27
    205e:	af 91       	pop	r26
    2060:	9f 91       	pop	r25
    2062:	8f 91       	pop	r24
    2064:	7f 91       	pop	r23
    2066:	6f 91       	pop	r22
    2068:	5f 91       	pop	r21
    206a:	4f 91       	pop	r20
    206c:	3f 91       	pop	r19
    206e:	2f 91       	pop	r18
    2070:	0f 90       	pop	r0
    2072:	0b be       	out	0x3b, r0	; 59
    2074:	0f 90       	pop	r0
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	0f 90       	pop	r0
    207a:	1f 90       	pop	r1
    207c:	18 95       	reti

0000207e <__vector_52>:
    207e:	1f 92       	push	r1
    2080:	0f 92       	push	r0
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	0f 92       	push	r0
    2086:	11 24       	eor	r1, r1
    2088:	0b b6       	in	r0, 0x3b	; 59
    208a:	0f 92       	push	r0
    208c:	2f 93       	push	r18
    208e:	8f 93       	push	r24
    2090:	9f 93       	push	r25
    2092:	af 93       	push	r26
    2094:	bf 93       	push	r27
    2096:	ef 93       	push	r30
    2098:	ff 93       	push	r31
    209a:	e0 91 13 03 	lds	r30, 0x0313	; 0x800313 <_ser_handle+0x4>
    209e:	f0 91 14 03 	lds	r31, 0x0314	; 0x800314 <_ser_handle+0x5>
    20a2:	30 97       	sbiw	r30, 0x00	; 0
    20a4:	b9 f0       	breq	.+46     	; 0x20d4 <__vector_52+0x56>
    20a6:	02 80       	ldd	r0, Z+2	; 0x02
    20a8:	f3 81       	ldd	r31, Z+3	; 0x03
    20aa:	e0 2d       	mov	r30, r0
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	98 17       	cp	r25, r24
    20b2:	b1 f0       	breq	.+44     	; 0x20e0 <__vector_52+0x62>
    20b4:	92 81       	ldd	r25, Z+2	; 0x02
    20b6:	85 81       	ldd	r24, Z+5	; 0x05
    20b8:	28 2f       	mov	r18, r24
    20ba:	26 95       	lsr	r18
    20bc:	29 23       	and	r18, r25
    20be:	a0 81       	ld	r26, Z
    20c0:	b1 81       	ldd	r27, Z+1	; 0x01
    20c2:	a2 0f       	add	r26, r18
    20c4:	b1 1d       	adc	r27, r1
    20c6:	2c 91       	ld	r18, X
    20c8:	9f 5f       	subi	r25, 0xFF	; 255
    20ca:	89 23       	and	r24, r25
    20cc:	82 83       	std	Z+2, r24	; 0x02
    20ce:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    20d2:	0b c0       	rjmp	.+22     	; 0x20ea <__vector_52+0x6c>
    20d4:	e1 ed       	ldi	r30, 0xD1	; 209
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	8f 7d       	andi	r24, 0xDF	; 223
    20dc:	80 83       	st	Z, r24
    20de:	05 c0       	rjmp	.+10     	; 0x20ea <__vector_52+0x6c>
    20e0:	e1 ed       	ldi	r30, 0xD1	; 209
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	8f 7d       	andi	r24, 0xDF	; 223
    20e8:	80 83       	st	Z, r24
    20ea:	ff 91       	pop	r31
    20ec:	ef 91       	pop	r30
    20ee:	bf 91       	pop	r27
    20f0:	af 91       	pop	r26
    20f2:	9f 91       	pop	r25
    20f4:	8f 91       	pop	r24
    20f6:	2f 91       	pop	r18
    20f8:	0f 90       	pop	r0
    20fa:	0b be       	out	0x3b, r0	; 59
    20fc:	0f 90       	pop	r0
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	0f 90       	pop	r0
    2102:	1f 90       	pop	r1
    2104:	18 95       	reti

00002106 <__vector_54>:
    2106:	1f 92       	push	r1
    2108:	0f 92       	push	r0
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	0f 92       	push	r0
    210e:	11 24       	eor	r1, r1
    2110:	0b b6       	in	r0, 0x3b	; 59
    2112:	0f 92       	push	r0
    2114:	2f 93       	push	r18
    2116:	3f 93       	push	r19
    2118:	4f 93       	push	r20
    211a:	5f 93       	push	r21
    211c:	6f 93       	push	r22
    211e:	7f 93       	push	r23
    2120:	8f 93       	push	r24
    2122:	9f 93       	push	r25
    2124:	af 93       	push	r26
    2126:	bf 93       	push	r27
    2128:	cf 93       	push	r28
    212a:	df 93       	push	r29
    212c:	ef 93       	push	r30
    212e:	ff 93       	push	r31
    2130:	a0 91 15 03 	lds	r26, 0x0315	; 0x800315 <_ser_handle+0x6>
    2134:	b0 91 16 03 	lds	r27, 0x0316	; 0x800316 <_ser_handle+0x7>
    2138:	10 97       	sbiw	r26, 0x00	; 0
    213a:	11 f1       	breq	.+68     	; 0x2180 <__vector_54+0x7a>
    213c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2140:	14 96       	adiw	r26, 0x04	; 4
    2142:	ed 91       	ld	r30, X+
    2144:	fc 91       	ld	r31, X
    2146:	15 97       	sbiw	r26, 0x05	; 5
    2148:	93 81       	ldd	r25, Z+3	; 0x03
    214a:	82 81       	ldd	r24, Z+2	; 0x02
    214c:	25 81       	ldd	r18, Z+5	; 0x05
    214e:	98 1b       	sub	r25, r24
    2150:	92 23       	and	r25, r18
    2152:	84 81       	ldd	r24, Z+4	; 0x04
    2154:	98 17       	cp	r25, r24
    2156:	61 f0       	breq	.+24     	; 0x2170 <__vector_54+0x6a>
    2158:	83 81       	ldd	r24, Z+3	; 0x03
    215a:	26 95       	lsr	r18
    215c:	28 23       	and	r18, r24
    215e:	c0 81       	ld	r28, Z
    2160:	d1 81       	ldd	r29, Z+1	; 0x01
    2162:	c2 0f       	add	r28, r18
    2164:	d1 1d       	adc	r29, r1
    2166:	68 83       	st	Y, r22
    2168:	8f 5f       	subi	r24, 0xFF	; 255
    216a:	95 81       	ldd	r25, Z+5	; 0x05
    216c:	89 23       	and	r24, r25
    216e:	83 83       	std	Z+3, r24	; 0x03
    2170:	16 96       	adiw	r26, 0x06	; 6
    2172:	ed 91       	ld	r30, X+
    2174:	fc 91       	ld	r31, X
    2176:	17 97       	sbiw	r26, 0x07	; 7
    2178:	30 97       	sbiw	r30, 0x00	; 0
    217a:	11 f0       	breq	.+4      	; 0x2180 <__vector_54+0x7a>
    217c:	cd 01       	movw	r24, r26
    217e:	19 95       	eicall
    2180:	ff 91       	pop	r31
    2182:	ef 91       	pop	r30
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	bf 91       	pop	r27
    218a:	af 91       	pop	r26
    218c:	9f 91       	pop	r25
    218e:	8f 91       	pop	r24
    2190:	7f 91       	pop	r23
    2192:	6f 91       	pop	r22
    2194:	5f 91       	pop	r21
    2196:	4f 91       	pop	r20
    2198:	3f 91       	pop	r19
    219a:	2f 91       	pop	r18
    219c:	0f 90       	pop	r0
    219e:	0b be       	out	0x3b, r0	; 59
    21a0:	0f 90       	pop	r0
    21a2:	0f be       	out	0x3f, r0	; 63
    21a4:	0f 90       	pop	r0
    21a6:	1f 90       	pop	r1
    21a8:	18 95       	reti

000021aa <__vector_55>:
    21aa:	1f 92       	push	r1
    21ac:	0f 92       	push	r0
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	0f 92       	push	r0
    21b2:	11 24       	eor	r1, r1
    21b4:	0b b6       	in	r0, 0x3b	; 59
    21b6:	0f 92       	push	r0
    21b8:	2f 93       	push	r18
    21ba:	8f 93       	push	r24
    21bc:	9f 93       	push	r25
    21be:	af 93       	push	r26
    21c0:	bf 93       	push	r27
    21c2:	ef 93       	push	r30
    21c4:	ff 93       	push	r31
    21c6:	e0 91 15 03 	lds	r30, 0x0315	; 0x800315 <_ser_handle+0x6>
    21ca:	f0 91 16 03 	lds	r31, 0x0316	; 0x800316 <_ser_handle+0x7>
    21ce:	30 97       	sbiw	r30, 0x00	; 0
    21d0:	b9 f0       	breq	.+46     	; 0x2200 <__stack+0x1>
    21d2:	02 80       	ldd	r0, Z+2	; 0x02
    21d4:	f3 81       	ldd	r31, Z+3	; 0x03
    21d6:	e0 2d       	mov	r30, r0
    21d8:	93 81       	ldd	r25, Z+3	; 0x03
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	98 17       	cp	r25, r24
    21de:	b1 f0       	breq	.+44     	; 0x220c <__stack+0xd>
    21e0:	92 81       	ldd	r25, Z+2	; 0x02
    21e2:	85 81       	ldd	r24, Z+5	; 0x05
    21e4:	28 2f       	mov	r18, r24
    21e6:	26 95       	lsr	r18
    21e8:	29 23       	and	r18, r25
    21ea:	a0 81       	ld	r26, Z
    21ec:	b1 81       	ldd	r27, Z+1	; 0x01
    21ee:	a2 0f       	add	r26, r18
    21f0:	b1 1d       	adc	r27, r1
    21f2:	2c 91       	ld	r18, X
    21f4:	9f 5f       	subi	r25, 0xFF	; 255
    21f6:	89 23       	and	r24, r25
    21f8:	82 83       	std	Z+2, r24	; 0x02
    21fa:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    21fe:	0b c0       	rjmp	.+22     	; 0x2216 <__stack+0x17>
    2200:	e1 e3       	ldi	r30, 0x31	; 49
    2202:	f1 e0       	ldi	r31, 0x01	; 1
    2204:	80 81       	ld	r24, Z
    2206:	8f 7d       	andi	r24, 0xDF	; 223
    2208:	80 83       	st	Z, r24
    220a:	05 c0       	rjmp	.+10     	; 0x2216 <__stack+0x17>
    220c:	e1 e3       	ldi	r30, 0x31	; 49
    220e:	f1 e0       	ldi	r31, 0x01	; 1
    2210:	80 81       	ld	r24, Z
    2212:	8f 7d       	andi	r24, 0xDF	; 223
    2214:	80 83       	st	Z, r24
    2216:	ff 91       	pop	r31
    2218:	ef 91       	pop	r30
    221a:	bf 91       	pop	r27
    221c:	af 91       	pop	r26
    221e:	9f 91       	pop	r25
    2220:	8f 91       	pop	r24
    2222:	2f 91       	pop	r18
    2224:	0f 90       	pop	r0
    2226:	0b be       	out	0x3b, r0	; 59
    2228:	0f 90       	pop	r0
    222a:	0f be       	out	0x3f, r0	; 63
    222c:	0f 90       	pop	r0
    222e:	1f 90       	pop	r1
    2230:	18 95       	reti

00002232 <usart_getchar>:
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	1f 92       	push	r1
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	be 01       	movw	r22, r28
    223e:	6f 5f       	subi	r22, 0xFF	; 255
    2240:	7f 4f       	sbci	r23, 0xFF	; 255
    2242:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_com_serial_instance>
    2246:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <_com_serial_instance+0x1>
    224a:	7f dd       	rcall	.-1282   	; 0x1d4a <serial_get_byte>
    224c:	81 11       	cpse	r24, r1
    224e:	f6 cf       	rjmp	.-20     	; 0x223c <usart_getchar+0xa>
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	0f 90       	pop	r0
    2256:	df 91       	pop	r29
    2258:	cf 91       	pop	r28
    225a:	08 95       	ret

0000225c <usart_putchar>:
    225c:	68 2f       	mov	r22, r24
    225e:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <_com_serial_instance>
    2262:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <_com_serial_instance+0x1>
    2266:	fc dc       	rcall	.-1544   	; 0x1c60 <serial_send_byte>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	08 95       	ret

0000226e <stdioCreate>:
    226e:	8f 92       	push	r8
    2270:	9f 92       	push	r9
    2272:	af 92       	push	r10
    2274:	cf 92       	push	r12
    2276:	ef 92       	push	r14
    2278:	0f 93       	push	r16
    227a:	81 2c       	mov	r8, r1
    227c:	91 2c       	mov	r9, r1
    227e:	68 94       	set
    2280:	aa 24       	eor	r10, r10
    2282:	a7 f8       	bld	r10, 7
    2284:	68 94       	set
    2286:	cc 24       	eor	r12, r12
    2288:	c7 f8       	bld	r12, 7
    228a:	e1 2c       	mov	r14, r1
    228c:	00 e0       	ldi	r16, 0x00	; 0
    228e:	23 e0       	ldi	r18, 0x03	; 3
    2290:	40 e0       	ldi	r20, 0x00	; 0
    2292:	51 ee       	ldi	r21, 0xE1	; 225
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	70 e0       	ldi	r23, 0x00	; 0
    2298:	4d dc       	rcall	.-1894   	; 0x1b34 <serial_new_instance>
    229a:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <_com_serial_instance+0x1>
    229e:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <_com_serial_instance>
    22a2:	e1 e2       	ldi	r30, 0x21	; 33
    22a4:	f3 e0       	ldi	r31, 0x03	; 3
    22a6:	8e e0       	ldi	r24, 0x0E	; 14
    22a8:	92 e0       	ldi	r25, 0x02	; 2
    22aa:	91 83       	std	Z+1, r25	; 0x01
    22ac:	80 83       	st	Z, r24
    22ae:	93 83       	std	Z+3, r25	; 0x03
    22b0:	82 83       	std	Z+2, r24	; 0x02
    22b2:	0f 91       	pop	r16
    22b4:	ef 90       	pop	r14
    22b6:	cf 90       	pop	r12
    22b8:	af 90       	pop	r10
    22ba:	9f 90       	pop	r9
    22bc:	8f 90       	pop	r8
    22be:	08 95       	ret

000022c0 <fifo_init>:
    22c0:	fc 01       	movw	r30, r24
    22c2:	41 11       	cpse	r20, r1
    22c4:	01 c0       	rjmp	.+2      	; 0x22c8 <fifo_init+0x8>
    22c6:	45 d3       	rcall	.+1674   	; 0x2952 <abort>
    22c8:	84 2f       	mov	r24, r20
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9c 01       	movw	r18, r24
    22ce:	21 50       	subi	r18, 0x01	; 1
    22d0:	31 09       	sbc	r19, r1
    22d2:	82 23       	and	r24, r18
    22d4:	93 23       	and	r25, r19
    22d6:	89 2b       	or	r24, r25
    22d8:	09 f0       	breq	.+2      	; 0x22dc <fifo_init+0x1c>
    22da:	3b d3       	rcall	.+1654   	; 0x2952 <abort>
    22dc:	41 38       	cpi	r20, 0x81	; 129
    22de:	08 f0       	brcs	.+2      	; 0x22e2 <fifo_init+0x22>
    22e0:	38 d3       	rcall	.+1648   	; 0x2952 <abort>
    22e2:	12 82       	std	Z+2, r1	; 0x02
    22e4:	13 82       	std	Z+3, r1	; 0x03
    22e6:	44 83       	std	Z+4, r20	; 0x04
    22e8:	44 0f       	add	r20, r20
    22ea:	41 50       	subi	r20, 0x01	; 1
    22ec:	45 83       	std	Z+5, r20	; 0x05
    22ee:	71 83       	std	Z+1, r23	; 0x01
    22f0:	60 83       	st	Z, r22
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	08 95       	ret

000022f8 <__subsf3>:
    22f8:	50 58       	subi	r21, 0x80	; 128

000022fa <__addsf3>:
    22fa:	bb 27       	eor	r27, r27
    22fc:	aa 27       	eor	r26, r26
    22fe:	0e d0       	rcall	.+28     	; 0x231c <__addsf3x>
    2300:	48 c1       	rjmp	.+656    	; 0x2592 <__fp_round>
    2302:	39 d1       	rcall	.+626    	; 0x2576 <__fp_pscA>
    2304:	30 f0       	brcs	.+12     	; 0x2312 <__addsf3+0x18>
    2306:	3e d1       	rcall	.+636    	; 0x2584 <__fp_pscB>
    2308:	20 f0       	brcs	.+8      	; 0x2312 <__addsf3+0x18>
    230a:	31 f4       	brne	.+12     	; 0x2318 <__addsf3+0x1e>
    230c:	9f 3f       	cpi	r25, 0xFF	; 255
    230e:	11 f4       	brne	.+4      	; 0x2314 <__addsf3+0x1a>
    2310:	1e f4       	brtc	.+6      	; 0x2318 <__addsf3+0x1e>
    2312:	2e c1       	rjmp	.+604    	; 0x2570 <__fp_nan>
    2314:	0e f4       	brtc	.+2      	; 0x2318 <__addsf3+0x1e>
    2316:	e0 95       	com	r30
    2318:	e7 fb       	bst	r30, 7
    231a:	24 c1       	rjmp	.+584    	; 0x2564 <__fp_inf>

0000231c <__addsf3x>:
    231c:	e9 2f       	mov	r30, r25
    231e:	4a d1       	rcall	.+660    	; 0x25b4 <__fp_split3>
    2320:	80 f3       	brcs	.-32     	; 0x2302 <__addsf3+0x8>
    2322:	ba 17       	cp	r27, r26
    2324:	62 07       	cpc	r22, r18
    2326:	73 07       	cpc	r23, r19
    2328:	84 07       	cpc	r24, r20
    232a:	95 07       	cpc	r25, r21
    232c:	18 f0       	brcs	.+6      	; 0x2334 <__addsf3x+0x18>
    232e:	71 f4       	brne	.+28     	; 0x234c <__addsf3x+0x30>
    2330:	9e f5       	brtc	.+102    	; 0x2398 <__addsf3x+0x7c>
    2332:	62 c1       	rjmp	.+708    	; 0x25f8 <__fp_zero>
    2334:	0e f4       	brtc	.+2      	; 0x2338 <__addsf3x+0x1c>
    2336:	e0 95       	com	r30
    2338:	0b 2e       	mov	r0, r27
    233a:	ba 2f       	mov	r27, r26
    233c:	a0 2d       	mov	r26, r0
    233e:	0b 01       	movw	r0, r22
    2340:	b9 01       	movw	r22, r18
    2342:	90 01       	movw	r18, r0
    2344:	0c 01       	movw	r0, r24
    2346:	ca 01       	movw	r24, r20
    2348:	a0 01       	movw	r20, r0
    234a:	11 24       	eor	r1, r1
    234c:	ff 27       	eor	r31, r31
    234e:	59 1b       	sub	r21, r25
    2350:	99 f0       	breq	.+38     	; 0x2378 <__addsf3x+0x5c>
    2352:	59 3f       	cpi	r21, 0xF9	; 249
    2354:	50 f4       	brcc	.+20     	; 0x236a <__addsf3x+0x4e>
    2356:	50 3e       	cpi	r21, 0xE0	; 224
    2358:	68 f1       	brcs	.+90     	; 0x23b4 <__addsf3x+0x98>
    235a:	1a 16       	cp	r1, r26
    235c:	f0 40       	sbci	r31, 0x00	; 0
    235e:	a2 2f       	mov	r26, r18
    2360:	23 2f       	mov	r18, r19
    2362:	34 2f       	mov	r19, r20
    2364:	44 27       	eor	r20, r20
    2366:	58 5f       	subi	r21, 0xF8	; 248
    2368:	f3 cf       	rjmp	.-26     	; 0x2350 <__addsf3x+0x34>
    236a:	46 95       	lsr	r20
    236c:	37 95       	ror	r19
    236e:	27 95       	ror	r18
    2370:	a7 95       	ror	r26
    2372:	f0 40       	sbci	r31, 0x00	; 0
    2374:	53 95       	inc	r21
    2376:	c9 f7       	brne	.-14     	; 0x236a <__addsf3x+0x4e>
    2378:	7e f4       	brtc	.+30     	; 0x2398 <__addsf3x+0x7c>
    237a:	1f 16       	cp	r1, r31
    237c:	ba 0b       	sbc	r27, r26
    237e:	62 0b       	sbc	r22, r18
    2380:	73 0b       	sbc	r23, r19
    2382:	84 0b       	sbc	r24, r20
    2384:	ba f0       	brmi	.+46     	; 0x23b4 <__addsf3x+0x98>
    2386:	91 50       	subi	r25, 0x01	; 1
    2388:	a1 f0       	breq	.+40     	; 0x23b2 <__addsf3x+0x96>
    238a:	ff 0f       	add	r31, r31
    238c:	bb 1f       	adc	r27, r27
    238e:	66 1f       	adc	r22, r22
    2390:	77 1f       	adc	r23, r23
    2392:	88 1f       	adc	r24, r24
    2394:	c2 f7       	brpl	.-16     	; 0x2386 <__addsf3x+0x6a>
    2396:	0e c0       	rjmp	.+28     	; 0x23b4 <__addsf3x+0x98>
    2398:	ba 0f       	add	r27, r26
    239a:	62 1f       	adc	r22, r18
    239c:	73 1f       	adc	r23, r19
    239e:	84 1f       	adc	r24, r20
    23a0:	48 f4       	brcc	.+18     	; 0x23b4 <__addsf3x+0x98>
    23a2:	87 95       	ror	r24
    23a4:	77 95       	ror	r23
    23a6:	67 95       	ror	r22
    23a8:	b7 95       	ror	r27
    23aa:	f7 95       	ror	r31
    23ac:	9e 3f       	cpi	r25, 0xFE	; 254
    23ae:	08 f0       	brcs	.+2      	; 0x23b2 <__addsf3x+0x96>
    23b0:	b3 cf       	rjmp	.-154    	; 0x2318 <__addsf3+0x1e>
    23b2:	93 95       	inc	r25
    23b4:	88 0f       	add	r24, r24
    23b6:	08 f0       	brcs	.+2      	; 0x23ba <__addsf3x+0x9e>
    23b8:	99 27       	eor	r25, r25
    23ba:	ee 0f       	add	r30, r30
    23bc:	97 95       	ror	r25
    23be:	87 95       	ror	r24
    23c0:	08 95       	ret

000023c2 <__divsf3>:
    23c2:	0c d0       	rcall	.+24     	; 0x23dc <__divsf3x>
    23c4:	e6 c0       	rjmp	.+460    	; 0x2592 <__fp_round>
    23c6:	de d0       	rcall	.+444    	; 0x2584 <__fp_pscB>
    23c8:	40 f0       	brcs	.+16     	; 0x23da <__divsf3+0x18>
    23ca:	d5 d0       	rcall	.+426    	; 0x2576 <__fp_pscA>
    23cc:	30 f0       	brcs	.+12     	; 0x23da <__divsf3+0x18>
    23ce:	21 f4       	brne	.+8      	; 0x23d8 <__divsf3+0x16>
    23d0:	5f 3f       	cpi	r21, 0xFF	; 255
    23d2:	19 f0       	breq	.+6      	; 0x23da <__divsf3+0x18>
    23d4:	c7 c0       	rjmp	.+398    	; 0x2564 <__fp_inf>
    23d6:	51 11       	cpse	r21, r1
    23d8:	10 c1       	rjmp	.+544    	; 0x25fa <__fp_szero>
    23da:	ca c0       	rjmp	.+404    	; 0x2570 <__fp_nan>

000023dc <__divsf3x>:
    23dc:	eb d0       	rcall	.+470    	; 0x25b4 <__fp_split3>
    23de:	98 f3       	brcs	.-26     	; 0x23c6 <__divsf3+0x4>

000023e0 <__divsf3_pse>:
    23e0:	99 23       	and	r25, r25
    23e2:	c9 f3       	breq	.-14     	; 0x23d6 <__divsf3+0x14>
    23e4:	55 23       	and	r21, r21
    23e6:	b1 f3       	breq	.-20     	; 0x23d4 <__divsf3+0x12>
    23e8:	95 1b       	sub	r25, r21
    23ea:	55 0b       	sbc	r21, r21
    23ec:	bb 27       	eor	r27, r27
    23ee:	aa 27       	eor	r26, r26
    23f0:	62 17       	cp	r22, r18
    23f2:	73 07       	cpc	r23, r19
    23f4:	84 07       	cpc	r24, r20
    23f6:	38 f0       	brcs	.+14     	; 0x2406 <__divsf3_pse+0x26>
    23f8:	9f 5f       	subi	r25, 0xFF	; 255
    23fa:	5f 4f       	sbci	r21, 0xFF	; 255
    23fc:	22 0f       	add	r18, r18
    23fe:	33 1f       	adc	r19, r19
    2400:	44 1f       	adc	r20, r20
    2402:	aa 1f       	adc	r26, r26
    2404:	a9 f3       	breq	.-22     	; 0x23f0 <__divsf3_pse+0x10>
    2406:	33 d0       	rcall	.+102    	; 0x246e <__divsf3_pse+0x8e>
    2408:	0e 2e       	mov	r0, r30
    240a:	3a f0       	brmi	.+14     	; 0x241a <__divsf3_pse+0x3a>
    240c:	e0 e8       	ldi	r30, 0x80	; 128
    240e:	30 d0       	rcall	.+96     	; 0x2470 <__divsf3_pse+0x90>
    2410:	91 50       	subi	r25, 0x01	; 1
    2412:	50 40       	sbci	r21, 0x00	; 0
    2414:	e6 95       	lsr	r30
    2416:	00 1c       	adc	r0, r0
    2418:	ca f7       	brpl	.-14     	; 0x240c <__divsf3_pse+0x2c>
    241a:	29 d0       	rcall	.+82     	; 0x246e <__divsf3_pse+0x8e>
    241c:	fe 2f       	mov	r31, r30
    241e:	27 d0       	rcall	.+78     	; 0x246e <__divsf3_pse+0x8e>
    2420:	66 0f       	add	r22, r22
    2422:	77 1f       	adc	r23, r23
    2424:	88 1f       	adc	r24, r24
    2426:	bb 1f       	adc	r27, r27
    2428:	26 17       	cp	r18, r22
    242a:	37 07       	cpc	r19, r23
    242c:	48 07       	cpc	r20, r24
    242e:	ab 07       	cpc	r26, r27
    2430:	b0 e8       	ldi	r27, 0x80	; 128
    2432:	09 f0       	breq	.+2      	; 0x2436 <__divsf3_pse+0x56>
    2434:	bb 0b       	sbc	r27, r27
    2436:	80 2d       	mov	r24, r0
    2438:	bf 01       	movw	r22, r30
    243a:	ff 27       	eor	r31, r31
    243c:	93 58       	subi	r25, 0x83	; 131
    243e:	5f 4f       	sbci	r21, 0xFF	; 255
    2440:	2a f0       	brmi	.+10     	; 0x244c <__divsf3_pse+0x6c>
    2442:	9e 3f       	cpi	r25, 0xFE	; 254
    2444:	51 05       	cpc	r21, r1
    2446:	68 f0       	brcs	.+26     	; 0x2462 <__divsf3_pse+0x82>
    2448:	8d c0       	rjmp	.+282    	; 0x2564 <__fp_inf>
    244a:	d7 c0       	rjmp	.+430    	; 0x25fa <__fp_szero>
    244c:	5f 3f       	cpi	r21, 0xFF	; 255
    244e:	ec f3       	brlt	.-6      	; 0x244a <__divsf3_pse+0x6a>
    2450:	98 3e       	cpi	r25, 0xE8	; 232
    2452:	dc f3       	brlt	.-10     	; 0x244a <__divsf3_pse+0x6a>
    2454:	86 95       	lsr	r24
    2456:	77 95       	ror	r23
    2458:	67 95       	ror	r22
    245a:	b7 95       	ror	r27
    245c:	f7 95       	ror	r31
    245e:	9f 5f       	subi	r25, 0xFF	; 255
    2460:	c9 f7       	brne	.-14     	; 0x2454 <__divsf3_pse+0x74>
    2462:	88 0f       	add	r24, r24
    2464:	91 1d       	adc	r25, r1
    2466:	96 95       	lsr	r25
    2468:	87 95       	ror	r24
    246a:	97 f9       	bld	r25, 7
    246c:	08 95       	ret
    246e:	e1 e0       	ldi	r30, 0x01	; 1
    2470:	66 0f       	add	r22, r22
    2472:	77 1f       	adc	r23, r23
    2474:	88 1f       	adc	r24, r24
    2476:	bb 1f       	adc	r27, r27
    2478:	62 17       	cp	r22, r18
    247a:	73 07       	cpc	r23, r19
    247c:	84 07       	cpc	r24, r20
    247e:	ba 07       	cpc	r27, r26
    2480:	20 f0       	brcs	.+8      	; 0x248a <__divsf3_pse+0xaa>
    2482:	62 1b       	sub	r22, r18
    2484:	73 0b       	sbc	r23, r19
    2486:	84 0b       	sbc	r24, r20
    2488:	ba 0b       	sbc	r27, r26
    248a:	ee 1f       	adc	r30, r30
    248c:	88 f7       	brcc	.-30     	; 0x2470 <__divsf3_pse+0x90>
    248e:	e0 95       	com	r30
    2490:	08 95       	ret

00002492 <__fixunssfsi>:
    2492:	98 d0       	rcall	.+304    	; 0x25c4 <__fp_splitA>
    2494:	88 f0       	brcs	.+34     	; 0x24b8 <__fixunssfsi+0x26>
    2496:	9f 57       	subi	r25, 0x7F	; 127
    2498:	90 f0       	brcs	.+36     	; 0x24be <__fixunssfsi+0x2c>
    249a:	b9 2f       	mov	r27, r25
    249c:	99 27       	eor	r25, r25
    249e:	b7 51       	subi	r27, 0x17	; 23
    24a0:	a0 f0       	brcs	.+40     	; 0x24ca <__fixunssfsi+0x38>
    24a2:	d1 f0       	breq	.+52     	; 0x24d8 <__fixunssfsi+0x46>
    24a4:	66 0f       	add	r22, r22
    24a6:	77 1f       	adc	r23, r23
    24a8:	88 1f       	adc	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	1a f0       	brmi	.+6      	; 0x24b4 <__fixunssfsi+0x22>
    24ae:	ba 95       	dec	r27
    24b0:	c9 f7       	brne	.-14     	; 0x24a4 <__fixunssfsi+0x12>
    24b2:	12 c0       	rjmp	.+36     	; 0x24d8 <__fixunssfsi+0x46>
    24b4:	b1 30       	cpi	r27, 0x01	; 1
    24b6:	81 f0       	breq	.+32     	; 0x24d8 <__fixunssfsi+0x46>
    24b8:	9f d0       	rcall	.+318    	; 0x25f8 <__fp_zero>
    24ba:	b1 e0       	ldi	r27, 0x01	; 1
    24bc:	08 95       	ret
    24be:	9c c0       	rjmp	.+312    	; 0x25f8 <__fp_zero>
    24c0:	67 2f       	mov	r22, r23
    24c2:	78 2f       	mov	r23, r24
    24c4:	88 27       	eor	r24, r24
    24c6:	b8 5f       	subi	r27, 0xF8	; 248
    24c8:	39 f0       	breq	.+14     	; 0x24d8 <__fixunssfsi+0x46>
    24ca:	b9 3f       	cpi	r27, 0xF9	; 249
    24cc:	cc f3       	brlt	.-14     	; 0x24c0 <__fixunssfsi+0x2e>
    24ce:	86 95       	lsr	r24
    24d0:	77 95       	ror	r23
    24d2:	67 95       	ror	r22
    24d4:	b3 95       	inc	r27
    24d6:	d9 f7       	brne	.-10     	; 0x24ce <__fixunssfsi+0x3c>
    24d8:	3e f4       	brtc	.+14     	; 0x24e8 <__fixunssfsi+0x56>
    24da:	90 95       	com	r25
    24dc:	80 95       	com	r24
    24de:	70 95       	com	r23
    24e0:	61 95       	neg	r22
    24e2:	7f 4f       	sbci	r23, 0xFF	; 255
    24e4:	8f 4f       	sbci	r24, 0xFF	; 255
    24e6:	9f 4f       	sbci	r25, 0xFF	; 255
    24e8:	08 95       	ret

000024ea <__floatunsisf>:
    24ea:	e8 94       	clt
    24ec:	09 c0       	rjmp	.+18     	; 0x2500 <__floatsisf+0x12>

000024ee <__floatsisf>:
    24ee:	97 fb       	bst	r25, 7
    24f0:	3e f4       	brtc	.+14     	; 0x2500 <__floatsisf+0x12>
    24f2:	90 95       	com	r25
    24f4:	80 95       	com	r24
    24f6:	70 95       	com	r23
    24f8:	61 95       	neg	r22
    24fa:	7f 4f       	sbci	r23, 0xFF	; 255
    24fc:	8f 4f       	sbci	r24, 0xFF	; 255
    24fe:	9f 4f       	sbci	r25, 0xFF	; 255
    2500:	99 23       	and	r25, r25
    2502:	a9 f0       	breq	.+42     	; 0x252e <__floatsisf+0x40>
    2504:	f9 2f       	mov	r31, r25
    2506:	96 e9       	ldi	r25, 0x96	; 150
    2508:	bb 27       	eor	r27, r27
    250a:	93 95       	inc	r25
    250c:	f6 95       	lsr	r31
    250e:	87 95       	ror	r24
    2510:	77 95       	ror	r23
    2512:	67 95       	ror	r22
    2514:	b7 95       	ror	r27
    2516:	f1 11       	cpse	r31, r1
    2518:	f8 cf       	rjmp	.-16     	; 0x250a <__floatsisf+0x1c>
    251a:	fa f4       	brpl	.+62     	; 0x255a <__floatsisf+0x6c>
    251c:	bb 0f       	add	r27, r27
    251e:	11 f4       	brne	.+4      	; 0x2524 <__floatsisf+0x36>
    2520:	60 ff       	sbrs	r22, 0
    2522:	1b c0       	rjmp	.+54     	; 0x255a <__floatsisf+0x6c>
    2524:	6f 5f       	subi	r22, 0xFF	; 255
    2526:	7f 4f       	sbci	r23, 0xFF	; 255
    2528:	8f 4f       	sbci	r24, 0xFF	; 255
    252a:	9f 4f       	sbci	r25, 0xFF	; 255
    252c:	16 c0       	rjmp	.+44     	; 0x255a <__floatsisf+0x6c>
    252e:	88 23       	and	r24, r24
    2530:	11 f0       	breq	.+4      	; 0x2536 <__floatsisf+0x48>
    2532:	96 e9       	ldi	r25, 0x96	; 150
    2534:	11 c0       	rjmp	.+34     	; 0x2558 <__floatsisf+0x6a>
    2536:	77 23       	and	r23, r23
    2538:	21 f0       	breq	.+8      	; 0x2542 <__floatsisf+0x54>
    253a:	9e e8       	ldi	r25, 0x8E	; 142
    253c:	87 2f       	mov	r24, r23
    253e:	76 2f       	mov	r23, r22
    2540:	05 c0       	rjmp	.+10     	; 0x254c <__floatsisf+0x5e>
    2542:	66 23       	and	r22, r22
    2544:	71 f0       	breq	.+28     	; 0x2562 <__floatsisf+0x74>
    2546:	96 e8       	ldi	r25, 0x86	; 134
    2548:	86 2f       	mov	r24, r22
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	60 e0       	ldi	r22, 0x00	; 0
    254e:	2a f0       	brmi	.+10     	; 0x255a <__floatsisf+0x6c>
    2550:	9a 95       	dec	r25
    2552:	66 0f       	add	r22, r22
    2554:	77 1f       	adc	r23, r23
    2556:	88 1f       	adc	r24, r24
    2558:	da f7       	brpl	.-10     	; 0x2550 <__floatsisf+0x62>
    255a:	88 0f       	add	r24, r24
    255c:	96 95       	lsr	r25
    255e:	87 95       	ror	r24
    2560:	97 f9       	bld	r25, 7
    2562:	08 95       	ret

00002564 <__fp_inf>:
    2564:	97 f9       	bld	r25, 7
    2566:	9f 67       	ori	r25, 0x7F	; 127
    2568:	80 e8       	ldi	r24, 0x80	; 128
    256a:	70 e0       	ldi	r23, 0x00	; 0
    256c:	60 e0       	ldi	r22, 0x00	; 0
    256e:	08 95       	ret

00002570 <__fp_nan>:
    2570:	9f ef       	ldi	r25, 0xFF	; 255
    2572:	80 ec       	ldi	r24, 0xC0	; 192
    2574:	08 95       	ret

00002576 <__fp_pscA>:
    2576:	00 24       	eor	r0, r0
    2578:	0a 94       	dec	r0
    257a:	16 16       	cp	r1, r22
    257c:	17 06       	cpc	r1, r23
    257e:	18 06       	cpc	r1, r24
    2580:	09 06       	cpc	r0, r25
    2582:	08 95       	ret

00002584 <__fp_pscB>:
    2584:	00 24       	eor	r0, r0
    2586:	0a 94       	dec	r0
    2588:	12 16       	cp	r1, r18
    258a:	13 06       	cpc	r1, r19
    258c:	14 06       	cpc	r1, r20
    258e:	05 06       	cpc	r0, r21
    2590:	08 95       	ret

00002592 <__fp_round>:
    2592:	09 2e       	mov	r0, r25
    2594:	03 94       	inc	r0
    2596:	00 0c       	add	r0, r0
    2598:	11 f4       	brne	.+4      	; 0x259e <__fp_round+0xc>
    259a:	88 23       	and	r24, r24
    259c:	52 f0       	brmi	.+20     	; 0x25b2 <__fp_round+0x20>
    259e:	bb 0f       	add	r27, r27
    25a0:	40 f4       	brcc	.+16     	; 0x25b2 <__fp_round+0x20>
    25a2:	bf 2b       	or	r27, r31
    25a4:	11 f4       	brne	.+4      	; 0x25aa <__fp_round+0x18>
    25a6:	60 ff       	sbrs	r22, 0
    25a8:	04 c0       	rjmp	.+8      	; 0x25b2 <__fp_round+0x20>
    25aa:	6f 5f       	subi	r22, 0xFF	; 255
    25ac:	7f 4f       	sbci	r23, 0xFF	; 255
    25ae:	8f 4f       	sbci	r24, 0xFF	; 255
    25b0:	9f 4f       	sbci	r25, 0xFF	; 255
    25b2:	08 95       	ret

000025b4 <__fp_split3>:
    25b4:	57 fd       	sbrc	r21, 7
    25b6:	90 58       	subi	r25, 0x80	; 128
    25b8:	44 0f       	add	r20, r20
    25ba:	55 1f       	adc	r21, r21
    25bc:	59 f0       	breq	.+22     	; 0x25d4 <__fp_splitA+0x10>
    25be:	5f 3f       	cpi	r21, 0xFF	; 255
    25c0:	71 f0       	breq	.+28     	; 0x25de <__fp_splitA+0x1a>
    25c2:	47 95       	ror	r20

000025c4 <__fp_splitA>:
    25c4:	88 0f       	add	r24, r24
    25c6:	97 fb       	bst	r25, 7
    25c8:	99 1f       	adc	r25, r25
    25ca:	61 f0       	breq	.+24     	; 0x25e4 <__fp_splitA+0x20>
    25cc:	9f 3f       	cpi	r25, 0xFF	; 255
    25ce:	79 f0       	breq	.+30     	; 0x25ee <__fp_splitA+0x2a>
    25d0:	87 95       	ror	r24
    25d2:	08 95       	ret
    25d4:	12 16       	cp	r1, r18
    25d6:	13 06       	cpc	r1, r19
    25d8:	14 06       	cpc	r1, r20
    25da:	55 1f       	adc	r21, r21
    25dc:	f2 cf       	rjmp	.-28     	; 0x25c2 <__fp_split3+0xe>
    25de:	46 95       	lsr	r20
    25e0:	f1 df       	rcall	.-30     	; 0x25c4 <__fp_splitA>
    25e2:	08 c0       	rjmp	.+16     	; 0x25f4 <__fp_splitA+0x30>
    25e4:	16 16       	cp	r1, r22
    25e6:	17 06       	cpc	r1, r23
    25e8:	18 06       	cpc	r1, r24
    25ea:	99 1f       	adc	r25, r25
    25ec:	f1 cf       	rjmp	.-30     	; 0x25d0 <__fp_splitA+0xc>
    25ee:	86 95       	lsr	r24
    25f0:	71 05       	cpc	r23, r1
    25f2:	61 05       	cpc	r22, r1
    25f4:	08 94       	sec
    25f6:	08 95       	ret

000025f8 <__fp_zero>:
    25f8:	e8 94       	clt

000025fa <__fp_szero>:
    25fa:	bb 27       	eor	r27, r27
    25fc:	66 27       	eor	r22, r22
    25fe:	77 27       	eor	r23, r23
    2600:	cb 01       	movw	r24, r22
    2602:	97 f9       	bld	r25, 7
    2604:	08 95       	ret

00002606 <__mulsf3>:
    2606:	0b d0       	rcall	.+22     	; 0x261e <__mulsf3x>
    2608:	c4 cf       	rjmp	.-120    	; 0x2592 <__fp_round>
    260a:	b5 df       	rcall	.-150    	; 0x2576 <__fp_pscA>
    260c:	28 f0       	brcs	.+10     	; 0x2618 <__mulsf3+0x12>
    260e:	ba df       	rcall	.-140    	; 0x2584 <__fp_pscB>
    2610:	18 f0       	brcs	.+6      	; 0x2618 <__mulsf3+0x12>
    2612:	95 23       	and	r25, r21
    2614:	09 f0       	breq	.+2      	; 0x2618 <__mulsf3+0x12>
    2616:	a6 cf       	rjmp	.-180    	; 0x2564 <__fp_inf>
    2618:	ab cf       	rjmp	.-170    	; 0x2570 <__fp_nan>
    261a:	11 24       	eor	r1, r1
    261c:	ee cf       	rjmp	.-36     	; 0x25fa <__fp_szero>

0000261e <__mulsf3x>:
    261e:	ca df       	rcall	.-108    	; 0x25b4 <__fp_split3>
    2620:	a0 f3       	brcs	.-24     	; 0x260a <__mulsf3+0x4>

00002622 <__mulsf3_pse>:
    2622:	95 9f       	mul	r25, r21
    2624:	d1 f3       	breq	.-12     	; 0x261a <__mulsf3+0x14>
    2626:	95 0f       	add	r25, r21
    2628:	50 e0       	ldi	r21, 0x00	; 0
    262a:	55 1f       	adc	r21, r21
    262c:	62 9f       	mul	r22, r18
    262e:	f0 01       	movw	r30, r0
    2630:	72 9f       	mul	r23, r18
    2632:	bb 27       	eor	r27, r27
    2634:	f0 0d       	add	r31, r0
    2636:	b1 1d       	adc	r27, r1
    2638:	63 9f       	mul	r22, r19
    263a:	aa 27       	eor	r26, r26
    263c:	f0 0d       	add	r31, r0
    263e:	b1 1d       	adc	r27, r1
    2640:	aa 1f       	adc	r26, r26
    2642:	64 9f       	mul	r22, r20
    2644:	66 27       	eor	r22, r22
    2646:	b0 0d       	add	r27, r0
    2648:	a1 1d       	adc	r26, r1
    264a:	66 1f       	adc	r22, r22
    264c:	82 9f       	mul	r24, r18
    264e:	22 27       	eor	r18, r18
    2650:	b0 0d       	add	r27, r0
    2652:	a1 1d       	adc	r26, r1
    2654:	62 1f       	adc	r22, r18
    2656:	73 9f       	mul	r23, r19
    2658:	b0 0d       	add	r27, r0
    265a:	a1 1d       	adc	r26, r1
    265c:	62 1f       	adc	r22, r18
    265e:	83 9f       	mul	r24, r19
    2660:	a0 0d       	add	r26, r0
    2662:	61 1d       	adc	r22, r1
    2664:	22 1f       	adc	r18, r18
    2666:	74 9f       	mul	r23, r20
    2668:	33 27       	eor	r19, r19
    266a:	a0 0d       	add	r26, r0
    266c:	61 1d       	adc	r22, r1
    266e:	23 1f       	adc	r18, r19
    2670:	84 9f       	mul	r24, r20
    2672:	60 0d       	add	r22, r0
    2674:	21 1d       	adc	r18, r1
    2676:	82 2f       	mov	r24, r18
    2678:	76 2f       	mov	r23, r22
    267a:	6a 2f       	mov	r22, r26
    267c:	11 24       	eor	r1, r1
    267e:	9f 57       	subi	r25, 0x7F	; 127
    2680:	50 40       	sbci	r21, 0x00	; 0
    2682:	8a f0       	brmi	.+34     	; 0x26a6 <__mulsf3_pse+0x84>
    2684:	e1 f0       	breq	.+56     	; 0x26be <__mulsf3_pse+0x9c>
    2686:	88 23       	and	r24, r24
    2688:	4a f0       	brmi	.+18     	; 0x269c <__mulsf3_pse+0x7a>
    268a:	ee 0f       	add	r30, r30
    268c:	ff 1f       	adc	r31, r31
    268e:	bb 1f       	adc	r27, r27
    2690:	66 1f       	adc	r22, r22
    2692:	77 1f       	adc	r23, r23
    2694:	88 1f       	adc	r24, r24
    2696:	91 50       	subi	r25, 0x01	; 1
    2698:	50 40       	sbci	r21, 0x00	; 0
    269a:	a9 f7       	brne	.-22     	; 0x2686 <__mulsf3_pse+0x64>
    269c:	9e 3f       	cpi	r25, 0xFE	; 254
    269e:	51 05       	cpc	r21, r1
    26a0:	70 f0       	brcs	.+28     	; 0x26be <__mulsf3_pse+0x9c>
    26a2:	60 cf       	rjmp	.-320    	; 0x2564 <__fp_inf>
    26a4:	aa cf       	rjmp	.-172    	; 0x25fa <__fp_szero>
    26a6:	5f 3f       	cpi	r21, 0xFF	; 255
    26a8:	ec f3       	brlt	.-6      	; 0x26a4 <__mulsf3_pse+0x82>
    26aa:	98 3e       	cpi	r25, 0xE8	; 232
    26ac:	dc f3       	brlt	.-10     	; 0x26a4 <__mulsf3_pse+0x82>
    26ae:	86 95       	lsr	r24
    26b0:	77 95       	ror	r23
    26b2:	67 95       	ror	r22
    26b4:	b7 95       	ror	r27
    26b6:	f7 95       	ror	r31
    26b8:	e7 95       	ror	r30
    26ba:	9f 5f       	subi	r25, 0xFF	; 255
    26bc:	c1 f7       	brne	.-16     	; 0x26ae <__mulsf3_pse+0x8c>
    26be:	fe 2b       	or	r31, r30
    26c0:	88 0f       	add	r24, r24
    26c2:	91 1d       	adc	r25, r1
    26c4:	96 95       	lsr	r25
    26c6:	87 95       	ror	r24
    26c8:	97 f9       	bld	r25, 7
    26ca:	08 95       	ret

000026cc <__tablejump2__>:
    26cc:	ee 0f       	add	r30, r30
    26ce:	ff 1f       	adc	r31, r31
    26d0:	88 1f       	adc	r24, r24
    26d2:	8b bf       	out	0x3b, r24	; 59
    26d4:	07 90       	elpm	r0, Z+
    26d6:	f6 91       	elpm	r31, Z
    26d8:	e0 2d       	mov	r30, r0
    26da:	19 94       	eijmp

000026dc <calloc>:
    26dc:	0f 93       	push	r16
    26de:	1f 93       	push	r17
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	86 9f       	mul	r24, r22
    26e6:	80 01       	movw	r16, r0
    26e8:	87 9f       	mul	r24, r23
    26ea:	10 0d       	add	r17, r0
    26ec:	96 9f       	mul	r25, r22
    26ee:	10 0d       	add	r17, r0
    26f0:	11 24       	eor	r1, r1
    26f2:	c8 01       	movw	r24, r16
    26f4:	0d d0       	rcall	.+26     	; 0x2710 <malloc>
    26f6:	ec 01       	movw	r28, r24
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	21 f0       	breq	.+8      	; 0x2704 <calloc+0x28>
    26fc:	a8 01       	movw	r20, r16
    26fe:	60 e0       	ldi	r22, 0x00	; 0
    2700:	70 e0       	ldi	r23, 0x00	; 0
    2702:	34 d1       	rcall	.+616    	; 0x296c <memset>
    2704:	ce 01       	movw	r24, r28
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	08 95       	ret

00002710 <malloc>:
    2710:	0f 93       	push	r16
    2712:	1f 93       	push	r17
    2714:	cf 93       	push	r28
    2716:	df 93       	push	r29
    2718:	82 30       	cpi	r24, 0x02	; 2
    271a:	91 05       	cpc	r25, r1
    271c:	10 f4       	brcc	.+4      	; 0x2722 <malloc+0x12>
    271e:	82 e0       	ldi	r24, 0x02	; 2
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	e0 91 1f 03 	lds	r30, 0x031F	; 0x80031f <__flp>
    2726:	f0 91 20 03 	lds	r31, 0x0320	; 0x800320 <__flp+0x1>
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	a0 e0       	ldi	r26, 0x00	; 0
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	30 97       	sbiw	r30, 0x00	; 0
    2734:	19 f1       	breq	.+70     	; 0x277c <malloc+0x6c>
    2736:	40 81       	ld	r20, Z
    2738:	51 81       	ldd	r21, Z+1	; 0x01
    273a:	02 81       	ldd	r16, Z+2	; 0x02
    273c:	13 81       	ldd	r17, Z+3	; 0x03
    273e:	48 17       	cp	r20, r24
    2740:	59 07       	cpc	r21, r25
    2742:	c8 f0       	brcs	.+50     	; 0x2776 <malloc+0x66>
    2744:	84 17       	cp	r24, r20
    2746:	95 07       	cpc	r25, r21
    2748:	69 f4       	brne	.+26     	; 0x2764 <malloc+0x54>
    274a:	10 97       	sbiw	r26, 0x00	; 0
    274c:	31 f0       	breq	.+12     	; 0x275a <malloc+0x4a>
    274e:	12 96       	adiw	r26, 0x02	; 2
    2750:	0c 93       	st	X, r16
    2752:	12 97       	sbiw	r26, 0x02	; 2
    2754:	13 96       	adiw	r26, 0x03	; 3
    2756:	1c 93       	st	X, r17
    2758:	27 c0       	rjmp	.+78     	; 0x27a8 <malloc+0x98>
    275a:	00 93 1f 03 	sts	0x031F, r16	; 0x80031f <__flp>
    275e:	10 93 20 03 	sts	0x0320, r17	; 0x800320 <__flp+0x1>
    2762:	22 c0       	rjmp	.+68     	; 0x27a8 <malloc+0x98>
    2764:	21 15       	cp	r18, r1
    2766:	31 05       	cpc	r19, r1
    2768:	19 f0       	breq	.+6      	; 0x2770 <malloc+0x60>
    276a:	42 17       	cp	r20, r18
    276c:	53 07       	cpc	r21, r19
    276e:	18 f4       	brcc	.+6      	; 0x2776 <malloc+0x66>
    2770:	9a 01       	movw	r18, r20
    2772:	bd 01       	movw	r22, r26
    2774:	ef 01       	movw	r28, r30
    2776:	df 01       	movw	r26, r30
    2778:	f8 01       	movw	r30, r16
    277a:	db cf       	rjmp	.-74     	; 0x2732 <malloc+0x22>
    277c:	21 15       	cp	r18, r1
    277e:	31 05       	cpc	r19, r1
    2780:	f9 f0       	breq	.+62     	; 0x27c0 <malloc+0xb0>
    2782:	28 1b       	sub	r18, r24
    2784:	39 0b       	sbc	r19, r25
    2786:	24 30       	cpi	r18, 0x04	; 4
    2788:	31 05       	cpc	r19, r1
    278a:	80 f4       	brcc	.+32     	; 0x27ac <malloc+0x9c>
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	9b 81       	ldd	r25, Y+3	; 0x03
    2790:	61 15       	cp	r22, r1
    2792:	71 05       	cpc	r23, r1
    2794:	21 f0       	breq	.+8      	; 0x279e <malloc+0x8e>
    2796:	fb 01       	movw	r30, r22
    2798:	93 83       	std	Z+3, r25	; 0x03
    279a:	82 83       	std	Z+2, r24	; 0x02
    279c:	04 c0       	rjmp	.+8      	; 0x27a6 <malloc+0x96>
    279e:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <__flp+0x1>
    27a2:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <__flp>
    27a6:	fe 01       	movw	r30, r28
    27a8:	32 96       	adiw	r30, 0x02	; 2
    27aa:	44 c0       	rjmp	.+136    	; 0x2834 <malloc+0x124>
    27ac:	fe 01       	movw	r30, r28
    27ae:	e2 0f       	add	r30, r18
    27b0:	f3 1f       	adc	r31, r19
    27b2:	81 93       	st	Z+, r24
    27b4:	91 93       	st	Z+, r25
    27b6:	22 50       	subi	r18, 0x02	; 2
    27b8:	31 09       	sbc	r19, r1
    27ba:	39 83       	std	Y+1, r19	; 0x01
    27bc:	28 83       	st	Y, r18
    27be:	3a c0       	rjmp	.+116    	; 0x2834 <malloc+0x124>
    27c0:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <__brkval>
    27c4:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <__brkval+0x1>
    27c8:	23 2b       	or	r18, r19
    27ca:	41 f4       	brne	.+16     	; 0x27dc <malloc+0xcc>
    27cc:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    27d0:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    27d4:	30 93 1e 03 	sts	0x031E, r19	; 0x80031e <__brkval+0x1>
    27d8:	20 93 1d 03 	sts	0x031D, r18	; 0x80031d <__brkval>
    27dc:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    27e0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    27e4:	21 15       	cp	r18, r1
    27e6:	31 05       	cpc	r19, r1
    27e8:	41 f4       	brne	.+16     	; 0x27fa <malloc+0xea>
    27ea:	2d b7       	in	r18, 0x3d	; 61
    27ec:	3e b7       	in	r19, 0x3e	; 62
    27ee:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    27f2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    27f6:	24 1b       	sub	r18, r20
    27f8:	35 0b       	sbc	r19, r21
    27fa:	e0 91 1d 03 	lds	r30, 0x031D	; 0x80031d <__brkval>
    27fe:	f0 91 1e 03 	lds	r31, 0x031E	; 0x80031e <__brkval+0x1>
    2802:	e2 17       	cp	r30, r18
    2804:	f3 07       	cpc	r31, r19
    2806:	a0 f4       	brcc	.+40     	; 0x2830 <malloc+0x120>
    2808:	2e 1b       	sub	r18, r30
    280a:	3f 0b       	sbc	r19, r31
    280c:	28 17       	cp	r18, r24
    280e:	39 07       	cpc	r19, r25
    2810:	78 f0       	brcs	.+30     	; 0x2830 <malloc+0x120>
    2812:	ac 01       	movw	r20, r24
    2814:	4e 5f       	subi	r20, 0xFE	; 254
    2816:	5f 4f       	sbci	r21, 0xFF	; 255
    2818:	24 17       	cp	r18, r20
    281a:	35 07       	cpc	r19, r21
    281c:	48 f0       	brcs	.+18     	; 0x2830 <malloc+0x120>
    281e:	4e 0f       	add	r20, r30
    2820:	5f 1f       	adc	r21, r31
    2822:	50 93 1e 03 	sts	0x031E, r21	; 0x80031e <__brkval+0x1>
    2826:	40 93 1d 03 	sts	0x031D, r20	; 0x80031d <__brkval>
    282a:	81 93       	st	Z+, r24
    282c:	91 93       	st	Z+, r25
    282e:	02 c0       	rjmp	.+4      	; 0x2834 <malloc+0x124>
    2830:	e0 e0       	ldi	r30, 0x00	; 0
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	cf 01       	movw	r24, r30
    2836:	df 91       	pop	r29
    2838:	cf 91       	pop	r28
    283a:	1f 91       	pop	r17
    283c:	0f 91       	pop	r16
    283e:	08 95       	ret

00002840 <free>:
    2840:	cf 93       	push	r28
    2842:	df 93       	push	r29
    2844:	00 97       	sbiw	r24, 0x00	; 0
    2846:	09 f4       	brne	.+2      	; 0x284a <free+0xa>
    2848:	81 c0       	rjmp	.+258    	; 0x294c <free+0x10c>
    284a:	fc 01       	movw	r30, r24
    284c:	32 97       	sbiw	r30, 0x02	; 2
    284e:	13 82       	std	Z+3, r1	; 0x03
    2850:	12 82       	std	Z+2, r1	; 0x02
    2852:	a0 91 1f 03 	lds	r26, 0x031F	; 0x80031f <__flp>
    2856:	b0 91 20 03 	lds	r27, 0x0320	; 0x800320 <__flp+0x1>
    285a:	10 97       	sbiw	r26, 0x00	; 0
    285c:	81 f4       	brne	.+32     	; 0x287e <free+0x3e>
    285e:	20 81       	ld	r18, Z
    2860:	31 81       	ldd	r19, Z+1	; 0x01
    2862:	82 0f       	add	r24, r18
    2864:	93 1f       	adc	r25, r19
    2866:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <__brkval>
    286a:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <__brkval+0x1>
    286e:	28 17       	cp	r18, r24
    2870:	39 07       	cpc	r19, r25
    2872:	51 f5       	brne	.+84     	; 0x28c8 <free+0x88>
    2874:	f0 93 1e 03 	sts	0x031E, r31	; 0x80031e <__brkval+0x1>
    2878:	e0 93 1d 03 	sts	0x031D, r30	; 0x80031d <__brkval>
    287c:	67 c0       	rjmp	.+206    	; 0x294c <free+0x10c>
    287e:	ed 01       	movw	r28, r26
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	ce 17       	cp	r28, r30
    2886:	df 07       	cpc	r29, r31
    2888:	40 f4       	brcc	.+16     	; 0x289a <free+0x5a>
    288a:	4a 81       	ldd	r20, Y+2	; 0x02
    288c:	5b 81       	ldd	r21, Y+3	; 0x03
    288e:	9e 01       	movw	r18, r28
    2890:	41 15       	cp	r20, r1
    2892:	51 05       	cpc	r21, r1
    2894:	f1 f0       	breq	.+60     	; 0x28d2 <free+0x92>
    2896:	ea 01       	movw	r28, r20
    2898:	f5 cf       	rjmp	.-22     	; 0x2884 <free+0x44>
    289a:	d3 83       	std	Z+3, r29	; 0x03
    289c:	c2 83       	std	Z+2, r28	; 0x02
    289e:	40 81       	ld	r20, Z
    28a0:	51 81       	ldd	r21, Z+1	; 0x01
    28a2:	84 0f       	add	r24, r20
    28a4:	95 1f       	adc	r25, r21
    28a6:	c8 17       	cp	r28, r24
    28a8:	d9 07       	cpc	r29, r25
    28aa:	59 f4       	brne	.+22     	; 0x28c2 <free+0x82>
    28ac:	88 81       	ld	r24, Y
    28ae:	99 81       	ldd	r25, Y+1	; 0x01
    28b0:	84 0f       	add	r24, r20
    28b2:	95 1f       	adc	r25, r21
    28b4:	02 96       	adiw	r24, 0x02	; 2
    28b6:	91 83       	std	Z+1, r25	; 0x01
    28b8:	80 83       	st	Z, r24
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	9b 81       	ldd	r25, Y+3	; 0x03
    28be:	93 83       	std	Z+3, r25	; 0x03
    28c0:	82 83       	std	Z+2, r24	; 0x02
    28c2:	21 15       	cp	r18, r1
    28c4:	31 05       	cpc	r19, r1
    28c6:	29 f4       	brne	.+10     	; 0x28d2 <free+0x92>
    28c8:	f0 93 20 03 	sts	0x0320, r31	; 0x800320 <__flp+0x1>
    28cc:	e0 93 1f 03 	sts	0x031F, r30	; 0x80031f <__flp>
    28d0:	3d c0       	rjmp	.+122    	; 0x294c <free+0x10c>
    28d2:	e9 01       	movw	r28, r18
    28d4:	fb 83       	std	Y+3, r31	; 0x03
    28d6:	ea 83       	std	Y+2, r30	; 0x02
    28d8:	49 91       	ld	r20, Y+
    28da:	59 91       	ld	r21, Y+
    28dc:	c4 0f       	add	r28, r20
    28de:	d5 1f       	adc	r29, r21
    28e0:	ec 17       	cp	r30, r28
    28e2:	fd 07       	cpc	r31, r29
    28e4:	61 f4       	brne	.+24     	; 0x28fe <free+0xbe>
    28e6:	80 81       	ld	r24, Z
    28e8:	91 81       	ldd	r25, Z+1	; 0x01
    28ea:	84 0f       	add	r24, r20
    28ec:	95 1f       	adc	r25, r21
    28ee:	02 96       	adiw	r24, 0x02	; 2
    28f0:	e9 01       	movw	r28, r18
    28f2:	99 83       	std	Y+1, r25	; 0x01
    28f4:	88 83       	st	Y, r24
    28f6:	82 81       	ldd	r24, Z+2	; 0x02
    28f8:	93 81       	ldd	r25, Z+3	; 0x03
    28fa:	9b 83       	std	Y+3, r25	; 0x03
    28fc:	8a 83       	std	Y+2, r24	; 0x02
    28fe:	e0 e0       	ldi	r30, 0x00	; 0
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	12 96       	adiw	r26, 0x02	; 2
    2904:	8d 91       	ld	r24, X+
    2906:	9c 91       	ld	r25, X
    2908:	13 97       	sbiw	r26, 0x03	; 3
    290a:	00 97       	sbiw	r24, 0x00	; 0
    290c:	19 f0       	breq	.+6      	; 0x2914 <free+0xd4>
    290e:	fd 01       	movw	r30, r26
    2910:	dc 01       	movw	r26, r24
    2912:	f7 cf       	rjmp	.-18     	; 0x2902 <free+0xc2>
    2914:	8d 91       	ld	r24, X+
    2916:	9c 91       	ld	r25, X
    2918:	11 97       	sbiw	r26, 0x01	; 1
    291a:	9d 01       	movw	r18, r26
    291c:	2e 5f       	subi	r18, 0xFE	; 254
    291e:	3f 4f       	sbci	r19, 0xFF	; 255
    2920:	82 0f       	add	r24, r18
    2922:	93 1f       	adc	r25, r19
    2924:	20 91 1d 03 	lds	r18, 0x031D	; 0x80031d <__brkval>
    2928:	30 91 1e 03 	lds	r19, 0x031E	; 0x80031e <__brkval+0x1>
    292c:	28 17       	cp	r18, r24
    292e:	39 07       	cpc	r19, r25
    2930:	69 f4       	brne	.+26     	; 0x294c <free+0x10c>
    2932:	30 97       	sbiw	r30, 0x00	; 0
    2934:	29 f4       	brne	.+10     	; 0x2940 <free+0x100>
    2936:	10 92 20 03 	sts	0x0320, r1	; 0x800320 <__flp+0x1>
    293a:	10 92 1f 03 	sts	0x031F, r1	; 0x80031f <__flp>
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <free+0x104>
    2940:	13 82       	std	Z+3, r1	; 0x03
    2942:	12 82       	std	Z+2, r1	; 0x02
    2944:	b0 93 1e 03 	sts	0x031E, r27	; 0x80031e <__brkval+0x1>
    2948:	a0 93 1d 03 	sts	0x031D, r26	; 0x80031d <__brkval>
    294c:	df 91       	pop	r29
    294e:	cf 91       	pop	r28
    2950:	08 95       	ret

00002952 <abort>:
    2952:	81 e0       	ldi	r24, 0x01	; 1
    2954:	90 e0       	ldi	r25, 0x00	; 0
    2956:	f8 94       	cli
    2958:	00 c3       	rjmp	.+1536   	; 0x2f5a <_exit>

0000295a <memcpy>:
    295a:	fb 01       	movw	r30, r22
    295c:	dc 01       	movw	r26, r24
    295e:	02 c0       	rjmp	.+4      	; 0x2964 <memcpy+0xa>
    2960:	01 90       	ld	r0, Z+
    2962:	0d 92       	st	X+, r0
    2964:	41 50       	subi	r20, 0x01	; 1
    2966:	50 40       	sbci	r21, 0x00	; 0
    2968:	d8 f7       	brcc	.-10     	; 0x2960 <memcpy+0x6>
    296a:	08 95       	ret

0000296c <memset>:
    296c:	dc 01       	movw	r26, r24
    296e:	01 c0       	rjmp	.+2      	; 0x2972 <memset+0x6>
    2970:	6d 93       	st	X+, r22
    2972:	41 50       	subi	r20, 0x01	; 1
    2974:	50 40       	sbci	r21, 0x00	; 0
    2976:	e0 f7       	brcc	.-8      	; 0x2970 <memset+0x4>
    2978:	08 95       	ret

0000297a <printf>:
    297a:	cf 93       	push	r28
    297c:	df 93       	push	r29
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	ae 01       	movw	r20, r28
    2984:	4a 5f       	subi	r20, 0xFA	; 250
    2986:	5f 4f       	sbci	r21, 0xFF	; 255
    2988:	fa 01       	movw	r30, r20
    298a:	61 91       	ld	r22, Z+
    298c:	71 91       	ld	r23, Z+
    298e:	af 01       	movw	r20, r30
    2990:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <__iob+0x2>
    2994:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <__iob+0x3>
    2998:	33 d0       	rcall	.+102    	; 0x2a00 <vfprintf>
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	08 95       	ret

000029a0 <puts>:
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	e0 91 23 03 	lds	r30, 0x0323	; 0x800323 <__iob+0x2>
    29ac:	f0 91 24 03 	lds	r31, 0x0324	; 0x800324 <__iob+0x3>
    29b0:	23 81       	ldd	r18, Z+3	; 0x03
    29b2:	21 ff       	sbrs	r18, 1
    29b4:	1b c0       	rjmp	.+54     	; 0x29ec <puts+0x4c>
    29b6:	8c 01       	movw	r16, r24
    29b8:	d0 e0       	ldi	r29, 0x00	; 0
    29ba:	c0 e0       	ldi	r28, 0x00	; 0
    29bc:	f8 01       	movw	r30, r16
    29be:	81 91       	ld	r24, Z+
    29c0:	8f 01       	movw	r16, r30
    29c2:	60 91 23 03 	lds	r22, 0x0323	; 0x800323 <__iob+0x2>
    29c6:	70 91 24 03 	lds	r23, 0x0324	; 0x800324 <__iob+0x3>
    29ca:	db 01       	movw	r26, r22
    29cc:	18 96       	adiw	r26, 0x08	; 8
    29ce:	ed 91       	ld	r30, X+
    29d0:	fc 91       	ld	r31, X
    29d2:	19 97       	sbiw	r26, 0x09	; 9
    29d4:	88 23       	and	r24, r24
    29d6:	31 f0       	breq	.+12     	; 0x29e4 <puts+0x44>
    29d8:	19 95       	eicall
    29da:	89 2b       	or	r24, r25
    29dc:	79 f3       	breq	.-34     	; 0x29bc <puts+0x1c>
    29de:	df ef       	ldi	r29, 0xFF	; 255
    29e0:	cf ef       	ldi	r28, 0xFF	; 255
    29e2:	ec cf       	rjmp	.-40     	; 0x29bc <puts+0x1c>
    29e4:	8a e0       	ldi	r24, 0x0A	; 10
    29e6:	19 95       	eicall
    29e8:	89 2b       	or	r24, r25
    29ea:	19 f0       	breq	.+6      	; 0x29f2 <puts+0x52>
    29ec:	8f ef       	ldi	r24, 0xFF	; 255
    29ee:	9f ef       	ldi	r25, 0xFF	; 255
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <puts+0x56>
    29f2:	8d 2f       	mov	r24, r29
    29f4:	9c 2f       	mov	r25, r28
    29f6:	df 91       	pop	r29
    29f8:	cf 91       	pop	r28
    29fa:	1f 91       	pop	r17
    29fc:	0f 91       	pop	r16
    29fe:	08 95       	ret

00002a00 <vfprintf>:
    2a00:	2f 92       	push	r2
    2a02:	3f 92       	push	r3
    2a04:	4f 92       	push	r4
    2a06:	5f 92       	push	r5
    2a08:	6f 92       	push	r6
    2a0a:	7f 92       	push	r7
    2a0c:	8f 92       	push	r8
    2a0e:	9f 92       	push	r9
    2a10:	af 92       	push	r10
    2a12:	bf 92       	push	r11
    2a14:	cf 92       	push	r12
    2a16:	df 92       	push	r13
    2a18:	ef 92       	push	r14
    2a1a:	ff 92       	push	r15
    2a1c:	0f 93       	push	r16
    2a1e:	1f 93       	push	r17
    2a20:	cf 93       	push	r28
    2a22:	df 93       	push	r29
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
    2a28:	2b 97       	sbiw	r28, 0x0b	; 11
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	6c 01       	movw	r12, r24
    2a36:	7b 01       	movw	r14, r22
    2a38:	8a 01       	movw	r16, r20
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	17 82       	std	Z+7, r1	; 0x07
    2a3e:	16 82       	std	Z+6, r1	; 0x06
    2a40:	83 81       	ldd	r24, Z+3	; 0x03
    2a42:	81 ff       	sbrs	r24, 1
    2a44:	bf c1       	rjmp	.+894    	; 0x2dc4 <vfprintf+0x3c4>
    2a46:	ce 01       	movw	r24, r28
    2a48:	01 96       	adiw	r24, 0x01	; 1
    2a4a:	3c 01       	movw	r6, r24
    2a4c:	f6 01       	movw	r30, r12
    2a4e:	93 81       	ldd	r25, Z+3	; 0x03
    2a50:	f7 01       	movw	r30, r14
    2a52:	93 fd       	sbrc	r25, 3
    2a54:	85 91       	lpm	r24, Z+
    2a56:	93 ff       	sbrs	r25, 3
    2a58:	81 91       	ld	r24, Z+
    2a5a:	7f 01       	movw	r14, r30
    2a5c:	88 23       	and	r24, r24
    2a5e:	09 f4       	brne	.+2      	; 0x2a62 <vfprintf+0x62>
    2a60:	ad c1       	rjmp	.+858    	; 0x2dbc <vfprintf+0x3bc>
    2a62:	85 32       	cpi	r24, 0x25	; 37
    2a64:	39 f4       	brne	.+14     	; 0x2a74 <vfprintf+0x74>
    2a66:	93 fd       	sbrc	r25, 3
    2a68:	85 91       	lpm	r24, Z+
    2a6a:	93 ff       	sbrs	r25, 3
    2a6c:	81 91       	ld	r24, Z+
    2a6e:	7f 01       	movw	r14, r30
    2a70:	85 32       	cpi	r24, 0x25	; 37
    2a72:	21 f4       	brne	.+8      	; 0x2a7c <vfprintf+0x7c>
    2a74:	b6 01       	movw	r22, r12
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	d6 d1       	rcall	.+940    	; 0x2e26 <fputc>
    2a7a:	e8 cf       	rjmp	.-48     	; 0x2a4c <vfprintf+0x4c>
    2a7c:	91 2c       	mov	r9, r1
    2a7e:	21 2c       	mov	r2, r1
    2a80:	31 2c       	mov	r3, r1
    2a82:	ff e1       	ldi	r31, 0x1F	; 31
    2a84:	f3 15       	cp	r31, r3
    2a86:	d8 f0       	brcs	.+54     	; 0x2abe <vfprintf+0xbe>
    2a88:	8b 32       	cpi	r24, 0x2B	; 43
    2a8a:	79 f0       	breq	.+30     	; 0x2aaa <vfprintf+0xaa>
    2a8c:	38 f4       	brcc	.+14     	; 0x2a9c <vfprintf+0x9c>
    2a8e:	80 32       	cpi	r24, 0x20	; 32
    2a90:	79 f0       	breq	.+30     	; 0x2ab0 <vfprintf+0xb0>
    2a92:	83 32       	cpi	r24, 0x23	; 35
    2a94:	a1 f4       	brne	.+40     	; 0x2abe <vfprintf+0xbe>
    2a96:	23 2d       	mov	r18, r3
    2a98:	20 61       	ori	r18, 0x10	; 16
    2a9a:	1d c0       	rjmp	.+58     	; 0x2ad6 <vfprintf+0xd6>
    2a9c:	8d 32       	cpi	r24, 0x2D	; 45
    2a9e:	61 f0       	breq	.+24     	; 0x2ab8 <vfprintf+0xb8>
    2aa0:	80 33       	cpi	r24, 0x30	; 48
    2aa2:	69 f4       	brne	.+26     	; 0x2abe <vfprintf+0xbe>
    2aa4:	23 2d       	mov	r18, r3
    2aa6:	21 60       	ori	r18, 0x01	; 1
    2aa8:	16 c0       	rjmp	.+44     	; 0x2ad6 <vfprintf+0xd6>
    2aaa:	83 2d       	mov	r24, r3
    2aac:	82 60       	ori	r24, 0x02	; 2
    2aae:	38 2e       	mov	r3, r24
    2ab0:	e3 2d       	mov	r30, r3
    2ab2:	e4 60       	ori	r30, 0x04	; 4
    2ab4:	3e 2e       	mov	r3, r30
    2ab6:	2a c0       	rjmp	.+84     	; 0x2b0c <vfprintf+0x10c>
    2ab8:	f3 2d       	mov	r31, r3
    2aba:	f8 60       	ori	r31, 0x08	; 8
    2abc:	1d c0       	rjmp	.+58     	; 0x2af8 <vfprintf+0xf8>
    2abe:	37 fc       	sbrc	r3, 7
    2ac0:	2d c0       	rjmp	.+90     	; 0x2b1c <vfprintf+0x11c>
    2ac2:	20 ed       	ldi	r18, 0xD0	; 208
    2ac4:	28 0f       	add	r18, r24
    2ac6:	2a 30       	cpi	r18, 0x0A	; 10
    2ac8:	40 f0       	brcs	.+16     	; 0x2ada <vfprintf+0xda>
    2aca:	8e 32       	cpi	r24, 0x2E	; 46
    2acc:	b9 f4       	brne	.+46     	; 0x2afc <vfprintf+0xfc>
    2ace:	36 fc       	sbrc	r3, 6
    2ad0:	75 c1       	rjmp	.+746    	; 0x2dbc <vfprintf+0x3bc>
    2ad2:	23 2d       	mov	r18, r3
    2ad4:	20 64       	ori	r18, 0x40	; 64
    2ad6:	32 2e       	mov	r3, r18
    2ad8:	19 c0       	rjmp	.+50     	; 0x2b0c <vfprintf+0x10c>
    2ada:	36 fe       	sbrs	r3, 6
    2adc:	06 c0       	rjmp	.+12     	; 0x2aea <vfprintf+0xea>
    2ade:	8a e0       	ldi	r24, 0x0A	; 10
    2ae0:	98 9e       	mul	r9, r24
    2ae2:	20 0d       	add	r18, r0
    2ae4:	11 24       	eor	r1, r1
    2ae6:	92 2e       	mov	r9, r18
    2ae8:	11 c0       	rjmp	.+34     	; 0x2b0c <vfprintf+0x10c>
    2aea:	ea e0       	ldi	r30, 0x0A	; 10
    2aec:	2e 9e       	mul	r2, r30
    2aee:	20 0d       	add	r18, r0
    2af0:	11 24       	eor	r1, r1
    2af2:	22 2e       	mov	r2, r18
    2af4:	f3 2d       	mov	r31, r3
    2af6:	f0 62       	ori	r31, 0x20	; 32
    2af8:	3f 2e       	mov	r3, r31
    2afa:	08 c0       	rjmp	.+16     	; 0x2b0c <vfprintf+0x10c>
    2afc:	8c 36       	cpi	r24, 0x6C	; 108
    2afe:	21 f4       	brne	.+8      	; 0x2b08 <vfprintf+0x108>
    2b00:	83 2d       	mov	r24, r3
    2b02:	80 68       	ori	r24, 0x80	; 128
    2b04:	38 2e       	mov	r3, r24
    2b06:	02 c0       	rjmp	.+4      	; 0x2b0c <vfprintf+0x10c>
    2b08:	88 36       	cpi	r24, 0x68	; 104
    2b0a:	41 f4       	brne	.+16     	; 0x2b1c <vfprintf+0x11c>
    2b0c:	f7 01       	movw	r30, r14
    2b0e:	93 fd       	sbrc	r25, 3
    2b10:	85 91       	lpm	r24, Z+
    2b12:	93 ff       	sbrs	r25, 3
    2b14:	81 91       	ld	r24, Z+
    2b16:	7f 01       	movw	r14, r30
    2b18:	81 11       	cpse	r24, r1
    2b1a:	b3 cf       	rjmp	.-154    	; 0x2a82 <vfprintf+0x82>
    2b1c:	98 2f       	mov	r25, r24
    2b1e:	9f 7d       	andi	r25, 0xDF	; 223
    2b20:	95 54       	subi	r25, 0x45	; 69
    2b22:	93 30       	cpi	r25, 0x03	; 3
    2b24:	28 f4       	brcc	.+10     	; 0x2b30 <vfprintf+0x130>
    2b26:	0c 5f       	subi	r16, 0xFC	; 252
    2b28:	1f 4f       	sbci	r17, 0xFF	; 255
    2b2a:	9f e3       	ldi	r25, 0x3F	; 63
    2b2c:	99 83       	std	Y+1, r25	; 0x01
    2b2e:	0d c0       	rjmp	.+26     	; 0x2b4a <vfprintf+0x14a>
    2b30:	83 36       	cpi	r24, 0x63	; 99
    2b32:	31 f0       	breq	.+12     	; 0x2b40 <vfprintf+0x140>
    2b34:	83 37       	cpi	r24, 0x73	; 115
    2b36:	71 f0       	breq	.+28     	; 0x2b54 <vfprintf+0x154>
    2b38:	83 35       	cpi	r24, 0x53	; 83
    2b3a:	09 f0       	breq	.+2      	; 0x2b3e <vfprintf+0x13e>
    2b3c:	55 c0       	rjmp	.+170    	; 0x2be8 <vfprintf+0x1e8>
    2b3e:	20 c0       	rjmp	.+64     	; 0x2b80 <vfprintf+0x180>
    2b40:	f8 01       	movw	r30, r16
    2b42:	80 81       	ld	r24, Z
    2b44:	89 83       	std	Y+1, r24	; 0x01
    2b46:	0e 5f       	subi	r16, 0xFE	; 254
    2b48:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4a:	88 24       	eor	r8, r8
    2b4c:	83 94       	inc	r8
    2b4e:	91 2c       	mov	r9, r1
    2b50:	53 01       	movw	r10, r6
    2b52:	12 c0       	rjmp	.+36     	; 0x2b78 <vfprintf+0x178>
    2b54:	28 01       	movw	r4, r16
    2b56:	f2 e0       	ldi	r31, 0x02	; 2
    2b58:	4f 0e       	add	r4, r31
    2b5a:	51 1c       	adc	r5, r1
    2b5c:	f8 01       	movw	r30, r16
    2b5e:	a0 80       	ld	r10, Z
    2b60:	b1 80       	ldd	r11, Z+1	; 0x01
    2b62:	36 fe       	sbrs	r3, 6
    2b64:	03 c0       	rjmp	.+6      	; 0x2b6c <vfprintf+0x16c>
    2b66:	69 2d       	mov	r22, r9
    2b68:	70 e0       	ldi	r23, 0x00	; 0
    2b6a:	02 c0       	rjmp	.+4      	; 0x2b70 <vfprintf+0x170>
    2b6c:	6f ef       	ldi	r22, 0xFF	; 255
    2b6e:	7f ef       	ldi	r23, 0xFF	; 255
    2b70:	c5 01       	movw	r24, r10
    2b72:	4e d1       	rcall	.+668    	; 0x2e10 <strnlen>
    2b74:	4c 01       	movw	r8, r24
    2b76:	82 01       	movw	r16, r4
    2b78:	f3 2d       	mov	r31, r3
    2b7a:	ff 77       	andi	r31, 0x7F	; 127
    2b7c:	3f 2e       	mov	r3, r31
    2b7e:	15 c0       	rjmp	.+42     	; 0x2baa <vfprintf+0x1aa>
    2b80:	28 01       	movw	r4, r16
    2b82:	22 e0       	ldi	r18, 0x02	; 2
    2b84:	42 0e       	add	r4, r18
    2b86:	51 1c       	adc	r5, r1
    2b88:	f8 01       	movw	r30, r16
    2b8a:	a0 80       	ld	r10, Z
    2b8c:	b1 80       	ldd	r11, Z+1	; 0x01
    2b8e:	36 fe       	sbrs	r3, 6
    2b90:	03 c0       	rjmp	.+6      	; 0x2b98 <vfprintf+0x198>
    2b92:	69 2d       	mov	r22, r9
    2b94:	70 e0       	ldi	r23, 0x00	; 0
    2b96:	02 c0       	rjmp	.+4      	; 0x2b9c <vfprintf+0x19c>
    2b98:	6f ef       	ldi	r22, 0xFF	; 255
    2b9a:	7f ef       	ldi	r23, 0xFF	; 255
    2b9c:	c5 01       	movw	r24, r10
    2b9e:	2d d1       	rcall	.+602    	; 0x2dfa <strnlen_P>
    2ba0:	4c 01       	movw	r8, r24
    2ba2:	f3 2d       	mov	r31, r3
    2ba4:	f0 68       	ori	r31, 0x80	; 128
    2ba6:	3f 2e       	mov	r3, r31
    2ba8:	82 01       	movw	r16, r4
    2baa:	33 fc       	sbrc	r3, 3
    2bac:	19 c0       	rjmp	.+50     	; 0x2be0 <vfprintf+0x1e0>
    2bae:	82 2d       	mov	r24, r2
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	88 16       	cp	r8, r24
    2bb4:	99 06       	cpc	r9, r25
    2bb6:	a0 f4       	brcc	.+40     	; 0x2be0 <vfprintf+0x1e0>
    2bb8:	b6 01       	movw	r22, r12
    2bba:	80 e2       	ldi	r24, 0x20	; 32
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	33 d1       	rcall	.+614    	; 0x2e26 <fputc>
    2bc0:	2a 94       	dec	r2
    2bc2:	f5 cf       	rjmp	.-22     	; 0x2bae <vfprintf+0x1ae>
    2bc4:	f5 01       	movw	r30, r10
    2bc6:	37 fc       	sbrc	r3, 7
    2bc8:	85 91       	lpm	r24, Z+
    2bca:	37 fe       	sbrs	r3, 7
    2bcc:	81 91       	ld	r24, Z+
    2bce:	5f 01       	movw	r10, r30
    2bd0:	b6 01       	movw	r22, r12
    2bd2:	90 e0       	ldi	r25, 0x00	; 0
    2bd4:	28 d1       	rcall	.+592    	; 0x2e26 <fputc>
    2bd6:	21 10       	cpse	r2, r1
    2bd8:	2a 94       	dec	r2
    2bda:	21 e0       	ldi	r18, 0x01	; 1
    2bdc:	82 1a       	sub	r8, r18
    2bde:	91 08       	sbc	r9, r1
    2be0:	81 14       	cp	r8, r1
    2be2:	91 04       	cpc	r9, r1
    2be4:	79 f7       	brne	.-34     	; 0x2bc4 <vfprintf+0x1c4>
    2be6:	e1 c0       	rjmp	.+450    	; 0x2daa <vfprintf+0x3aa>
    2be8:	84 36       	cpi	r24, 0x64	; 100
    2bea:	11 f0       	breq	.+4      	; 0x2bf0 <vfprintf+0x1f0>
    2bec:	89 36       	cpi	r24, 0x69	; 105
    2bee:	39 f5       	brne	.+78     	; 0x2c3e <vfprintf+0x23e>
    2bf0:	f8 01       	movw	r30, r16
    2bf2:	37 fe       	sbrs	r3, 7
    2bf4:	07 c0       	rjmp	.+14     	; 0x2c04 <vfprintf+0x204>
    2bf6:	60 81       	ld	r22, Z
    2bf8:	71 81       	ldd	r23, Z+1	; 0x01
    2bfa:	82 81       	ldd	r24, Z+2	; 0x02
    2bfc:	93 81       	ldd	r25, Z+3	; 0x03
    2bfe:	0c 5f       	subi	r16, 0xFC	; 252
    2c00:	1f 4f       	sbci	r17, 0xFF	; 255
    2c02:	08 c0       	rjmp	.+16     	; 0x2c14 <vfprintf+0x214>
    2c04:	60 81       	ld	r22, Z
    2c06:	71 81       	ldd	r23, Z+1	; 0x01
    2c08:	07 2e       	mov	r0, r23
    2c0a:	00 0c       	add	r0, r0
    2c0c:	88 0b       	sbc	r24, r24
    2c0e:	99 0b       	sbc	r25, r25
    2c10:	0e 5f       	subi	r16, 0xFE	; 254
    2c12:	1f 4f       	sbci	r17, 0xFF	; 255
    2c14:	f3 2d       	mov	r31, r3
    2c16:	ff 76       	andi	r31, 0x6F	; 111
    2c18:	3f 2e       	mov	r3, r31
    2c1a:	97 ff       	sbrs	r25, 7
    2c1c:	09 c0       	rjmp	.+18     	; 0x2c30 <vfprintf+0x230>
    2c1e:	90 95       	com	r25
    2c20:	80 95       	com	r24
    2c22:	70 95       	com	r23
    2c24:	61 95       	neg	r22
    2c26:	7f 4f       	sbci	r23, 0xFF	; 255
    2c28:	8f 4f       	sbci	r24, 0xFF	; 255
    2c2a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c2c:	f0 68       	ori	r31, 0x80	; 128
    2c2e:	3f 2e       	mov	r3, r31
    2c30:	2a e0       	ldi	r18, 0x0A	; 10
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	a3 01       	movw	r20, r6
    2c36:	33 d1       	rcall	.+614    	; 0x2e9e <__ultoa_invert>
    2c38:	88 2e       	mov	r8, r24
    2c3a:	86 18       	sub	r8, r6
    2c3c:	44 c0       	rjmp	.+136    	; 0x2cc6 <vfprintf+0x2c6>
    2c3e:	85 37       	cpi	r24, 0x75	; 117
    2c40:	31 f4       	brne	.+12     	; 0x2c4e <vfprintf+0x24e>
    2c42:	23 2d       	mov	r18, r3
    2c44:	2f 7e       	andi	r18, 0xEF	; 239
    2c46:	b2 2e       	mov	r11, r18
    2c48:	2a e0       	ldi	r18, 0x0A	; 10
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	25 c0       	rjmp	.+74     	; 0x2c98 <vfprintf+0x298>
    2c4e:	93 2d       	mov	r25, r3
    2c50:	99 7f       	andi	r25, 0xF9	; 249
    2c52:	b9 2e       	mov	r11, r25
    2c54:	8f 36       	cpi	r24, 0x6F	; 111
    2c56:	c1 f0       	breq	.+48     	; 0x2c88 <vfprintf+0x288>
    2c58:	18 f4       	brcc	.+6      	; 0x2c60 <vfprintf+0x260>
    2c5a:	88 35       	cpi	r24, 0x58	; 88
    2c5c:	79 f0       	breq	.+30     	; 0x2c7c <vfprintf+0x27c>
    2c5e:	ae c0       	rjmp	.+348    	; 0x2dbc <vfprintf+0x3bc>
    2c60:	80 37       	cpi	r24, 0x70	; 112
    2c62:	19 f0       	breq	.+6      	; 0x2c6a <vfprintf+0x26a>
    2c64:	88 37       	cpi	r24, 0x78	; 120
    2c66:	21 f0       	breq	.+8      	; 0x2c70 <vfprintf+0x270>
    2c68:	a9 c0       	rjmp	.+338    	; 0x2dbc <vfprintf+0x3bc>
    2c6a:	e9 2f       	mov	r30, r25
    2c6c:	e0 61       	ori	r30, 0x10	; 16
    2c6e:	be 2e       	mov	r11, r30
    2c70:	b4 fe       	sbrs	r11, 4
    2c72:	0d c0       	rjmp	.+26     	; 0x2c8e <vfprintf+0x28e>
    2c74:	fb 2d       	mov	r31, r11
    2c76:	f4 60       	ori	r31, 0x04	; 4
    2c78:	bf 2e       	mov	r11, r31
    2c7a:	09 c0       	rjmp	.+18     	; 0x2c8e <vfprintf+0x28e>
    2c7c:	34 fe       	sbrs	r3, 4
    2c7e:	0a c0       	rjmp	.+20     	; 0x2c94 <vfprintf+0x294>
    2c80:	29 2f       	mov	r18, r25
    2c82:	26 60       	ori	r18, 0x06	; 6
    2c84:	b2 2e       	mov	r11, r18
    2c86:	06 c0       	rjmp	.+12     	; 0x2c94 <vfprintf+0x294>
    2c88:	28 e0       	ldi	r18, 0x08	; 8
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	05 c0       	rjmp	.+10     	; 0x2c98 <vfprintf+0x298>
    2c8e:	20 e1       	ldi	r18, 0x10	; 16
    2c90:	30 e0       	ldi	r19, 0x00	; 0
    2c92:	02 c0       	rjmp	.+4      	; 0x2c98 <vfprintf+0x298>
    2c94:	20 e1       	ldi	r18, 0x10	; 16
    2c96:	32 e0       	ldi	r19, 0x02	; 2
    2c98:	f8 01       	movw	r30, r16
    2c9a:	b7 fe       	sbrs	r11, 7
    2c9c:	07 c0       	rjmp	.+14     	; 0x2cac <vfprintf+0x2ac>
    2c9e:	60 81       	ld	r22, Z
    2ca0:	71 81       	ldd	r23, Z+1	; 0x01
    2ca2:	82 81       	ldd	r24, Z+2	; 0x02
    2ca4:	93 81       	ldd	r25, Z+3	; 0x03
    2ca6:	0c 5f       	subi	r16, 0xFC	; 252
    2ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    2caa:	06 c0       	rjmp	.+12     	; 0x2cb8 <vfprintf+0x2b8>
    2cac:	60 81       	ld	r22, Z
    2cae:	71 81       	ldd	r23, Z+1	; 0x01
    2cb0:	80 e0       	ldi	r24, 0x00	; 0
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	0e 5f       	subi	r16, 0xFE	; 254
    2cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb8:	a3 01       	movw	r20, r6
    2cba:	f1 d0       	rcall	.+482    	; 0x2e9e <__ultoa_invert>
    2cbc:	88 2e       	mov	r8, r24
    2cbe:	86 18       	sub	r8, r6
    2cc0:	fb 2d       	mov	r31, r11
    2cc2:	ff 77       	andi	r31, 0x7F	; 127
    2cc4:	3f 2e       	mov	r3, r31
    2cc6:	36 fe       	sbrs	r3, 6
    2cc8:	0d c0       	rjmp	.+26     	; 0x2ce4 <vfprintf+0x2e4>
    2cca:	23 2d       	mov	r18, r3
    2ccc:	2e 7f       	andi	r18, 0xFE	; 254
    2cce:	a2 2e       	mov	r10, r18
    2cd0:	89 14       	cp	r8, r9
    2cd2:	58 f4       	brcc	.+22     	; 0x2cea <vfprintf+0x2ea>
    2cd4:	34 fe       	sbrs	r3, 4
    2cd6:	0b c0       	rjmp	.+22     	; 0x2cee <vfprintf+0x2ee>
    2cd8:	32 fc       	sbrc	r3, 2
    2cda:	09 c0       	rjmp	.+18     	; 0x2cee <vfprintf+0x2ee>
    2cdc:	83 2d       	mov	r24, r3
    2cde:	8e 7e       	andi	r24, 0xEE	; 238
    2ce0:	a8 2e       	mov	r10, r24
    2ce2:	05 c0       	rjmp	.+10     	; 0x2cee <vfprintf+0x2ee>
    2ce4:	b8 2c       	mov	r11, r8
    2ce6:	a3 2c       	mov	r10, r3
    2ce8:	03 c0       	rjmp	.+6      	; 0x2cf0 <vfprintf+0x2f0>
    2cea:	b8 2c       	mov	r11, r8
    2cec:	01 c0       	rjmp	.+2      	; 0x2cf0 <vfprintf+0x2f0>
    2cee:	b9 2c       	mov	r11, r9
    2cf0:	a4 fe       	sbrs	r10, 4
    2cf2:	0f c0       	rjmp	.+30     	; 0x2d12 <vfprintf+0x312>
    2cf4:	fe 01       	movw	r30, r28
    2cf6:	e8 0d       	add	r30, r8
    2cf8:	f1 1d       	adc	r31, r1
    2cfa:	80 81       	ld	r24, Z
    2cfc:	80 33       	cpi	r24, 0x30	; 48
    2cfe:	21 f4       	brne	.+8      	; 0x2d08 <vfprintf+0x308>
    2d00:	9a 2d       	mov	r25, r10
    2d02:	99 7e       	andi	r25, 0xE9	; 233
    2d04:	a9 2e       	mov	r10, r25
    2d06:	09 c0       	rjmp	.+18     	; 0x2d1a <vfprintf+0x31a>
    2d08:	a2 fe       	sbrs	r10, 2
    2d0a:	06 c0       	rjmp	.+12     	; 0x2d18 <vfprintf+0x318>
    2d0c:	b3 94       	inc	r11
    2d0e:	b3 94       	inc	r11
    2d10:	04 c0       	rjmp	.+8      	; 0x2d1a <vfprintf+0x31a>
    2d12:	8a 2d       	mov	r24, r10
    2d14:	86 78       	andi	r24, 0x86	; 134
    2d16:	09 f0       	breq	.+2      	; 0x2d1a <vfprintf+0x31a>
    2d18:	b3 94       	inc	r11
    2d1a:	a3 fc       	sbrc	r10, 3
    2d1c:	10 c0       	rjmp	.+32     	; 0x2d3e <vfprintf+0x33e>
    2d1e:	a0 fe       	sbrs	r10, 0
    2d20:	06 c0       	rjmp	.+12     	; 0x2d2e <vfprintf+0x32e>
    2d22:	b2 14       	cp	r11, r2
    2d24:	80 f4       	brcc	.+32     	; 0x2d46 <vfprintf+0x346>
    2d26:	28 0c       	add	r2, r8
    2d28:	92 2c       	mov	r9, r2
    2d2a:	9b 18       	sub	r9, r11
    2d2c:	0d c0       	rjmp	.+26     	; 0x2d48 <vfprintf+0x348>
    2d2e:	b2 14       	cp	r11, r2
    2d30:	58 f4       	brcc	.+22     	; 0x2d48 <vfprintf+0x348>
    2d32:	b6 01       	movw	r22, r12
    2d34:	80 e2       	ldi	r24, 0x20	; 32
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	76 d0       	rcall	.+236    	; 0x2e26 <fputc>
    2d3a:	b3 94       	inc	r11
    2d3c:	f8 cf       	rjmp	.-16     	; 0x2d2e <vfprintf+0x32e>
    2d3e:	b2 14       	cp	r11, r2
    2d40:	18 f4       	brcc	.+6      	; 0x2d48 <vfprintf+0x348>
    2d42:	2b 18       	sub	r2, r11
    2d44:	02 c0       	rjmp	.+4      	; 0x2d4a <vfprintf+0x34a>
    2d46:	98 2c       	mov	r9, r8
    2d48:	21 2c       	mov	r2, r1
    2d4a:	a4 fe       	sbrs	r10, 4
    2d4c:	0f c0       	rjmp	.+30     	; 0x2d6c <vfprintf+0x36c>
    2d4e:	b6 01       	movw	r22, r12
    2d50:	80 e3       	ldi	r24, 0x30	; 48
    2d52:	90 e0       	ldi	r25, 0x00	; 0
    2d54:	68 d0       	rcall	.+208    	; 0x2e26 <fputc>
    2d56:	a2 fe       	sbrs	r10, 2
    2d58:	16 c0       	rjmp	.+44     	; 0x2d86 <vfprintf+0x386>
    2d5a:	a1 fc       	sbrc	r10, 1
    2d5c:	03 c0       	rjmp	.+6      	; 0x2d64 <vfprintf+0x364>
    2d5e:	88 e7       	ldi	r24, 0x78	; 120
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	02 c0       	rjmp	.+4      	; 0x2d68 <vfprintf+0x368>
    2d64:	88 e5       	ldi	r24, 0x58	; 88
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	b6 01       	movw	r22, r12
    2d6a:	0c c0       	rjmp	.+24     	; 0x2d84 <vfprintf+0x384>
    2d6c:	8a 2d       	mov	r24, r10
    2d6e:	86 78       	andi	r24, 0x86	; 134
    2d70:	51 f0       	breq	.+20     	; 0x2d86 <vfprintf+0x386>
    2d72:	a1 fe       	sbrs	r10, 1
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <vfprintf+0x37a>
    2d76:	8b e2       	ldi	r24, 0x2B	; 43
    2d78:	01 c0       	rjmp	.+2      	; 0x2d7c <vfprintf+0x37c>
    2d7a:	80 e2       	ldi	r24, 0x20	; 32
    2d7c:	a7 fc       	sbrc	r10, 7
    2d7e:	8d e2       	ldi	r24, 0x2D	; 45
    2d80:	b6 01       	movw	r22, r12
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	50 d0       	rcall	.+160    	; 0x2e26 <fputc>
    2d86:	89 14       	cp	r8, r9
    2d88:	30 f4       	brcc	.+12     	; 0x2d96 <vfprintf+0x396>
    2d8a:	b6 01       	movw	r22, r12
    2d8c:	80 e3       	ldi	r24, 0x30	; 48
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	4a d0       	rcall	.+148    	; 0x2e26 <fputc>
    2d92:	9a 94       	dec	r9
    2d94:	f8 cf       	rjmp	.-16     	; 0x2d86 <vfprintf+0x386>
    2d96:	8a 94       	dec	r8
    2d98:	f3 01       	movw	r30, r6
    2d9a:	e8 0d       	add	r30, r8
    2d9c:	f1 1d       	adc	r31, r1
    2d9e:	80 81       	ld	r24, Z
    2da0:	b6 01       	movw	r22, r12
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	40 d0       	rcall	.+128    	; 0x2e26 <fputc>
    2da6:	81 10       	cpse	r8, r1
    2da8:	f6 cf       	rjmp	.-20     	; 0x2d96 <vfprintf+0x396>
    2daa:	22 20       	and	r2, r2
    2dac:	09 f4       	brne	.+2      	; 0x2db0 <vfprintf+0x3b0>
    2dae:	4e ce       	rjmp	.-868    	; 0x2a4c <vfprintf+0x4c>
    2db0:	b6 01       	movw	r22, r12
    2db2:	80 e2       	ldi	r24, 0x20	; 32
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	37 d0       	rcall	.+110    	; 0x2e26 <fputc>
    2db8:	2a 94       	dec	r2
    2dba:	f7 cf       	rjmp	.-18     	; 0x2daa <vfprintf+0x3aa>
    2dbc:	f6 01       	movw	r30, r12
    2dbe:	86 81       	ldd	r24, Z+6	; 0x06
    2dc0:	97 81       	ldd	r25, Z+7	; 0x07
    2dc2:	02 c0       	rjmp	.+4      	; 0x2dc8 <vfprintf+0x3c8>
    2dc4:	8f ef       	ldi	r24, 0xFF	; 255
    2dc6:	9f ef       	ldi	r25, 0xFF	; 255
    2dc8:	2b 96       	adiw	r28, 0x0b	; 11
    2dca:	0f b6       	in	r0, 0x3f	; 63
    2dcc:	f8 94       	cli
    2dce:	de bf       	out	0x3e, r29	; 62
    2dd0:	0f be       	out	0x3f, r0	; 63
    2dd2:	cd bf       	out	0x3d, r28	; 61
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	ff 90       	pop	r15
    2dde:	ef 90       	pop	r14
    2de0:	df 90       	pop	r13
    2de2:	cf 90       	pop	r12
    2de4:	bf 90       	pop	r11
    2de6:	af 90       	pop	r10
    2de8:	9f 90       	pop	r9
    2dea:	8f 90       	pop	r8
    2dec:	7f 90       	pop	r7
    2dee:	6f 90       	pop	r6
    2df0:	5f 90       	pop	r5
    2df2:	4f 90       	pop	r4
    2df4:	3f 90       	pop	r3
    2df6:	2f 90       	pop	r2
    2df8:	08 95       	ret

00002dfa <strnlen_P>:
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	05 90       	lpm	r0, Z+
    2dfe:	61 50       	subi	r22, 0x01	; 1
    2e00:	70 40       	sbci	r23, 0x00	; 0
    2e02:	01 10       	cpse	r0, r1
    2e04:	d8 f7       	brcc	.-10     	; 0x2dfc <strnlen_P+0x2>
    2e06:	80 95       	com	r24
    2e08:	90 95       	com	r25
    2e0a:	8e 0f       	add	r24, r30
    2e0c:	9f 1f       	adc	r25, r31
    2e0e:	08 95       	ret

00002e10 <strnlen>:
    2e10:	fc 01       	movw	r30, r24
    2e12:	61 50       	subi	r22, 0x01	; 1
    2e14:	70 40       	sbci	r23, 0x00	; 0
    2e16:	01 90       	ld	r0, Z+
    2e18:	01 10       	cpse	r0, r1
    2e1a:	d8 f7       	brcc	.-10     	; 0x2e12 <strnlen+0x2>
    2e1c:	80 95       	com	r24
    2e1e:	90 95       	com	r25
    2e20:	8e 0f       	add	r24, r30
    2e22:	9f 1f       	adc	r25, r31
    2e24:	08 95       	ret

00002e26 <fputc>:
    2e26:	0f 93       	push	r16
    2e28:	1f 93       	push	r17
    2e2a:	cf 93       	push	r28
    2e2c:	df 93       	push	r29
    2e2e:	fb 01       	movw	r30, r22
    2e30:	23 81       	ldd	r18, Z+3	; 0x03
    2e32:	21 fd       	sbrc	r18, 1
    2e34:	03 c0       	rjmp	.+6      	; 0x2e3c <fputc+0x16>
    2e36:	8f ef       	ldi	r24, 0xFF	; 255
    2e38:	9f ef       	ldi	r25, 0xFF	; 255
    2e3a:	2c c0       	rjmp	.+88     	; 0x2e94 <fputc+0x6e>
    2e3c:	22 ff       	sbrs	r18, 2
    2e3e:	16 c0       	rjmp	.+44     	; 0x2e6c <fputc+0x46>
    2e40:	46 81       	ldd	r20, Z+6	; 0x06
    2e42:	57 81       	ldd	r21, Z+7	; 0x07
    2e44:	24 81       	ldd	r18, Z+4	; 0x04
    2e46:	35 81       	ldd	r19, Z+5	; 0x05
    2e48:	42 17       	cp	r20, r18
    2e4a:	53 07       	cpc	r21, r19
    2e4c:	44 f4       	brge	.+16     	; 0x2e5e <fputc+0x38>
    2e4e:	a0 81       	ld	r26, Z
    2e50:	b1 81       	ldd	r27, Z+1	; 0x01
    2e52:	9d 01       	movw	r18, r26
    2e54:	2f 5f       	subi	r18, 0xFF	; 255
    2e56:	3f 4f       	sbci	r19, 0xFF	; 255
    2e58:	31 83       	std	Z+1, r19	; 0x01
    2e5a:	20 83       	st	Z, r18
    2e5c:	8c 93       	st	X, r24
    2e5e:	26 81       	ldd	r18, Z+6	; 0x06
    2e60:	37 81       	ldd	r19, Z+7	; 0x07
    2e62:	2f 5f       	subi	r18, 0xFF	; 255
    2e64:	3f 4f       	sbci	r19, 0xFF	; 255
    2e66:	37 83       	std	Z+7, r19	; 0x07
    2e68:	26 83       	std	Z+6, r18	; 0x06
    2e6a:	14 c0       	rjmp	.+40     	; 0x2e94 <fputc+0x6e>
    2e6c:	8b 01       	movw	r16, r22
    2e6e:	ec 01       	movw	r28, r24
    2e70:	fb 01       	movw	r30, r22
    2e72:	00 84       	ldd	r0, Z+8	; 0x08
    2e74:	f1 85       	ldd	r31, Z+9	; 0x09
    2e76:	e0 2d       	mov	r30, r0
    2e78:	19 95       	eicall
    2e7a:	89 2b       	or	r24, r25
    2e7c:	e1 f6       	brne	.-72     	; 0x2e36 <fputc+0x10>
    2e7e:	d8 01       	movw	r26, r16
    2e80:	16 96       	adiw	r26, 0x06	; 6
    2e82:	8d 91       	ld	r24, X+
    2e84:	9c 91       	ld	r25, X
    2e86:	17 97       	sbiw	r26, 0x07	; 7
    2e88:	01 96       	adiw	r24, 0x01	; 1
    2e8a:	17 96       	adiw	r26, 0x07	; 7
    2e8c:	9c 93       	st	X, r25
    2e8e:	8e 93       	st	-X, r24
    2e90:	16 97       	sbiw	r26, 0x06	; 6
    2e92:	ce 01       	movw	r24, r28
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	1f 91       	pop	r17
    2e9a:	0f 91       	pop	r16
    2e9c:	08 95       	ret

00002e9e <__ultoa_invert>:
    2e9e:	fa 01       	movw	r30, r20
    2ea0:	aa 27       	eor	r26, r26
    2ea2:	28 30       	cpi	r18, 0x08	; 8
    2ea4:	51 f1       	breq	.+84     	; 0x2efa <__ultoa_invert+0x5c>
    2ea6:	20 31       	cpi	r18, 0x10	; 16
    2ea8:	81 f1       	breq	.+96     	; 0x2f0a <__ultoa_invert+0x6c>
    2eaa:	e8 94       	clt
    2eac:	6f 93       	push	r22
    2eae:	6e 7f       	andi	r22, 0xFE	; 254
    2eb0:	6e 5f       	subi	r22, 0xFE	; 254
    2eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb4:	8f 4f       	sbci	r24, 0xFF	; 255
    2eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    2eb8:	af 4f       	sbci	r26, 0xFF	; 255
    2eba:	b1 e0       	ldi	r27, 0x01	; 1
    2ebc:	3e d0       	rcall	.+124    	; 0x2f3a <__ultoa_invert+0x9c>
    2ebe:	b4 e0       	ldi	r27, 0x04	; 4
    2ec0:	3c d0       	rcall	.+120    	; 0x2f3a <__ultoa_invert+0x9c>
    2ec2:	67 0f       	add	r22, r23
    2ec4:	78 1f       	adc	r23, r24
    2ec6:	89 1f       	adc	r24, r25
    2ec8:	9a 1f       	adc	r25, r26
    2eca:	a1 1d       	adc	r26, r1
    2ecc:	68 0f       	add	r22, r24
    2ece:	79 1f       	adc	r23, r25
    2ed0:	8a 1f       	adc	r24, r26
    2ed2:	91 1d       	adc	r25, r1
    2ed4:	a1 1d       	adc	r26, r1
    2ed6:	6a 0f       	add	r22, r26
    2ed8:	71 1d       	adc	r23, r1
    2eda:	81 1d       	adc	r24, r1
    2edc:	91 1d       	adc	r25, r1
    2ede:	a1 1d       	adc	r26, r1
    2ee0:	20 d0       	rcall	.+64     	; 0x2f22 <__ultoa_invert+0x84>
    2ee2:	09 f4       	brne	.+2      	; 0x2ee6 <__ultoa_invert+0x48>
    2ee4:	68 94       	set
    2ee6:	3f 91       	pop	r19
    2ee8:	2a e0       	ldi	r18, 0x0A	; 10
    2eea:	26 9f       	mul	r18, r22
    2eec:	11 24       	eor	r1, r1
    2eee:	30 19       	sub	r19, r0
    2ef0:	30 5d       	subi	r19, 0xD0	; 208
    2ef2:	31 93       	st	Z+, r19
    2ef4:	de f6       	brtc	.-74     	; 0x2eac <__ultoa_invert+0xe>
    2ef6:	cf 01       	movw	r24, r30
    2ef8:	08 95       	ret
    2efa:	46 2f       	mov	r20, r22
    2efc:	47 70       	andi	r20, 0x07	; 7
    2efe:	40 5d       	subi	r20, 0xD0	; 208
    2f00:	41 93       	st	Z+, r20
    2f02:	b3 e0       	ldi	r27, 0x03	; 3
    2f04:	0f d0       	rcall	.+30     	; 0x2f24 <__ultoa_invert+0x86>
    2f06:	c9 f7       	brne	.-14     	; 0x2efa <__ultoa_invert+0x5c>
    2f08:	f6 cf       	rjmp	.-20     	; 0x2ef6 <__ultoa_invert+0x58>
    2f0a:	46 2f       	mov	r20, r22
    2f0c:	4f 70       	andi	r20, 0x0F	; 15
    2f0e:	40 5d       	subi	r20, 0xD0	; 208
    2f10:	4a 33       	cpi	r20, 0x3A	; 58
    2f12:	18 f0       	brcs	.+6      	; 0x2f1a <__ultoa_invert+0x7c>
    2f14:	49 5d       	subi	r20, 0xD9	; 217
    2f16:	31 fd       	sbrc	r19, 1
    2f18:	40 52       	subi	r20, 0x20	; 32
    2f1a:	41 93       	st	Z+, r20
    2f1c:	02 d0       	rcall	.+4      	; 0x2f22 <__ultoa_invert+0x84>
    2f1e:	a9 f7       	brne	.-22     	; 0x2f0a <__ultoa_invert+0x6c>
    2f20:	ea cf       	rjmp	.-44     	; 0x2ef6 <__ultoa_invert+0x58>
    2f22:	b4 e0       	ldi	r27, 0x04	; 4
    2f24:	a6 95       	lsr	r26
    2f26:	97 95       	ror	r25
    2f28:	87 95       	ror	r24
    2f2a:	77 95       	ror	r23
    2f2c:	67 95       	ror	r22
    2f2e:	ba 95       	dec	r27
    2f30:	c9 f7       	brne	.-14     	; 0x2f24 <__ultoa_invert+0x86>
    2f32:	00 97       	sbiw	r24, 0x00	; 0
    2f34:	61 05       	cpc	r22, r1
    2f36:	71 05       	cpc	r23, r1
    2f38:	08 95       	ret
    2f3a:	9b 01       	movw	r18, r22
    2f3c:	ac 01       	movw	r20, r24
    2f3e:	0a 2e       	mov	r0, r26
    2f40:	06 94       	lsr	r0
    2f42:	57 95       	ror	r21
    2f44:	47 95       	ror	r20
    2f46:	37 95       	ror	r19
    2f48:	27 95       	ror	r18
    2f4a:	ba 95       	dec	r27
    2f4c:	c9 f7       	brne	.-14     	; 0x2f40 <__ultoa_invert+0xa2>
    2f4e:	62 0f       	add	r22, r18
    2f50:	73 1f       	adc	r23, r19
    2f52:	84 1f       	adc	r24, r20
    2f54:	95 1f       	adc	r25, r21
    2f56:	a0 1d       	adc	r26, r0
    2f58:	08 95       	ret

00002f5a <_exit>:
    2f5a:	f8 94       	cli

00002f5c <__stop_program>:
    2f5c:	ff cf       	rjmp	.-2      	; 0x2f5c <__stop_program>
