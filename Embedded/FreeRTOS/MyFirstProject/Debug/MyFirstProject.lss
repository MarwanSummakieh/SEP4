
MyFirstProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016e  00800200  00003a18  00003aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c9  0080036e  0080036e  00003c1a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003c1a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003c78  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000790  00000000  00000000  00003cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000972e  00000000  00000000  00004448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002afa  00000000  00000000  0000db76  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004c7f  00000000  00000000  00010670  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000179c  00000000  00000000  000152f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002f4e  00000000  00000000  00016a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000080b8  00000000  00000000  000199da  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e8  00000000  00000000  00021a92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	04 c2       	rjmp	.+1032   	; 0x40a <__ctors_end>
       2:	00 00       	nop
       4:	23 c2       	rjmp	.+1094   	; 0x44c <__bad_interrupt>
       6:	00 00       	nop
       8:	21 c2       	rjmp	.+1090   	; 0x44c <__bad_interrupt>
       a:	00 00       	nop
       c:	1f c2       	rjmp	.+1086   	; 0x44c <__bad_interrupt>
       e:	00 00       	nop
      10:	1d c2       	rjmp	.+1082   	; 0x44c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c2       	rjmp	.+1078   	; 0x44c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c2       	rjmp	.+1074   	; 0x44c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c2       	rjmp	.+1070   	; 0x44c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c2       	rjmp	.+1066   	; 0x44c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c2       	rjmp	.+1062   	; 0x44c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c2       	rjmp	.+1058   	; 0x44c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c2       	rjmp	.+1054   	; 0x44c <__bad_interrupt>
      2e:	00 00       	nop
      30:	56 c4       	rjmp	.+2220   	; 0x8de <__vector_12>
      32:	00 00       	nop
      34:	0b c2       	rjmp	.+1046   	; 0x44c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c2       	rjmp	.+1042   	; 0x44c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c2       	rjmp	.+1038   	; 0x44c <__bad_interrupt>
      3e:	00 00       	nop
      40:	05 c2       	rjmp	.+1034   	; 0x44c <__bad_interrupt>
      42:	00 00       	nop
      44:	03 c2       	rjmp	.+1030   	; 0x44c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c2       	rjmp	.+1026   	; 0x44c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c1       	rjmp	.+1022   	; 0x44c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c1       	rjmp	.+1018   	; 0x44c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c1       	rjmp	.+1014   	; 0x44c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c1       	rjmp	.+1010   	; 0x44c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f7 c1       	rjmp	.+1006   	; 0x44c <__bad_interrupt>
      5e:	00 00       	nop
      60:	f5 c1       	rjmp	.+1002   	; 0x44c <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <__vector_25>
      68:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__vector_26>
      6c:	ef c1       	rjmp	.+990    	; 0x44c <__bad_interrupt>
      6e:	00 00       	nop
      70:	ed c1       	rjmp	.+986    	; 0x44c <__bad_interrupt>
      72:	00 00       	nop
      74:	eb c1       	rjmp	.+982    	; 0x44c <__bad_interrupt>
      76:	00 00       	nop
      78:	e9 c1       	rjmp	.+978    	; 0x44c <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e7 c1       	rjmp	.+974    	; 0x44c <__bad_interrupt>
      7e:	00 00       	nop
      80:	e5 c1       	rjmp	.+970    	; 0x44c <__bad_interrupt>
      82:	00 00       	nop
      84:	e3 c1       	rjmp	.+966    	; 0x44c <__bad_interrupt>
      86:	00 00       	nop
      88:	e1 c1       	rjmp	.+962    	; 0x44c <__bad_interrupt>
      8a:	00 00       	nop
      8c:	df c1       	rjmp	.+958    	; 0x44c <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__vector_36>
      94:	0c 94 41 13 	jmp	0x2682	; 0x2682 <__vector_37>
      98:	d9 c1       	rjmp	.+946    	; 0x44c <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__vector_39>
      a0:	d5 c1       	rjmp	.+938    	; 0x44c <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d3 c1       	rjmp	.+934    	; 0x44c <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d1 c1       	rjmp	.+930    	; 0x44c <__bad_interrupt>
      aa:	00 00       	nop
      ac:	cf c1       	rjmp	.+926    	; 0x44c <__bad_interrupt>
      ae:	00 00       	nop
      b0:	cd c1       	rjmp	.+922    	; 0x44c <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cb c1       	rjmp	.+918    	; 0x44c <__bad_interrupt>
      b6:	00 00       	nop
      b8:	c9 c1       	rjmp	.+914    	; 0x44c <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c7 c1       	rjmp	.+910    	; 0x44c <__bad_interrupt>
      be:	00 00       	nop
      c0:	c5 c1       	rjmp	.+906    	; 0x44c <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c3 c1       	rjmp	.+902    	; 0x44c <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c1 c1       	rjmp	.+898    	; 0x44c <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 85 13 	jmp	0x270a	; 0x270a <__vector_51>
      d0:	0c 94 d7 13 	jmp	0x27ae	; 0x27ae <__vector_52>
      d4:	bb c1       	rjmp	.+886    	; 0x44c <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__vector_54>
      dc:	0c 94 6d 14 	jmp	0x28da	; 0x28da <__vector_55>
      e0:	b5 c1       	rjmp	.+874    	; 0x44c <__bad_interrupt>
      e2:	00 00       	nop
      e4:	95 01       	movw	r18, r10
      e6:	95 01       	movw	r18, r10
      e8:	95 01       	movw	r18, r10
      ea:	c4 01       	movw	r24, r8
      ec:	cc 01       	movw	r24, r24
      ee:	db 01       	movw	r26, r22
      f0:	95 01       	movw	r18, r10
      f2:	95 01       	movw	r18, r10
      f4:	c4 01       	movw	r24, r8
      f6:	cc 01       	movw	r24, r24
      f8:	fb 15       	cp	r31, r11
      fa:	6b 16       	cp	r6, r27
      fc:	6b 16       	cp	r6, r27
      fe:	6b 16       	cp	r6, r27
     100:	6b 16       	cp	r6, r27
     102:	6b 16       	cp	r6, r27
     104:	6b 16       	cp	r6, r27
     106:	6b 16       	cp	r6, r27
     108:	fb 15       	cp	r31, r11
     10a:	6b 16       	cp	r6, r27
     10c:	6b 16       	cp	r6, r27
     10e:	6b 16       	cp	r6, r27
     110:	6b 16       	cp	r6, r27
     112:	6b 16       	cp	r6, r27
     114:	6b 16       	cp	r6, r27
     116:	6b 16       	cp	r6, r27
     118:	fd 15       	cp	r31, r13
     11a:	6b 16       	cp	r6, r27
     11c:	6b 16       	cp	r6, r27
     11e:	6b 16       	cp	r6, r27
     120:	6b 16       	cp	r6, r27
     122:	6b 16       	cp	r6, r27
     124:	6b 16       	cp	r6, r27
     126:	6b 16       	cp	r6, r27
     128:	6b 16       	cp	r6, r27
     12a:	6b 16       	cp	r6, r27
     12c:	6b 16       	cp	r6, r27
     12e:	6b 16       	cp	r6, r27
     130:	6b 16       	cp	r6, r27
     132:	6b 16       	cp	r6, r27
     134:	6b 16       	cp	r6, r27
     136:	6b 16       	cp	r6, r27
     138:	fd 15       	cp	r31, r13
     13a:	6b 16       	cp	r6, r27
     13c:	6b 16       	cp	r6, r27
     13e:	6b 16       	cp	r6, r27
     140:	6b 16       	cp	r6, r27
     142:	6b 16       	cp	r6, r27
     144:	6b 16       	cp	r6, r27
     146:	6b 16       	cp	r6, r27
     148:	6b 16       	cp	r6, r27
     14a:	6b 16       	cp	r6, r27
     14c:	6b 16       	cp	r6, r27
     14e:	6b 16       	cp	r6, r27
     150:	6b 16       	cp	r6, r27
     152:	6b 16       	cp	r6, r27
     154:	6b 16       	cp	r6, r27
     156:	6b 16       	cp	r6, r27
     158:	67 16       	cp	r6, r23
     15a:	6b 16       	cp	r6, r27
     15c:	6b 16       	cp	r6, r27
     15e:	6b 16       	cp	r6, r27
     160:	6b 16       	cp	r6, r27
     162:	6b 16       	cp	r6, r27
     164:	6b 16       	cp	r6, r27
     166:	6b 16       	cp	r6, r27
     168:	32 16       	cp	r3, r18
     16a:	6b 16       	cp	r6, r27
     16c:	6b 16       	cp	r6, r27
     16e:	6b 16       	cp	r6, r27
     170:	6b 16       	cp	r6, r27
     172:	6b 16       	cp	r6, r27
     174:	6b 16       	cp	r6, r27
     176:	6b 16       	cp	r6, r27
     178:	6b 16       	cp	r6, r27
     17a:	6b 16       	cp	r6, r27
     17c:	6b 16       	cp	r6, r27
     17e:	6b 16       	cp	r6, r27
     180:	6b 16       	cp	r6, r27
     182:	6b 16       	cp	r6, r27
     184:	6b 16       	cp	r6, r27
     186:	6b 16       	cp	r6, r27
     188:	26 16       	cp	r2, r22
     18a:	6b 16       	cp	r6, r27
     18c:	6b 16       	cp	r6, r27
     18e:	6b 16       	cp	r6, r27
     190:	6b 16       	cp	r6, r27
     192:	6b 16       	cp	r6, r27
     194:	6b 16       	cp	r6, r27
     196:	6b 16       	cp	r6, r27
     198:	4a 16       	cp	r4, r26

0000019a <prvIdleTask>:
    /* Reset the event list item to its normal value - so it can be used with
    queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
     19a:	06 e8       	ldi	r16, 0x86	; 134
     19c:	13 e0       	ldi	r17, 0x03	; 3
     19e:	0f 2e       	mov	r0, r31
     1a0:	fe ea       	ldi	r31, 0xAE	; 174
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f3 e0       	ldi	r31, 0x03	; 3
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	f1 d1       	rcall	.+994    	; 0x5ae <uxListRemove>
     1cc:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <uxCurrentNumberOfTasks>
     1d6:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	71 d1       	rcall	.+738    	; 0x4cc <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	6f d1       	rcall	.+734    	; 0x4cc <vPortFree>
     1ee:	80 91 85 03 	lds	r24, 0x0385	; 0x800385 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	ac d2       	rcall	.+1368   	; 0x758 <vPortYield>
     200:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     220:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
     226:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <pxCurrentTimerList>
     22a:	f0 91 dd 03 	lds	r31, 0x03DD	; 0x8003dd <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d7 c0       	rjmp	.+430    	; 0x3e4 <prvTimerTask+0x1de>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     240:	0e 94 a1 09 	call	0x1342	; 0x1342 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     244:	c4 01       	movw	r24, r8
     246:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	48 c0       	rjmp	.+144    	; 0x2e2 <prvTimerTask+0xdc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
            {
                ( void ) xTaskResumeAll();
     258:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     25c:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <pxCurrentTimerList>
     260:	f0 91 dd 03 	lds	r31, 0x03DD	; 0x8003dd <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	9d d1       	rcall	.+826    	; 0x5ae <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 57 0d 	call	0x1aae	; 0x1aae <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	84 c0       	rjmp	.+264    	; 0x3cc <prvTimerTask+0x1c6>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     2c4:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <xTimerQueue>
     2d0:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <xTimerQueue+0x1>
     2d4:	69 d6       	rcall	.+3282   	; 0xfa8 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
     2d6:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <xTaskResumeAll>
     2da:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
     2dc:	77 c0       	rjmp	.+238    	; 0x3cc <prvTimerTask+0x1c6>
     2de:	3c d2       	rcall	.+1144   	; 0x758 <vPortYield>
     2e0:	75 c0       	rjmp	.+234    	; 0x3cc <prvTimerTask+0x1c6>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
     2e2:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <xTaskResumeAll>
     2e6:	72 c0       	rjmp	.+228    	; 0x3cc <prvTimerTask+0x1c6>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 23       	and	r24, r24
     2ec:	0c f4       	brge	.+2      	; 0x2f0 <prvTimerTask+0xea>
     2ee:	6e c0       	rjmp	.+220    	; 0x3cc <prvTimerTask+0x1c6>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
     2f0:	ac 80       	ldd	r10, Y+4	; 0x04
     2f2:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
     2f4:	f5 01       	movw	r30, r10
     2f6:	82 85       	ldd	r24, Z+10	; 0x0a
     2f8:	93 85       	ldd	r25, Z+11	; 0x0b
     2fa:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     2fc:	19 f0       	breq	.+6      	; 0x304 <prvTimerTask+0xfe>
     2fe:	c5 01       	movw	r24, r10
     300:	02 96       	adiw	r24, 0x02	; 2
     302:	55 d1       	rcall	.+682    	; 0x5ae <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     304:	ce 01       	movw	r24, r28
     306:	06 96       	adiw	r24, 0x06	; 6
     308:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <prvSampleTimeNow>
     30c:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
     30e:	e9 81       	ldd	r30, Y+1	; 0x01
     310:	0e 2e       	mov	r0, r30
     312:	00 0c       	add	r0, r0
     314:	ff 0b       	sbc	r31, r31
     316:	ea 30       	cpi	r30, 0x0A	; 10
     318:	f1 05       	cpc	r31, r1
     31a:	08 f0       	brcs	.+2      	; 0x31e <prvTimerTask+0x118>
     31c:	57 c0       	rjmp	.+174    	; 0x3cc <prvTimerTask+0x1c6>
     31e:	88 27       	eor	r24, r24
     320:	ee 58       	subi	r30, 0x8E	; 142
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	8f 4f       	sbci	r24, 0xFF	; 255
     326:	0c 94 c3 18 	jmp	0x3186	; 0x3186 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     32a:	d5 01       	movw	r26, r10
     32c:	53 96       	adiw	r26, 0x13	; 19
     32e:	8c 91       	ld	r24, X
     330:	53 97       	sbiw	r26, 0x13	; 19
     332:	81 60       	ori	r24, 0x01	; 1
     334:	53 96       	adiw	r26, 0x13	; 19
     336:	8c 93       	st	X, r24
     338:	53 97       	sbiw	r26, 0x13	; 19
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	3b 81       	ldd	r19, Y+3	; 0x03
     33e:	1c 96       	adiw	r26, 0x0c	; 12
     340:	6d 91       	ld	r22, X+
     342:	7c 91       	ld	r23, X
     344:	1d 97       	sbiw	r26, 0x0d	; 13
     346:	62 0f       	add	r22, r18
     348:	73 1f       	adc	r23, r19
     34a:	c5 01       	movw	r24, r10
     34c:	0e 94 57 0d 	call	0x1aae	; 0x1aae <prvInsertTimerInActiveList>
     350:	88 23       	and	r24, r24
     352:	e1 f1       	breq	.+120    	; 0x3cc <prvTimerTask+0x1c6>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     354:	d5 01       	movw	r26, r10
     356:	50 96       	adiw	r26, 0x10	; 16
     358:	ed 91       	ld	r30, X+
     35a:	fc 91       	ld	r31, X
     35c:	51 97       	sbiw	r26, 0x11	; 17
     35e:	c5 01       	movw	r24, r10
     360:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     362:	f5 01       	movw	r30, r10
     364:	83 89       	ldd	r24, Z+19	; 0x13
     366:	82 ff       	sbrs	r24, 2
     368:	31 c0       	rjmp	.+98     	; 0x3cc <prvTimerTask+0x1c6>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
     36a:	4a 81       	ldd	r20, Y+2	; 0x02
     36c:	5b 81       	ldd	r21, Y+3	; 0x03
     36e:	84 85       	ldd	r24, Z+12	; 0x0c
     370:	95 85       	ldd	r25, Z+13	; 0x0d
     372:	48 0f       	add	r20, r24
     374:	59 1f       	adc	r21, r25
     376:	0e 2d       	mov	r16, r14
     378:	1f 2d       	mov	r17, r15
     37a:	2e 2d       	mov	r18, r14
     37c:	3f 2d       	mov	r19, r15
     37e:	65 2d       	mov	r22, r5
     380:	c5 01       	movw	r24, r10
     382:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <xTimerGenericCommand>
     386:	22 c0       	rjmp	.+68     	; 0x3cc <prvTimerTask+0x1c6>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     388:	d5 01       	movw	r26, r10
     38a:	53 96       	adiw	r26, 0x13	; 19
     38c:	8c 91       	ld	r24, X
     38e:	53 97       	sbiw	r26, 0x13	; 19
     390:	8e 7f       	andi	r24, 0xFE	; 254
     392:	53 96       	adiw	r26, 0x13	; 19
     394:	8c 93       	st	X, r24
     396:	1a c0       	rjmp	.+52     	; 0x3cc <prvTimerTask+0x1c6>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     398:	f5 01       	movw	r30, r10
     39a:	83 89       	ldd	r24, Z+19	; 0x13
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	83 8b       	std	Z+19, r24	; 0x13
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
     3a0:	6a 81       	ldd	r22, Y+2	; 0x02
     3a2:	7b 81       	ldd	r23, Y+3	; 0x03
     3a4:	75 87       	std	Z+13, r23	; 0x0d
     3a6:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
     3a8:	64 0f       	add	r22, r20
     3aa:	75 1f       	adc	r23, r21
     3ac:	9a 01       	movw	r18, r20
     3ae:	c5 01       	movw	r24, r10
     3b0:	0e 94 57 0d 	call	0x1aae	; 0x1aae <prvInsertTimerInActiveList>
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <prvTimerTask+0x1c6>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
     3b6:	d5 01       	movw	r26, r10
     3b8:	53 96       	adiw	r26, 0x13	; 19
     3ba:	8c 91       	ld	r24, X
     3bc:	81 fd       	sbrc	r24, 1
                        {
                            vPortFree( pxTimer );
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <prvTimerTask+0x1c0>
     3c0:	c5 01       	movw	r24, r10
     3c2:	84 d0       	rcall	.+264    	; 0x4cc <vPortFree>
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <prvTimerTask+0x1c6>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     3c6:	8e 7f       	andi	r24, 0xFE	; 254
     3c8:	f5 01       	movw	r30, r10
     3ca:	83 8b       	std	Z+19, r24	; 0x13
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     3cc:	4e 2d       	mov	r20, r14
     3ce:	5f 2d       	mov	r21, r15
     3d0:	6c 2d       	mov	r22, r12
     3d2:	7d 2d       	mov	r23, r13
     3d4:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <xTimerQueue>
     3d8:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <xTimerQueue+0x1>
     3dc:	a1 d4       	rcall	.+2370   	; 0xd20 <xQueueReceive>
     3de:	81 11       	cpse	r24, r1
     3e0:	83 cf       	rjmp	.-250    	; 0x2e8 <prvTimerTask+0xe2>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     3e2:	21 cf       	rjmp	.-446    	; 0x226 <prvTimerTask+0x20>
     3e4:	ae d7       	rcall	.+3932   	; 0x1342 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     3e6:	c4 01       	movw	r24, r8
     3e8:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <prvSampleTimeNow>
     3ec:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	81 11       	cpse	r24, r1
     3f2:	77 cf       	rjmp	.-274    	; 0x2e2 <prvTimerTask+0xdc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     3f4:	e0 91 da 03 	lds	r30, 0x03DA	; 0x8003da <pxOverflowTimerList>
     3f8:	f0 91 db 03 	lds	r31, 0x03DB	; 0x8003db <pxOverflowTimerList+0x1>
     3fc:	80 81       	ld	r24, Z
     3fe:	44 2d       	mov	r20, r4
     400:	81 11       	cpse	r24, r1
     402:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     404:	ae 2c       	mov	r10, r14
     406:	bf 2c       	mov	r11, r15
     408:	5e cf       	rjmp	.-324    	; 0x2c6 <prvTimerTask+0xc0>

0000040a <__ctors_end>:
     40a:	11 24       	eor	r1, r1
     40c:	1f be       	out	0x3f, r1	; 63
     40e:	cf ef       	ldi	r28, 0xFF	; 255
     410:	d1 e2       	ldi	r29, 0x21	; 33
     412:	de bf       	out	0x3e, r29	; 62
     414:	cd bf       	out	0x3d, r28	; 61
     416:	00 e0       	ldi	r16, 0x00	; 0
     418:	0c bf       	out	0x3c, r16	; 60

0000041a <__do_copy_data>:
     41a:	13 e0       	ldi	r17, 0x03	; 3
     41c:	a0 e0       	ldi	r26, 0x00	; 0
     41e:	b2 e0       	ldi	r27, 0x02	; 2
     420:	e8 e1       	ldi	r30, 0x18	; 24
     422:	fa e3       	ldi	r31, 0x3A	; 58
     424:	00 e0       	ldi	r16, 0x00	; 0
     426:	0b bf       	out	0x3b, r16	; 59
     428:	02 c0       	rjmp	.+4      	; 0x42e <__do_copy_data+0x14>
     42a:	07 90       	elpm	r0, Z+
     42c:	0d 92       	st	X+, r0
     42e:	ae 36       	cpi	r26, 0x6E	; 110
     430:	b1 07       	cpc	r27, r17
     432:	d9 f7       	brne	.-10     	; 0x42a <__do_copy_data+0x10>

00000434 <__do_clear_bss>:
     434:	24 e0       	ldi	r18, 0x04	; 4
     436:	ae e6       	ldi	r26, 0x6E	; 110
     438:	b3 e0       	ldi	r27, 0x03	; 3
     43a:	01 c0       	rjmp	.+2      	; 0x43e <.do_clear_bss_start>

0000043c <.do_clear_bss_loop>:
     43c:	1d 92       	st	X+, r1

0000043e <.do_clear_bss_start>:
     43e:	a7 33       	cpi	r26, 0x37	; 55
     440:	b2 07       	cpc	r27, r18
     442:	e1 f7       	brne	.-8      	; 0x43c <.do_clear_bss_loop>
     444:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <main>
     448:	0c 94 0a 1d 	jmp	0x3a14	; 0x3a14 <_exit>

0000044c <__bad_interrupt>:
     44c:	d9 cd       	rjmp	.-1102   	; 0x0 <__vectors>

0000044e <co2_callback>:
		//vTaskDelayUntil(&xLastWakeTimeCO2,SENSOR_TIMER*60);
	//}
}

// call back function for getting co2 value
void co2_callback(uint16_t co2_ppm) {
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	1f 92       	push	r1
     454:	1f 92       	push	r1
     456:	cd b7       	in	r28, 0x3d	; 61
     458:	de b7       	in	r29, 0x3e	; 62
	co2_ppm_pointer = &co2_ppm;
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	90 93 1a 04 	sts	0x041A, r25	; 0x80041a <co2_ppm_pointer+0x1>
     462:	80 93 19 04 	sts	0x0419, r24	; 0x800419 <co2_ppm_pointer>
}
     466:	0f 90       	pop	r0
     468:	0f 90       	pop	r0
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	08 95       	ret

00000470 <co2_sensor_init>:

uint16_t* co2_ppm_pointer;

// create drivers
void co2_sensor_init() {	
	mh_z19_create(ser_USART3, co2_callback);
     470:	67 e2       	ldi	r22, 0x27	; 39
     472:	72 e0       	ldi	r23, 0x02	; 2
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <mh_z19_create>
     47a:	08 95       	ret

0000047c <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     47c:	e7 e0       	ldi	r30, 0x07	; 7
     47e:	f1 e0       	ldi	r31, 0x01	; 1
     480:	80 81       	ld	r24, Z
     482:	8f 60       	ori	r24, 0x0F	; 15
     484:	80 83       	st	Z, r24
     486:	08 95       	ret

00000488 <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     488:	e8 e0       	ldi	r30, 0x08	; 8
     48a:	f1 e0       	ldi	r31, 0x01	; 1
     48c:	90 81       	ld	r25, Z
     48e:	90 7f       	andi	r25, 0xF0	; 240
     490:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     492:	90 81       	ld	r25, Z
     494:	8f 70       	andi	r24, 0x0F	; 15
     496:	98 2b       	or	r25, r24
     498:	90 83       	st	Z, r25
     49a:	08 95       	ret

0000049c <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     49c:	e8 e0       	ldi	r30, 0x08	; 8
     49e:	f1 e0       	ldi	r31, 0x01	; 1
     4a0:	80 81       	ld	r24, Z
     4a2:	80 7f       	andi	r24, 0xF0	; 240
     4a4:	80 83       	st	Z, r24
     4a6:	08 95       	ret

000004a8 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     4a8:	cf 93       	push	r28
     4aa:	df 93       	push	r29
     4ac:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     4ae:	49 d7       	rcall	.+3730   	; 0x1342 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     4b0:	ce 01       	movw	r24, r28
     4b2:	0e 94 e5 18 	call	0x31ca	; 0x31ca <malloc>
     4b6:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     4b8:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     4bc:	20 97       	sbiw	r28, 0x00	; 0
     4be:	11 f4       	brne	.+4      	; 0x4c4 <pvPortMalloc+0x1c>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     4c0:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     4c4:	ce 01       	movw	r24, r28
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
    if( pv )
     4d0:	00 97       	sbiw	r24, 0x00	; 0
     4d2:	31 f0       	breq	.+12     	; 0x4e0 <vPortFree+0x14>
     4d4:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     4d6:	35 d7       	rcall	.+3690   	; 0x1342 <vTaskSuspendAll>
        {
            free( pv );
     4d8:	ce 01       	movw	r24, r28
     4da:	0e 94 7d 19 	call	0x32fa	; 0x32fa <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     4de:	f8 d7       	rcall	.+4080   	; 0x14d0 <xTaskResumeAll>
    }
}
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	08 95       	ret

000004e6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     4e6:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4e8:	03 96       	adiw	r24, 0x03	; 3
     4ea:	92 83       	std	Z+2, r25	; 0x02
     4ec:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     4ee:	2f ef       	ldi	r18, 0xFF	; 255
     4f0:	3f ef       	ldi	r19, 0xFF	; 255
     4f2:	34 83       	std	Z+4, r19	; 0x04
     4f4:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4f6:	96 83       	std	Z+6, r25	; 0x06
     4f8:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4fa:	90 87       	std	Z+8, r25	; 0x08
     4fc:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     4fe:	10 82       	st	Z, r1
     500:	08 95       	ret

00000502 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     502:	fc 01       	movw	r30, r24
     504:	11 86       	std	Z+9, r1	; 0x09
     506:	10 86       	std	Z+8, r1	; 0x08
     508:	08 95       	ret

0000050a <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	9c 01       	movw	r18, r24
     510:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     512:	dc 01       	movw	r26, r24
     514:	11 96       	adiw	r26, 0x01	; 1
     516:	cd 91       	ld	r28, X+
     518:	dc 91       	ld	r29, X
     51a:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     51c:	d3 83       	std	Z+3, r29	; 0x03
     51e:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     520:	8c 81       	ldd	r24, Y+4	; 0x04
     522:	9d 81       	ldd	r25, Y+5	; 0x05
     524:	95 83       	std	Z+5, r25	; 0x05
     526:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     528:	8c 81       	ldd	r24, Y+4	; 0x04
     52a:	9d 81       	ldd	r25, Y+5	; 0x05
     52c:	dc 01       	movw	r26, r24
     52e:	13 96       	adiw	r26, 0x03	; 3
     530:	7c 93       	st	X, r23
     532:	6e 93       	st	-X, r22
     534:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     536:	7d 83       	std	Y+5, r23	; 0x05
     538:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     53a:	31 87       	std	Z+9, r19	; 0x09
     53c:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     53e:	f9 01       	movw	r30, r18
     540:	80 81       	ld	r24, Z
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	80 83       	st	Z, r24
}
     546:	df 91       	pop	r29
     548:	cf 91       	pop	r28
     54a:	08 95       	ret

0000054c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     552:	48 81       	ld	r20, Y
     554:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     556:	4f 3f       	cpi	r20, 0xFF	; 255
     558:	2f ef       	ldi	r18, 0xFF	; 255
     55a:	52 07       	cpc	r21, r18
     55c:	21 f4       	brne	.+8      	; 0x566 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     55e:	fc 01       	movw	r30, r24
     560:	a7 81       	ldd	r26, Z+7	; 0x07
     562:	b0 85       	ldd	r27, Z+8	; 0x08
     564:	0d c0       	rjmp	.+26     	; 0x580 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     566:	dc 01       	movw	r26, r24
     568:	13 96       	adiw	r26, 0x03	; 3
     56a:	01 c0       	rjmp	.+2      	; 0x56e <vListInsert+0x22>
     56c:	df 01       	movw	r26, r30
     56e:	12 96       	adiw	r26, 0x02	; 2
     570:	ed 91       	ld	r30, X+
     572:	fc 91       	ld	r31, X
     574:	13 97       	sbiw	r26, 0x03	; 3
     576:	20 81       	ld	r18, Z
     578:	31 81       	ldd	r19, Z+1	; 0x01
     57a:	42 17       	cp	r20, r18
     57c:	53 07       	cpc	r21, r19
     57e:	b0 f7       	brcc	.-20     	; 0x56c <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     580:	12 96       	adiw	r26, 0x02	; 2
     582:	ed 91       	ld	r30, X+
     584:	fc 91       	ld	r31, X
     586:	13 97       	sbiw	r26, 0x03	; 3
     588:	fb 83       	std	Y+3, r31	; 0x03
     58a:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     58c:	d5 83       	std	Z+5, r29	; 0x05
     58e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     590:	bd 83       	std	Y+5, r27	; 0x05
     592:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     594:	13 96       	adiw	r26, 0x03	; 3
     596:	dc 93       	st	X, r29
     598:	ce 93       	st	-X, r28
     59a:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     59c:	99 87       	std	Y+9, r25	; 0x09
     59e:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     5a0:	fc 01       	movw	r30, r24
     5a2:	20 81       	ld	r18, Z
     5a4:	2f 5f       	subi	r18, 0xFF	; 255
     5a6:	20 83       	st	Z, r18
}
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	08 95       	ret

000005ae <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5ae:	cf 93       	push	r28
     5b0:	df 93       	push	r29
     5b2:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     5b4:	a0 85       	ldd	r26, Z+8	; 0x08
     5b6:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5b8:	c2 81       	ldd	r28, Z+2	; 0x02
     5ba:	d3 81       	ldd	r29, Z+3	; 0x03
     5bc:	84 81       	ldd	r24, Z+4	; 0x04
     5be:	95 81       	ldd	r25, Z+5	; 0x05
     5c0:	9d 83       	std	Y+5, r25	; 0x05
     5c2:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5c4:	c4 81       	ldd	r28, Z+4	; 0x04
     5c6:	d5 81       	ldd	r29, Z+5	; 0x05
     5c8:	82 81       	ldd	r24, Z+2	; 0x02
     5ca:	93 81       	ldd	r25, Z+3	; 0x03
     5cc:	9b 83       	std	Y+3, r25	; 0x03
     5ce:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     5d0:	11 96       	adiw	r26, 0x01	; 1
     5d2:	8d 91       	ld	r24, X+
     5d4:	9c 91       	ld	r25, X
     5d6:	12 97       	sbiw	r26, 0x02	; 2
     5d8:	e8 17       	cp	r30, r24
     5da:	f9 07       	cpc	r31, r25
     5dc:	31 f4       	brne	.+12     	; 0x5ea <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     5de:	84 81       	ldd	r24, Z+4	; 0x04
     5e0:	95 81       	ldd	r25, Z+5	; 0x05
     5e2:	12 96       	adiw	r26, 0x02	; 2
     5e4:	9c 93       	st	X, r25
     5e6:	8e 93       	st	-X, r24
     5e8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5ea:	11 86       	std	Z+9, r1	; 0x09
     5ec:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     5ee:	8c 91       	ld	r24, X
     5f0:	81 50       	subi	r24, 0x01	; 1
     5f2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5f4:	8c 91       	ld	r24, X
}
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	08 95       	ret

000005fc <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     5fc:	31 e1       	ldi	r19, 0x11	; 17
     5fe:	fc 01       	movw	r30, r24
     600:	30 83       	st	Z, r19
     602:	31 97       	sbiw	r30, 0x01	; 1
     604:	22 e2       	ldi	r18, 0x22	; 34
     606:	20 83       	st	Z, r18
     608:	31 97       	sbiw	r30, 0x01	; 1
     60a:	a3 e3       	ldi	r26, 0x33	; 51
     60c:	a0 83       	st	Z, r26
     60e:	31 97       	sbiw	r30, 0x01	; 1
     610:	60 83       	st	Z, r22
     612:	31 97       	sbiw	r30, 0x01	; 1
     614:	70 83       	st	Z, r23
     616:	31 97       	sbiw	r30, 0x01	; 1
     618:	10 82       	st	Z, r1
     61a:	31 97       	sbiw	r30, 0x01	; 1
     61c:	10 82       	st	Z, r1
     61e:	31 97       	sbiw	r30, 0x01	; 1
     620:	60 e8       	ldi	r22, 0x80	; 128
     622:	60 83       	st	Z, r22
     624:	31 97       	sbiw	r30, 0x01	; 1
     626:	10 82       	st	Z, r1
     628:	31 97       	sbiw	r30, 0x01	; 1
     62a:	10 82       	st	Z, r1
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	10 82       	st	Z, r1
     630:	31 97       	sbiw	r30, 0x01	; 1
     632:	62 e0       	ldi	r22, 0x02	; 2
     634:	60 83       	st	Z, r22
     636:	31 97       	sbiw	r30, 0x01	; 1
     638:	63 e0       	ldi	r22, 0x03	; 3
     63a:	60 83       	st	Z, r22
     63c:	31 97       	sbiw	r30, 0x01	; 1
     63e:	64 e0       	ldi	r22, 0x04	; 4
     640:	60 83       	st	Z, r22
     642:	31 97       	sbiw	r30, 0x01	; 1
     644:	65 e0       	ldi	r22, 0x05	; 5
     646:	60 83       	st	Z, r22
     648:	31 97       	sbiw	r30, 0x01	; 1
     64a:	66 e0       	ldi	r22, 0x06	; 6
     64c:	60 83       	st	Z, r22
     64e:	31 97       	sbiw	r30, 0x01	; 1
     650:	67 e0       	ldi	r22, 0x07	; 7
     652:	60 83       	st	Z, r22
     654:	31 97       	sbiw	r30, 0x01	; 1
     656:	68 e0       	ldi	r22, 0x08	; 8
     658:	60 83       	st	Z, r22
     65a:	31 97       	sbiw	r30, 0x01	; 1
     65c:	69 e0       	ldi	r22, 0x09	; 9
     65e:	60 83       	st	Z, r22
     660:	31 97       	sbiw	r30, 0x01	; 1
     662:	60 e1       	ldi	r22, 0x10	; 16
     664:	60 83       	st	Z, r22
     666:	31 97       	sbiw	r30, 0x01	; 1
     668:	30 83       	st	Z, r19
     66a:	31 97       	sbiw	r30, 0x01	; 1
     66c:	32 e1       	ldi	r19, 0x12	; 18
     66e:	30 83       	st	Z, r19
     670:	31 97       	sbiw	r30, 0x01	; 1
     672:	33 e1       	ldi	r19, 0x13	; 19
     674:	30 83       	st	Z, r19
     676:	31 97       	sbiw	r30, 0x01	; 1
     678:	34 e1       	ldi	r19, 0x14	; 20
     67a:	30 83       	st	Z, r19
     67c:	31 97       	sbiw	r30, 0x01	; 1
     67e:	35 e1       	ldi	r19, 0x15	; 21
     680:	30 83       	st	Z, r19
     682:	31 97       	sbiw	r30, 0x01	; 1
     684:	36 e1       	ldi	r19, 0x16	; 22
     686:	30 83       	st	Z, r19
     688:	31 97       	sbiw	r30, 0x01	; 1
     68a:	37 e1       	ldi	r19, 0x17	; 23
     68c:	30 83       	st	Z, r19
     68e:	31 97       	sbiw	r30, 0x01	; 1
     690:	38 e1       	ldi	r19, 0x18	; 24
     692:	30 83       	st	Z, r19
     694:	31 97       	sbiw	r30, 0x01	; 1
     696:	39 e1       	ldi	r19, 0x19	; 25
     698:	30 83       	st	Z, r19
     69a:	31 97       	sbiw	r30, 0x01	; 1
     69c:	30 e2       	ldi	r19, 0x20	; 32
     69e:	30 83       	st	Z, r19
     6a0:	31 97       	sbiw	r30, 0x01	; 1
     6a2:	31 e2       	ldi	r19, 0x21	; 33
     6a4:	30 83       	st	Z, r19
     6a6:	31 97       	sbiw	r30, 0x01	; 1
     6a8:	20 83       	st	Z, r18
     6aa:	31 97       	sbiw	r30, 0x01	; 1
     6ac:	23 e2       	ldi	r18, 0x23	; 35
     6ae:	20 83       	st	Z, r18
     6b0:	31 97       	sbiw	r30, 0x01	; 1
     6b2:	40 83       	st	Z, r20
     6b4:	31 97       	sbiw	r30, 0x01	; 1
     6b6:	50 83       	st	Z, r21
     6b8:	31 97       	sbiw	r30, 0x01	; 1
     6ba:	26 e2       	ldi	r18, 0x26	; 38
     6bc:	20 83       	st	Z, r18
     6be:	31 97       	sbiw	r30, 0x01	; 1
     6c0:	27 e2       	ldi	r18, 0x27	; 39
     6c2:	20 83       	st	Z, r18
     6c4:	31 97       	sbiw	r30, 0x01	; 1
     6c6:	28 e2       	ldi	r18, 0x28	; 40
     6c8:	20 83       	st	Z, r18
     6ca:	31 97       	sbiw	r30, 0x01	; 1
     6cc:	29 e2       	ldi	r18, 0x29	; 41
     6ce:	20 83       	st	Z, r18
     6d0:	31 97       	sbiw	r30, 0x01	; 1
     6d2:	20 e3       	ldi	r18, 0x30	; 48
     6d4:	20 83       	st	Z, r18
     6d6:	31 97       	sbiw	r30, 0x01	; 1
     6d8:	21 e3       	ldi	r18, 0x31	; 49
     6da:	20 83       	st	Z, r18
     6dc:	89 97       	sbiw	r24, 0x29	; 41
     6de:	08 95       	ret

000006e0 <xPortStartScheduler>:
     6e0:	a8 95       	wdr
     6e2:	90 ec       	ldi	r25, 0xC0	; 192
     6e4:	88 e1       	ldi	r24, 0x18	; 24
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	f8 94       	cli
     6ea:	a8 95       	wdr
     6ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     6f6:	a0 91 d2 03 	lds	r26, 0x03D2	; 0x8003d2 <pxCurrentTCB>
     6fa:	b0 91 d3 03 	lds	r27, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
     6fe:	cd 91       	ld	r28, X+
     700:	cd bf       	out	0x3d, r28	; 61
     702:	dd 91       	ld	r29, X+
     704:	de bf       	out	0x3e, r29	; 62
     706:	ff 91       	pop	r31
     708:	ef 91       	pop	r30
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	bf 91       	pop	r27
     710:	af 91       	pop	r26
     712:	9f 91       	pop	r25
     714:	8f 91       	pop	r24
     716:	7f 91       	pop	r23
     718:	6f 91       	pop	r22
     71a:	5f 91       	pop	r21
     71c:	4f 91       	pop	r20
     71e:	3f 91       	pop	r19
     720:	2f 91       	pop	r18
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	ff 90       	pop	r15
     728:	ef 90       	pop	r14
     72a:	df 90       	pop	r13
     72c:	cf 90       	pop	r12
     72e:	bf 90       	pop	r11
     730:	af 90       	pop	r10
     732:	9f 90       	pop	r9
     734:	8f 90       	pop	r8
     736:	7f 90       	pop	r7
     738:	6f 90       	pop	r6
     73a:	5f 90       	pop	r5
     73c:	4f 90       	pop	r4
     73e:	3f 90       	pop	r3
     740:	2f 90       	pop	r2
     742:	1f 90       	pop	r1
     744:	0f 90       	pop	r0
     746:	0c be       	out	0x3c, r0	; 60
     748:	0f 90       	pop	r0
     74a:	0b be       	out	0x3b, r0	; 59
     74c:	0f 90       	pop	r0
     74e:	0f be       	out	0x3f, r0	; 63
     750:	0f 90       	pop	r0
     752:	08 95       	ret
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	08 95       	ret

00000758 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     758:	0f 92       	push	r0
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	0f 92       	push	r0
     760:	0b b6       	in	r0, 0x3b	; 59
     762:	0f 92       	push	r0
     764:	0c b6       	in	r0, 0x3c	; 60
     766:	0f 92       	push	r0
     768:	1f 92       	push	r1
     76a:	11 24       	eor	r1, r1
     76c:	2f 92       	push	r2
     76e:	3f 92       	push	r3
     770:	4f 92       	push	r4
     772:	5f 92       	push	r5
     774:	6f 92       	push	r6
     776:	7f 92       	push	r7
     778:	8f 92       	push	r8
     77a:	9f 92       	push	r9
     77c:	af 92       	push	r10
     77e:	bf 92       	push	r11
     780:	cf 92       	push	r12
     782:	df 92       	push	r13
     784:	ef 92       	push	r14
     786:	ff 92       	push	r15
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	2f 93       	push	r18
     78e:	3f 93       	push	r19
     790:	4f 93       	push	r20
     792:	5f 93       	push	r21
     794:	6f 93       	push	r22
     796:	7f 93       	push	r23
     798:	8f 93       	push	r24
     79a:	9f 93       	push	r25
     79c:	af 93       	push	r26
     79e:	bf 93       	push	r27
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	ef 93       	push	r30
     7a6:	ff 93       	push	r31
     7a8:	a0 91 d2 03 	lds	r26, 0x03D2	; 0x8003d2 <pxCurrentTCB>
     7ac:	b0 91 d3 03 	lds	r27, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
     7b0:	0d b6       	in	r0, 0x3d	; 61
     7b2:	0d 92       	st	X+, r0
     7b4:	0e b6       	in	r0, 0x3e	; 62
     7b6:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     7b8:	15 d7       	rcall	.+3626   	; 0x15e4 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     7ba:	a0 91 d2 03 	lds	r26, 0x03D2	; 0x8003d2 <pxCurrentTCB>
     7be:	b0 91 d3 03 	lds	r27, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
     7c2:	cd 91       	ld	r28, X+
     7c4:	cd bf       	out	0x3d, r28	; 61
     7c6:	dd 91       	ld	r29, X+
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	ff 91       	pop	r31
     7cc:	ef 91       	pop	r30
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	bf 91       	pop	r27
     7d4:	af 91       	pop	r26
     7d6:	9f 91       	pop	r25
     7d8:	8f 91       	pop	r24
     7da:	7f 91       	pop	r23
     7dc:	6f 91       	pop	r22
     7de:	5f 91       	pop	r21
     7e0:	4f 91       	pop	r20
     7e2:	3f 91       	pop	r19
     7e4:	2f 91       	pop	r18
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	ff 90       	pop	r15
     7ec:	ef 90       	pop	r14
     7ee:	df 90       	pop	r13
     7f0:	cf 90       	pop	r12
     7f2:	bf 90       	pop	r11
     7f4:	af 90       	pop	r10
     7f6:	9f 90       	pop	r9
     7f8:	8f 90       	pop	r8
     7fa:	7f 90       	pop	r7
     7fc:	6f 90       	pop	r6
     7fe:	5f 90       	pop	r5
     800:	4f 90       	pop	r4
     802:	3f 90       	pop	r3
     804:	2f 90       	pop	r2
     806:	1f 90       	pop	r1
     808:	0f 90       	pop	r0
     80a:	0c be       	out	0x3c, r0	; 60
     80c:	0f 90       	pop	r0
     80e:	0b be       	out	0x3b, r0	; 59
     810:	0f 90       	pop	r0
     812:	0f be       	out	0x3f, r0	; 63
     814:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     816:	08 95       	ret

00000818 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     818:	0f 92       	push	r0
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	0f 92       	push	r0
     820:	0b b6       	in	r0, 0x3b	; 59
     822:	0f 92       	push	r0
     824:	0c b6       	in	r0, 0x3c	; 60
     826:	0f 92       	push	r0
     828:	1f 92       	push	r1
     82a:	11 24       	eor	r1, r1
     82c:	2f 92       	push	r2
     82e:	3f 92       	push	r3
     830:	4f 92       	push	r4
     832:	5f 92       	push	r5
     834:	6f 92       	push	r6
     836:	7f 92       	push	r7
     838:	8f 92       	push	r8
     83a:	9f 92       	push	r9
     83c:	af 92       	push	r10
     83e:	bf 92       	push	r11
     840:	cf 92       	push	r12
     842:	df 92       	push	r13
     844:	ef 92       	push	r14
     846:	ff 92       	push	r15
     848:	0f 93       	push	r16
     84a:	1f 93       	push	r17
     84c:	2f 93       	push	r18
     84e:	3f 93       	push	r19
     850:	4f 93       	push	r20
     852:	5f 93       	push	r21
     854:	6f 93       	push	r22
     856:	7f 93       	push	r23
     858:	8f 93       	push	r24
     85a:	9f 93       	push	r25
     85c:	af 93       	push	r26
     85e:	bf 93       	push	r27
     860:	cf 93       	push	r28
     862:	df 93       	push	r29
     864:	ef 93       	push	r30
     866:	ff 93       	push	r31
     868:	a0 91 d2 03 	lds	r26, 0x03D2	; 0x8003d2 <pxCurrentTCB>
     86c:	b0 91 d3 03 	lds	r27, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
     870:	0d b6       	in	r0, 0x3d	; 61
     872:	0d 92       	st	X+, r0
     874:	0e b6       	in	r0, 0x3e	; 62
     876:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     878:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     87a:	73 d5       	rcall	.+2790   	; 0x1362 <xTaskIncrementTick>
     87c:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     87e:	b2 d6       	rcall	.+3428   	; 0x15e4 <vTaskSwitchContext>
     880:	a0 91 d2 03 	lds	r26, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    }

    portRESTORE_CONTEXT();
     884:	b0 91 d3 03 	lds	r27, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
     888:	cd 91       	ld	r28, X+
     88a:	cd bf       	out	0x3d, r28	; 61
     88c:	dd 91       	ld	r29, X+
     88e:	de bf       	out	0x3e, r29	; 62
     890:	ff 91       	pop	r31
     892:	ef 91       	pop	r30
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	bf 91       	pop	r27
     89a:	af 91       	pop	r26
     89c:	9f 91       	pop	r25
     89e:	8f 91       	pop	r24
     8a0:	7f 91       	pop	r23
     8a2:	6f 91       	pop	r22
     8a4:	5f 91       	pop	r21
     8a6:	4f 91       	pop	r20
     8a8:	3f 91       	pop	r19
     8aa:	2f 91       	pop	r18
     8ac:	1f 91       	pop	r17
     8ae:	0f 91       	pop	r16
     8b0:	ff 90       	pop	r15
     8b2:	ef 90       	pop	r14
     8b4:	df 90       	pop	r13
     8b6:	cf 90       	pop	r12
     8b8:	bf 90       	pop	r11
     8ba:	af 90       	pop	r10
     8bc:	9f 90       	pop	r9
     8be:	8f 90       	pop	r8
     8c0:	7f 90       	pop	r7
     8c2:	6f 90       	pop	r6
     8c4:	5f 90       	pop	r5
     8c6:	4f 90       	pop	r4
     8c8:	3f 90       	pop	r3
     8ca:	2f 90       	pop	r2
     8cc:	1f 90       	pop	r1
     8ce:	0f 90       	pop	r0
     8d0:	0c be       	out	0x3c, r0	; 60
     8d2:	0f 90       	pop	r0
     8d4:	0b be       	out	0x3b, r0	; 59
     8d6:	0f 90       	pop	r0
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	0f 90       	pop	r0
     8dc:	08 95       	ret

000008de <__vector_12>:

    __asm__ __volatile__ ( "ret" );
     8de:	9c df       	rcall	.-200    	; 0x818 <vPortYieldFromTick>
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
        __asm__ __volatile__ ( "reti" );
     8e0:	18 95       	reti

000008e2 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	0f 92       	push	r0
     8e8:	fc 01       	movw	r30, r24
     8ea:	92 8d       	ldd	r25, Z+26	; 0x1a
     8ec:	0f 90       	pop	r0
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	91 11       	cpse	r25, r1
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	08 95       	ret

000008f8 <prvCopyDataToQueue>:
     8f8:	0f 93       	push	r16
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	ec 01       	movw	r28, r24
     902:	04 2f       	mov	r16, r20
     904:	1a 8d       	ldd	r17, Y+26	; 0x1a
     906:	4c 8d       	ldd	r20, Y+28	; 0x1c
     908:	41 11       	cpse	r20, r1
     90a:	0c c0       	rjmp	.+24     	; 0x924 <prvCopyDataToQueue+0x2c>
     90c:	88 81       	ld	r24, Y
     90e:	99 81       	ldd	r25, Y+1	; 0x01
     910:	89 2b       	or	r24, r25
     912:	09 f0       	breq	.+2      	; 0x916 <prvCopyDataToQueue+0x1e>
     914:	42 c0       	rjmp	.+132    	; 0x99a <prvCopyDataToQueue+0xa2>
     916:	8c 81       	ldd	r24, Y+4	; 0x04
     918:	9d 81       	ldd	r25, Y+5	; 0x05
     91a:	0e 94 b5 0c 	call	0x196a	; 0x196a <xTaskPriorityDisinherit>
     91e:	1d 82       	std	Y+5, r1	; 0x05
     920:	1c 82       	std	Y+4, r1	; 0x04
     922:	42 c0       	rjmp	.+132    	; 0x9a8 <prvCopyDataToQueue+0xb0>
     924:	01 11       	cpse	r16, r1
     926:	17 c0       	rjmp	.+46     	; 0x956 <prvCopyDataToQueue+0x5e>
     928:	50 e0       	ldi	r21, 0x00	; 0
     92a:	8a 81       	ldd	r24, Y+2	; 0x02
     92c:	9b 81       	ldd	r25, Y+3	; 0x03
     92e:	0e 94 0a 1a 	call	0x3414	; 0x3414 <memcpy>
     932:	2c 8d       	ldd	r18, Y+28	; 0x1c
     934:	8a 81       	ldd	r24, Y+2	; 0x02
     936:	9b 81       	ldd	r25, Y+3	; 0x03
     938:	82 0f       	add	r24, r18
     93a:	91 1d       	adc	r25, r1
     93c:	9b 83       	std	Y+3, r25	; 0x03
     93e:	8a 83       	std	Y+2, r24	; 0x02
     940:	2c 81       	ldd	r18, Y+4	; 0x04
     942:	3d 81       	ldd	r19, Y+5	; 0x05
     944:	82 17       	cp	r24, r18
     946:	93 07       	cpc	r25, r19
     948:	50 f1       	brcs	.+84     	; 0x99e <prvCopyDataToQueue+0xa6>
     94a:	88 81       	ld	r24, Y
     94c:	99 81       	ldd	r25, Y+1	; 0x01
     94e:	9b 83       	std	Y+3, r25	; 0x03
     950:	8a 83       	std	Y+2, r24	; 0x02
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	29 c0       	rjmp	.+82     	; 0x9a8 <prvCopyDataToQueue+0xb0>
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	8e 81       	ldd	r24, Y+6	; 0x06
     95a:	9f 81       	ldd	r25, Y+7	; 0x07
     95c:	0e 94 0a 1a 	call	0x3414	; 0x3414 <memcpy>
     960:	8c 8d       	ldd	r24, Y+28	; 0x1c
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	91 95       	neg	r25
     966:	81 95       	neg	r24
     968:	91 09       	sbc	r25, r1
     96a:	2e 81       	ldd	r18, Y+6	; 0x06
     96c:	3f 81       	ldd	r19, Y+7	; 0x07
     96e:	28 0f       	add	r18, r24
     970:	39 1f       	adc	r19, r25
     972:	3f 83       	std	Y+7, r19	; 0x07
     974:	2e 83       	std	Y+6, r18	; 0x06
     976:	48 81       	ld	r20, Y
     978:	59 81       	ldd	r21, Y+1	; 0x01
     97a:	24 17       	cp	r18, r20
     97c:	35 07       	cpc	r19, r21
     97e:	30 f4       	brcc	.+12     	; 0x98c <prvCopyDataToQueue+0x94>
     980:	2c 81       	ldd	r18, Y+4	; 0x04
     982:	3d 81       	ldd	r19, Y+5	; 0x05
     984:	82 0f       	add	r24, r18
     986:	93 1f       	adc	r25, r19
     988:	9f 83       	std	Y+7, r25	; 0x07
     98a:	8e 83       	std	Y+6, r24	; 0x06
     98c:	02 30       	cpi	r16, 0x02	; 2
     98e:	49 f4       	brne	.+18     	; 0x9a2 <prvCopyDataToQueue+0xaa>
     990:	11 23       	and	r17, r17
     992:	49 f0       	breq	.+18     	; 0x9a6 <prvCopyDataToQueue+0xae>
     994:	11 50       	subi	r17, 0x01	; 1
     996:	80 e0       	ldi	r24, 0x00	; 0
     998:	07 c0       	rjmp	.+14     	; 0x9a8 <prvCopyDataToQueue+0xb0>
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	05 c0       	rjmp	.+10     	; 0x9a8 <prvCopyDataToQueue+0xb0>
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <prvCopyDataToQueue+0xb0>
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	01 c0       	rjmp	.+2      	; 0x9a8 <prvCopyDataToQueue+0xb0>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	1f 5f       	subi	r17, 0xFF	; 255
     9aa:	1a 8f       	std	Y+26, r17	; 0x1a
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	08 95       	ret

000009b6 <prvCopyDataFromQueue>:
     9b6:	fc 01       	movw	r30, r24
     9b8:	44 8d       	ldd	r20, Z+28	; 0x1c
     9ba:	44 23       	and	r20, r20
     9bc:	a9 f0       	breq	.+42     	; 0x9e8 <prvCopyDataFromQueue+0x32>
     9be:	50 e0       	ldi	r21, 0x00	; 0
     9c0:	26 81       	ldd	r18, Z+6	; 0x06
     9c2:	37 81       	ldd	r19, Z+7	; 0x07
     9c4:	24 0f       	add	r18, r20
     9c6:	35 1f       	adc	r19, r21
     9c8:	37 83       	std	Z+7, r19	; 0x07
     9ca:	26 83       	std	Z+6, r18	; 0x06
     9cc:	84 81       	ldd	r24, Z+4	; 0x04
     9ce:	95 81       	ldd	r25, Z+5	; 0x05
     9d0:	28 17       	cp	r18, r24
     9d2:	39 07       	cpc	r19, r25
     9d4:	20 f0       	brcs	.+8      	; 0x9de <prvCopyDataFromQueue+0x28>
     9d6:	80 81       	ld	r24, Z
     9d8:	91 81       	ldd	r25, Z+1	; 0x01
     9da:	97 83       	std	Z+7, r25	; 0x07
     9dc:	86 83       	std	Z+6, r24	; 0x06
     9de:	cb 01       	movw	r24, r22
     9e0:	66 81       	ldd	r22, Z+6	; 0x06
     9e2:	77 81       	ldd	r23, Z+7	; 0x07
     9e4:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <memcpy>
     9e8:	08 95       	ret

000009ea <prvUnlockQueue>:
     9ea:	ef 92       	push	r14
     9ec:	ff 92       	push	r15
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	8c 01       	movw	r16, r24
     9f6:	0f b6       	in	r0, 0x3f	; 63
     9f8:	f8 94       	cli
     9fa:	0f 92       	push	r0
     9fc:	fc 01       	movw	r30, r24
     9fe:	c6 8d       	ldd	r28, Z+30	; 0x1e
     a00:	1c 16       	cp	r1, r28
     a02:	9c f4       	brge	.+38     	; 0xa2a <prvUnlockQueue+0x40>
     a04:	81 89       	ldd	r24, Z+17	; 0x11
     a06:	81 11       	cpse	r24, r1
     a08:	06 c0       	rjmp	.+12     	; 0xa16 <prvUnlockQueue+0x2c>
     a0a:	0f c0       	rjmp	.+30     	; 0xa2a <prvUnlockQueue+0x40>
     a0c:	f8 01       	movw	r30, r16
     a0e:	81 89       	ldd	r24, Z+17	; 0x11
     a10:	81 11       	cpse	r24, r1
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <prvUnlockQueue+0x34>
     a14:	0a c0       	rjmp	.+20     	; 0xa2a <prvUnlockQueue+0x40>
     a16:	78 01       	movw	r14, r16
     a18:	f1 e1       	ldi	r31, 0x11	; 17
     a1a:	ef 0e       	add	r14, r31
     a1c:	f1 1c       	adc	r15, r1
     a1e:	c7 01       	movw	r24, r14
     a20:	98 d6       	rcall	.+3376   	; 0x1752 <xTaskRemoveFromEventList>
     a22:	81 11       	cpse	r24, r1
     a24:	1e d7       	rcall	.+3644   	; 0x1862 <vTaskMissedYield>
     a26:	c1 50       	subi	r28, 0x01	; 1
     a28:	89 f7       	brne	.-30     	; 0xa0c <prvUnlockQueue+0x22>
     a2a:	8f ef       	ldi	r24, 0xFF	; 255
     a2c:	f8 01       	movw	r30, r16
     a2e:	86 8f       	std	Z+30, r24	; 0x1e
     a30:	0f 90       	pop	r0
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	0f 92       	push	r0
     a3a:	c5 8d       	ldd	r28, Z+29	; 0x1d
     a3c:	1c 16       	cp	r1, r28
     a3e:	9c f4       	brge	.+38     	; 0xa66 <prvUnlockQueue+0x7c>
     a40:	80 85       	ldd	r24, Z+8	; 0x08
     a42:	81 11       	cpse	r24, r1
     a44:	06 c0       	rjmp	.+12     	; 0xa52 <prvUnlockQueue+0x68>
     a46:	0f c0       	rjmp	.+30     	; 0xa66 <prvUnlockQueue+0x7c>
     a48:	f8 01       	movw	r30, r16
     a4a:	80 85       	ldd	r24, Z+8	; 0x08
     a4c:	81 11       	cpse	r24, r1
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <prvUnlockQueue+0x70>
     a50:	0a c0       	rjmp	.+20     	; 0xa66 <prvUnlockQueue+0x7c>
     a52:	78 01       	movw	r14, r16
     a54:	f8 e0       	ldi	r31, 0x08	; 8
     a56:	ef 0e       	add	r14, r31
     a58:	f1 1c       	adc	r15, r1
     a5a:	c7 01       	movw	r24, r14
     a5c:	7a d6       	rcall	.+3316   	; 0x1752 <xTaskRemoveFromEventList>
     a5e:	81 11       	cpse	r24, r1
     a60:	00 d7       	rcall	.+3584   	; 0x1862 <vTaskMissedYield>
     a62:	c1 50       	subi	r28, 0x01	; 1
     a64:	89 f7       	brne	.-30     	; 0xa48 <prvUnlockQueue+0x5e>
     a66:	8f ef       	ldi	r24, 0xFF	; 255
     a68:	f8 01       	movw	r30, r16
     a6a:	85 8f       	std	Z+29, r24	; 0x1d
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	08 95       	ret

00000a7c <xQueueGenericReset>:
     a7c:	cf 93       	push	r28
     a7e:	df 93       	push	r29
     a80:	ec 01       	movw	r28, r24
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	0f 92       	push	r0
     a88:	e8 81       	ld	r30, Y
     a8a:	f9 81       	ldd	r31, Y+1	; 0x01
     a8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     a8e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	30 e0       	ldi	r19, 0x00	; 0
     a94:	82 9f       	mul	r24, r18
     a96:	a0 01       	movw	r20, r0
     a98:	83 9f       	mul	r24, r19
     a9a:	50 0d       	add	r21, r0
     a9c:	92 9f       	mul	r25, r18
     a9e:	50 0d       	add	r21, r0
     aa0:	11 24       	eor	r1, r1
     aa2:	4e 0f       	add	r20, r30
     aa4:	5f 1f       	adc	r21, r31
     aa6:	5d 83       	std	Y+5, r21	; 0x05
     aa8:	4c 83       	std	Y+4, r20	; 0x04
     aaa:	1a 8e       	std	Y+26, r1	; 0x1a
     aac:	fb 83       	std	Y+3, r31	; 0x03
     aae:	ea 83       	std	Y+2, r30	; 0x02
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	82 9f       	mul	r24, r18
     ab4:	a0 01       	movw	r20, r0
     ab6:	83 9f       	mul	r24, r19
     ab8:	50 0d       	add	r21, r0
     aba:	92 9f       	mul	r25, r18
     abc:	50 0d       	add	r21, r0
     abe:	11 24       	eor	r1, r1
     ac0:	cf 01       	movw	r24, r30
     ac2:	84 0f       	add	r24, r20
     ac4:	95 1f       	adc	r25, r21
     ac6:	9f 83       	std	Y+7, r25	; 0x07
     ac8:	8e 83       	std	Y+6, r24	; 0x06
     aca:	8f ef       	ldi	r24, 0xFF	; 255
     acc:	8d 8f       	std	Y+29, r24	; 0x1d
     ace:	8e 8f       	std	Y+30, r24	; 0x1e
     ad0:	61 11       	cpse	r22, r1
     ad2:	0a c0       	rjmp	.+20     	; 0xae8 <xQueueGenericReset+0x6c>
     ad4:	88 85       	ldd	r24, Y+8	; 0x08
     ad6:	88 23       	and	r24, r24
     ad8:	69 f0       	breq	.+26     	; 0xaf4 <xQueueGenericReset+0x78>
     ada:	ce 01       	movw	r24, r28
     adc:	08 96       	adiw	r24, 0x08	; 8
     ade:	39 d6       	rcall	.+3186   	; 0x1752 <xTaskRemoveFromEventList>
     ae0:	88 23       	and	r24, r24
     ae2:	41 f0       	breq	.+16     	; 0xaf4 <xQueueGenericReset+0x78>
     ae4:	39 de       	rcall	.-910    	; 0x758 <vPortYield>
     ae6:	06 c0       	rjmp	.+12     	; 0xaf4 <xQueueGenericReset+0x78>
     ae8:	ce 01       	movw	r24, r28
     aea:	08 96       	adiw	r24, 0x08	; 8
     aec:	fc dc       	rcall	.-1544   	; 0x4e6 <vListInitialise>
     aee:	ce 01       	movw	r24, r28
     af0:	41 96       	adiw	r24, 0x11	; 17
     af2:	f9 dc       	rcall	.-1550   	; 0x4e6 <vListInitialise>
     af4:	0f 90       	pop	r0
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <xQueueGenericCreate>:
     b00:	ff 92       	push	r15
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	08 2f       	mov	r16, r24
     b0c:	16 2f       	mov	r17, r22
     b0e:	f4 2e       	mov	r15, r20
     b10:	66 23       	and	r22, r22
     b12:	b9 f0       	breq	.+46     	; 0xb42 <xQueueGenericCreate+0x42>
     b14:	86 9f       	mul	r24, r22
     b16:	c0 01       	movw	r24, r0
     b18:	11 24       	eor	r1, r1
     b1a:	81 96       	adiw	r24, 0x21	; 33
     b1c:	c5 dc       	rcall	.-1654   	; 0x4a8 <pvPortMalloc>
     b1e:	ec 01       	movw	r28, r24
     b20:	00 97       	sbiw	r24, 0x00	; 0
     b22:	41 f4       	brne	.+16     	; 0xb34 <xQueueGenericCreate+0x34>
     b24:	14 c0       	rjmp	.+40     	; 0xb4e <xQueueGenericCreate+0x4e>
     b26:	0b 8f       	std	Y+27, r16	; 0x1b
     b28:	1c 8f       	std	Y+28, r17	; 0x1c
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	ce 01       	movw	r24, r28
     b2e:	a6 df       	rcall	.-180    	; 0xa7c <xQueueGenericReset>
     b30:	f8 a2       	std	Y+32, r15	; 0x20
     b32:	0d c0       	rjmp	.+26     	; 0xb4e <xQueueGenericCreate+0x4e>
     b34:	81 96       	adiw	r24, 0x21	; 33
     b36:	99 83       	std	Y+1, r25	; 0x01
     b38:	88 83       	st	Y, r24
     b3a:	f5 cf       	rjmp	.-22     	; 0xb26 <xQueueGenericCreate+0x26>
     b3c:	d9 83       	std	Y+1, r29	; 0x01
     b3e:	c8 83       	st	Y, r28
     b40:	f2 cf       	rjmp	.-28     	; 0xb26 <xQueueGenericCreate+0x26>
     b42:	81 e2       	ldi	r24, 0x21	; 33
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	b0 dc       	rcall	.-1696   	; 0x4a8 <pvPortMalloc>
     b48:	ec 01       	movw	r28, r24
     b4a:	89 2b       	or	r24, r25
     b4c:	b9 f7       	brne	.-18     	; 0xb3c <xQueueGenericCreate+0x3c>
     b4e:	ce 01       	movw	r24, r28
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	08 95       	ret

00000b5c <xQueueGenericSend>:
     b5c:	9f 92       	push	r9
     b5e:	af 92       	push	r10
     b60:	bf 92       	push	r11
     b62:	cf 92       	push	r12
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	00 d0       	rcall	.+0      	; 0xb74 <xQueueGenericSend+0x18>
     b74:	1f 92       	push	r1
     b76:	1f 92       	push	r1
     b78:	cd b7       	in	r28, 0x3d	; 61
     b7a:	de b7       	in	r29, 0x3e	; 62
     b7c:	8c 01       	movw	r16, r24
     b7e:	6b 01       	movw	r12, r22
     b80:	5d 83       	std	Y+5, r21	; 0x05
     b82:	4c 83       	std	Y+4, r20	; 0x04
     b84:	a2 2e       	mov	r10, r18
     b86:	b1 2c       	mov	r11, r1
     b88:	99 24       	eor	r9, r9
     b8a:	93 94       	inc	r9
     b8c:	7c 01       	movw	r14, r24
     b8e:	88 e0       	ldi	r24, 0x08	; 8
     b90:	e8 0e       	add	r14, r24
     b92:	f1 1c       	adc	r15, r1
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	f8 94       	cli
     b98:	0f 92       	push	r0
     b9a:	f8 01       	movw	r30, r16
     b9c:	92 8d       	ldd	r25, Z+26	; 0x1a
     b9e:	83 8d       	ldd	r24, Z+27	; 0x1b
     ba0:	98 17       	cp	r25, r24
     ba2:	18 f0       	brcs	.+6      	; 0xbaa <xQueueGenericSend+0x4e>
     ba4:	f2 e0       	ldi	r31, 0x02	; 2
     ba6:	af 12       	cpse	r10, r31
     ba8:	15 c0       	rjmp	.+42     	; 0xbd4 <xQueueGenericSend+0x78>
     baa:	4a 2d       	mov	r20, r10
     bac:	b6 01       	movw	r22, r12
     bae:	c8 01       	movw	r24, r16
     bb0:	a3 de       	rcall	.-698    	; 0x8f8 <prvCopyDataToQueue>
     bb2:	f8 01       	movw	r30, r16
     bb4:	91 89       	ldd	r25, Z+17	; 0x11
     bb6:	99 23       	and	r25, r25
     bb8:	39 f0       	breq	.+14     	; 0xbc8 <xQueueGenericSend+0x6c>
     bba:	c8 01       	movw	r24, r16
     bbc:	41 96       	adiw	r24, 0x11	; 17
     bbe:	c9 d5       	rcall	.+2962   	; 0x1752 <xTaskRemoveFromEventList>
     bc0:	88 23       	and	r24, r24
     bc2:	21 f0       	breq	.+8      	; 0xbcc <xQueueGenericSend+0x70>
     bc4:	c9 dd       	rcall	.-1134   	; 0x758 <vPortYield>
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <xQueueGenericSend+0x70>
     bc8:	81 11       	cpse	r24, r1
     bca:	c6 dd       	rcall	.-1140   	; 0x758 <vPortYield>
     bcc:	0f 90       	pop	r0
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	45 c0       	rjmp	.+138    	; 0xc5e <xQueueGenericSend+0x102>
     bd4:	8c 81       	ldd	r24, Y+4	; 0x04
     bd6:	9d 81       	ldd	r25, Y+5	; 0x05
     bd8:	89 2b       	or	r24, r25
     bda:	21 f4       	brne	.+8      	; 0xbe4 <xQueueGenericSend+0x88>
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	80 e0       	ldi	r24, 0x00	; 0
     be2:	3d c0       	rjmp	.+122    	; 0xc5e <xQueueGenericSend+0x102>
     be4:	b1 10       	cpse	r11, r1
     be6:	04 c0       	rjmp	.+8      	; 0xbf0 <xQueueGenericSend+0x94>
     be8:	ce 01       	movw	r24, r28
     bea:	01 96       	adiw	r24, 0x01	; 1
     bec:	fa d5       	rcall	.+3060   	; 0x17e2 <vTaskInternalSetTimeOutState>
     bee:	b9 2c       	mov	r11, r9
     bf0:	0f 90       	pop	r0
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	a6 d3       	rcall	.+1868   	; 0x1342 <vTaskSuspendAll>
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	f8 94       	cli
     bfa:	0f 92       	push	r0
     bfc:	f8 01       	movw	r30, r16
     bfe:	85 8d       	ldd	r24, Z+29	; 0x1d
     c00:	8f 3f       	cpi	r24, 0xFF	; 255
     c02:	09 f4       	brne	.+2      	; 0xc06 <xQueueGenericSend+0xaa>
     c04:	15 8e       	std	Z+29, r1	; 0x1d
     c06:	f8 01       	movw	r30, r16
     c08:	86 8d       	ldd	r24, Z+30	; 0x1e
     c0a:	8f 3f       	cpi	r24, 0xFF	; 255
     c0c:	09 f4       	brne	.+2      	; 0xc10 <xQueueGenericSend+0xb4>
     c0e:	16 8e       	std	Z+30, r1	; 0x1e
     c10:	0f 90       	pop	r0
     c12:	0f be       	out	0x3f, r0	; 63
     c14:	be 01       	movw	r22, r28
     c16:	6c 5f       	subi	r22, 0xFC	; 252
     c18:	7f 4f       	sbci	r23, 0xFF	; 255
     c1a:	ce 01       	movw	r24, r28
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	ec d5       	rcall	.+3032   	; 0x17f8 <xTaskCheckForTimeOut>
     c20:	81 11       	cpse	r24, r1
     c22:	19 c0       	rjmp	.+50     	; 0xc56 <xQueueGenericSend+0xfa>
     c24:	0f b6       	in	r0, 0x3f	; 63
     c26:	f8 94       	cli
     c28:	0f 92       	push	r0
     c2a:	f8 01       	movw	r30, r16
     c2c:	92 8d       	ldd	r25, Z+26	; 0x1a
     c2e:	83 8d       	ldd	r24, Z+27	; 0x1b
     c30:	0f 90       	pop	r0
     c32:	0f be       	out	0x3f, r0	; 63
     c34:	98 13       	cpse	r25, r24
     c36:	0b c0       	rjmp	.+22     	; 0xc4e <xQueueGenericSend+0xf2>
     c38:	6c 81       	ldd	r22, Y+4	; 0x04
     c3a:	7d 81       	ldd	r23, Y+5	; 0x05
     c3c:	c7 01       	movw	r24, r14
     c3e:	60 d5       	rcall	.+2752   	; 0x1700 <vTaskPlaceOnEventList>
     c40:	c8 01       	movw	r24, r16
     c42:	d3 de       	rcall	.-602    	; 0x9ea <prvUnlockQueue>
     c44:	45 d4       	rcall	.+2186   	; 0x14d0 <xTaskResumeAll>
     c46:	81 11       	cpse	r24, r1
     c48:	a5 cf       	rjmp	.-182    	; 0xb94 <xQueueGenericSend+0x38>
     c4a:	86 dd       	rcall	.-1268   	; 0x758 <vPortYield>
     c4c:	a3 cf       	rjmp	.-186    	; 0xb94 <xQueueGenericSend+0x38>
     c4e:	c8 01       	movw	r24, r16
     c50:	cc de       	rcall	.-616    	; 0x9ea <prvUnlockQueue>
     c52:	3e d4       	rcall	.+2172   	; 0x14d0 <xTaskResumeAll>
     c54:	9f cf       	rjmp	.-194    	; 0xb94 <xQueueGenericSend+0x38>
     c56:	c8 01       	movw	r24, r16
     c58:	c8 de       	rcall	.-624    	; 0x9ea <prvUnlockQueue>
     c5a:	3a d4       	rcall	.+2164   	; 0x14d0 <xTaskResumeAll>
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	0f 90       	pop	r0
     c68:	df 91       	pop	r29
     c6a:	cf 91       	pop	r28
     c6c:	1f 91       	pop	r17
     c6e:	0f 91       	pop	r16
     c70:	ff 90       	pop	r15
     c72:	ef 90       	pop	r14
     c74:	df 90       	pop	r13
     c76:	cf 90       	pop	r12
     c78:	bf 90       	pop	r11
     c7a:	af 90       	pop	r10
     c7c:	9f 90       	pop	r9
     c7e:	08 95       	ret

00000c80 <xQueueCreateMutex>:
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	48 2f       	mov	r20, r24
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	3a df       	rcall	.-396    	; 0xb00 <xQueueGenericCreate>
     c8c:	ec 01       	movw	r28, r24
     c8e:	00 97       	sbiw	r24, 0x00	; 0
     c90:	59 f0       	breq	.+22     	; 0xca8 <xQueueCreateMutex+0x28>
     c92:	1d 82       	std	Y+5, r1	; 0x05
     c94:	1c 82       	std	Y+4, r1	; 0x04
     c96:	19 82       	std	Y+1, r1	; 0x01
     c98:	18 82       	st	Y, r1
     c9a:	1e 82       	std	Y+6, r1	; 0x06
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	5a df       	rcall	.-332    	; 0xb5c <xQueueGenericSend>
     ca8:	ce 01       	movw	r24, r28
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	08 95       	ret

00000cb0 <xQueueGenericSendFromISR>:
     cb0:	ef 92       	push	r14
     cb2:	ff 92       	push	r15
     cb4:	0f 93       	push	r16
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
     cbc:	8a 01       	movw	r16, r20
     cbe:	fc 01       	movw	r30, r24
     cc0:	52 8d       	ldd	r21, Z+26	; 0x1a
     cc2:	33 8d       	ldd	r19, Z+27	; 0x1b
     cc4:	53 17       	cp	r21, r19
     cc6:	10 f0       	brcs	.+4      	; 0xccc <xQueueGenericSendFromISR+0x1c>
     cc8:	22 30       	cpi	r18, 0x02	; 2
     cca:	e1 f4       	brne	.+56     	; 0xd04 <xQueueGenericSendFromISR+0x54>
     ccc:	42 2f       	mov	r20, r18
     cce:	78 01       	movw	r14, r16
     cd0:	ec 01       	movw	r28, r24
     cd2:	1e 8d       	ldd	r17, Y+30	; 0x1e
     cd4:	11 de       	rcall	.-990    	; 0x8f8 <prvCopyDataToQueue>
     cd6:	1f 3f       	cpi	r17, 0xFF	; 255
     cd8:	79 f4       	brne	.+30     	; 0xcf8 <xQueueGenericSendFromISR+0x48>
     cda:	89 89       	ldd	r24, Y+17	; 0x11
     cdc:	88 23       	and	r24, r24
     cde:	a1 f0       	breq	.+40     	; 0xd08 <xQueueGenericSendFromISR+0x58>
     ce0:	ce 01       	movw	r24, r28
     ce2:	41 96       	adiw	r24, 0x11	; 17
     ce4:	36 d5       	rcall	.+2668   	; 0x1752 <xTaskRemoveFromEventList>
     ce6:	88 23       	and	r24, r24
     ce8:	89 f0       	breq	.+34     	; 0xd0c <xQueueGenericSendFromISR+0x5c>
     cea:	e1 14       	cp	r14, r1
     cec:	f1 04       	cpc	r15, r1
     cee:	81 f0       	breq	.+32     	; 0xd10 <xQueueGenericSendFromISR+0x60>
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	f7 01       	movw	r30, r14
     cf4:	80 83       	st	Z, r24
     cf6:	0d c0       	rjmp	.+26     	; 0xd12 <xQueueGenericSendFromISR+0x62>
     cf8:	ff 24       	eor	r15, r15
     cfa:	f3 94       	inc	r15
     cfc:	f1 0e       	add	r15, r17
     cfe:	fe 8e       	std	Y+30, r15	; 0x1e
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <xQueueGenericSendFromISR+0x62>
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	05 c0       	rjmp	.+10     	; 0xd12 <xQueueGenericSendFromISR+0x62>
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	03 c0       	rjmp	.+6      	; 0xd12 <xQueueGenericSendFromISR+0x62>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	01 c0       	rjmp	.+2      	; 0xd12 <xQueueGenericSendFromISR+0x62>
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	df 91       	pop	r29
     d14:	cf 91       	pop	r28
     d16:	1f 91       	pop	r17
     d18:	0f 91       	pop	r16
     d1a:	ff 90       	pop	r15
     d1c:	ef 90       	pop	r14
     d1e:	08 95       	ret

00000d20 <xQueueReceive>:
     d20:	9f 92       	push	r9
     d22:	af 92       	push	r10
     d24:	bf 92       	push	r11
     d26:	cf 92       	push	r12
     d28:	df 92       	push	r13
     d2a:	ef 92       	push	r14
     d2c:	ff 92       	push	r15
     d2e:	0f 93       	push	r16
     d30:	1f 93       	push	r17
     d32:	cf 93       	push	r28
     d34:	df 93       	push	r29
     d36:	00 d0       	rcall	.+0      	; 0xd38 <xQueueReceive+0x18>
     d38:	1f 92       	push	r1
     d3a:	1f 92       	push	r1
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	8c 01       	movw	r16, r24
     d42:	5b 01       	movw	r10, r22
     d44:	5d 83       	std	Y+5, r21	; 0x05
     d46:	4c 83       	std	Y+4, r20	; 0x04
     d48:	e1 2c       	mov	r14, r1
     d4a:	99 24       	eor	r9, r9
     d4c:	93 94       	inc	r9
     d4e:	6c 01       	movw	r12, r24
     d50:	81 e1       	ldi	r24, 0x11	; 17
     d52:	c8 0e       	add	r12, r24
     d54:	d1 1c       	adc	r13, r1
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	0f 92       	push	r0
     d5c:	f8 01       	movw	r30, r16
     d5e:	f2 8c       	ldd	r15, Z+26	; 0x1a
     d60:	ff 20       	and	r15, r15
     d62:	91 f0       	breq	.+36     	; 0xd88 <xQueueReceive+0x68>
     d64:	b5 01       	movw	r22, r10
     d66:	c8 01       	movw	r24, r16
     d68:	26 de       	rcall	.-948    	; 0x9b6 <prvCopyDataFromQueue>
     d6a:	fa 94       	dec	r15
     d6c:	f8 01       	movw	r30, r16
     d6e:	f2 8e       	std	Z+26, r15	; 0x1a
     d70:	80 85       	ldd	r24, Z+8	; 0x08
     d72:	88 23       	and	r24, r24
     d74:	29 f0       	breq	.+10     	; 0xd80 <xQueueReceive+0x60>
     d76:	c8 01       	movw	r24, r16
     d78:	08 96       	adiw	r24, 0x08	; 8
     d7a:	eb d4       	rcall	.+2518   	; 0x1752 <xTaskRemoveFromEventList>
     d7c:	81 11       	cpse	r24, r1
     d7e:	ec dc       	rcall	.-1576   	; 0x758 <vPortYield>
     d80:	0f 90       	pop	r0
     d82:	0f be       	out	0x3f, r0	; 63
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	44 c0       	rjmp	.+136    	; 0xe10 <xQueueReceive+0xf0>
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	9d 81       	ldd	r25, Y+5	; 0x05
     d8c:	89 2b       	or	r24, r25
     d8e:	21 f4       	brne	.+8      	; 0xd98 <xQueueReceive+0x78>
     d90:	0f 90       	pop	r0
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	3c c0       	rjmp	.+120    	; 0xe10 <xQueueReceive+0xf0>
     d98:	e1 10       	cpse	r14, r1
     d9a:	04 c0       	rjmp	.+8      	; 0xda4 <xQueueReceive+0x84>
     d9c:	ce 01       	movw	r24, r28
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	20 d5       	rcall	.+2624   	; 0x17e2 <vTaskInternalSetTimeOutState>
     da2:	e9 2c       	mov	r14, r9
     da4:	0f 90       	pop	r0
     da6:	0f be       	out	0x3f, r0	; 63
     da8:	cc d2       	rcall	.+1432   	; 0x1342 <vTaskSuspendAll>
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	f8 94       	cli
     dae:	0f 92       	push	r0
     db0:	f8 01       	movw	r30, r16
     db2:	85 8d       	ldd	r24, Z+29	; 0x1d
     db4:	8f 3f       	cpi	r24, 0xFF	; 255
     db6:	09 f4       	brne	.+2      	; 0xdba <xQueueReceive+0x9a>
     db8:	15 8e       	std	Z+29, r1	; 0x1d
     dba:	f8 01       	movw	r30, r16
     dbc:	86 8d       	ldd	r24, Z+30	; 0x1e
     dbe:	8f 3f       	cpi	r24, 0xFF	; 255
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <xQueueReceive+0xa4>
     dc2:	16 8e       	std	Z+30, r1	; 0x1e
     dc4:	0f 90       	pop	r0
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	be 01       	movw	r22, r28
     dca:	6c 5f       	subi	r22, 0xFC	; 252
     dcc:	7f 4f       	sbci	r23, 0xFF	; 255
     dce:	ce 01       	movw	r24, r28
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	12 d5       	rcall	.+2596   	; 0x17f8 <xTaskCheckForTimeOut>
     dd4:	81 11       	cpse	r24, r1
     dd6:	13 c0       	rjmp	.+38     	; 0xdfe <xQueueReceive+0xde>
     dd8:	c8 01       	movw	r24, r16
     dda:	83 dd       	rcall	.-1274   	; 0x8e2 <prvIsQueueEmpty>
     ddc:	88 23       	and	r24, r24
     dde:	59 f0       	breq	.+22     	; 0xdf6 <xQueueReceive+0xd6>
     de0:	6c 81       	ldd	r22, Y+4	; 0x04
     de2:	7d 81       	ldd	r23, Y+5	; 0x05
     de4:	c6 01       	movw	r24, r12
     de6:	8c d4       	rcall	.+2328   	; 0x1700 <vTaskPlaceOnEventList>
     de8:	c8 01       	movw	r24, r16
     dea:	ff dd       	rcall	.-1026   	; 0x9ea <prvUnlockQueue>
     dec:	71 d3       	rcall	.+1762   	; 0x14d0 <xTaskResumeAll>
     dee:	81 11       	cpse	r24, r1
     df0:	b2 cf       	rjmp	.-156    	; 0xd56 <xQueueReceive+0x36>
     df2:	b2 dc       	rcall	.-1692   	; 0x758 <vPortYield>
     df4:	b0 cf       	rjmp	.-160    	; 0xd56 <xQueueReceive+0x36>
     df6:	c8 01       	movw	r24, r16
     df8:	f8 dd       	rcall	.-1040   	; 0x9ea <prvUnlockQueue>
     dfa:	6a d3       	rcall	.+1748   	; 0x14d0 <xTaskResumeAll>
     dfc:	ac cf       	rjmp	.-168    	; 0xd56 <xQueueReceive+0x36>
     dfe:	c8 01       	movw	r24, r16
     e00:	f4 dd       	rcall	.-1048   	; 0x9ea <prvUnlockQueue>
     e02:	66 d3       	rcall	.+1740   	; 0x14d0 <xTaskResumeAll>
     e04:	c8 01       	movw	r24, r16
     e06:	6d dd       	rcall	.-1318   	; 0x8e2 <prvIsQueueEmpty>
     e08:	88 23       	and	r24, r24
     e0a:	09 f4       	brne	.+2      	; 0xe0e <xQueueReceive+0xee>
     e0c:	a4 cf       	rjmp	.-184    	; 0xd56 <xQueueReceive+0x36>
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	0f 90       	pop	r0
     e12:	0f 90       	pop	r0
     e14:	0f 90       	pop	r0
     e16:	0f 90       	pop	r0
     e18:	0f 90       	pop	r0
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	df 90       	pop	r13
     e28:	cf 90       	pop	r12
     e2a:	bf 90       	pop	r11
     e2c:	af 90       	pop	r10
     e2e:	9f 90       	pop	r9
     e30:	08 95       	ret

00000e32 <xQueueSemaphoreTake>:
     e32:	bf 92       	push	r11
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	00 d0       	rcall	.+0      	; 0xe46 <xQueueSemaphoreTake+0x14>
     e46:	1f 92       	push	r1
     e48:	1f 92       	push	r1
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	8c 01       	movw	r16, r24
     e50:	7d 83       	std	Y+5, r23	; 0x05
     e52:	6c 83       	std	Y+4, r22	; 0x04
     e54:	b1 2c       	mov	r11, r1
     e56:	d1 2c       	mov	r13, r1
     e58:	cc 24       	eor	r12, r12
     e5a:	c3 94       	inc	r12
     e5c:	7c 01       	movw	r14, r24
     e5e:	81 e1       	ldi	r24, 0x11	; 17
     e60:	e8 0e       	add	r14, r24
     e62:	f1 1c       	adc	r15, r1
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	0f 92       	push	r0
     e6a:	d8 01       	movw	r26, r16
     e6c:	5a 96       	adiw	r26, 0x1a	; 26
     e6e:	8c 91       	ld	r24, X
     e70:	5a 97       	sbiw	r26, 0x1a	; 26
     e72:	88 23       	and	r24, r24
     e74:	d1 f0       	breq	.+52     	; 0xeaa <xQueueSemaphoreTake+0x78>
     e76:	81 50       	subi	r24, 0x01	; 1
     e78:	5a 96       	adiw	r26, 0x1a	; 26
     e7a:	8c 93       	st	X, r24
     e7c:	5a 97       	sbiw	r26, 0x1a	; 26
     e7e:	8d 91       	ld	r24, X+
     e80:	9c 91       	ld	r25, X
     e82:	89 2b       	or	r24, r25
     e84:	21 f4       	brne	.+8      	; 0xe8e <xQueueSemaphoreTake+0x5c>
     e86:	01 d6       	rcall	.+3074   	; 0x1a8a <pvTaskIncrementMutexHeldCount>
     e88:	f8 01       	movw	r30, r16
     e8a:	95 83       	std	Z+5, r25	; 0x05
     e8c:	84 83       	std	Z+4, r24	; 0x04
     e8e:	d8 01       	movw	r26, r16
     e90:	18 96       	adiw	r26, 0x08	; 8
     e92:	8c 91       	ld	r24, X
     e94:	88 23       	and	r24, r24
     e96:	29 f0       	breq	.+10     	; 0xea2 <xQueueSemaphoreTake+0x70>
     e98:	c8 01       	movw	r24, r16
     e9a:	08 96       	adiw	r24, 0x08	; 8
     e9c:	5a d4       	rcall	.+2228   	; 0x1752 <xTaskRemoveFromEventList>
     e9e:	81 11       	cpse	r24, r1
     ea0:	5b dc       	rcall	.-1866   	; 0x758 <vPortYield>
     ea2:	0f 90       	pop	r0
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	70 c0       	rjmp	.+224    	; 0xf8a <xQueueSemaphoreTake+0x158>
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	89 2b       	or	r24, r25
     eb0:	21 f4       	brne	.+8      	; 0xeba <xQueueSemaphoreTake+0x88>
     eb2:	0f 90       	pop	r0
     eb4:	0f be       	out	0x3f, r0	; 63
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	68 c0       	rjmp	.+208    	; 0xf8a <xQueueSemaphoreTake+0x158>
     eba:	d1 10       	cpse	r13, r1
     ebc:	04 c0       	rjmp	.+8      	; 0xec6 <xQueueSemaphoreTake+0x94>
     ebe:	ce 01       	movw	r24, r28
     ec0:	01 96       	adiw	r24, 0x01	; 1
     ec2:	8f d4       	rcall	.+2334   	; 0x17e2 <vTaskInternalSetTimeOutState>
     ec4:	dc 2c       	mov	r13, r12
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	3b d2       	rcall	.+1142   	; 0x1342 <vTaskSuspendAll>
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	0f 92       	push	r0
     ed2:	f8 01       	movw	r30, r16
     ed4:	85 8d       	ldd	r24, Z+29	; 0x1d
     ed6:	8f 3f       	cpi	r24, 0xFF	; 255
     ed8:	09 f4       	brne	.+2      	; 0xedc <xQueueSemaphoreTake+0xaa>
     eda:	15 8e       	std	Z+29, r1	; 0x1d
     edc:	d8 01       	movw	r26, r16
     ede:	5e 96       	adiw	r26, 0x1e	; 30
     ee0:	8c 91       	ld	r24, X
     ee2:	5e 97       	sbiw	r26, 0x1e	; 30
     ee4:	8f 3f       	cpi	r24, 0xFF	; 255
     ee6:	11 f4       	brne	.+4      	; 0xeec <xQueueSemaphoreTake+0xba>
     ee8:	5e 96       	adiw	r26, 0x1e	; 30
     eea:	1c 92       	st	X, r1
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	be 01       	movw	r22, r28
     ef2:	6c 5f       	subi	r22, 0xFC	; 252
     ef4:	7f 4f       	sbci	r23, 0xFF	; 255
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	7e d4       	rcall	.+2300   	; 0x17f8 <xTaskCheckForTimeOut>
     efc:	81 11       	cpse	r24, r1
     efe:	21 c0       	rjmp	.+66     	; 0xf42 <xQueueSemaphoreTake+0x110>
     f00:	c8 01       	movw	r24, r16
     f02:	ef dc       	rcall	.-1570   	; 0x8e2 <prvIsQueueEmpty>
     f04:	88 23       	and	r24, r24
     f06:	c9 f0       	breq	.+50     	; 0xf3a <xQueueSemaphoreTake+0x108>
     f08:	f8 01       	movw	r30, r16
     f0a:	80 81       	ld	r24, Z
     f0c:	91 81       	ldd	r25, Z+1	; 0x01
     f0e:	89 2b       	or	r24, r25
     f10:	49 f4       	brne	.+18     	; 0xf24 <xQueueSemaphoreTake+0xf2>
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	0f 92       	push	r0
     f18:	84 81       	ldd	r24, Z+4	; 0x04
     f1a:	95 81       	ldd	r25, Z+5	; 0x05
     f1c:	b4 d4       	rcall	.+2408   	; 0x1886 <xTaskPriorityInherit>
     f1e:	b8 2e       	mov	r11, r24
     f20:	0f 90       	pop	r0
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	6c 81       	ldd	r22, Y+4	; 0x04
     f26:	7d 81       	ldd	r23, Y+5	; 0x05
     f28:	c7 01       	movw	r24, r14
     f2a:	ea d3       	rcall	.+2004   	; 0x1700 <vTaskPlaceOnEventList>
     f2c:	c8 01       	movw	r24, r16
     f2e:	5d dd       	rcall	.-1350   	; 0x9ea <prvUnlockQueue>
     f30:	cf d2       	rcall	.+1438   	; 0x14d0 <xTaskResumeAll>
     f32:	81 11       	cpse	r24, r1
     f34:	97 cf       	rjmp	.-210    	; 0xe64 <xQueueSemaphoreTake+0x32>
     f36:	10 dc       	rcall	.-2016   	; 0x758 <vPortYield>
     f38:	95 cf       	rjmp	.-214    	; 0xe64 <xQueueSemaphoreTake+0x32>
     f3a:	c8 01       	movw	r24, r16
     f3c:	56 dd       	rcall	.-1364   	; 0x9ea <prvUnlockQueue>
     f3e:	c8 d2       	rcall	.+1424   	; 0x14d0 <xTaskResumeAll>
     f40:	91 cf       	rjmp	.-222    	; 0xe64 <xQueueSemaphoreTake+0x32>
     f42:	c8 01       	movw	r24, r16
     f44:	52 dd       	rcall	.-1372   	; 0x9ea <prvUnlockQueue>
     f46:	c4 d2       	rcall	.+1416   	; 0x14d0 <xTaskResumeAll>
     f48:	c8 01       	movw	r24, r16
     f4a:	cb dc       	rcall	.-1642   	; 0x8e2 <prvIsQueueEmpty>
     f4c:	88 23       	and	r24, r24
     f4e:	09 f4       	brne	.+2      	; 0xf52 <xQueueSemaphoreTake+0x120>
     f50:	89 cf       	rjmp	.-238    	; 0xe64 <xQueueSemaphoreTake+0x32>
     f52:	bb 20       	and	r11, r11
     f54:	c9 f0       	breq	.+50     	; 0xf88 <xQueueSemaphoreTake+0x156>
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	0f 92       	push	r0
     f5c:	f8 01       	movw	r30, r16
     f5e:	81 89       	ldd	r24, Z+17	; 0x11
     f60:	88 23       	and	r24, r24
     f62:	39 f0       	breq	.+14     	; 0xf72 <xQueueSemaphoreTake+0x140>
     f64:	06 88       	ldd	r0, Z+22	; 0x16
     f66:	f7 89       	ldd	r31, Z+23	; 0x17
     f68:	e0 2d       	mov	r30, r0
     f6a:	80 81       	ld	r24, Z
     f6c:	64 e0       	ldi	r22, 0x04	; 4
     f6e:	68 1b       	sub	r22, r24
     f70:	01 c0       	rjmp	.+2      	; 0xf74 <xQueueSemaphoreTake+0x142>
     f72:	60 e0       	ldi	r22, 0x00	; 0
     f74:	d8 01       	movw	r26, r16
     f76:	14 96       	adiw	r26, 0x04	; 4
     f78:	8d 91       	ld	r24, X+
     f7a:	9c 91       	ld	r25, X
     f7c:	15 97       	sbiw	r26, 0x05	; 5
     f7e:	35 d5       	rcall	.+2666   	; 0x19ea <vTaskPriorityDisinheritAfterTimeout>
     f80:	0f 90       	pop	r0
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	01 c0       	rjmp	.+2      	; 0xf8a <xQueueSemaphoreTake+0x158>
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	ff 90       	pop	r15
     f9e:	ef 90       	pop	r14
     fa0:	df 90       	pop	r13
     fa2:	cf 90       	pop	r12
     fa4:	bf 90       	pop	r11
     fa6:	08 95       	ret

00000fa8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	f8 94       	cli
     fb2:	0f 92       	push	r0
     fb4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fb6:	8f 3f       	cpi	r24, 0xFF	; 255
     fb8:	09 f4       	brne	.+2      	; 0xfbc <vQueueWaitForMessageRestricted+0x14>
     fba:	1d 8e       	std	Y+29, r1	; 0x1d
     fbc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fbe:	8f 3f       	cpi	r24, 0xFF	; 255
     fc0:	09 f4       	brne	.+2      	; 0xfc4 <vQueueWaitForMessageRestricted+0x1c>
     fc2:	1e 8e       	std	Y+30, r1	; 0x1e
     fc4:	0f 90       	pop	r0
     fc6:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     fc8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fca:	81 11       	cpse	r24, r1
     fcc:	03 c0       	rjmp	.+6      	; 0xfd4 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     fce:	ce 01       	movw	r24, r28
     fd0:	41 96       	adiw	r24, 0x11	; 17
     fd2:	a7 d3       	rcall	.+1870   	; 0x1722 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
     fd4:	ce 01       	movw	r24, r28
     fd6:	09 dd       	rcall	.-1518   	; 0x9ea <prvUnlockQueue>
    }
     fd8:	df 91       	pop	r29
     fda:	cf 91       	pop	r28
     fdc:	08 95       	ret

00000fde <prvResetNextTaskUnblockTime>:
     fde:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <pxDelayedTaskList>
     fe2:	f0 91 9b 03 	lds	r31, 0x039B	; 0x80039b <pxDelayedTaskList+0x1>
     fe6:	80 81       	ld	r24, Z
     fe8:	81 11       	cpse	r24, r1
     fea:	07 c0       	rjmp	.+14     	; 0xffa <prvResetNextTaskUnblockTime+0x1c>
     fec:	8f ef       	ldi	r24, 0xFF	; 255
     fee:	9f ef       	ldi	r25, 0xFF	; 255
     ff0:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <xNextTaskUnblockTime+0x1>
     ff4:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <xNextTaskUnblockTime>
     ff8:	08 95       	ret
     ffa:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <pxDelayedTaskList>
     ffe:	f0 91 9b 03 	lds	r31, 0x039B	; 0x80039b <pxDelayedTaskList+0x1>
    1002:	05 80       	ldd	r0, Z+5	; 0x05
    1004:	f6 81       	ldd	r31, Z+6	; 0x06
    1006:	e0 2d       	mov	r30, r0
    1008:	06 80       	ldd	r0, Z+6	; 0x06
    100a:	f7 81       	ldd	r31, Z+7	; 0x07
    100c:	e0 2d       	mov	r30, r0
    100e:	82 81       	ldd	r24, Z+2	; 0x02
    1010:	93 81       	ldd	r25, Z+3	; 0x03
    1012:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <xNextTaskUnblockTime+0x1>
    1016:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <xNextTaskUnblockTime>
    101a:	08 95       	ret

0000101c <prvAddCurrentTaskToDelayedList>:
    101c:	ff 92       	push	r15
    101e:	0f 93       	push	r16
    1020:	1f 93       	push	r17
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	ec 01       	movw	r28, r24
    1028:	f6 2e       	mov	r15, r22
    102a:	00 91 79 03 	lds	r16, 0x0379	; 0x800379 <xTickCount>
    102e:	10 91 7a 03 	lds	r17, 0x037A	; 0x80037a <xTickCount+0x1>
    1032:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1036:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    103a:	02 96       	adiw	r24, 0x02	; 2
    103c:	b8 da       	rcall	.-2704   	; 0x5ae <uxListRemove>
    103e:	cf 3f       	cpi	r28, 0xFF	; 255
    1040:	8f ef       	ldi	r24, 0xFF	; 255
    1042:	d8 07       	cpc	r29, r24
    1044:	61 f4       	brne	.+24     	; 0x105e <prvAddCurrentTaskToDelayedList+0x42>
    1046:	ff 20       	and	r15, r15
    1048:	51 f0       	breq	.+20     	; 0x105e <prvAddCurrentTaskToDelayedList+0x42>
    104a:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    104e:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    1052:	6e 5f       	subi	r22, 0xFE	; 254
    1054:	7f 4f       	sbci	r23, 0xFF	; 255
    1056:	8c e7       	ldi	r24, 0x7C	; 124
    1058:	93 e0       	ldi	r25, 0x03	; 3
    105a:	57 da       	rcall	.-2898   	; 0x50a <vListInsertEnd>
    105c:	2d c0       	rjmp	.+90     	; 0x10b8 <prvAddCurrentTaskToDelayedList+0x9c>
    105e:	c0 0f       	add	r28, r16
    1060:	d1 1f       	adc	r29, r17
    1062:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1066:	f0 91 d3 03 	lds	r31, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    106a:	d3 83       	std	Z+3, r29	; 0x03
    106c:	c2 83       	std	Z+2, r28	; 0x02
    106e:	c0 17       	cp	r28, r16
    1070:	d1 07       	cpc	r29, r17
    1072:	60 f4       	brcc	.+24     	; 0x108c <prvAddCurrentTaskToDelayedList+0x70>
    1074:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1078:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    107c:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <pxOverflowDelayedTaskList>
    1080:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <pxOverflowDelayedTaskList+0x1>
    1084:	6e 5f       	subi	r22, 0xFE	; 254
    1086:	7f 4f       	sbci	r23, 0xFF	; 255
    1088:	61 da       	rcall	.-2878   	; 0x54c <vListInsert>
    108a:	16 c0       	rjmp	.+44     	; 0x10b8 <prvAddCurrentTaskToDelayedList+0x9c>
    108c:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1090:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    1094:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <pxDelayedTaskList>
    1098:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <pxDelayedTaskList+0x1>
    109c:	6e 5f       	subi	r22, 0xFE	; 254
    109e:	7f 4f       	sbci	r23, 0xFF	; 255
    10a0:	55 da       	rcall	.-2902   	; 0x54c <vListInsert>
    10a2:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <xNextTaskUnblockTime>
    10a6:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <xNextTaskUnblockTime+0x1>
    10aa:	c8 17       	cp	r28, r24
    10ac:	d9 07       	cpc	r29, r25
    10ae:	20 f4       	brcc	.+8      	; 0x10b8 <prvAddCurrentTaskToDelayedList+0x9c>
    10b0:	d0 93 72 03 	sts	0x0372, r29	; 0x800372 <xNextTaskUnblockTime+0x1>
    10b4:	c0 93 71 03 	sts	0x0371, r28	; 0x800371 <xNextTaskUnblockTime>
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	08 95       	ret

000010c4 <xTaskCreate>:
    10c4:	4f 92       	push	r4
    10c6:	5f 92       	push	r5
    10c8:	6f 92       	push	r6
    10ca:	7f 92       	push	r7
    10cc:	8f 92       	push	r8
    10ce:	9f 92       	push	r9
    10d0:	af 92       	push	r10
    10d2:	bf 92       	push	r11
    10d4:	cf 92       	push	r12
    10d6:	df 92       	push	r13
    10d8:	ef 92       	push	r14
    10da:	ff 92       	push	r15
    10dc:	0f 93       	push	r16
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	4c 01       	movw	r8, r24
    10e4:	6b 01       	movw	r12, r22
    10e6:	5a 01       	movw	r10, r20
    10e8:	29 01       	movw	r4, r18
    10ea:	ca 01       	movw	r24, r20
    10ec:	dd d9       	rcall	.-3142   	; 0x4a8 <pvPortMalloc>
    10ee:	3c 01       	movw	r6, r24
    10f0:	89 2b       	or	r24, r25
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <xTaskCreate+0x32>
    10f4:	e4 c0       	rjmp	.+456    	; 0x12be <xTaskCreate+0x1fa>
    10f6:	8c e2       	ldi	r24, 0x2C	; 44
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	d6 d9       	rcall	.-3156   	; 0x4a8 <pvPortMalloc>
    10fc:	ec 01       	movw	r28, r24
    10fe:	89 2b       	or	r24, r25
    1100:	99 f0       	breq	.+38     	; 0x1128 <xTaskCreate+0x64>
    1102:	78 8e       	std	Y+24, r7	; 0x18
    1104:	6f 8a       	std	Y+23, r6	; 0x17
    1106:	a5 01       	movw	r20, r10
    1108:	65 ea       	ldi	r22, 0xA5	; 165
    110a:	70 e0       	ldi	r23, 0x00	; 0
    110c:	c3 01       	movw	r24, r6
    110e:	0e 94 13 1a 	call	0x3426	; 0x3426 <memset>
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	a8 1a       	sub	r10, r24
    1116:	b1 08       	sbc	r11, r1
    1118:	8f 89       	ldd	r24, Y+23	; 0x17
    111a:	98 8d       	ldd	r25, Y+24	; 0x18
    111c:	a8 0e       	add	r10, r24
    111e:	b9 1e       	adc	r11, r25
    1120:	c1 14       	cp	r12, r1
    1122:	d1 04       	cpc	r13, r1
    1124:	21 f4       	brne	.+8      	; 0x112e <xTaskCreate+0x6a>
    1126:	1f c0       	rjmp	.+62     	; 0x1166 <xTaskCreate+0xa2>
    1128:	c3 01       	movw	r24, r6
    112a:	d0 d9       	rcall	.-3168   	; 0x4cc <vPortFree>
    112c:	c8 c0       	rjmp	.+400    	; 0x12be <xTaskCreate+0x1fa>
    112e:	d6 01       	movw	r26, r12
    1130:	8c 91       	ld	r24, X
    1132:	89 8f       	std	Y+25, r24	; 0x19
    1134:	8c 91       	ld	r24, X
    1136:	88 23       	and	r24, r24
    1138:	a1 f0       	breq	.+40     	; 0x1162 <xTaskCreate+0x9e>
    113a:	ae 01       	movw	r20, r28
    113c:	46 5e       	subi	r20, 0xE6	; 230
    113e:	5f 4f       	sbci	r21, 0xFF	; 255
    1140:	f6 01       	movw	r30, r12
    1142:	31 96       	adiw	r30, 0x01	; 1
    1144:	b8 e0       	ldi	r27, 0x08	; 8
    1146:	cb 0e       	add	r12, r27
    1148:	d1 1c       	adc	r13, r1
    114a:	cf 01       	movw	r24, r30
    114c:	21 91       	ld	r18, Z+
    114e:	da 01       	movw	r26, r20
    1150:	2d 93       	st	X+, r18
    1152:	ad 01       	movw	r20, r26
    1154:	dc 01       	movw	r26, r24
    1156:	8c 91       	ld	r24, X
    1158:	88 23       	and	r24, r24
    115a:	19 f0       	breq	.+6      	; 0x1162 <xTaskCreate+0x9e>
    115c:	ec 15       	cp	r30, r12
    115e:	fd 05       	cpc	r31, r13
    1160:	a1 f7       	brne	.-24     	; 0x114a <xTaskCreate+0x86>
    1162:	18 a2       	std	Y+32, r1	; 0x20
    1164:	01 c0       	rjmp	.+2      	; 0x1168 <xTaskCreate+0xa4>
    1166:	19 8e       	std	Y+25, r1	; 0x19
    1168:	04 30       	cpi	r16, 0x04	; 4
    116a:	08 f0       	brcs	.+2      	; 0x116e <xTaskCreate+0xaa>
    116c:	03 e0       	ldi	r16, 0x03	; 3
    116e:	0e 8b       	std	Y+22, r16	; 0x16
    1170:	0b a3       	std	Y+35, r16	; 0x23
    1172:	1c a2       	std	Y+36, r1	; 0x24
    1174:	6e 01       	movw	r12, r28
    1176:	b2 e0       	ldi	r27, 0x02	; 2
    1178:	cb 0e       	add	r12, r27
    117a:	d1 1c       	adc	r13, r1
    117c:	c6 01       	movw	r24, r12
    117e:	c1 d9       	rcall	.-3198   	; 0x502 <vListInitialiseItem>
    1180:	ce 01       	movw	r24, r28
    1182:	0c 96       	adiw	r24, 0x0c	; 12
    1184:	be d9       	rcall	.-3204   	; 0x502 <vListInitialiseItem>
    1186:	d9 87       	std	Y+9, r29	; 0x09
    1188:	c8 87       	std	Y+8, r28	; 0x08
    118a:	84 e0       	ldi	r24, 0x04	; 4
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	80 1b       	sub	r24, r16
    1190:	91 09       	sbc	r25, r1
    1192:	9d 87       	std	Y+13, r25	; 0x0d
    1194:	8c 87       	std	Y+12, r24	; 0x0c
    1196:	db 8b       	std	Y+19, r29	; 0x13
    1198:	ca 8b       	std	Y+18, r28	; 0x12
    119a:	1e a2       	std	Y+38, r1	; 0x26
    119c:	1d a2       	std	Y+37, r1	; 0x25
    119e:	1f a2       	std	Y+39, r1	; 0x27
    11a0:	18 a6       	std	Y+40, r1	; 0x28
    11a2:	19 a6       	std	Y+41, r1	; 0x29
    11a4:	1a a6       	std	Y+42, r1	; 0x2a
    11a6:	1b a6       	std	Y+43, r1	; 0x2b
    11a8:	a2 01       	movw	r20, r4
    11aa:	b4 01       	movw	r22, r8
    11ac:	c5 01       	movw	r24, r10
    11ae:	26 da       	rcall	.-2996   	; 0x5fc <pxPortInitialiseStack>
    11b0:	99 83       	std	Y+1, r25	; 0x01
    11b2:	88 83       	st	Y, r24
    11b4:	e1 14       	cp	r14, r1
    11b6:	f1 04       	cpc	r15, r1
    11b8:	19 f0       	breq	.+6      	; 0x11c0 <xTaskCreate+0xfc>
    11ba:	f7 01       	movw	r30, r14
    11bc:	d1 83       	std	Z+1, r29	; 0x01
    11be:	c0 83       	st	Z, r28
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	0f 92       	push	r0
    11c6:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <uxCurrentNumberOfTasks>
    11ca:	8f 5f       	subi	r24, 0xFF	; 255
    11cc:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <uxCurrentNumberOfTasks>
    11d0:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    11d4:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    11d8:	89 2b       	or	r24, r25
    11da:	89 f5       	brne	.+98     	; 0x123e <xTaskCreate+0x17a>
    11dc:	d0 93 d3 03 	sts	0x03D3, r29	; 0x8003d3 <pxCurrentTCB+0x1>
    11e0:	c0 93 d2 03 	sts	0x03D2, r28	; 0x8003d2 <pxCurrentTCB>
    11e4:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <uxCurrentNumberOfTasks>
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	09 f0       	breq	.+2      	; 0x11ee <xTaskCreate+0x12a>
    11ec:	38 c0       	rjmp	.+112    	; 0x125e <xTaskCreate+0x19a>
    11ee:	8e ea       	ldi	r24, 0xAE	; 174
    11f0:	93 e0       	ldi	r25, 0x03	; 3
    11f2:	79 d9       	rcall	.-3342   	; 0x4e6 <vListInitialise>
    11f4:	87 eb       	ldi	r24, 0xB7	; 183
    11f6:	93 e0       	ldi	r25, 0x03	; 3
    11f8:	76 d9       	rcall	.-3348   	; 0x4e6 <vListInitialise>
    11fa:	80 ec       	ldi	r24, 0xC0	; 192
    11fc:	93 e0       	ldi	r25, 0x03	; 3
    11fe:	73 d9       	rcall	.-3354   	; 0x4e6 <vListInitialise>
    1200:	89 ec       	ldi	r24, 0xC9	; 201
    1202:	93 e0       	ldi	r25, 0x03	; 3
    1204:	70 d9       	rcall	.-3360   	; 0x4e6 <vListInitialise>
    1206:	85 ea       	ldi	r24, 0xA5	; 165
    1208:	93 e0       	ldi	r25, 0x03	; 3
    120a:	6d d9       	rcall	.-3366   	; 0x4e6 <vListInitialise>
    120c:	8c e9       	ldi	r24, 0x9C	; 156
    120e:	93 e0       	ldi	r25, 0x03	; 3
    1210:	6a d9       	rcall	.-3372   	; 0x4e6 <vListInitialise>
    1212:	8f e8       	ldi	r24, 0x8F	; 143
    1214:	93 e0       	ldi	r25, 0x03	; 3
    1216:	67 d9       	rcall	.-3378   	; 0x4e6 <vListInitialise>
    1218:	86 e8       	ldi	r24, 0x86	; 134
    121a:	93 e0       	ldi	r25, 0x03	; 3
    121c:	64 d9       	rcall	.-3384   	; 0x4e6 <vListInitialise>
    121e:	8c e7       	ldi	r24, 0x7C	; 124
    1220:	93 e0       	ldi	r25, 0x03	; 3
    1222:	61 d9       	rcall	.-3390   	; 0x4e6 <vListInitialise>
    1224:	85 ea       	ldi	r24, 0xA5	; 165
    1226:	93 e0       	ldi	r25, 0x03	; 3
    1228:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <pxDelayedTaskList+0x1>
    122c:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <pxDelayedTaskList>
    1230:	8c e9       	ldi	r24, 0x9C	; 156
    1232:	93 e0       	ldi	r25, 0x03	; 3
    1234:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <pxOverflowDelayedTaskList+0x1>
    1238:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <pxOverflowDelayedTaskList>
    123c:	10 c0       	rjmp	.+32     	; 0x125e <xTaskCreate+0x19a>
    123e:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <xSchedulerRunning>
    1242:	81 11       	cpse	r24, r1
    1244:	0c c0       	rjmp	.+24     	; 0x125e <xTaskCreate+0x19a>
    1246:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    124a:	f0 91 d3 03 	lds	r31, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    124e:	96 89       	ldd	r25, Z+22	; 0x16
    1250:	8e 89       	ldd	r24, Y+22	; 0x16
    1252:	89 17       	cp	r24, r25
    1254:	20 f0       	brcs	.+8      	; 0x125e <xTaskCreate+0x19a>
    1256:	d0 93 d3 03 	sts	0x03D3, r29	; 0x8003d3 <pxCurrentTCB+0x1>
    125a:	c0 93 d2 03 	sts	0x03D2, r28	; 0x8003d2 <pxCurrentTCB>
    125e:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <uxTaskNumber>
    1262:	8f 5f       	subi	r24, 0xFF	; 255
    1264:	80 93 73 03 	sts	0x0373, r24	; 0x800373 <uxTaskNumber>
    1268:	89 a3       	std	Y+33, r24	; 0x21
    126a:	8e 89       	ldd	r24, Y+22	; 0x16
    126c:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <uxTopReadyPriority>
    1270:	98 17       	cp	r25, r24
    1272:	10 f4       	brcc	.+4      	; 0x1278 <xTaskCreate+0x1b4>
    1274:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <uxTopReadyPriority>
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	9c 01       	movw	r18, r24
    127c:	22 0f       	add	r18, r18
    127e:	33 1f       	adc	r19, r19
    1280:	22 0f       	add	r18, r18
    1282:	33 1f       	adc	r19, r19
    1284:	22 0f       	add	r18, r18
    1286:	33 1f       	adc	r19, r19
    1288:	82 0f       	add	r24, r18
    128a:	93 1f       	adc	r25, r19
    128c:	b6 01       	movw	r22, r12
    128e:	82 55       	subi	r24, 0x52	; 82
    1290:	9c 4f       	sbci	r25, 0xFC	; 252
    1292:	3b d9       	rcall	.-3466   	; 0x50a <vListInsertEnd>
    1294:	0f 90       	pop	r0
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <xSchedulerRunning>
    129c:	88 23       	and	r24, r24
    129e:	59 f0       	breq	.+22     	; 0x12b6 <xTaskCreate+0x1f2>
    12a0:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    12a4:	f0 91 d3 03 	lds	r31, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    12a8:	96 89       	ldd	r25, Z+22	; 0x16
    12aa:	8e 89       	ldd	r24, Y+22	; 0x16
    12ac:	98 17       	cp	r25, r24
    12ae:	28 f4       	brcc	.+10     	; 0x12ba <xTaskCreate+0x1f6>
    12b0:	53 da       	rcall	.-2906   	; 0x758 <vPortYield>
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	05 c0       	rjmp	.+10     	; 0x12c0 <xTaskCreate+0x1fc>
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	03 c0       	rjmp	.+6      	; 0x12c0 <xTaskCreate+0x1fc>
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <xTaskCreate+0x1fc>
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	0f 91       	pop	r16
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	df 90       	pop	r13
    12cc:	cf 90       	pop	r12
    12ce:	bf 90       	pop	r11
    12d0:	af 90       	pop	r10
    12d2:	9f 90       	pop	r9
    12d4:	8f 90       	pop	r8
    12d6:	7f 90       	pop	r7
    12d8:	6f 90       	pop	r6
    12da:	5f 90       	pop	r5
    12dc:	4f 90       	pop	r4
    12de:	08 95       	ret

000012e0 <vTaskStartScheduler>:
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	0f 93       	push	r16
    12e6:	0f 2e       	mov	r0, r31
    12e8:	ff e6       	ldi	r31, 0x6F	; 111
    12ea:	ef 2e       	mov	r14, r31
    12ec:	f3 e0       	ldi	r31, 0x03	; 3
    12ee:	ff 2e       	mov	r15, r31
    12f0:	f0 2d       	mov	r31, r0
    12f2:	00 e0       	ldi	r16, 0x00	; 0
    12f4:	20 e0       	ldi	r18, 0x00	; 0
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 ec       	ldi	r20, 0xC0	; 192
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	61 e2       	ldi	r22, 0x21	; 33
    12fe:	72 e0       	ldi	r23, 0x02	; 2
    1300:	8d ec       	ldi	r24, 0xCD	; 205
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	df de       	rcall	.-578    	; 0x10c4 <xTaskCreate>
    1306:	81 30       	cpi	r24, 0x01	; 1
    1308:	c1 f4       	brne	.+48     	; 0x133a <vTaskStartScheduler+0x5a>
    130a:	29 d4       	rcall	.+2130   	; 0x1b5e <xTimerCreateTimerTask>
    130c:	81 30       	cpi	r24, 0x01	; 1
    130e:	a9 f4       	brne	.+42     	; 0x133a <vTaskStartScheduler+0x5a>
    1310:	f8 94       	cli
    1312:	8f ef       	ldi	r24, 0xFF	; 255
    1314:	9f ef       	ldi	r25, 0xFF	; 255
    1316:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <xNextTaskUnblockTime+0x1>
    131a:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <xNextTaskUnblockTime>
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	80 93 77 03 	sts	0x0377, r24	; 0x800377 <xSchedulerRunning>
    1324:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <xTickCount+0x1>
    1328:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <xTickCount>
    132c:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1330:	f0 91 d3 03 	lds	r31, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    1334:	85 a1       	ldd	r24, Z+37	; 0x25
    1336:	a8 d8       	rcall	.-3760   	; 0x488 <task_switch_in>
    1338:	d3 d9       	rcall	.-3162   	; 0x6e0 <xPortStartScheduler>
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	08 95       	ret

00001342 <vTaskSuspendAll>:
    1342:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <__data_end>
    1346:	8f 5f       	subi	r24, 0xFF	; 255
    1348:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <__data_end>
    134c:	08 95       	ret

0000134e <xTaskGetTickCount>:
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	0f 92       	push	r0
    1354:	80 91 79 03 	lds	r24, 0x0379	; 0x800379 <xTickCount>
    1358:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <xTickCount+0x1>
    135c:	0f 90       	pop	r0
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	08 95       	ret

00001362 <xTaskIncrementTick>:
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <__data_end>
    1376:	81 11       	cpse	r24, r1
    1378:	95 c0       	rjmp	.+298    	; 0x14a4 <xTaskIncrementTick+0x142>
    137a:	e0 90 79 03 	lds	r14, 0x0379	; 0x800379 <xTickCount>
    137e:	f0 90 7a 03 	lds	r15, 0x037A	; 0x80037a <xTickCount+0x1>
    1382:	8f ef       	ldi	r24, 0xFF	; 255
    1384:	e8 1a       	sub	r14, r24
    1386:	f8 0a       	sbc	r15, r24
    1388:	f0 92 7a 03 	sts	0x037A, r15	; 0x80037a <xTickCount+0x1>
    138c:	e0 92 79 03 	sts	0x0379, r14	; 0x800379 <xTickCount>
    1390:	e1 14       	cp	r14, r1
    1392:	f1 04       	cpc	r15, r1
    1394:	b1 f4       	brne	.+44     	; 0x13c2 <xTaskIncrementTick+0x60>
    1396:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <pxDelayedTaskList>
    139a:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <pxDelayedTaskList+0x1>
    139e:	20 91 98 03 	lds	r18, 0x0398	; 0x800398 <pxOverflowDelayedTaskList>
    13a2:	30 91 99 03 	lds	r19, 0x0399	; 0x800399 <pxOverflowDelayedTaskList+0x1>
    13a6:	30 93 9b 03 	sts	0x039B, r19	; 0x80039b <pxDelayedTaskList+0x1>
    13aa:	20 93 9a 03 	sts	0x039A, r18	; 0x80039a <pxDelayedTaskList>
    13ae:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <pxOverflowDelayedTaskList+0x1>
    13b2:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <pxOverflowDelayedTaskList>
    13b6:	80 91 74 03 	lds	r24, 0x0374	; 0x800374 <xNumOfOverflows>
    13ba:	8f 5f       	subi	r24, 0xFF	; 255
    13bc:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <xNumOfOverflows>
    13c0:	0e de       	rcall	.-996    	; 0xfde <prvResetNextTaskUnblockTime>
    13c2:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <xNextTaskUnblockTime>
    13c6:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <xNextTaskUnblockTime+0x1>
    13ca:	e8 16       	cp	r14, r24
    13cc:	f9 06       	cpc	r15, r25
    13ce:	10 f4       	brcc	.+4      	; 0x13d4 <xTaskIncrementTick+0x72>
    13d0:	d1 2c       	mov	r13, r1
    13d2:	50 c0       	rjmp	.+160    	; 0x1474 <xTaskIncrementTick+0x112>
    13d4:	d1 2c       	mov	r13, r1
    13d6:	cc 24       	eor	r12, r12
    13d8:	c3 94       	inc	r12
    13da:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <pxDelayedTaskList>
    13de:	f0 91 9b 03 	lds	r31, 0x039B	; 0x80039b <pxDelayedTaskList+0x1>
    13e2:	80 81       	ld	r24, Z
    13e4:	81 11       	cpse	r24, r1
    13e6:	07 c0       	rjmp	.+14     	; 0x13f6 <xTaskIncrementTick+0x94>
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	9f ef       	ldi	r25, 0xFF	; 255
    13ec:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <xNextTaskUnblockTime+0x1>
    13f0:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <xNextTaskUnblockTime>
    13f4:	3f c0       	rjmp	.+126    	; 0x1474 <xTaskIncrementTick+0x112>
    13f6:	e0 91 9a 03 	lds	r30, 0x039A	; 0x80039a <pxDelayedTaskList>
    13fa:	f0 91 9b 03 	lds	r31, 0x039B	; 0x80039b <pxDelayedTaskList+0x1>
    13fe:	05 80       	ldd	r0, Z+5	; 0x05
    1400:	f6 81       	ldd	r31, Z+6	; 0x06
    1402:	e0 2d       	mov	r30, r0
    1404:	c6 81       	ldd	r28, Z+6	; 0x06
    1406:	d7 81       	ldd	r29, Z+7	; 0x07
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	9b 81       	ldd	r25, Y+3	; 0x03
    140c:	e8 16       	cp	r14, r24
    140e:	f9 06       	cpc	r15, r25
    1410:	28 f4       	brcc	.+10     	; 0x141c <xTaskIncrementTick+0xba>
    1412:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <xNextTaskUnblockTime+0x1>
    1416:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <xNextTaskUnblockTime>
    141a:	2c c0       	rjmp	.+88     	; 0x1474 <xTaskIncrementTick+0x112>
    141c:	8e 01       	movw	r16, r28
    141e:	0e 5f       	subi	r16, 0xFE	; 254
    1420:	1f 4f       	sbci	r17, 0xFF	; 255
    1422:	c8 01       	movw	r24, r16
    1424:	c4 d8       	rcall	.-3704   	; 0x5ae <uxListRemove>
    1426:	8c 89       	ldd	r24, Y+20	; 0x14
    1428:	9d 89       	ldd	r25, Y+21	; 0x15
    142a:	89 2b       	or	r24, r25
    142c:	19 f0       	breq	.+6      	; 0x1434 <xTaskIncrementTick+0xd2>
    142e:	ce 01       	movw	r24, r28
    1430:	0c 96       	adiw	r24, 0x0c	; 12
    1432:	bd d8       	rcall	.-3718   	; 0x5ae <uxListRemove>
    1434:	8e 89       	ldd	r24, Y+22	; 0x16
    1436:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <uxTopReadyPriority>
    143a:	98 17       	cp	r25, r24
    143c:	10 f4       	brcc	.+4      	; 0x1442 <xTaskIncrementTick+0xe0>
    143e:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <uxTopReadyPriority>
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	9c 01       	movw	r18, r24
    1446:	22 0f       	add	r18, r18
    1448:	33 1f       	adc	r19, r19
    144a:	22 0f       	add	r18, r18
    144c:	33 1f       	adc	r19, r19
    144e:	22 0f       	add	r18, r18
    1450:	33 1f       	adc	r19, r19
    1452:	82 0f       	add	r24, r18
    1454:	93 1f       	adc	r25, r19
    1456:	b8 01       	movw	r22, r16
    1458:	82 55       	subi	r24, 0x52	; 82
    145a:	9c 4f       	sbci	r25, 0xFC	; 252
    145c:	56 d8       	rcall	.-3924   	; 0x50a <vListInsertEnd>
    145e:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1462:	f0 91 d3 03 	lds	r31, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    1466:	9e 89       	ldd	r25, Y+22	; 0x16
    1468:	86 89       	ldd	r24, Z+22	; 0x16
    146a:	98 17       	cp	r25, r24
    146c:	08 f4       	brcc	.+2      	; 0x1470 <xTaskIncrementTick+0x10e>
    146e:	b5 cf       	rjmp	.-150    	; 0x13da <xTaskIncrementTick+0x78>
    1470:	dc 2c       	mov	r13, r12
    1472:	b3 cf       	rjmp	.-154    	; 0x13da <xTaskIncrementTick+0x78>
    1474:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1478:	f0 91 d3 03 	lds	r31, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    147c:	86 89       	ldd	r24, Z+22	; 0x16
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	fc 01       	movw	r30, r24
    1482:	ee 0f       	add	r30, r30
    1484:	ff 1f       	adc	r31, r31
    1486:	ee 0f       	add	r30, r30
    1488:	ff 1f       	adc	r31, r31
    148a:	ee 0f       	add	r30, r30
    148c:	ff 1f       	adc	r31, r31
    148e:	8e 0f       	add	r24, r30
    1490:	9f 1f       	adc	r25, r31
    1492:	fc 01       	movw	r30, r24
    1494:	e2 55       	subi	r30, 0x52	; 82
    1496:	fc 4f       	sbci	r31, 0xFC	; 252
    1498:	80 81       	ld	r24, Z
    149a:	82 30       	cpi	r24, 0x02	; 2
    149c:	48 f0       	brcs	.+18     	; 0x14b0 <xTaskIncrementTick+0x14e>
    149e:	dd 24       	eor	r13, r13
    14a0:	d3 94       	inc	r13
    14a2:	06 c0       	rjmp	.+12     	; 0x14b0 <xTaskIncrementTick+0x14e>
    14a4:	80 91 76 03 	lds	r24, 0x0376	; 0x800376 <uxPendedTicks>
    14a8:	8f 5f       	subi	r24, 0xFF	; 255
    14aa:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <uxPendedTicks>
    14ae:	d1 2c       	mov	r13, r1
    14b0:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <xYieldPending>
    14b4:	88 23       	and	r24, r24
    14b6:	11 f0       	breq	.+4      	; 0x14bc <xTaskIncrementTick+0x15a>
    14b8:	dd 24       	eor	r13, r13
    14ba:	d3 94       	inc	r13
    14bc:	8d 2d       	mov	r24, r13
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	df 90       	pop	r13
    14cc:	cf 90       	pop	r12
    14ce:	08 95       	ret

000014d0 <xTaskResumeAll>:
    14d0:	df 92       	push	r13
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	0f b6       	in	r0, 0x3f	; 63
    14e0:	f8 94       	cli
    14e2:	0f 92       	push	r0
    14e4:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <__data_end>
    14e8:	81 50       	subi	r24, 0x01	; 1
    14ea:	80 93 6e 03 	sts	0x036E, r24	; 0x80036e <__data_end>
    14ee:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <__data_end>
    14f2:	81 11       	cpse	r24, r1
    14f4:	5a c0       	rjmp	.+180    	; 0x15aa <xTaskResumeAll+0xda>
    14f6:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <uxCurrentNumberOfTasks>
    14fa:	81 11       	cpse	r24, r1
    14fc:	31 c0       	rjmp	.+98     	; 0x1560 <xTaskResumeAll+0x90>
    14fe:	58 c0       	rjmp	.+176    	; 0x15b0 <xTaskResumeAll+0xe0>
    1500:	d7 01       	movw	r26, r14
    1502:	15 96       	adiw	r26, 0x05	; 5
    1504:	ed 91       	ld	r30, X+
    1506:	fc 91       	ld	r31, X
    1508:	16 97       	sbiw	r26, 0x06	; 6
    150a:	c6 81       	ldd	r28, Z+6	; 0x06
    150c:	d7 81       	ldd	r29, Z+7	; 0x07
    150e:	ce 01       	movw	r24, r28
    1510:	0c 96       	adiw	r24, 0x0c	; 12
    1512:	4d d8       	rcall	.-3942   	; 0x5ae <uxListRemove>
    1514:	8e 01       	movw	r16, r28
    1516:	0e 5f       	subi	r16, 0xFE	; 254
    1518:	1f 4f       	sbci	r17, 0xFF	; 255
    151a:	c8 01       	movw	r24, r16
    151c:	48 d8       	rcall	.-3952   	; 0x5ae <uxListRemove>
    151e:	8e 89       	ldd	r24, Y+22	; 0x16
    1520:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <uxTopReadyPriority>
    1524:	98 17       	cp	r25, r24
    1526:	10 f4       	brcc	.+4      	; 0x152c <xTaskResumeAll+0x5c>
    1528:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <uxTopReadyPriority>
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9c 01       	movw	r18, r24
    1530:	22 0f       	add	r18, r18
    1532:	33 1f       	adc	r19, r19
    1534:	22 0f       	add	r18, r18
    1536:	33 1f       	adc	r19, r19
    1538:	22 0f       	add	r18, r18
    153a:	33 1f       	adc	r19, r19
    153c:	82 0f       	add	r24, r18
    153e:	93 1f       	adc	r25, r19
    1540:	b8 01       	movw	r22, r16
    1542:	82 55       	subi	r24, 0x52	; 82
    1544:	9c 4f       	sbci	r25, 0xFC	; 252
    1546:	0e 94 85 02 	call	0x50a	; 0x50a <vListInsertEnd>
    154a:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    154e:	f0 91 d3 03 	lds	r31, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    1552:	9e 89       	ldd	r25, Y+22	; 0x16
    1554:	86 89       	ldd	r24, Z+22	; 0x16
    1556:	98 17       	cp	r25, r24
    1558:	68 f0       	brcs	.+26     	; 0x1574 <xTaskResumeAll+0xa4>
    155a:	d0 92 75 03 	sts	0x0375, r13	; 0x800375 <xYieldPending>
    155e:	0a c0       	rjmp	.+20     	; 0x1574 <xTaskResumeAll+0xa4>
    1560:	c0 e0       	ldi	r28, 0x00	; 0
    1562:	d0 e0       	ldi	r29, 0x00	; 0
    1564:	0f 2e       	mov	r0, r31
    1566:	ff e8       	ldi	r31, 0x8F	; 143
    1568:	ef 2e       	mov	r14, r31
    156a:	f3 e0       	ldi	r31, 0x03	; 3
    156c:	ff 2e       	mov	r15, r31
    156e:	f0 2d       	mov	r31, r0
    1570:	dd 24       	eor	r13, r13
    1572:	d3 94       	inc	r13
    1574:	f7 01       	movw	r30, r14
    1576:	80 81       	ld	r24, Z
    1578:	81 11       	cpse	r24, r1
    157a:	c2 cf       	rjmp	.-124    	; 0x1500 <xTaskResumeAll+0x30>
    157c:	cd 2b       	or	r28, r29
    157e:	09 f0       	breq	.+2      	; 0x1582 <xTaskResumeAll+0xb2>
    1580:	2e dd       	rcall	.-1444   	; 0xfde <prvResetNextTaskUnblockTime>
    1582:	c0 91 76 03 	lds	r28, 0x0376	; 0x800376 <uxPendedTicks>
    1586:	cc 23       	and	r28, r28
    1588:	49 f0       	breq	.+18     	; 0x159c <xTaskResumeAll+0xcc>
    158a:	d1 e0       	ldi	r29, 0x01	; 1
    158c:	ea de       	rcall	.-556    	; 0x1362 <xTaskIncrementTick>
    158e:	81 11       	cpse	r24, r1
    1590:	d0 93 75 03 	sts	0x0375, r29	; 0x800375 <xYieldPending>
    1594:	c1 50       	subi	r28, 0x01	; 1
    1596:	d1 f7       	brne	.-12     	; 0x158c <xTaskResumeAll+0xbc>
    1598:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <uxPendedTicks>
    159c:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <xYieldPending>
    15a0:	88 23       	and	r24, r24
    15a2:	29 f0       	breq	.+10     	; 0x15ae <xTaskResumeAll+0xde>
    15a4:	d9 d8       	rcall	.-3662   	; 0x758 <vPortYield>
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	03 c0       	rjmp	.+6      	; 0x15b0 <xTaskResumeAll+0xe0>
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	01 c0       	rjmp	.+2      	; 0x15b0 <xTaskResumeAll+0xe0>
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	df 90       	pop	r13
    15c2:	08 95       	ret

000015c4 <vTaskDelay>:
    15c4:	cf 93       	push	r28
    15c6:	df 93       	push	r29
    15c8:	ec 01       	movw	r28, r24
    15ca:	89 2b       	or	r24, r25
    15cc:	39 f0       	breq	.+14     	; 0x15dc <vTaskDelay+0x18>
    15ce:	b9 de       	rcall	.-654    	; 0x1342 <vTaskSuspendAll>
    15d0:	60 e0       	ldi	r22, 0x00	; 0
    15d2:	ce 01       	movw	r24, r28
    15d4:	23 dd       	rcall	.-1466   	; 0x101c <prvAddCurrentTaskToDelayedList>
    15d6:	7c df       	rcall	.-264    	; 0x14d0 <xTaskResumeAll>
    15d8:	81 11       	cpse	r24, r1
    15da:	01 c0       	rjmp	.+2      	; 0x15de <vTaskDelay+0x1a>
    15dc:	bd d8       	rcall	.-3718   	; 0x758 <vPortYield>
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <vTaskSwitchContext>:
    15e4:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <__data_end>
    15e8:	88 23       	and	r24, r24
    15ea:	21 f0       	breq	.+8      	; 0x15f4 <vTaskSwitchContext+0x10>
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <xYieldPending>
    15f2:	08 95       	ret
    15f4:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <xYieldPending>
    15f8:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    15fc:	f0 91 d3 03 	lds	r31, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    1600:	85 a1       	ldd	r24, Z+37	; 0x25
    1602:	0e 94 4e 02 	call	0x49c	; 0x49c <task_switch_out>
    1606:	a0 91 d2 03 	lds	r26, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    160a:	b0 91 d3 03 	lds	r27, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    160e:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1612:	f0 91 d3 03 	lds	r31, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    1616:	2d 91       	ld	r18, X+
    1618:	3c 91       	ld	r19, X
    161a:	87 89       	ldd	r24, Z+23	; 0x17
    161c:	90 8d       	ldd	r25, Z+24	; 0x18
    161e:	82 17       	cp	r24, r18
    1620:	93 07       	cpc	r25, r19
    1622:	58 f0       	brcs	.+22     	; 0x163a <vTaskSwitchContext+0x56>
    1624:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1628:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    162c:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1630:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    1634:	67 5e       	subi	r22, 0xE7	; 231
    1636:	7f 4f       	sbci	r23, 0xFF	; 255
    1638:	aa d3       	rcall	.+1876   	; 0x1d8e <vApplicationStackOverflowHook>
    163a:	20 91 78 03 	lds	r18, 0x0378	; 0x800378 <uxTopReadyPriority>
    163e:	82 2f       	mov	r24, r18
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	fc 01       	movw	r30, r24
    1644:	ee 0f       	add	r30, r30
    1646:	ff 1f       	adc	r31, r31
    1648:	ee 0f       	add	r30, r30
    164a:	ff 1f       	adc	r31, r31
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	e8 0f       	add	r30, r24
    1652:	f9 1f       	adc	r31, r25
    1654:	e2 55       	subi	r30, 0x52	; 82
    1656:	fc 4f       	sbci	r31, 0xFC	; 252
    1658:	30 81       	ld	r19, Z
    165a:	31 11       	cpse	r19, r1
    165c:	11 c0       	rjmp	.+34     	; 0x1680 <vTaskSwitchContext+0x9c>
    165e:	21 50       	subi	r18, 0x01	; 1
    1660:	82 2f       	mov	r24, r18
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	fc 01       	movw	r30, r24
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	ee 0f       	add	r30, r30
    166c:	ff 1f       	adc	r31, r31
    166e:	ee 0f       	add	r30, r30
    1670:	ff 1f       	adc	r31, r31
    1672:	e8 0f       	add	r30, r24
    1674:	f9 1f       	adc	r31, r25
    1676:	e2 55       	subi	r30, 0x52	; 82
    1678:	fc 4f       	sbci	r31, 0xFC	; 252
    167a:	30 81       	ld	r19, Z
    167c:	33 23       	and	r19, r19
    167e:	79 f3       	breq	.-34     	; 0x165e <vTaskSwitchContext+0x7a>
    1680:	ac 01       	movw	r20, r24
    1682:	44 0f       	add	r20, r20
    1684:	55 1f       	adc	r21, r21
    1686:	44 0f       	add	r20, r20
    1688:	55 1f       	adc	r21, r21
    168a:	44 0f       	add	r20, r20
    168c:	55 1f       	adc	r21, r21
    168e:	48 0f       	add	r20, r24
    1690:	59 1f       	adc	r21, r25
    1692:	da 01       	movw	r26, r20
    1694:	a2 55       	subi	r26, 0x52	; 82
    1696:	bc 4f       	sbci	r27, 0xFC	; 252
    1698:	11 96       	adiw	r26, 0x01	; 1
    169a:	ed 91       	ld	r30, X+
    169c:	fc 91       	ld	r31, X
    169e:	12 97       	sbiw	r26, 0x02	; 2
    16a0:	02 80       	ldd	r0, Z+2	; 0x02
    16a2:	f3 81       	ldd	r31, Z+3	; 0x03
    16a4:	e0 2d       	mov	r30, r0
    16a6:	12 96       	adiw	r26, 0x02	; 2
    16a8:	fc 93       	st	X, r31
    16aa:	ee 93       	st	-X, r30
    16ac:	11 97       	sbiw	r26, 0x01	; 1
    16ae:	4f 54       	subi	r20, 0x4F	; 79
    16b0:	5c 4f       	sbci	r21, 0xFC	; 252
    16b2:	e4 17       	cp	r30, r20
    16b4:	f5 07       	cpc	r31, r21
    16b6:	29 f4       	brne	.+10     	; 0x16c2 <vTaskSwitchContext+0xde>
    16b8:	42 81       	ldd	r20, Z+2	; 0x02
    16ba:	53 81       	ldd	r21, Z+3	; 0x03
    16bc:	fd 01       	movw	r30, r26
    16be:	52 83       	std	Z+2, r21	; 0x02
    16c0:	41 83       	std	Z+1, r20	; 0x01
    16c2:	fc 01       	movw	r30, r24
    16c4:	ee 0f       	add	r30, r30
    16c6:	ff 1f       	adc	r31, r31
    16c8:	ee 0f       	add	r30, r30
    16ca:	ff 1f       	adc	r31, r31
    16cc:	ee 0f       	add	r30, r30
    16ce:	ff 1f       	adc	r31, r31
    16d0:	8e 0f       	add	r24, r30
    16d2:	9f 1f       	adc	r25, r31
    16d4:	fc 01       	movw	r30, r24
    16d6:	e2 55       	subi	r30, 0x52	; 82
    16d8:	fc 4f       	sbci	r31, 0xFC	; 252
    16da:	01 80       	ldd	r0, Z+1	; 0x01
    16dc:	f2 81       	ldd	r31, Z+2	; 0x02
    16de:	e0 2d       	mov	r30, r0
    16e0:	86 81       	ldd	r24, Z+6	; 0x06
    16e2:	97 81       	ldd	r25, Z+7	; 0x07
    16e4:	90 93 d3 03 	sts	0x03D3, r25	; 0x8003d3 <pxCurrentTCB+0x1>
    16e8:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <pxCurrentTCB>
    16ec:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <uxTopReadyPriority>
    16f0:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    16f4:	f0 91 d3 03 	lds	r31, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    16f8:	85 a1       	ldd	r24, Z+37	; 0x25
    16fa:	0c 94 44 02 	jmp	0x488	; 0x488 <task_switch_in>
    16fe:	08 95       	ret

00001700 <vTaskPlaceOnEventList>:
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	eb 01       	movw	r28, r22
    1706:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    170a:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    170e:	64 5f       	subi	r22, 0xF4	; 244
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	0e 94 a6 02 	call	0x54c	; 0x54c <vListInsert>
    1716:	61 e0       	ldi	r22, 0x01	; 1
    1718:	ce 01       	movw	r24, r28
    171a:	80 dc       	rcall	.-1792   	; 0x101c <prvAddCurrentTaskToDelayedList>
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	08 95       	ret

00001722 <vTaskPlaceOnEventListRestricted>:
    1722:	0f 93       	push	r16
    1724:	1f 93       	push	r17
    1726:	cf 93       	push	r28
    1728:	8b 01       	movw	r16, r22
    172a:	c4 2f       	mov	r28, r20
    172c:	60 91 d2 03 	lds	r22, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1730:	70 91 d3 03 	lds	r23, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    1734:	64 5f       	subi	r22, 0xF4	; 244
    1736:	7f 4f       	sbci	r23, 0xFF	; 255
    1738:	0e 94 85 02 	call	0x50a	; 0x50a <vListInsertEnd>
    173c:	cc 23       	and	r28, r28
    173e:	11 f0       	breq	.+4      	; 0x1744 <vTaskPlaceOnEventListRestricted+0x22>
    1740:	0f ef       	ldi	r16, 0xFF	; 255
    1742:	1f ef       	ldi	r17, 0xFF	; 255
    1744:	6c 2f       	mov	r22, r28
    1746:	c8 01       	movw	r24, r16
    1748:	69 dc       	rcall	.-1838   	; 0x101c <prvAddCurrentTaskToDelayedList>
    174a:	cf 91       	pop	r28
    174c:	1f 91       	pop	r17
    174e:	0f 91       	pop	r16
    1750:	08 95       	ret

00001752 <xTaskRemoveFromEventList>:
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	dc 01       	movw	r26, r24
    175c:	15 96       	adiw	r26, 0x05	; 5
    175e:	ed 91       	ld	r30, X+
    1760:	fc 91       	ld	r31, X
    1762:	16 97       	sbiw	r26, 0x06	; 6
    1764:	c6 81       	ldd	r28, Z+6	; 0x06
    1766:	d7 81       	ldd	r29, Z+7	; 0x07
    1768:	8e 01       	movw	r16, r28
    176a:	04 5f       	subi	r16, 0xF4	; 244
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	c8 01       	movw	r24, r16
    1770:	0e 94 d7 02 	call	0x5ae	; 0x5ae <uxListRemove>
    1774:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <__data_end>
    1778:	81 11       	cpse	r24, r1
    177a:	1c c0       	rjmp	.+56     	; 0x17b4 <xTaskRemoveFromEventList+0x62>
    177c:	0a 50       	subi	r16, 0x0A	; 10
    177e:	11 09       	sbc	r17, r1
    1780:	c8 01       	movw	r24, r16
    1782:	0e 94 d7 02 	call	0x5ae	; 0x5ae <uxListRemove>
    1786:	8e 89       	ldd	r24, Y+22	; 0x16
    1788:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <uxTopReadyPriority>
    178c:	98 17       	cp	r25, r24
    178e:	10 f4       	brcc	.+4      	; 0x1794 <xTaskRemoveFromEventList+0x42>
    1790:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <uxTopReadyPriority>
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	9c 01       	movw	r18, r24
    1798:	22 0f       	add	r18, r18
    179a:	33 1f       	adc	r19, r19
    179c:	22 0f       	add	r18, r18
    179e:	33 1f       	adc	r19, r19
    17a0:	22 0f       	add	r18, r18
    17a2:	33 1f       	adc	r19, r19
    17a4:	82 0f       	add	r24, r18
    17a6:	93 1f       	adc	r25, r19
    17a8:	b8 01       	movw	r22, r16
    17aa:	82 55       	subi	r24, 0x52	; 82
    17ac:	9c 4f       	sbci	r25, 0xFC	; 252
    17ae:	0e 94 85 02 	call	0x50a	; 0x50a <vListInsertEnd>
    17b2:	05 c0       	rjmp	.+10     	; 0x17be <xTaskRemoveFromEventList+0x6c>
    17b4:	b8 01       	movw	r22, r16
    17b6:	8f e8       	ldi	r24, 0x8F	; 143
    17b8:	93 e0       	ldi	r25, 0x03	; 3
    17ba:	0e 94 85 02 	call	0x50a	; 0x50a <vListInsertEnd>
    17be:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    17c2:	f0 91 d3 03 	lds	r31, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    17c6:	9e 89       	ldd	r25, Y+22	; 0x16
    17c8:	86 89       	ldd	r24, Z+22	; 0x16
    17ca:	89 17       	cp	r24, r25
    17cc:	20 f4       	brcc	.+8      	; 0x17d6 <xTaskRemoveFromEventList+0x84>
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <xYieldPending>
    17d4:	01 c0       	rjmp	.+2      	; 0x17d8 <xTaskRemoveFromEventList+0x86>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	08 95       	ret

000017e2 <vTaskInternalSetTimeOutState>:
    17e2:	20 91 74 03 	lds	r18, 0x0374	; 0x800374 <xNumOfOverflows>
    17e6:	fc 01       	movw	r30, r24
    17e8:	20 83       	st	Z, r18
    17ea:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <xTickCount>
    17ee:	30 91 7a 03 	lds	r19, 0x037A	; 0x80037a <xTickCount+0x1>
    17f2:	32 83       	std	Z+2, r19	; 0x02
    17f4:	21 83       	std	Z+1, r18	; 0x01
    17f6:	08 95       	ret

000017f8 <xTaskCheckForTimeOut>:
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	0f 92       	push	r0
    1802:	20 91 79 03 	lds	r18, 0x0379	; 0x800379 <xTickCount>
    1806:	30 91 7a 03 	lds	r19, 0x037A	; 0x80037a <xTickCount+0x1>
    180a:	db 01       	movw	r26, r22
    180c:	4d 91       	ld	r20, X+
    180e:	5c 91       	ld	r21, X
    1810:	4f 3f       	cpi	r20, 0xFF	; 255
    1812:	bf ef       	ldi	r27, 0xFF	; 255
    1814:	5b 07       	cpc	r21, r27
    1816:	e9 f0       	breq	.+58     	; 0x1852 <xTaskCheckForTimeOut+0x5a>
    1818:	ec 01       	movw	r28, r24
    181a:	e9 81       	ldd	r30, Y+1	; 0x01
    181c:	fa 81       	ldd	r31, Y+2	; 0x02
    181e:	a0 91 74 03 	lds	r26, 0x0374	; 0x800374 <xNumOfOverflows>
    1822:	b8 81       	ld	r27, Y
    1824:	ba 17       	cp	r27, r26
    1826:	19 f0       	breq	.+6      	; 0x182e <xTaskCheckForTimeOut+0x36>
    1828:	2e 17       	cp	r18, r30
    182a:	3f 07       	cpc	r19, r31
    182c:	a0 f4       	brcc	.+40     	; 0x1856 <xTaskCheckForTimeOut+0x5e>
    182e:	2e 1b       	sub	r18, r30
    1830:	3f 0b       	sbc	r19, r31
    1832:	24 17       	cp	r18, r20
    1834:	35 07       	cpc	r19, r21
    1836:	40 f4       	brcc	.+16     	; 0x1848 <xTaskCheckForTimeOut+0x50>
    1838:	fb 01       	movw	r30, r22
    183a:	42 1b       	sub	r20, r18
    183c:	53 0b       	sbc	r21, r19
    183e:	51 83       	std	Z+1, r21	; 0x01
    1840:	40 83       	st	Z, r20
    1842:	cf df       	rcall	.-98     	; 0x17e2 <vTaskInternalSetTimeOutState>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	08 c0       	rjmp	.+16     	; 0x1858 <xTaskCheckForTimeOut+0x60>
    1848:	fb 01       	movw	r30, r22
    184a:	11 82       	std	Z+1, r1	; 0x01
    184c:	10 82       	st	Z, r1
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <xTaskCheckForTimeOut+0x60>
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	01 c0       	rjmp	.+2      	; 0x1858 <xTaskCheckForTimeOut+0x60>
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	0f 90       	pop	r0
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	08 95       	ret

00001862 <vTaskMissedYield>:
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	80 93 75 03 	sts	0x0375, r24	; 0x800375 <xYieldPending>
    1868:	08 95       	ret

0000186a <xTaskGetSchedulerState>:
    186a:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <xSchedulerRunning>
    186e:	88 23       	and	r24, r24
    1870:	31 f0       	breq	.+12     	; 0x187e <xTaskGetSchedulerState+0x14>
    1872:	80 91 6e 03 	lds	r24, 0x036E	; 0x80036e <__data_end>
    1876:	88 23       	and	r24, r24
    1878:	21 f0       	breq	.+8      	; 0x1882 <xTaskGetSchedulerState+0x18>
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	08 95       	ret
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	08 95       	ret
    1882:	82 e0       	ldi	r24, 0x02	; 2
    1884:	08 95       	ret

00001886 <xTaskPriorityInherit>:
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	fc 01       	movw	r30, r24
    1890:	89 2b       	or	r24, r25
    1892:	09 f4       	brne	.+2      	; 0x1896 <xTaskPriorityInherit+0x10>
    1894:	64 c0       	rjmp	.+200    	; 0x195e <xTaskPriorityInherit+0xd8>
    1896:	26 89       	ldd	r18, Z+22	; 0x16
    1898:	a0 91 d2 03 	lds	r26, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    189c:	b0 91 d3 03 	lds	r27, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    18a0:	56 96       	adiw	r26, 0x16	; 22
    18a2:	8c 91       	ld	r24, X
    18a4:	28 17       	cp	r18, r24
    18a6:	08 f0       	brcs	.+2      	; 0x18aa <xTaskPriorityInherit+0x24>
    18a8:	4e c0       	rjmp	.+156    	; 0x1946 <xTaskPriorityInherit+0xc0>
    18aa:	84 85       	ldd	r24, Z+12	; 0x0c
    18ac:	95 85       	ldd	r25, Z+13	; 0x0d
    18ae:	99 23       	and	r25, r25
    18b0:	64 f0       	brlt	.+24     	; 0x18ca <xTaskPriorityInherit+0x44>
    18b2:	a0 91 d2 03 	lds	r26, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    18b6:	b0 91 d3 03 	lds	r27, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    18ba:	56 96       	adiw	r26, 0x16	; 22
    18bc:	3c 91       	ld	r19, X
    18be:	84 e0       	ldi	r24, 0x04	; 4
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	83 1b       	sub	r24, r19
    18c4:	91 09       	sbc	r25, r1
    18c6:	95 87       	std	Z+13, r25	; 0x0d
    18c8:	84 87       	std	Z+12, r24	; 0x0c
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	c9 01       	movw	r24, r18
    18ce:	88 0f       	add	r24, r24
    18d0:	99 1f       	adc	r25, r25
    18d2:	88 0f       	add	r24, r24
    18d4:	99 1f       	adc	r25, r25
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	28 0f       	add	r18, r24
    18dc:	39 1f       	adc	r19, r25
    18de:	22 55       	subi	r18, 0x52	; 82
    18e0:	3c 4f       	sbci	r19, 0xFC	; 252
    18e2:	82 85       	ldd	r24, Z+10	; 0x0a
    18e4:	93 85       	ldd	r25, Z+11	; 0x0b
    18e6:	82 17       	cp	r24, r18
    18e8:	93 07       	cpc	r25, r19
    18ea:	21 f5       	brne	.+72     	; 0x1934 <xTaskPriorityInherit+0xae>
    18ec:	8f 01       	movw	r16, r30
    18ee:	ef 01       	movw	r28, r30
    18f0:	22 96       	adiw	r28, 0x02	; 2
    18f2:	ce 01       	movw	r24, r28
    18f4:	0e 94 d7 02 	call	0x5ae	; 0x5ae <uxListRemove>
    18f8:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    18fc:	f0 91 d3 03 	lds	r31, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    1900:	86 89       	ldd	r24, Z+22	; 0x16
    1902:	f8 01       	movw	r30, r16
    1904:	86 8b       	std	Z+22, r24	; 0x16
    1906:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <uxTopReadyPriority>
    190a:	98 17       	cp	r25, r24
    190c:	10 f4       	brcc	.+4      	; 0x1912 <xTaskPriorityInherit+0x8c>
    190e:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <uxTopReadyPriority>
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	9c 01       	movw	r18, r24
    1916:	22 0f       	add	r18, r18
    1918:	33 1f       	adc	r19, r19
    191a:	22 0f       	add	r18, r18
    191c:	33 1f       	adc	r19, r19
    191e:	22 0f       	add	r18, r18
    1920:	33 1f       	adc	r19, r19
    1922:	82 0f       	add	r24, r18
    1924:	93 1f       	adc	r25, r19
    1926:	be 01       	movw	r22, r28
    1928:	82 55       	subi	r24, 0x52	; 82
    192a:	9c 4f       	sbci	r25, 0xFC	; 252
    192c:	0e 94 85 02 	call	0x50a	; 0x50a <vListInsertEnd>
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	16 c0       	rjmp	.+44     	; 0x1960 <xTaskPriorityInherit+0xda>
    1934:	a0 91 d2 03 	lds	r26, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1938:	b0 91 d3 03 	lds	r27, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    193c:	56 96       	adiw	r26, 0x16	; 22
    193e:	8c 91       	ld	r24, X
    1940:	86 8b       	std	Z+22, r24	; 0x16
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	0d c0       	rjmp	.+26     	; 0x1960 <xTaskPriorityInherit+0xda>
    1946:	a0 91 d2 03 	lds	r26, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    194a:	b0 91 d3 03 	lds	r27, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	23 a1       	ldd	r18, Z+35	; 0x23
    1952:	56 96       	adiw	r26, 0x16	; 22
    1954:	9c 91       	ld	r25, X
    1956:	29 17       	cp	r18, r25
    1958:	18 f0       	brcs	.+6      	; 0x1960 <xTaskPriorityInherit+0xda>
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <xTaskPriorityInherit+0xda>
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	df 91       	pop	r29
    1962:	cf 91       	pop	r28
    1964:	1f 91       	pop	r17
    1966:	0f 91       	pop	r16
    1968:	08 95       	ret

0000196a <xTaskPriorityDisinherit>:
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	fc 01       	movw	r30, r24
    1974:	89 2b       	or	r24, r25
    1976:	79 f1       	breq	.+94     	; 0x19d6 <xTaskPriorityDisinherit+0x6c>
    1978:	84 a1       	ldd	r24, Z+36	; 0x24
    197a:	81 50       	subi	r24, 0x01	; 1
    197c:	84 a3       	std	Z+36, r24	; 0x24
    197e:	26 89       	ldd	r18, Z+22	; 0x16
    1980:	93 a1       	ldd	r25, Z+35	; 0x23
    1982:	29 17       	cp	r18, r25
    1984:	51 f1       	breq	.+84     	; 0x19da <xTaskPriorityDisinherit+0x70>
    1986:	81 11       	cpse	r24, r1
    1988:	2a c0       	rjmp	.+84     	; 0x19de <xTaskPriorityDisinherit+0x74>
    198a:	ef 01       	movw	r28, r30
    198c:	8f 01       	movw	r16, r30
    198e:	0e 5f       	subi	r16, 0xFE	; 254
    1990:	1f 4f       	sbci	r17, 0xFF	; 255
    1992:	c8 01       	movw	r24, r16
    1994:	0e 94 d7 02 	call	0x5ae	; 0x5ae <uxListRemove>
    1998:	8b a1       	ldd	r24, Y+35	; 0x23
    199a:	8e 8b       	std	Y+22, r24	; 0x16
    199c:	24 e0       	ldi	r18, 0x04	; 4
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	28 1b       	sub	r18, r24
    19a2:	31 09       	sbc	r19, r1
    19a4:	3d 87       	std	Y+13, r19	; 0x0d
    19a6:	2c 87       	std	Y+12, r18	; 0x0c
    19a8:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <uxTopReadyPriority>
    19ac:	98 17       	cp	r25, r24
    19ae:	10 f4       	brcc	.+4      	; 0x19b4 <xTaskPriorityDisinherit+0x4a>
    19b0:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <uxTopReadyPriority>
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	9c 01       	movw	r18, r24
    19b8:	22 0f       	add	r18, r18
    19ba:	33 1f       	adc	r19, r19
    19bc:	22 0f       	add	r18, r18
    19be:	33 1f       	adc	r19, r19
    19c0:	22 0f       	add	r18, r18
    19c2:	33 1f       	adc	r19, r19
    19c4:	82 0f       	add	r24, r18
    19c6:	93 1f       	adc	r25, r19
    19c8:	b8 01       	movw	r22, r16
    19ca:	82 55       	subi	r24, 0x52	; 82
    19cc:	9c 4f       	sbci	r25, 0xFC	; 252
    19ce:	0e 94 85 02 	call	0x50a	; 0x50a <vListInsertEnd>
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	05 c0       	rjmp	.+10     	; 0x19e0 <xTaskPriorityDisinherit+0x76>
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	03 c0       	rjmp	.+6      	; 0x19e0 <xTaskPriorityDisinherit+0x76>
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	01 c0       	rjmp	.+2      	; 0x19e0 <xTaskPriorityDisinherit+0x76>
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	0f 91       	pop	r16
    19e8:	08 95       	ret

000019ea <vTaskPriorityDisinheritAfterTimeout>:
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	fc 01       	movw	r30, r24
    19f4:	89 2b       	or	r24, r25
    19f6:	09 f4       	brne	.+2      	; 0x19fa <vTaskPriorityDisinheritAfterTimeout+0x10>
    19f8:	43 c0       	rjmp	.+134    	; 0x1a80 <vTaskPriorityDisinheritAfterTimeout+0x96>
    19fa:	93 a1       	ldd	r25, Z+35	; 0x23
    19fc:	96 17       	cp	r25, r22
    19fe:	08 f4       	brcc	.+2      	; 0x1a02 <vTaskPriorityDisinheritAfterTimeout+0x18>
    1a00:	96 2f       	mov	r25, r22
    1a02:	86 89       	ldd	r24, Z+22	; 0x16
    1a04:	89 17       	cp	r24, r25
    1a06:	e1 f1       	breq	.+120    	; 0x1a80 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1a08:	24 a1       	ldd	r18, Z+36	; 0x24
    1a0a:	21 30       	cpi	r18, 0x01	; 1
    1a0c:	c9 f5       	brne	.+114    	; 0x1a80 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1a0e:	96 8b       	std	Z+22, r25	; 0x16
    1a10:	24 85       	ldd	r18, Z+12	; 0x0c
    1a12:	35 85       	ldd	r19, Z+13	; 0x0d
    1a14:	33 23       	and	r19, r19
    1a16:	34 f0       	brlt	.+12     	; 0x1a24 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    1a18:	24 e0       	ldi	r18, 0x04	; 4
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	29 1b       	sub	r18, r25
    1a1e:	31 09       	sbc	r19, r1
    1a20:	35 87       	std	Z+13, r19	; 0x0d
    1a22:	24 87       	std	Z+12, r18	; 0x0c
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	9c 01       	movw	r18, r24
    1a28:	22 0f       	add	r18, r18
    1a2a:	33 1f       	adc	r19, r19
    1a2c:	22 0f       	add	r18, r18
    1a2e:	33 1f       	adc	r19, r19
    1a30:	22 0f       	add	r18, r18
    1a32:	33 1f       	adc	r19, r19
    1a34:	82 0f       	add	r24, r18
    1a36:	93 1f       	adc	r25, r19
    1a38:	82 55       	subi	r24, 0x52	; 82
    1a3a:	9c 4f       	sbci	r25, 0xFC	; 252
    1a3c:	22 85       	ldd	r18, Z+10	; 0x0a
    1a3e:	33 85       	ldd	r19, Z+11	; 0x0b
    1a40:	28 17       	cp	r18, r24
    1a42:	39 07       	cpc	r19, r25
    1a44:	e9 f4       	brne	.+58     	; 0x1a80 <vTaskPriorityDisinheritAfterTimeout+0x96>
    1a46:	ef 01       	movw	r28, r30
    1a48:	8f 01       	movw	r16, r30
    1a4a:	0e 5f       	subi	r16, 0xFE	; 254
    1a4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a4e:	c8 01       	movw	r24, r16
    1a50:	0e 94 d7 02 	call	0x5ae	; 0x5ae <uxListRemove>
    1a54:	8e 89       	ldd	r24, Y+22	; 0x16
    1a56:	90 91 78 03 	lds	r25, 0x0378	; 0x800378 <uxTopReadyPriority>
    1a5a:	98 17       	cp	r25, r24
    1a5c:	10 f4       	brcc	.+4      	; 0x1a62 <vTaskPriorityDisinheritAfterTimeout+0x78>
    1a5e:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <uxTopReadyPriority>
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	9c 01       	movw	r18, r24
    1a66:	22 0f       	add	r18, r18
    1a68:	33 1f       	adc	r19, r19
    1a6a:	22 0f       	add	r18, r18
    1a6c:	33 1f       	adc	r19, r19
    1a6e:	22 0f       	add	r18, r18
    1a70:	33 1f       	adc	r19, r19
    1a72:	82 0f       	add	r24, r18
    1a74:	93 1f       	adc	r25, r19
    1a76:	b8 01       	movw	r22, r16
    1a78:	82 55       	subi	r24, 0x52	; 82
    1a7a:	9c 4f       	sbci	r25, 0xFC	; 252
    1a7c:	0e 94 85 02 	call	0x50a	; 0x50a <vListInsertEnd>
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	1f 91       	pop	r17
    1a86:	0f 91       	pop	r16
    1a88:	08 95       	ret

00001a8a <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
        then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    1a8a:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1a8e:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    1a92:	89 2b       	or	r24, r25
    1a94:	39 f0       	breq	.+14     	; 0x1aa4 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    1a96:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1a9a:	f0 91 d3 03 	lds	r31, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    1a9e:	84 a1       	ldd	r24, Z+36	; 0x24
    1aa0:	8f 5f       	subi	r24, 0xFF	; 255
    1aa2:	84 a3       	std	Z+36, r24	; 0x24
        }

        return pxCurrentTCB;
    1aa4:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <pxCurrentTCB>
    1aa8:	90 91 d3 03 	lds	r25, 0x03D3	; 0x8003d3 <pxCurrentTCB+0x1>
    }
    1aac:	08 95       	ret

00001aae <prvInsertTimerInActiveList>:
    return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    1aae:	fc 01       	movw	r30, r24
BaseType_t xProcessTimerNow = pdFALSE;

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    1ab0:	73 83       	std	Z+3, r23	; 0x03
    1ab2:	62 83       	std	Z+2, r22	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1ab4:	91 87       	std	Z+9, r25	; 0x09
    1ab6:	80 87       	std	Z+8, r24	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    1ab8:	46 17       	cp	r20, r22
    1aba:	57 07       	cpc	r21, r23
    1abc:	90 f0       	brcs	.+36     	; 0x1ae2 <prvInsertTimerInActiveList+0x34>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1abe:	42 1b       	sub	r20, r18
    1ac0:	53 0b       	sbc	r21, r19
    1ac2:	84 85       	ldd	r24, Z+12	; 0x0c
    1ac4:	95 85       	ldd	r25, Z+13	; 0x0d
    1ac6:	48 17       	cp	r20, r24
    1ac8:	59 07       	cpc	r21, r25
    1aca:	e0 f4       	brcc	.+56     	; 0x1b04 <prvInsertTimerInActiveList+0x56>
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    1acc:	bf 01       	movw	r22, r30
    1ace:	6e 5f       	subi	r22, 0xFE	; 254
    1ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad2:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <pxOverflowTimerList>
    1ad6:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <pxOverflowTimerList+0x1>
    1ada:	0e 94 a6 02 	call	0x54c	; 0x54c <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    1ade:	80 e0       	ldi	r24, 0x00	; 0
    1ae0:	08 95       	ret
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    1ae2:	42 17       	cp	r20, r18
    1ae4:	53 07       	cpc	r21, r19
    1ae6:	18 f4       	brcc	.+6      	; 0x1aee <prvInsertTimerInActiveList+0x40>
    1ae8:	62 17       	cp	r22, r18
    1aea:	73 07       	cpc	r23, r19
    1aec:	68 f4       	brcc	.+26     	; 0x1b08 <prvInsertTimerInActiveList+0x5a>
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1aee:	bf 01       	movw	r22, r30
    1af0:	6e 5f       	subi	r22, 0xFE	; 254
    1af2:	7f 4f       	sbci	r23, 0xFF	; 255
    1af4:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <pxCurrentTimerList>
    1af8:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <pxCurrentTimerList+0x1>
    1afc:	0e 94 a6 02 	call	0x54c	; 0x54c <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	08 95       	ret
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	08 95       	ret
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
        }
    }

    return xProcessTimerNow;
}
    1b0a:	08 95       	ret

00001b0c <prvCheckForValidListAndQueue>:
static void prvCheckForValidListAndQueue( void )
{
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    1b12:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <xTimerQueue>
    1b16:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <xTimerQueue+0x1>
    1b1a:	89 2b       	or	r24, r25
    1b1c:	e9 f4       	brne	.+58     	; 0x1b58 <prvCheckForValidListAndQueue+0x4c>
        {
            vListInitialise( &xActiveTimerList1 );
    1b1e:	87 ee       	ldi	r24, 0xE7	; 231
    1b20:	93 e0       	ldi	r25, 0x03	; 3
    1b22:	0e 94 73 02 	call	0x4e6	; 0x4e6 <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    1b26:	8e ed       	ldi	r24, 0xDE	; 222
    1b28:	93 e0       	ldi	r25, 0x03	; 3
    1b2a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    1b2e:	87 ee       	ldi	r24, 0xE7	; 231
    1b30:	93 e0       	ldi	r25, 0x03	; 3
    1b32:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <pxCurrentTimerList+0x1>
    1b36:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    1b3a:	8e ed       	ldi	r24, 0xDE	; 222
    1b3c:	93 e0       	ldi	r25, 0x03	; 3
    1b3e:	90 93 db 03 	sts	0x03DB, r25	; 0x8003db <pxOverflowTimerList+0x1>
    1b42:	80 93 da 03 	sts	0x03DA, r24	; 0x8003da <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	65 e0       	ldi	r22, 0x05	; 5
    1b4a:	8a e0       	ldi	r24, 0x0A	; 10
    1b4c:	0e 94 80 05 	call	0xb00	; 0xb00 <xQueueGenericCreate>
    1b50:	90 93 d9 03 	sts	0x03D9, r25	; 0x8003d9 <xTimerQueue+0x1>
    1b54:	80 93 d8 03 	sts	0x03D8, r24	; 0x8003d8 <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    1b58:	0f 90       	pop	r0
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	08 95       	ret

00001b5e <xTimerCreateTimerTask>:
                                    TimerCallbackFunction_t pxCallbackFunction,
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
    1b64:	d3 df       	rcall	.-90     	; 0x1b0c <prvCheckForValidListAndQueue>

    if( xTimerQueue != NULL )
    1b66:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <xTimerQueue>
    1b6a:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <xTimerQueue+0x1>
    1b6e:	89 2b       	or	r24, r25
    1b70:	89 f0       	breq	.+34     	; 0x1b94 <xTimerCreateTimerTask+0x36>
                xReturn = pdPASS;
            }
        }
        #else
        {
            xReturn = xTaskCreate(    prvTimerTask,
    1b72:	0f 2e       	mov	r0, r31
    1b74:	f6 ed       	ldi	r31, 0xD6	; 214
    1b76:	ef 2e       	mov	r14, r31
    1b78:	f3 e0       	ldi	r31, 0x03	; 3
    1b7a:	ff 2e       	mov	r15, r31
    1b7c:	f0 2d       	mov	r31, r0
    1b7e:	03 e0       	ldi	r16, 0x03	; 3
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	45 e5       	ldi	r20, 0x55	; 85
    1b86:	50 e0       	ldi	r21, 0x00	; 0
    1b88:	66 e2       	ldi	r22, 0x26	; 38
    1b8a:	72 e0       	ldi	r23, 0x02	; 2
    1b8c:	83 e0       	ldi	r24, 0x03	; 3
    1b8e:	91 e0       	ldi	r25, 0x01	; 1
    1b90:	99 da       	rcall	.-2766   	; 0x10c4 <xTaskCreate>
    1b92:	01 c0       	rjmp	.+2      	; 0x1b96 <xTimerCreateTimerTask+0x38>
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
    1b94:	80 e0       	ldi	r24, 0x00	; 0
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT( xReturn );
    return xReturn;
}
    1b96:	0f 91       	pop	r16
    1b98:	ff 90       	pop	r15
    1b9a:	ef 90       	pop	r14
    1b9c:	08 95       	ret

00001b9e <xTimerCreate>:
    TimerHandle_t xTimerCreate( const char * const pcTimerName,            /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                const TickType_t xTimerPeriodInTicks,
                                const UBaseType_t uxAutoReload,
                                void * const pvTimerID,
                                TimerCallbackFunction_t pxCallbackFunction )
    {
    1b9e:	8f 92       	push	r8
    1ba0:	9f 92       	push	r9
    1ba2:	af 92       	push	r10
    1ba4:	bf 92       	push	r11
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ff 92       	push	r15
    1bac:	0f 93       	push	r16
    1bae:	1f 93       	push	r17
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	4c 01       	movw	r8, r24
    1bb6:	5b 01       	movw	r10, r22
    1bb8:	f4 2e       	mov	r15, r20
    1bba:	69 01       	movw	r12, r18
    Timer_t *pxNewTimer;

        pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    1bbc:	84 e1       	ldi	r24, 0x14	; 20
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	0e 94 54 02 	call	0x4a8	; 0x4a8 <pvPortMalloc>
    1bc4:	ec 01       	movw	r28, r24

        if( pxNewTimer != NULL )
    1bc6:	89 2b       	or	r24, r25
    1bc8:	99 f0       	breq	.+38     	; 0x1bf0 <xTimerCreate+0x52>
        {
            /* Status is thus far zero as the timer is not created statically
            and has not been started.  The autoreload bit may get set in
            prvInitialiseNewTimer. */
            pxNewTimer->ucStatus = 0x00;
    1bca:	1b 8a       	std	Y+19, r1	; 0x13

    if( pxNewTimer != NULL )
    {
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
    1bcc:	9f df       	rcall	.-194    	; 0x1b0c <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    1bce:	99 82       	std	Y+1, r9	; 0x01
    1bd0:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    1bd2:	bd 86       	std	Y+13, r11	; 0x0d
    1bd4:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    1bd6:	df 86       	std	Y+15, r13	; 0x0f
    1bd8:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    1bda:	19 8b       	std	Y+17, r17	; 0x11
    1bdc:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    1bde:	ce 01       	movw	r24, r28
    1be0:	02 96       	adiw	r24, 0x02	; 2
    1be2:	0e 94 81 02 	call	0x502	; 0x502 <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
    1be6:	ff 20       	and	r15, r15
    1be8:	19 f0       	breq	.+6      	; 0x1bf0 <xTimerCreate+0x52>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    1bea:	8b 89       	ldd	r24, Y+19	; 0x13
    1bec:	84 60       	ori	r24, 0x04	; 4
    1bee:	8b 8b       	std	Y+19, r24	; 0x13
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	df 91       	pop	r29
    1bf4:	cf 91       	pop	r28
    1bf6:	1f 91       	pop	r17
    1bf8:	0f 91       	pop	r16
    1bfa:	ff 90       	pop	r15
    1bfc:	df 90       	pop	r13
    1bfe:	cf 90       	pop	r12
    1c00:	bf 90       	pop	r11
    1c02:	af 90       	pop	r10
    1c04:	9f 90       	pop	r9
    1c06:	8f 90       	pop	r8
    1c08:	08 95       	ret

00001c0a <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	00 d0       	rcall	.+0      	; 0x1c14 <xTimerGenericCommand+0xa>
    1c14:	1f 92       	push	r1
    1c16:	1f 92       	push	r1
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    1c1c:	e0 91 d8 03 	lds	r30, 0x03D8	; 0x8003d8 <xTimerQueue>
    1c20:	f0 91 d9 03 	lds	r31, 0x03D9	; 0x8003d9 <xTimerQueue+0x1>
    1c24:	30 97       	sbiw	r30, 0x00	; 0
    1c26:	61 f1       	breq	.+88     	; 0x1c80 <xTimerGenericCommand+0x76>
    1c28:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    1c2a:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1c2c:	5b 83       	std	Y+3, r21	; 0x03
    1c2e:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    1c30:	9d 83       	std	Y+5, r25	; 0x05
    1c32:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1c34:	66 30       	cpi	r22, 0x06	; 6
    1c36:	e4 f4       	brge	.+56     	; 0x1c70 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1c38:	18 de       	rcall	.-976    	; 0x186a <xTaskGetSchedulerState>
    1c3a:	82 30       	cpi	r24, 0x02	; 2
    1c3c:	61 f4       	brne	.+24     	; 0x1c56 <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	a8 01       	movw	r20, r16
    1c42:	be 01       	movw	r22, r28
    1c44:	6f 5f       	subi	r22, 0xFF	; 255
    1c46:	7f 4f       	sbci	r23, 0xFF	; 255
    1c48:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <xTimerQueue>
    1c4c:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <xTimerQueue+0x1>
    1c50:	0e 94 ae 05 	call	0xb5c	; 0xb5c <xQueueGenericSend>
    1c54:	16 c0       	rjmp	.+44     	; 0x1c82 <xTimerGenericCommand+0x78>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1c56:	20 e0       	ldi	r18, 0x00	; 0
    1c58:	40 e0       	ldi	r20, 0x00	; 0
    1c5a:	50 e0       	ldi	r21, 0x00	; 0
    1c5c:	be 01       	movw	r22, r28
    1c5e:	6f 5f       	subi	r22, 0xFF	; 255
    1c60:	7f 4f       	sbci	r23, 0xFF	; 255
    1c62:	80 91 d8 03 	lds	r24, 0x03D8	; 0x8003d8 <xTimerQueue>
    1c66:	90 91 d9 03 	lds	r25, 0x03D9	; 0x8003d9 <xTimerQueue+0x1>
    1c6a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <xQueueGenericSend>
    1c6e:	09 c0       	rjmp	.+18     	; 0x1c82 <xTimerGenericCommand+0x78>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	ad 01       	movw	r20, r26
    1c74:	be 01       	movw	r22, r28
    1c76:	6f 5f       	subi	r22, 0xFF	; 255
    1c78:	7f 4f       	sbci	r23, 0xFF	; 255
    1c7a:	cf 01       	movw	r24, r30
    1c7c:	19 d8       	rcall	.-4046   	; 0xcb0 <xQueueGenericSendFromISR>
    1c7e:	01 c0       	rjmp	.+2      	; 0x1c82 <xTimerGenericCommand+0x78>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	df 91       	pop	r29
    1c8e:	cf 91       	pop	r28
    1c90:	1f 91       	pop	r17
    1c92:	0f 91       	pop	r16
    1c94:	08 95       	ret

00001c96 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    1c96:	af 92       	push	r10
    1c98:	bf 92       	push	r11
    1c9a:	cf 92       	push	r12
    1c9c:	df 92       	push	r13
    1c9e:	ef 92       	push	r14
    1ca0:	ff 92       	push	r15
    1ca2:	0f 93       	push	r16
    1ca4:	1f 93       	push	r17
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    1cac:	50 db       	rcall	.-2400   	; 0x134e <xTaskGetTickCount>
    1cae:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    1cb0:	80 91 d4 03 	lds	r24, 0x03D4	; 0x8003d4 <xLastTime.2432>
    1cb4:	90 91 d5 03 	lds	r25, 0x03D5	; 0x8003d5 <xLastTime.2432+0x1>
    1cb8:	e8 16       	cp	r14, r24
    1cba:	f9 06       	cpc	r15, r25
    1cbc:	08 f0       	brcs	.+2      	; 0x1cc0 <prvSampleTimeNow+0x2a>
    1cbe:	47 c0       	rjmp	.+142    	; 0x1d4e <prvSampleTimeNow+0xb8>
    1cc0:	2f c0       	rjmp	.+94     	; 0x1d20 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    1cc2:	05 80       	ldd	r0, Z+5	; 0x05
    1cc4:	f6 81       	ldd	r31, Z+6	; 0x06
    1cc6:	e0 2d       	mov	r30, r0
    1cc8:	a0 80       	ld	r10, Z
    1cca:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    1ccc:	c6 81       	ldd	r28, Z+6	; 0x06
    1cce:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    1cd0:	8e 01       	movw	r16, r28
    1cd2:	0e 5f       	subi	r16, 0xFE	; 254
    1cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd6:	c8 01       	movw	r24, r16
    1cd8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    1cdc:	e8 89       	ldd	r30, Y+16	; 0x10
    1cde:	f9 89       	ldd	r31, Y+17	; 0x11
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    1ce4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce6:	82 ff       	sbrs	r24, 2
    1ce8:	1b c0       	rjmp	.+54     	; 0x1d20 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    1cea:	8c 85       	ldd	r24, Y+12	; 0x0c
    1cec:	9d 85       	ldd	r25, Y+13	; 0x0d
    1cee:	8a 0d       	add	r24, r10
    1cf0:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    1cf2:	a8 16       	cp	r10, r24
    1cf4:	b9 06       	cpc	r11, r25
    1cf6:	60 f4       	brcc	.+24     	; 0x1d10 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    1cf8:	9b 83       	std	Y+3, r25	; 0x03
    1cfa:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    1cfc:	d9 87       	std	Y+9, r29	; 0x09
    1cfe:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    1d00:	b8 01       	movw	r22, r16
    1d02:	80 91 dc 03 	lds	r24, 0x03DC	; 0x8003dc <pxCurrentTimerList>
    1d06:	90 91 dd 03 	lds	r25, 0x03DD	; 0x8003dd <pxCurrentTimerList+0x1>
    1d0a:	0e 94 a6 02 	call	0x54c	; 0x54c <vListInsert>
    1d0e:	08 c0       	rjmp	.+16     	; 0x1d20 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    1d10:	00 e0       	ldi	r16, 0x00	; 0
    1d12:	10 e0       	ldi	r17, 0x00	; 0
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	a5 01       	movw	r20, r10
    1d1a:	60 e0       	ldi	r22, 0x00	; 0
    1d1c:	ce 01       	movw	r24, r28
    1d1e:	75 df       	rcall	.-278    	; 0x1c0a <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    1d20:	e0 91 dc 03 	lds	r30, 0x03DC	; 0x8003dc <pxCurrentTimerList>
    1d24:	f0 91 dd 03 	lds	r31, 0x03DD	; 0x8003dd <pxCurrentTimerList+0x1>
    1d28:	80 81       	ld	r24, Z
    1d2a:	81 11       	cpse	r24, r1
    1d2c:	ca cf       	rjmp	.-108    	; 0x1cc2 <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    1d2e:	80 91 da 03 	lds	r24, 0x03DA	; 0x8003da <pxOverflowTimerList>
    1d32:	90 91 db 03 	lds	r25, 0x03DB	; 0x8003db <pxOverflowTimerList+0x1>
    1d36:	90 93 dd 03 	sts	0x03DD, r25	; 0x8003dd <pxCurrentTimerList+0x1>
    1d3a:	80 93 dc 03 	sts	0x03DC, r24	; 0x8003dc <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    1d3e:	f0 93 db 03 	sts	0x03DB, r31	; 0x8003db <pxOverflowTimerList+0x1>
    1d42:	e0 93 da 03 	sts	0x03DA, r30	; 0x8003da <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	f6 01       	movw	r30, r12
    1d4a:	80 83       	st	Z, r24
    1d4c:	02 c0       	rjmp	.+4      	; 0x1d52 <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    1d4e:	f6 01       	movw	r30, r12
    1d50:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    1d52:	f0 92 d5 03 	sts	0x03D5, r15	; 0x8003d5 <xLastTime.2432+0x1>
    1d56:	e0 92 d4 03 	sts	0x03D4, r14	; 0x8003d4 <xLastTime.2432>

    return xTimeNow;
}
    1d5a:	c7 01       	movw	r24, r14
    1d5c:	df 91       	pop	r29
    1d5e:	cf 91       	pop	r28
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	ef 90       	pop	r14
    1d68:	df 90       	pop	r13
    1d6a:	cf 90       	pop	r12
    1d6c:	bf 90       	pop	r11
    1d6e:	af 90       	pop	r10
    1d70:	08 95       	ret

00001d72 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    1d72:	08 95       	ret

00001d74 <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    1d74:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1d76:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d78:	2f ef       	ldi	r18, 0xFF	; 255
    1d7a:	80 e7       	ldi	r24, 0x70	; 112
    1d7c:	92 e0       	ldi	r25, 0x02	; 2
    1d7e:	21 50       	subi	r18, 0x01	; 1
    1d80:	80 40       	sbci	r24, 0x00	; 0
    1d82:	90 40       	sbci	r25, 0x00	; 0
    1d84:	e1 f7       	brne	.-8      	; 0x1d7e <vApplicationMallocFailedHook+0xa>
    1d86:	00 c0       	rjmp	.+0      	; 0x1d88 <vApplicationMallocFailedHook+0x14>
    1d88:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    1d8a:	1f 9a       	sbi	0x03, 7	; 3
    1d8c:	f5 cf       	rjmp	.-22     	; 0x1d78 <vApplicationMallocFailedHook+0x4>

00001d8e <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    1d8e:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    1d90:	2f 9a       	sbi	0x05, 7	; 5
    1d92:	2f ef       	ldi	r18, 0xFF	; 255
    1d94:	87 ea       	ldi	r24, 0xA7	; 167
    1d96:	91 e6       	ldi	r25, 0x61	; 97
    1d98:	21 50       	subi	r18, 0x01	; 1
    1d9a:	80 40       	sbci	r24, 0x00	; 0
    1d9c:	90 40       	sbci	r25, 0x00	; 0
    1d9e:	e1 f7       	brne	.-8      	; 0x1d98 <vApplicationStackOverflowHook+0xa>
    1da0:	00 c0       	rjmp	.+0      	; 0x1da2 <vApplicationStackOverflowHook+0x14>
    1da2:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    1da4:	1f 9a       	sbi	0x03, 7	; 3
    1da6:	f5 cf       	rjmp	.-22     	; 0x1d92 <vApplicationStackOverflowHook+0x4>

00001da8 <main>:
#include "temp_humSensor.h"


int main(void)
{
	DDRA |= _BV(DDA0) | _BV(DDA7);
    1da8:	81 b1       	in	r24, 0x01	; 1
    1daa:	81 68       	ori	r24, 0x81	; 129
    1dac:	81 b9       	out	0x01, r24	; 1
	trace_init();
    1dae:	0e 94 3e 02 	call	0x47c	; 0x47c <trace_init>
	stdioCreate(0);
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	f4 d5       	rcall	.+3048   	; 0x299e <stdioCreate>

	// initialization of resources
	// semaphores
	semaphores_init();
    1db6:	13 d0       	rcall	.+38     	; 0x1dde <semaphores_init>
	// timers
	timers_init();
    1db8:	e5 d0       	rcall	.+458    	; 0x1f84 <timers_init>
	// sensors
	co2_sensor_init();
    1dba:	0e 94 38 02 	call	0x470	; 0x470 <co2_sensor_init>
	temp_hum_sensor_init();
    1dbe:	11 d1       	rcall	.+546    	; 0x1fe2 <temp_hum_sensor_init>
	// lora
	//lora_init();
	
	// tasks
	create_tasks();
    1dc0:	70 d0       	rcall	.+224    	; 0x1ea2 <create_tasks>
    1dc2:	c5 da       	rcall	.-2678   	; 0x134e <xTaskGetTickCount>
	
	// timers start
	xTimerStart(TempHumTimer, 0);
    1dc4:	00 e0       	ldi	r16, 0x00	; 0
    1dc6:	10 e0       	ldi	r17, 0x00	; 0
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	ac 01       	movw	r20, r24
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	80 91 2b 04 	lds	r24, 0x042B	; 0x80042b <TempHumTimer>
    1dd4:	90 91 2c 04 	lds	r25, 0x042C	; 0x80042c <TempHumTimer+0x1>
    1dd8:	18 df       	rcall	.-464    	; 0x1c0a <xTimerGenericCommand>
    1dda:	82 da       	rcall	.-2812   	; 0x12e0 <vTaskStartScheduler>
	//xTimerStart(CO2Timer, 0);
	//xTimerStart(LoRaTimer, 0);
	
	vTaskStartScheduler(); // initialize and run the freeRTOS scheduler. Execution should never return here.
    1ddc:	ff cf       	rjmp	.-2      	; 0x1ddc <main+0x34>

00001dde <semaphores_init>:
    1dde:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <CO2Semaphore>
#include "mySemaphores.h"

void semaphores_init() {
		
	/*do {*/
		if(CO2Semaphore == NULL)
    1de2:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <CO2Semaphore+0x1>
    1de6:	89 2b       	or	r24, r25
    1de8:	39 f4       	brne	.+14     	; 0x1df8 <semaphores_init+0x1a>
			CO2Semaphore = xSemaphoreCreateMutex();
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	0e 94 40 06 	call	0xc80	; 0xc80 <xQueueCreateMutex>
    1df0:	90 93 1c 04 	sts	0x041C, r25	; 0x80041c <CO2Semaphore+0x1>
    1df4:	80 93 1b 04 	sts	0x041B, r24	; 0x80041b <CO2Semaphore>
		if(TempHumSemaphore == NULL)
    1df8:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <TempHumSemaphore>
    1dfc:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <TempHumSemaphore+0x1>
    1e00:	89 2b       	or	r24, r25
    1e02:	39 f4       	brne	.+14     	; 0x1e12 <semaphores_init+0x34>
			TempHumSemaphore = xSemaphoreCreateMutex();
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	0e 94 40 06 	call	0xc80	; 0xc80 <xQueueCreateMutex>
    1e0a:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <TempHumSemaphore+0x1>
    1e0e:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <TempHumSemaphore>
		if(LoRaSemaphore == NULL)
    1e12:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <LoRaSemaphore>
    1e16:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <LoRaSemaphore+0x1>
    1e1a:	89 2b       	or	r24, r25
    1e1c:	39 f4       	brne	.+14     	; 0x1e2c <semaphores_init+0x4e>
			LoRaSemaphore = xSemaphoreCreateMutex();
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	0e 94 40 06 	call	0xc80	; 0xc80 <xQueueCreateMutex>
    1e24:	90 93 2a 04 	sts	0x042A, r25	; 0x80042a <LoRaSemaphore+0x1>
    1e28:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <LoRaSemaphore>
    1e2c:	08 95       	ret

00001e2e <temp_hum_measure_task>:
		//printf("temp task");
		//vTaskDelay(50/portTICK_PERIOD_MS);
		if(xSemaphoreTake(TempHumSemaphore, portMAX_DELAY) == pdTRUE) {
			vTaskDelay(4000/portTICK_PERIOD_MS);
			temp_hum_measure();
			printf("temp value = %i \n", temp_get_value());
    1e2e:	0e e2       	ldi	r16, 0x2E	; 46
    1e30:	12 e0       	ldi	r17, 0x02	; 2
			vTaskDelay(100/portTICK_PERIOD_MS);
			printf("hum value = %d \n", hum_get_value());
    1e32:	c0 e4       	ldi	r28, 0x40	; 64
    1e34:	d2 e0       	ldi	r29, 0x02	; 2
	
	while(1) {
		
		//printf("temp task");
		//vTaskDelay(50/portTICK_PERIOD_MS);
		if(xSemaphoreTake(TempHumSemaphore, portMAX_DELAY) == pdTRUE) {
    1e36:	6f ef       	ldi	r22, 0xFF	; 255
    1e38:	7f ef       	ldi	r23, 0xFF	; 255
    1e3a:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <TempHumSemaphore>
    1e3e:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <TempHumSemaphore+0x1>
    1e42:	0e 94 19 07 	call	0xe32	; 0xe32 <xQueueSemaphoreTake>
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	b1 f7       	brne	.-20     	; 0x1e36 <temp_hum_measure_task+0x8>
			vTaskDelay(4000/portTICK_PERIOD_MS);
    1e4a:	8a ef       	ldi	r24, 0xFA	; 250
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	ba db       	rcall	.-2188   	; 0x15c4 <vTaskDelay>
			temp_hum_measure();
    1e50:	d5 d0       	rcall	.+426    	; 0x1ffc <temp_hum_measure>
			printf("temp value = %i \n", temp_get_value());
    1e52:	28 d1       	rcall	.+592    	; 0x20a4 <temp_get_value>
    1e54:	9f 93       	push	r25
    1e56:	8f 93       	push	r24
    1e58:	1f 93       	push	r17
    1e5a:	0f 93       	push	r16
    1e5c:	0e 94 1a 1a 	call	0x3434	; 0x3434 <printf>
			vTaskDelay(100/portTICK_PERIOD_MS);
    1e60:	86 e0       	ldi	r24, 0x06	; 6
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	af db       	rcall	.-2210   	; 0x15c4 <vTaskDelay>
			printf("hum value = %d \n", hum_get_value());
    1e66:	20 d1       	rcall	.+576    	; 0x20a8 <hum_get_value>
    1e68:	9f 93       	push	r25
    1e6a:	8f 93       	push	r24
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	0e 94 1a 1a 	call	0x3434	; 0x3434 <printf>
			vTaskDelay(100/portTICK_PERIOD_MS);
    1e74:	86 e0       	ldi	r24, 0x06	; 6
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a5 db       	rcall	.-2230   	; 0x15c4 <vTaskDelay>
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
			xSemaphoreGive(TempHumSemaphore);
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	50 e0       	ldi	r21, 0x00	; 0
    1e80:	60 e0       	ldi	r22, 0x00	; 0
    1e82:	70 e0       	ldi	r23, 0x00	; 0
    1e84:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <TempHumSemaphore>
    1e88:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <TempHumSemaphore+0x1>
    1e8c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <xQueueGenericSend>
    1e90:	8d b7       	in	r24, 0x3d	; 61
    1e92:	9e b7       	in	r25, 0x3e	; 62
    1e94:	08 96       	adiw	r24, 0x08	; 8
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	9e bf       	out	0x3e, r25	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	8d bf       	out	0x3d, r24	; 61
    1ea0:	ca cf       	rjmp	.-108    	; 0x1e36 <temp_hum_measure_task+0x8>

00001ea2 <create_tasks>:
    1ea2:	ef 92       	push	r14
#include <timers.h>
#include "temp_humSensor.h"

//int rand_val = 1234;

void create_tasks(void) {
    1ea4:	ff 92       	push	r15
    1ea6:	0f 93       	push	r16
		(void*) 1,
		2,
		&CO2MeasureTask
	);*/	
	
	xTaskCreate(
    1ea8:	0f 2e       	mov	r0, r31
    1eaa:	f1 e2       	ldi	r31, 0x21	; 33
    1eac:	ef 2e       	mov	r14, r31
    1eae:	f4 e0       	ldi	r31, 0x04	; 4
    1eb0:	ff 2e       	mov	r15, r31
    1eb2:	f0 2d       	mov	r31, r0
    1eb4:	02 e0       	ldi	r16, 0x02	; 2
    1eb6:	21 e0       	ldi	r18, 0x01	; 1
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 ec       	ldi	r20, 0xC0	; 192
    1ebc:	50 e0       	ldi	r21, 0x00	; 0
    1ebe:	61 e5       	ldi	r22, 0x51	; 81
    1ec0:	72 e0       	ldi	r23, 0x02	; 2
    1ec2:	87 e1       	ldi	r24, 0x17	; 23
    1ec4:	9f e0       	ldi	r25, 0x0F	; 15
    1ec6:	fe d8       	rcall	.-3588   	; 0x10c4 <xTaskCreate>
		configMINIMAL_STACK_SIZE,
		(void*) 1,
		2,
		&LoRaSendDataTask
	);*/
}
    1ec8:	0f 91       	pop	r16
    1eca:	ff 90       	pop	r15
    1ecc:	ef 90       	pop	r14
    1ece:	08 95       	ret

00001ed0 <co2_timer_callback>:
		lora_timer_callback
	);
}

void co2_timer_callback(TimerHandle_t pxTimer) {
	printf("unblock co2 semaphore");
    1ed0:	8a e7       	ldi	r24, 0x7A	; 122
    1ed2:	92 e0       	ldi	r25, 0x02	; 2
    1ed4:	9f 93       	push	r25
    1ed6:	8f 93       	push	r24
    1ed8:	0e 94 1a 1a 	call	0x3434	; 0x3434 <printf>
	if( xSemaphoreGive( CO2Semaphore ) != pdTRUE )
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	50 e0       	ldi	r21, 0x00	; 0
    1ee2:	60 e0       	ldi	r22, 0x00	; 0
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <CO2Semaphore>
    1eea:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <CO2Semaphore+0x1>
    1eee:	0e 94 ae 05 	call	0xb5c	; 0xb5c <xQueueGenericSend>
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	81 30       	cpi	r24, 0x01	; 1
    1ef8:	41 f0       	breq	.+16     	; 0x1f0a <co2_timer_callback+0x3a>
	{
		// We would expect this call to fail because we cannot give
		// a semaphore without first "taking" it!
		printf("we dont have ");
    1efa:	80 e9       	ldi	r24, 0x90	; 144
    1efc:	92 e0       	ldi	r25, 0x02	; 2
    1efe:	9f 93       	push	r25
    1f00:	8f 93       	push	r24
    1f02:	0e 94 1a 1a 	call	0x3434	; 0x3434 <printf>
    1f06:	0f 90       	pop	r0
    1f08:	0f 90       	pop	r0
    1f0a:	08 95       	ret

00001f0c <temp_hum_timer_callback>:
	//vTaskDelay(4000/portTICK_PERIOD_MS);
	//xSemaphoreTake(CO2Semaphore, portMAX_DELAY);
}

void temp_hum_timer_callback(TimerHandle_t pxTimer){
	printf("unblock temphum semaphore");
    1f0c:	8e e9       	ldi	r24, 0x9E	; 158
    1f0e:	92 e0       	ldi	r25, 0x02	; 2
    1f10:	9f 93       	push	r25
    1f12:	8f 93       	push	r24
    1f14:	0e 94 1a 1a 	call	0x3434	; 0x3434 <printf>
	if( xSemaphoreGive( TempHumSemaphore ) != pdTRUE )
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	50 e0       	ldi	r21, 0x00	; 0
    1f1e:	60 e0       	ldi	r22, 0x00	; 0
    1f20:	70 e0       	ldi	r23, 0x00	; 0
    1f22:	80 91 27 04 	lds	r24, 0x0427	; 0x800427 <TempHumSemaphore>
    1f26:	90 91 28 04 	lds	r25, 0x0428	; 0x800428 <TempHumSemaphore+0x1>
    1f2a:	0e 94 ae 05 	call	0xb5c	; 0xb5c <xQueueGenericSend>
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	81 30       	cpi	r24, 0x01	; 1
    1f34:	41 f0       	breq	.+16     	; 0x1f46 <temp_hum_timer_callback+0x3a>
	{
		// We would expect this call to fail because we cannot give
		// a semaphore without first "taking" it!
		printf("we dont have ");
    1f36:	80 e9       	ldi	r24, 0x90	; 144
    1f38:	92 e0       	ldi	r25, 0x02	; 2
    1f3a:	9f 93       	push	r25
    1f3c:	8f 93       	push	r24
    1f3e:	0e 94 1a 1a 	call	0x3434	; 0x3434 <printf>
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	08 95       	ret

00001f48 <lora_timer_callback>:
	//vTaskDelay(6000/portTICK_PERIOD_MS);
	//xSemaphoreTake(TempHumSemaphore, portMAX_DELAY);
}

void lora_timer_callback(TimerHandle_t pxTimer) {
	printf("unblock lora semaphore ");
    1f48:	88 eb       	ldi	r24, 0xB8	; 184
    1f4a:	92 e0       	ldi	r25, 0x02	; 2
    1f4c:	9f 93       	push	r25
    1f4e:	8f 93       	push	r24
    1f50:	0e 94 1a 1a 	call	0x3434	; 0x3434 <printf>
	if( xSemaphoreGive( LoRaSemaphore ) != pdTRUE )
    1f54:	20 e0       	ldi	r18, 0x00	; 0
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <LoRaSemaphore>
    1f62:	90 91 2a 04 	lds	r25, 0x042A	; 0x80042a <LoRaSemaphore+0x1>
    1f66:	0e 94 ae 05 	call	0xb5c	; 0xb5c <xQueueGenericSend>
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	81 30       	cpi	r24, 0x01	; 1
    1f70:	41 f0       	breq	.+16     	; 0x1f82 <lora_timer_callback+0x3a>
	{
		// We would expect this call to fail because we cannot give
		// a semaphore without first "taking" it!
		printf("we dont have ");
    1f72:	80 e9       	ldi	r24, 0x90	; 144
    1f74:	92 e0       	ldi	r25, 0x02	; 2
    1f76:	9f 93       	push	r25
    1f78:	8f 93       	push	r24
    1f7a:	0e 94 1a 1a 	call	0x3434	; 0x3434 <printf>
    1f7e:	0f 90       	pop	r0
    1f80:	0f 90       	pop	r0
    1f82:	08 95       	ret

00001f84 <timers_init>:
#include "myTimers.h"
#include "mySemaphores.h"

void timers_init() {
    1f84:	0f 93       	push	r16
    1f86:	1f 93       	push	r17
	
	CO2Timer = xTimerCreate(
    1f88:	08 e6       	ldi	r16, 0x68	; 104
    1f8a:	1f e0       	ldi	r17, 0x0F	; 15
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	41 e0       	ldi	r20, 0x01	; 1
    1f92:	6d e7       	ldi	r22, 0x7D	; 125
    1f94:	70 e0       	ldi	r23, 0x00	; 0
    1f96:	80 ed       	ldi	r24, 0xD0	; 208
    1f98:	92 e0       	ldi	r25, 0x02	; 2
    1f9a:	01 de       	rcall	.-1022   	; 0x1b9e <xTimerCreate>
    1f9c:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <CO2Timer+0x1>
    1fa0:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <CO2Timer>
		pdTRUE,
		(void*) 0,
		co2_timer_callback
	);
	
	TempHumTimer = xTimerCreate(
    1fa4:	06 e8       	ldi	r16, 0x86	; 134
    1fa6:	1f e0       	ldi	r17, 0x0F	; 15
    1fa8:	21 e0       	ldi	r18, 0x01	; 1
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	6b eb       	ldi	r22, 0xBB	; 187
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	8a ed       	ldi	r24, 0xDA	; 218
    1fb4:	92 e0       	ldi	r25, 0x02	; 2
    1fb6:	f3 dd       	rcall	.-1050   	; 0x1b9e <xTimerCreate>
    1fb8:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <TempHumTimer+0x1>
    1fbc:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <TempHumTimer>
		pdTRUE,
		(void*) 1,
		temp_hum_timer_callback
	);
	
	LoRaTimer = xTimerCreate(
    1fc0:	04 ea       	ldi	r16, 0xA4	; 164
    1fc2:	1f e0       	ldi	r17, 0x0F	; 15
    1fc4:	22 e0       	ldi	r18, 0x02	; 2
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	41 e0       	ldi	r20, 0x01	; 1
    1fca:	6b eb       	ldi	r22, 0xBB	; 187
    1fcc:	70 e0       	ldi	r23, 0x00	; 0
    1fce:	89 ee       	ldi	r24, 0xE9	; 233
    1fd0:	92 e0       	ldi	r25, 0x02	; 2
    1fd2:	e5 dd       	rcall	.-1078   	; 0x1b9e <xTimerCreate>
    1fd4:	90 93 20 04 	sts	0x0420, r25	; 0x800420 <LoRaTimer+0x1>
    1fd8:	80 93 1f 04 	sts	0x041F, r24	; 0x80041f <LoRaTimer>
		(3000/portTICK_PERIOD_MS),
		pdTRUE,
		(void*) 2,
		lora_timer_callback
	);
}
    1fdc:	1f 91       	pop	r17
    1fde:	0f 91       	pop	r16
    1fe0:	08 95       	ret

00001fe2 <temp_hum_sensor_init>:

// create drivers
void temp_hum_sensor_init() 
{	

	if ( HIH8120_OK == ( temp_rc = hih8120Create()) )
    1fe2:	91 d0       	rcall	.+290    	; 0x2106 <hih8120Create>
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <temp_rc+0x1>
    1fea:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <temp_rc>
    1fee:	89 2b       	or	r24, r25
    1ff0:	21 f4       	brne	.+8      	; 0x1ffa <temp_hum_sensor_init+0x18>
	{
		printf("temp_hum_sensor_created \n");
    1ff2:	84 ef       	ldi	r24, 0xF4	; 244
    1ff4:	92 e0       	ldi	r25, 0x02	; 2
    1ff6:	0c 94 2d 1a 	jmp	0x345a	; 0x345a <puts>
    1ffa:	08 95       	ret

00001ffc <temp_hum_measure>:
	}
}

// measuring function
void temp_hum_measure() {
    1ffc:	cf 93       	push	r28

	/*while(!hih8120IsReady()){
		printf("not ready");
		vTaskDelay(1000/portTICK_PERIOD_MS);
	}*/
	printf("temp sensor -> %d", temp_rc);
    1ffe:	80 91 f1 03 	lds	r24, 0x03F1	; 0x8003f1 <temp_rc+0x1>
    2002:	8f 93       	push	r24
    2004:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <temp_rc>
    2008:	8f 93       	push	r24
    200a:	8d e0       	ldi	r24, 0x0D	; 13
    200c:	93 e0       	ldi	r25, 0x03	; 3
    200e:	9f 93       	push	r25
    2010:	8f 93       	push	r24
    2012:	0e 94 1a 1a 	call	0x3434	; 0x3434 <printf>
	vTaskDelay(1000/portTICK_PERIOD_MS);
    2016:	8e e3       	ldi	r24, 0x3E	; 62
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	d4 da       	rcall	.-2648   	; 0x15c4 <vTaskDelay>
	if ( HIH8120_OK != ( rc = hih8120Wakeup() ))
    201c:	8b d0       	rcall	.+278    	; 0x2134 <hih8120Wakeup>
    201e:	c8 2f       	mov	r28, r24
    2020:	0f 90       	pop	r0
    2022:	0f 90       	pop	r0
    2024:	0f 90       	pop	r0
    2026:	0f 90       	pop	r0
    2028:	88 23       	and	r24, r24
    202a:	61 f0       	breq	.+24     	; 0x2044 <temp_hum_measure+0x48>
    202c:	1f 92       	push	r1
	{
		printf("temp_hum_SENSOR_ERROR --> %d", rc);
    202e:	8f 93       	push	r24
    2030:	8f e1       	ldi	r24, 0x1F	; 31
    2032:	93 e0       	ldi	r25, 0x03	; 3
    2034:	9f 93       	push	r25
    2036:	8f 93       	push	r24
    2038:	0e 94 1a 1a 	call	0x3434	; 0x3434 <printf>
    203c:	0f 90       	pop	r0
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	1f 92       	push	r1
	}
	printf("temp_hum_rc --> %d", rc);
    2046:	cf 93       	push	r28
    2048:	8c e3       	ldi	r24, 0x3C	; 60
    204a:	93 e0       	ldi	r25, 0x03	; 3
    204c:	9f 93       	push	r25
    204e:	8f 93       	push	r24
    2050:	0e 94 1a 1a 	call	0x3434	; 0x3434 <printf>
    2054:	83 e0       	ldi	r24, 0x03	; 3
	vTaskDelay(50/portTICK_PERIOD_MS);
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	b5 da       	rcall	.-2710   	; 0x15c4 <vTaskDelay>
	if ( HIH8120_OK != ( rc = hih8120Meassure()) )
    205a:	80 d0       	rcall	.+256    	; 0x215c <hih8120Meassure>
    205c:	c8 2f       	mov	r28, r24
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	88 23       	and	r24, r24
    2068:	61 f0       	breq	.+24     	; 0x2082 <temp_hum_measure+0x86>
    206a:	1f 92       	push	r1
	{
		printf("temp_hum_SENSOR_ERROR1 --> %d", rc);
    206c:	8f 93       	push	r24
    206e:	8f e4       	ldi	r24, 0x4F	; 79
    2070:	93 e0       	ldi	r25, 0x03	; 3
    2072:	9f 93       	push	r25
    2074:	8f 93       	push	r24
    2076:	0e 94 1a 1a 	call	0x3434	; 0x3434 <printf>
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	1f 92       	push	r1
	}
	printf("temp_hum_rc --> %d", rc);
    2084:	cf 93       	push	r28
    2086:	8c e3       	ldi	r24, 0x3C	; 60
    2088:	93 e0       	ldi	r25, 0x03	; 3
    208a:	9f 93       	push	r25
    208c:	8f 93       	push	r24
    208e:	0e 94 1a 1a 	call	0x3434	; 0x3434 <printf>
	vTaskDelay(1000/portTICK_PERIOD_MS);
    2092:	8e e3       	ldi	r24, 0x3E	; 62
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	96 da       	rcall	.-2772   	; 0x15c4 <vTaskDelay>
    2098:	0f 90       	pop	r0
		
}
    209a:	0f 90       	pop	r0
    209c:	0f 90       	pop	r0
    209e:	0f 90       	pop	r0
    20a0:	cf 91       	pop	r28
    20a2:	08 95       	ret

000020a4 <temp_get_value>:
    20a4:	9d c0       	rjmp	.+314    	; 0x21e0 <hih8120GetTemperature_x10>



uint16_t temp_get_value() {
	return hih8120GetTemperature_x10();
}
    20a6:	08 95       	ret

000020a8 <hum_get_value>:

uint16_t hum_get_value() {
	return hih8120GetHumidityPercent_x10();
    20a8:	7b c0       	rjmp	.+246    	; 0x21a0 <hih8120GetHumidityPercent_x10>
}
    20aa:	08 95       	ret

000020ac <_hihTwiCallback>:
    20ac:	65 30       	cpi	r22, 0x05	; 5
    20ae:	f1 f4       	brne	.+60     	; 0x20ec <_hihTwiCallback+0x40>
    20b0:	fa 01       	movw	r30, r20
    20b2:	80 81       	ld	r24, Z
    20b4:	8f 73       	andi	r24, 0x3F	; 63
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	98 2f       	mov	r25, r24
    20ba:	88 27       	eor	r24, r24
    20bc:	21 81       	ldd	r18, Z+1	; 0x01
    20be:	82 2b       	or	r24, r18
    20c0:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    20c4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    20c8:	82 81       	ldd	r24, Z+2	; 0x02
    20ca:	f0 e4       	ldi	r31, 0x40	; 64
    20cc:	8f 9f       	mul	r24, r31
    20ce:	c0 01       	movw	r24, r0
    20d0:	11 24       	eor	r1, r1
    20d2:	fa 01       	movw	r30, r20
    20d4:	23 81       	ldd	r18, Z+3	; 0x03
    20d6:	26 95       	lsr	r18
    20d8:	26 95       	lsr	r18
    20da:	82 2b       	or	r24, r18
    20dc:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    20e0:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <_measuringIsReady>
    20ea:	08 95       	ret
    20ec:	64 30       	cpi	r22, 0x04	; 4
    20ee:	51 f0       	breq	.+20     	; 0x2104 <_hihTwiCallback+0x58>
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	90 e4       	ldi	r25, 0x40	; 64
    20f4:	90 93 07 02 	sts	0x0207, r25	; 0x800207 <_temp+0x1>
    20f8:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <_temp>
    20fc:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <_hum+0x1>
    2100:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <_hum>
    2104:	08 95       	ret

00002106 <hih8120Create>:
    2106:	0f 93       	push	r16
    2108:	1f 93       	push	r17
    210a:	06 e5       	ldi	r16, 0x56	; 86
    210c:	10 e1       	ldi	r17, 0x10	; 16
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	34 e2       	ldi	r19, 0x24	; 36
    2112:	44 ef       	ldi	r20, 0xF4	; 244
    2114:	50 e0       	ldi	r21, 0x00	; 0
    2116:	60 e0       	ldi	r22, 0x00	; 0
    2118:	87 e2       	ldi	r24, 0x27	; 39
    211a:	7b d4       	rcall	.+2294   	; 0x2a12 <twiCreate>
    211c:	90 93 f4 03 	sts	0x03F4, r25	; 0x8003f4 <_hih8120Handler+0x1>
    2120:	80 93 f3 03 	sts	0x03F3, r24	; 0x8003f3 <_hih8120Handler>
    2124:	21 e0       	ldi	r18, 0x01	; 1
    2126:	89 2b       	or	r24, r25
    2128:	09 f0       	breq	.+2      	; 0x212c <hih8120Create+0x26>
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	82 2f       	mov	r24, r18
    212e:	1f 91       	pop	r17
    2130:	0f 91       	pop	r16
    2132:	08 95       	ret

00002134 <hih8120Wakeup>:
    2134:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <_hih8120Handler>
    2138:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <_hih8120Handler+0x1>
    213c:	00 97       	sbiw	r24, 0x00	; 0
    213e:	51 f0       	breq	.+20     	; 0x2154 <hih8120Wakeup+0x20>
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	60 e0       	ldi	r22, 0x00	; 0
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	b6 d4       	rcall	.+2412   	; 0x2ab4 <twiTransmit>
    2148:	84 30       	cpi	r24, 0x04	; 4
    214a:	31 f4       	brne	.+12     	; 0x2158 <hih8120Wakeup+0x24>
    214c:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <_measuringIsReady>
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	08 95       	ret
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	08 95       	ret
    2158:	83 e0       	ldi	r24, 0x03	; 3
    215a:	08 95       	ret

0000215c <hih8120Meassure>:
    215c:	80 91 f3 03 	lds	r24, 0x03F3	; 0x8003f3 <_hih8120Handler>
    2160:	90 91 f4 03 	lds	r25, 0x03F4	; 0x8003f4 <_hih8120Handler+0x1>
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	31 f0       	breq	.+12     	; 0x2174 <hih8120Meassure+0x18>
    2168:	64 e0       	ldi	r22, 0x04	; 4
    216a:	f0 d4       	rcall	.+2528   	; 0x2b4c <twiReceive>
    216c:	85 30       	cpi	r24, 0x05	; 5
    216e:	21 f0       	breq	.+8      	; 0x2178 <hih8120Meassure+0x1c>
    2170:	83 e0       	ldi	r24, 0x03	; 3
    2172:	08 95       	ret
    2174:	82 e0       	ldi	r24, 0x02	; 2
    2176:	08 95       	ret
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	08 95       	ret

0000217c <hih8120GetHumidity>:
    217c:	60 91 08 02 	lds	r22, 0x0208	; 0x800208 <_hum>
    2180:	70 91 09 02 	lds	r23, 0x0209	; 0x800209 <_hum+0x1>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	eb d6       	rcall	.+3542   	; 0x2f60 <__floatunsisf>
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	48 ec       	ldi	r20, 0xC8	; 200
    2190:	52 e4       	ldi	r21, 0x42	; 66
    2192:	74 d7       	rcall	.+3816   	; 0x307c <__mulsf3>
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	38 ef       	ldi	r19, 0xF8	; 248
    2198:	4f e7       	ldi	r20, 0x7F	; 127
    219a:	56 e4       	ldi	r21, 0x46	; 70
    219c:	48 c6       	rjmp	.+3216   	; 0x2e2e <__divsf3>
    219e:	08 95       	ret

000021a0 <hih8120GetHumidityPercent_x10>:
    21a0:	ed df       	rcall	.-38     	; 0x217c <hih8120GetHumidity>
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e2       	ldi	r20, 0x20	; 32
    21a8:	51 e4       	ldi	r21, 0x41	; 65
    21aa:	68 d7       	rcall	.+3792   	; 0x307c <__mulsf3>
    21ac:	ad d6       	rcall	.+3418   	; 0x2f08 <__fixunssfsi>
    21ae:	cb 01       	movw	r24, r22
    21b0:	08 95       	ret

000021b2 <hih8120GetTemperature>:
    21b2:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <_temp>
    21b6:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <_temp+0x1>
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	d0 d6       	rcall	.+3488   	; 0x2f60 <__floatunsisf>
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	45 e2       	ldi	r20, 0x25	; 37
    21c6:	53 e4       	ldi	r21, 0x43	; 67
    21c8:	59 d7       	rcall	.+3762   	; 0x307c <__mulsf3>
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	38 ef       	ldi	r19, 0xF8	; 248
    21ce:	4f e7       	ldi	r20, 0x7F	; 127
    21d0:	56 e4       	ldi	r21, 0x46	; 70
    21d2:	2d d6       	rcall	.+3162   	; 0x2e2e <__divsf3>
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e2       	ldi	r20, 0x20	; 32
    21da:	52 e4       	ldi	r21, 0x42	; 66
    21dc:	c3 c5       	rjmp	.+2950   	; 0x2d64 <__subsf3>
    21de:	08 95       	ret

000021e0 <hih8120GetTemperature_x10>:
    21e0:	e8 df       	rcall	.-48     	; 0x21b2 <hih8120GetTemperature>
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e2       	ldi	r20, 0x20	; 32
    21e8:	51 e4       	ldi	r21, 0x41	; 65
    21ea:	48 d7       	rcall	.+3728   	; 0x307c <__mulsf3>
    21ec:	88 d6       	rcall	.+3344   	; 0x2efe <__fixsfsi>
    21ee:	cb 01       	movw	r24, r22
    21f0:	08 95       	ret

000021f2 <_serial_call_back>:
    21f2:	80 91 f8 03 	lds	r24, 0x03F8	; 0x8003f8 <crc_sum.1941>
    21f6:	86 0f       	add	r24, r22
    21f8:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <crc_sum.1941>
    21fc:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <_mh_state>
    2200:	91 30       	cpi	r25, 0x01	; 1
    2202:	79 f0       	breq	.+30     	; 0x2222 <__stack+0x23>
    2204:	28 f0       	brcs	.+10     	; 0x2210 <__stack+0x11>
    2206:	92 30       	cpi	r25, 0x02	; 2
    2208:	a9 f0       	breq	.+42     	; 0x2234 <__stack+0x35>
    220a:	93 30       	cpi	r25, 0x03	; 3
    220c:	19 f1       	breq	.+70     	; 0x2254 <__stack+0x55>
    220e:	08 95       	ret
    2210:	6f 3f       	cpi	r22, 0xFF	; 255
    2212:	09 f0       	breq	.+2      	; 0x2216 <__stack+0x17>
    2214:	48 c0       	rjmp	.+144    	; 0x22a6 <__stack+0xa7>
    2216:	10 92 f8 03 	sts	0x03F8, r1	; 0x8003f8 <crc_sum.1941>
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <_mh_state>
    2220:	08 95       	ret
    2222:	66 38       	cpi	r22, 0x86	; 134
    2224:	09 f0       	breq	.+2      	; 0x2228 <__stack+0x29>
    2226:	3f c0       	rjmp	.+126    	; 0x22a6 <__stack+0xa7>
    2228:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <inDex.1939>
    222c:	82 e0       	ldi	r24, 0x02	; 2
    222e:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <_mh_state>
    2232:	08 95       	ret
    2234:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <inDex.1939>
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	8e 0f       	add	r24, r30
    223c:	80 93 f7 03 	sts	0x03F7, r24	; 0x8003f7 <inDex.1939>
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	eb 50       	subi	r30, 0x0B	; 11
    2244:	fc 4f       	sbci	r31, 0xFC	; 252
    2246:	60 83       	st	Z, r22
    2248:	82 30       	cpi	r24, 0x02	; 2
    224a:	69 f5       	brne	.+90     	; 0x22a6 <__stack+0xa7>
    224c:	83 e0       	ldi	r24, 0x03	; 3
    224e:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <_mh_state>
    2252:	08 95       	ret
    2254:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <inDex.1939>
    2258:	21 e0       	ldi	r18, 0x01	; 1
    225a:	29 0f       	add	r18, r25
    225c:	20 93 f7 03 	sts	0x03F7, r18	; 0x8003f7 <inDex.1939>
    2260:	96 30       	cpi	r25, 0x06	; 6
    2262:	09 f5       	brne	.+66     	; 0x22a6 <__stack+0xa7>
    2264:	81 11       	cpse	r24, r1
    2266:	0e c0       	rjmp	.+28     	; 0x2284 <__stack+0x85>
    2268:	e5 ef       	ldi	r30, 0xF5	; 245
    226a:	f3 e0       	ldi	r31, 0x03	; 3
    226c:	80 81       	ld	r24, Z
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	98 2f       	mov	r25, r24
    2272:	88 27       	eor	r24, r24
    2274:	21 81       	ldd	r18, Z+1	; 0x01
    2276:	82 0f       	add	r24, r18
    2278:	91 1d       	adc	r25, r1
    227a:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <_ppm+0x1>
    227e:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <_ppm>
    2282:	04 c0       	rjmp	.+8      	; 0x228c <__stack+0x8d>
    2284:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <_ppm+0x1>
    2288:	10 92 fc 03 	sts	0x03FC, r1	; 0x8003fc <_ppm>
    228c:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <_mh_state>
    2290:	e0 91 f9 03 	lds	r30, 0x03F9	; 0x8003f9 <_app_call_back>
    2294:	f0 91 fa 03 	lds	r31, 0x03FA	; 0x8003fa <_app_call_back+0x1>
    2298:	30 97       	sbiw	r30, 0x00	; 0
    229a:	29 f0       	breq	.+10     	; 0x22a6 <__stack+0xa7>
    229c:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <_ppm>
    22a0:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <_ppm+0x1>
    22a4:	19 95       	eicall
    22a6:	08 95       	ret

000022a8 <mh_z19_create>:
    22a8:	8f 92       	push	r8
    22aa:	9f 92       	push	r9
    22ac:	af 92       	push	r10
    22ae:	cf 92       	push	r12
    22b0:	ef 92       	push	r14
    22b2:	0f 93       	push	r16
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	eb 01       	movw	r28, r22
    22ba:	0f 2e       	mov	r0, r31
    22bc:	f9 ef       	ldi	r31, 0xF9	; 249
    22be:	8f 2e       	mov	r8, r31
    22c0:	f0 e1       	ldi	r31, 0x10	; 16
    22c2:	9f 2e       	mov	r9, r31
    22c4:	f0 2d       	mov	r31, r0
    22c6:	68 94       	set
    22c8:	aa 24       	eor	r10, r10
    22ca:	a4 f8       	bld	r10, 4
    22cc:	68 94       	set
    22ce:	cc 24       	eor	r12, r12
    22d0:	c4 f8       	bld	r12, 4
    22d2:	e1 2c       	mov	r14, r1
    22d4:	00 e0       	ldi	r16, 0x00	; 0
    22d6:	23 e0       	ldi	r18, 0x03	; 3
    22d8:	40 e8       	ldi	r20, 0x80	; 128
    22da:	55 e2       	ldi	r21, 0x25	; 37
    22dc:	60 e0       	ldi	r22, 0x00	; 0
    22de:	70 e0       	ldi	r23, 0x00	; 0
    22e0:	11 d0       	rcall	.+34     	; 0x2304 <serial_new_instance>
    22e2:	90 93 ff 03 	sts	0x03FF, r25	; 0x8003ff <_serial+0x1>
    22e6:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <_serial>
    22ea:	d0 93 fa 03 	sts	0x03FA, r29	; 0x8003fa <_app_call_back+0x1>
    22ee:	c0 93 f9 03 	sts	0x03F9, r28	; 0x8003f9 <_app_call_back>
    22f2:	df 91       	pop	r29
    22f4:	cf 91       	pop	r28
    22f6:	0f 91       	pop	r16
    22f8:	ef 90       	pop	r14
    22fa:	cf 90       	pop	r12
    22fc:	af 90       	pop	r10
    22fe:	9f 90       	pop	r9
    2300:	8f 90       	pop	r8
    2302:	08 95       	ret

00002304 <serial_new_instance>:
    2304:	2f 92       	push	r2
    2306:	3f 92       	push	r3
    2308:	4f 92       	push	r4
    230a:	5f 92       	push	r5
    230c:	6f 92       	push	r6
    230e:	7f 92       	push	r7
    2310:	8f 92       	push	r8
    2312:	9f 92       	push	r9
    2314:	af 92       	push	r10
    2316:	cf 92       	push	r12
    2318:	ef 92       	push	r14
    231a:	ff 92       	push	r15
    231c:	0f 93       	push	r16
    231e:	1f 93       	push	r17
    2320:	cf 93       	push	r28
    2322:	df 93       	push	r29
    2324:	cd b7       	in	r28, 0x3d	; 61
    2326:	de b7       	in	r29, 0x3e	; 62
    2328:	f8 2e       	mov	r15, r24
    232a:	2a 01       	movw	r4, r20
    232c:	3b 01       	movw	r6, r22
    232e:	88 e0       	ldi	r24, 0x08	; 8
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	4b d7       	rcall	.+3734   	; 0x31ca <malloc>
    2334:	8c 01       	movw	r16, r24
    2336:	8f 2d       	mov	r24, r15
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	fc 01       	movw	r30, r24
    2340:	e0 50       	subi	r30, 0x00	; 0
    2342:	fc 4f       	sbci	r31, 0xFC	; 252
    2344:	11 83       	std	Z+1, r17	; 0x01
    2346:	00 83       	st	Z, r16
    2348:	fc 01       	movw	r30, r24
    234a:	e6 5f       	subi	r30, 0xF6	; 246
    234c:	fd 4f       	sbci	r31, 0xFD	; 253
    234e:	80 81       	ld	r24, Z
    2350:	91 81       	ldd	r25, Z+1	; 0x01
    2352:	d8 01       	movw	r26, r16
    2354:	8d 93       	st	X+, r24
    2356:	9c 93       	st	X, r25
    2358:	6c 2d       	mov	r22, r12
    235a:	70 e0       	ldi	r23, 0x00	; 0
    235c:	84 e0       	ldi	r24, 0x04	; 4
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	1a d7       	rcall	.+3636   	; 0x3196 <calloc>
    2362:	1c 01       	movw	r2, r24
    2364:	61 e0       	ldi	r22, 0x01	; 1
    2366:	70 e0       	ldi	r23, 0x00	; 0
    2368:	86 e0       	ldi	r24, 0x06	; 6
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	14 d7       	rcall	.+3624   	; 0x3196 <calloc>
    236e:	7c 01       	movw	r14, r24
    2370:	4c 2d       	mov	r20, r12
    2372:	b1 01       	movw	r22, r2
    2374:	db d4       	rcall	.+2486   	; 0x2d2c <fifo_init>
    2376:	f8 01       	movw	r30, r16
    2378:	f5 82       	std	Z+5, r15	; 0x05
    237a:	e4 82       	std	Z+4, r14	; 0x04
    237c:	6a 2d       	mov	r22, r10
    237e:	70 e0       	ldi	r23, 0x00	; 0
    2380:	84 e0       	ldi	r24, 0x04	; 4
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	08 d7       	rcall	.+3600   	; 0x3196 <calloc>
    2386:	1c 01       	movw	r2, r24
    2388:	61 e0       	ldi	r22, 0x01	; 1
    238a:	70 e0       	ldi	r23, 0x00	; 0
    238c:	86 e0       	ldi	r24, 0x06	; 6
    238e:	90 e0       	ldi	r25, 0x00	; 0
    2390:	02 d7       	rcall	.+3588   	; 0x3196 <calloc>
    2392:	7c 01       	movw	r14, r24
    2394:	4a 2d       	mov	r20, r10
    2396:	b1 01       	movw	r22, r2
    2398:	c9 d4       	rcall	.+2450   	; 0x2d2c <fifo_init>
    239a:	d8 01       	movw	r26, r16
    239c:	13 96       	adiw	r26, 0x03	; 3
    239e:	fc 92       	st	X, r15
    23a0:	ee 92       	st	-X, r14
    23a2:	12 97       	sbiw	r26, 0x02	; 2
    23a4:	17 96       	adiw	r26, 0x07	; 7
    23a6:	9c 92       	st	X, r9
    23a8:	8e 92       	st	-X, r8
    23aa:	16 97       	sbiw	r26, 0x06	; 6
    23ac:	ff b6       	in	r15, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	ed 91       	ld	r30, X+
    23b2:	fc 91       	ld	r31, X
    23b4:	11 97       	sbiw	r26, 0x01	; 1
    23b6:	36 97       	sbiw	r30, 0x06	; 6
    23b8:	80 81       	ld	r24, Z
    23ba:	82 60       	ori	r24, 0x02	; 2
    23bc:	80 83       	st	Z, r24
    23be:	8d 90       	ld	r8, X+
    23c0:	9c 90       	ld	r9, X
    23c2:	c3 01       	movw	r24, r6
    23c4:	b2 01       	movw	r22, r4
    23c6:	cc d5       	rcall	.+2968   	; 0x2f60 <__floatunsisf>
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e0       	ldi	r20, 0x00	; 0
    23ce:	51 e4       	ldi	r21, 0x41	; 65
    23d0:	55 d6       	rcall	.+3242   	; 0x307c <__mulsf3>
    23d2:	9b 01       	movw	r18, r22
    23d4:	ac 01       	movw	r20, r24
    23d6:	60 e0       	ldi	r22, 0x00	; 0
    23d8:	74 e2       	ldi	r23, 0x24	; 36
    23da:	84 e7       	ldi	r24, 0x74	; 116
    23dc:	9b e4       	ldi	r25, 0x4B	; 75
    23de:	27 d5       	rcall	.+2638   	; 0x2e2e <__divsf3>
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e8       	ldi	r20, 0x80	; 128
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	bd d4       	rcall	.+2426   	; 0x2d64 <__subsf3>
    23ea:	8e d5       	rcall	.+2844   	; 0x2f08 <__fixunssfsi>
    23ec:	f4 01       	movw	r30, r8
    23ee:	32 97       	sbiw	r30, 0x02	; 2
    23f0:	60 83       	st	Z, r22
    23f2:	d8 01       	movw	r26, r16
    23f4:	ed 91       	ld	r30, X+
    23f6:	fc 91       	ld	r31, X
    23f8:	11 97       	sbiw	r26, 0x01	; 1
    23fa:	35 97       	sbiw	r30, 0x05	; 5
    23fc:	88 e9       	ldi	r24, 0x98	; 152
    23fe:	80 83       	st	Z, r24
    2400:	ed 91       	ld	r30, X+
    2402:	fc 91       	ld	r31, X
    2404:	34 97       	sbiw	r30, 0x04	; 4
    2406:	86 e0       	ldi	r24, 0x06	; 6
    2408:	80 83       	st	Z, r24
    240a:	ff be       	out	0x3f, r15	; 63
    240c:	c8 01       	movw	r24, r16
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	ff 90       	pop	r15
    2418:	ef 90       	pop	r14
    241a:	cf 90       	pop	r12
    241c:	af 90       	pop	r10
    241e:	9f 90       	pop	r9
    2420:	8f 90       	pop	r8
    2422:	7f 90       	pop	r7
    2424:	6f 90       	pop	r6
    2426:	5f 90       	pop	r5
    2428:	4f 90       	pop	r4
    242a:	3f 90       	pop	r3
    242c:	2f 90       	pop	r2
    242e:	08 95       	ret

00002430 <serial_send_byte>:
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	ec 01       	movw	r28, r24
    2436:	ea 81       	ldd	r30, Y+2	; 0x02
    2438:	fb 81       	ldd	r31, Y+3	; 0x03
    243a:	93 81       	ldd	r25, Z+3	; 0x03
    243c:	82 81       	ldd	r24, Z+2	; 0x02
    243e:	25 81       	ldd	r18, Z+5	; 0x05
    2440:	98 1b       	sub	r25, r24
    2442:	92 23       	and	r25, r18
    2444:	84 81       	ldd	r24, Z+4	; 0x04
    2446:	98 17       	cp	r25, r24
    2448:	a1 f0       	breq	.+40     	; 0x2472 <serial_send_byte+0x42>
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	26 95       	lsr	r18
    244e:	29 23       	and	r18, r25
    2450:	a0 81       	ld	r26, Z
    2452:	b1 81       	ldd	r27, Z+1	; 0x01
    2454:	a2 0f       	add	r26, r18
    2456:	b1 1d       	adc	r27, r1
    2458:	6c 93       	st	X, r22
    245a:	9f 5f       	subi	r25, 0xFF	; 255
    245c:	25 81       	ldd	r18, Z+5	; 0x05
    245e:	92 23       	and	r25, r18
    2460:	93 83       	std	Z+3, r25	; 0x03
    2462:	e8 81       	ld	r30, Y
    2464:	f9 81       	ldd	r31, Y+1	; 0x01
    2466:	35 97       	sbiw	r30, 0x05	; 5
    2468:	80 81       	ld	r24, Z
    246a:	80 62       	ori	r24, 0x20	; 32
    246c:	80 83       	st	Z, r24
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <serial_send_byte+0x44>
    2472:	82 e0       	ldi	r24, 0x02	; 2
    2474:	df 91       	pop	r29
    2476:	cf 91       	pop	r28
    2478:	08 95       	ret

0000247a <serial_get_byte>:
    247a:	dc 01       	movw	r26, r24
    247c:	14 96       	adiw	r26, 0x04	; 4
    247e:	ed 91       	ld	r30, X+
    2480:	fc 91       	ld	r31, X
    2482:	15 97       	sbiw	r26, 0x05	; 5
    2484:	93 81       	ldd	r25, Z+3	; 0x03
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	98 17       	cp	r25, r24
    248a:	89 f0       	breq	.+34     	; 0x24ae <serial_get_byte+0x34>
    248c:	92 81       	ldd	r25, Z+2	; 0x02
    248e:	85 81       	ldd	r24, Z+5	; 0x05
    2490:	86 95       	lsr	r24
    2492:	89 23       	and	r24, r25
    2494:	a0 81       	ld	r26, Z
    2496:	b1 81       	ldd	r27, Z+1	; 0x01
    2498:	a8 0f       	add	r26, r24
    249a:	b1 1d       	adc	r27, r1
    249c:	8c 91       	ld	r24, X
    249e:	db 01       	movw	r26, r22
    24a0:	8c 93       	st	X, r24
    24a2:	9f 5f       	subi	r25, 0xFF	; 255
    24a4:	85 81       	ldd	r24, Z+5	; 0x05
    24a6:	98 23       	and	r25, r24
    24a8:	92 83       	std	Z+2, r25	; 0x02
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	08 95       	ret
    24ae:	83 e0       	ldi	r24, 0x03	; 3
    24b0:	08 95       	ret

000024b2 <__vector_25>:
    24b2:	1f 92       	push	r1
    24b4:	0f 92       	push	r0
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	0f 92       	push	r0
    24ba:	11 24       	eor	r1, r1
    24bc:	0b b6       	in	r0, 0x3b	; 59
    24be:	0f 92       	push	r0
    24c0:	2f 93       	push	r18
    24c2:	3f 93       	push	r19
    24c4:	4f 93       	push	r20
    24c6:	5f 93       	push	r21
    24c8:	6f 93       	push	r22
    24ca:	7f 93       	push	r23
    24cc:	8f 93       	push	r24
    24ce:	9f 93       	push	r25
    24d0:	af 93       	push	r26
    24d2:	bf 93       	push	r27
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	ef 93       	push	r30
    24da:	ff 93       	push	r31
    24dc:	a0 91 00 04 	lds	r26, 0x0400	; 0x800400 <_ser_handle>
    24e0:	b0 91 01 04 	lds	r27, 0x0401	; 0x800401 <_ser_handle+0x1>
    24e4:	10 97       	sbiw	r26, 0x00	; 0
    24e6:	11 f1       	breq	.+68     	; 0x252c <__vector_25+0x7a>
    24e8:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    24ec:	14 96       	adiw	r26, 0x04	; 4
    24ee:	ed 91       	ld	r30, X+
    24f0:	fc 91       	ld	r31, X
    24f2:	15 97       	sbiw	r26, 0x05	; 5
    24f4:	93 81       	ldd	r25, Z+3	; 0x03
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	25 81       	ldd	r18, Z+5	; 0x05
    24fa:	98 1b       	sub	r25, r24
    24fc:	92 23       	and	r25, r18
    24fe:	84 81       	ldd	r24, Z+4	; 0x04
    2500:	98 17       	cp	r25, r24
    2502:	61 f0       	breq	.+24     	; 0x251c <__vector_25+0x6a>
    2504:	83 81       	ldd	r24, Z+3	; 0x03
    2506:	26 95       	lsr	r18
    2508:	28 23       	and	r18, r24
    250a:	c0 81       	ld	r28, Z
    250c:	d1 81       	ldd	r29, Z+1	; 0x01
    250e:	c2 0f       	add	r28, r18
    2510:	d1 1d       	adc	r29, r1
    2512:	68 83       	st	Y, r22
    2514:	8f 5f       	subi	r24, 0xFF	; 255
    2516:	95 81       	ldd	r25, Z+5	; 0x05
    2518:	89 23       	and	r24, r25
    251a:	83 83       	std	Z+3, r24	; 0x03
    251c:	16 96       	adiw	r26, 0x06	; 6
    251e:	ed 91       	ld	r30, X+
    2520:	fc 91       	ld	r31, X
    2522:	17 97       	sbiw	r26, 0x07	; 7
    2524:	30 97       	sbiw	r30, 0x00	; 0
    2526:	11 f0       	breq	.+4      	; 0x252c <__vector_25+0x7a>
    2528:	cd 01       	movw	r24, r26
    252a:	19 95       	eicall
    252c:	ff 91       	pop	r31
    252e:	ef 91       	pop	r30
    2530:	df 91       	pop	r29
    2532:	cf 91       	pop	r28
    2534:	bf 91       	pop	r27
    2536:	af 91       	pop	r26
    2538:	9f 91       	pop	r25
    253a:	8f 91       	pop	r24
    253c:	7f 91       	pop	r23
    253e:	6f 91       	pop	r22
    2540:	5f 91       	pop	r21
    2542:	4f 91       	pop	r20
    2544:	3f 91       	pop	r19
    2546:	2f 91       	pop	r18
    2548:	0f 90       	pop	r0
    254a:	0b be       	out	0x3b, r0	; 59
    254c:	0f 90       	pop	r0
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	0f 90       	pop	r0
    2552:	1f 90       	pop	r1
    2554:	18 95       	reti

00002556 <__vector_26>:
    2556:	1f 92       	push	r1
    2558:	0f 92       	push	r0
    255a:	0f b6       	in	r0, 0x3f	; 63
    255c:	0f 92       	push	r0
    255e:	11 24       	eor	r1, r1
    2560:	0b b6       	in	r0, 0x3b	; 59
    2562:	0f 92       	push	r0
    2564:	2f 93       	push	r18
    2566:	8f 93       	push	r24
    2568:	9f 93       	push	r25
    256a:	af 93       	push	r26
    256c:	bf 93       	push	r27
    256e:	ef 93       	push	r30
    2570:	ff 93       	push	r31
    2572:	e0 91 00 04 	lds	r30, 0x0400	; 0x800400 <_ser_handle>
    2576:	f0 91 01 04 	lds	r31, 0x0401	; 0x800401 <_ser_handle+0x1>
    257a:	30 97       	sbiw	r30, 0x00	; 0
    257c:	b9 f0       	breq	.+46     	; 0x25ac <__vector_26+0x56>
    257e:	02 80       	ldd	r0, Z+2	; 0x02
    2580:	f3 81       	ldd	r31, Z+3	; 0x03
    2582:	e0 2d       	mov	r30, r0
    2584:	93 81       	ldd	r25, Z+3	; 0x03
    2586:	82 81       	ldd	r24, Z+2	; 0x02
    2588:	98 17       	cp	r25, r24
    258a:	b1 f0       	breq	.+44     	; 0x25b8 <__vector_26+0x62>
    258c:	92 81       	ldd	r25, Z+2	; 0x02
    258e:	85 81       	ldd	r24, Z+5	; 0x05
    2590:	28 2f       	mov	r18, r24
    2592:	26 95       	lsr	r18
    2594:	29 23       	and	r18, r25
    2596:	a0 81       	ld	r26, Z
    2598:	b1 81       	ldd	r27, Z+1	; 0x01
    259a:	a2 0f       	add	r26, r18
    259c:	b1 1d       	adc	r27, r1
    259e:	2c 91       	ld	r18, X
    25a0:	9f 5f       	subi	r25, 0xFF	; 255
    25a2:	89 23       	and	r24, r25
    25a4:	82 83       	std	Z+2, r24	; 0x02
    25a6:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    25aa:	0b c0       	rjmp	.+22     	; 0x25c2 <__vector_26+0x6c>
    25ac:	e1 ec       	ldi	r30, 0xC1	; 193
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	8f 7d       	andi	r24, 0xDF	; 223
    25b4:	80 83       	st	Z, r24
    25b6:	05 c0       	rjmp	.+10     	; 0x25c2 <__vector_26+0x6c>
    25b8:	e1 ec       	ldi	r30, 0xC1	; 193
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	8f 7d       	andi	r24, 0xDF	; 223
    25c0:	80 83       	st	Z, r24
    25c2:	ff 91       	pop	r31
    25c4:	ef 91       	pop	r30
    25c6:	bf 91       	pop	r27
    25c8:	af 91       	pop	r26
    25ca:	9f 91       	pop	r25
    25cc:	8f 91       	pop	r24
    25ce:	2f 91       	pop	r18
    25d0:	0f 90       	pop	r0
    25d2:	0b be       	out	0x3b, r0	; 59
    25d4:	0f 90       	pop	r0
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	0f 90       	pop	r0
    25da:	1f 90       	pop	r1
    25dc:	18 95       	reti

000025de <__vector_36>:
    25de:	1f 92       	push	r1
    25e0:	0f 92       	push	r0
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	0f 92       	push	r0
    25e6:	11 24       	eor	r1, r1
    25e8:	0b b6       	in	r0, 0x3b	; 59
    25ea:	0f 92       	push	r0
    25ec:	2f 93       	push	r18
    25ee:	3f 93       	push	r19
    25f0:	4f 93       	push	r20
    25f2:	5f 93       	push	r21
    25f4:	6f 93       	push	r22
    25f6:	7f 93       	push	r23
    25f8:	8f 93       	push	r24
    25fa:	9f 93       	push	r25
    25fc:	af 93       	push	r26
    25fe:	bf 93       	push	r27
    2600:	cf 93       	push	r28
    2602:	df 93       	push	r29
    2604:	ef 93       	push	r30
    2606:	ff 93       	push	r31
    2608:	a0 91 02 04 	lds	r26, 0x0402	; 0x800402 <_ser_handle+0x2>
    260c:	b0 91 03 04 	lds	r27, 0x0403	; 0x800403 <_ser_handle+0x3>
    2610:	10 97       	sbiw	r26, 0x00	; 0
    2612:	11 f1       	breq	.+68     	; 0x2658 <__vector_36+0x7a>
    2614:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    2618:	14 96       	adiw	r26, 0x04	; 4
    261a:	ed 91       	ld	r30, X+
    261c:	fc 91       	ld	r31, X
    261e:	15 97       	sbiw	r26, 0x05	; 5
    2620:	93 81       	ldd	r25, Z+3	; 0x03
    2622:	82 81       	ldd	r24, Z+2	; 0x02
    2624:	25 81       	ldd	r18, Z+5	; 0x05
    2626:	98 1b       	sub	r25, r24
    2628:	92 23       	and	r25, r18
    262a:	84 81       	ldd	r24, Z+4	; 0x04
    262c:	98 17       	cp	r25, r24
    262e:	61 f0       	breq	.+24     	; 0x2648 <__vector_36+0x6a>
    2630:	83 81       	ldd	r24, Z+3	; 0x03
    2632:	26 95       	lsr	r18
    2634:	28 23       	and	r18, r24
    2636:	c0 81       	ld	r28, Z
    2638:	d1 81       	ldd	r29, Z+1	; 0x01
    263a:	c2 0f       	add	r28, r18
    263c:	d1 1d       	adc	r29, r1
    263e:	68 83       	st	Y, r22
    2640:	8f 5f       	subi	r24, 0xFF	; 255
    2642:	95 81       	ldd	r25, Z+5	; 0x05
    2644:	89 23       	and	r24, r25
    2646:	83 83       	std	Z+3, r24	; 0x03
    2648:	16 96       	adiw	r26, 0x06	; 6
    264a:	ed 91       	ld	r30, X+
    264c:	fc 91       	ld	r31, X
    264e:	17 97       	sbiw	r26, 0x07	; 7
    2650:	30 97       	sbiw	r30, 0x00	; 0
    2652:	11 f0       	breq	.+4      	; 0x2658 <__vector_36+0x7a>
    2654:	cd 01       	movw	r24, r26
    2656:	19 95       	eicall
    2658:	ff 91       	pop	r31
    265a:	ef 91       	pop	r30
    265c:	df 91       	pop	r29
    265e:	cf 91       	pop	r28
    2660:	bf 91       	pop	r27
    2662:	af 91       	pop	r26
    2664:	9f 91       	pop	r25
    2666:	8f 91       	pop	r24
    2668:	7f 91       	pop	r23
    266a:	6f 91       	pop	r22
    266c:	5f 91       	pop	r21
    266e:	4f 91       	pop	r20
    2670:	3f 91       	pop	r19
    2672:	2f 91       	pop	r18
    2674:	0f 90       	pop	r0
    2676:	0b be       	out	0x3b, r0	; 59
    2678:	0f 90       	pop	r0
    267a:	0f be       	out	0x3f, r0	; 63
    267c:	0f 90       	pop	r0
    267e:	1f 90       	pop	r1
    2680:	18 95       	reti

00002682 <__vector_37>:
    2682:	1f 92       	push	r1
    2684:	0f 92       	push	r0
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	0f 92       	push	r0
    268a:	11 24       	eor	r1, r1
    268c:	0b b6       	in	r0, 0x3b	; 59
    268e:	0f 92       	push	r0
    2690:	2f 93       	push	r18
    2692:	8f 93       	push	r24
    2694:	9f 93       	push	r25
    2696:	af 93       	push	r26
    2698:	bf 93       	push	r27
    269a:	ef 93       	push	r30
    269c:	ff 93       	push	r31
    269e:	e0 91 02 04 	lds	r30, 0x0402	; 0x800402 <_ser_handle+0x2>
    26a2:	f0 91 03 04 	lds	r31, 0x0403	; 0x800403 <_ser_handle+0x3>
    26a6:	30 97       	sbiw	r30, 0x00	; 0
    26a8:	b9 f0       	breq	.+46     	; 0x26d8 <__vector_37+0x56>
    26aa:	02 80       	ldd	r0, Z+2	; 0x02
    26ac:	f3 81       	ldd	r31, Z+3	; 0x03
    26ae:	e0 2d       	mov	r30, r0
    26b0:	93 81       	ldd	r25, Z+3	; 0x03
    26b2:	82 81       	ldd	r24, Z+2	; 0x02
    26b4:	98 17       	cp	r25, r24
    26b6:	b1 f0       	breq	.+44     	; 0x26e4 <__vector_37+0x62>
    26b8:	92 81       	ldd	r25, Z+2	; 0x02
    26ba:	85 81       	ldd	r24, Z+5	; 0x05
    26bc:	28 2f       	mov	r18, r24
    26be:	26 95       	lsr	r18
    26c0:	29 23       	and	r18, r25
    26c2:	a0 81       	ld	r26, Z
    26c4:	b1 81       	ldd	r27, Z+1	; 0x01
    26c6:	a2 0f       	add	r26, r18
    26c8:	b1 1d       	adc	r27, r1
    26ca:	2c 91       	ld	r18, X
    26cc:	9f 5f       	subi	r25, 0xFF	; 255
    26ce:	89 23       	and	r24, r25
    26d0:	82 83       	std	Z+2, r24	; 0x02
    26d2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    26d6:	0b c0       	rjmp	.+22     	; 0x26ee <__vector_37+0x6c>
    26d8:	e9 ec       	ldi	r30, 0xC9	; 201
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
    26de:	8f 7d       	andi	r24, 0xDF	; 223
    26e0:	80 83       	st	Z, r24
    26e2:	05 c0       	rjmp	.+10     	; 0x26ee <__vector_37+0x6c>
    26e4:	e9 ec       	ldi	r30, 0xC9	; 201
    26e6:	f0 e0       	ldi	r31, 0x00	; 0
    26e8:	80 81       	ld	r24, Z
    26ea:	8f 7d       	andi	r24, 0xDF	; 223
    26ec:	80 83       	st	Z, r24
    26ee:	ff 91       	pop	r31
    26f0:	ef 91       	pop	r30
    26f2:	bf 91       	pop	r27
    26f4:	af 91       	pop	r26
    26f6:	9f 91       	pop	r25
    26f8:	8f 91       	pop	r24
    26fa:	2f 91       	pop	r18
    26fc:	0f 90       	pop	r0
    26fe:	0b be       	out	0x3b, r0	; 59
    2700:	0f 90       	pop	r0
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	0f 90       	pop	r0
    2706:	1f 90       	pop	r1
    2708:	18 95       	reti

0000270a <__vector_51>:
    270a:	1f 92       	push	r1
    270c:	0f 92       	push	r0
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	0f 92       	push	r0
    2712:	11 24       	eor	r1, r1
    2714:	0b b6       	in	r0, 0x3b	; 59
    2716:	0f 92       	push	r0
    2718:	2f 93       	push	r18
    271a:	3f 93       	push	r19
    271c:	4f 93       	push	r20
    271e:	5f 93       	push	r21
    2720:	6f 93       	push	r22
    2722:	7f 93       	push	r23
    2724:	8f 93       	push	r24
    2726:	9f 93       	push	r25
    2728:	af 93       	push	r26
    272a:	bf 93       	push	r27
    272c:	cf 93       	push	r28
    272e:	df 93       	push	r29
    2730:	ef 93       	push	r30
    2732:	ff 93       	push	r31
    2734:	a0 91 04 04 	lds	r26, 0x0404	; 0x800404 <_ser_handle+0x4>
    2738:	b0 91 05 04 	lds	r27, 0x0405	; 0x800405 <_ser_handle+0x5>
    273c:	10 97       	sbiw	r26, 0x00	; 0
    273e:	11 f1       	breq	.+68     	; 0x2784 <__vector_51+0x7a>
    2740:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2744:	14 96       	adiw	r26, 0x04	; 4
    2746:	ed 91       	ld	r30, X+
    2748:	fc 91       	ld	r31, X
    274a:	15 97       	sbiw	r26, 0x05	; 5
    274c:	93 81       	ldd	r25, Z+3	; 0x03
    274e:	82 81       	ldd	r24, Z+2	; 0x02
    2750:	25 81       	ldd	r18, Z+5	; 0x05
    2752:	98 1b       	sub	r25, r24
    2754:	92 23       	and	r25, r18
    2756:	84 81       	ldd	r24, Z+4	; 0x04
    2758:	98 17       	cp	r25, r24
    275a:	61 f0       	breq	.+24     	; 0x2774 <__vector_51+0x6a>
    275c:	83 81       	ldd	r24, Z+3	; 0x03
    275e:	26 95       	lsr	r18
    2760:	28 23       	and	r18, r24
    2762:	c0 81       	ld	r28, Z
    2764:	d1 81       	ldd	r29, Z+1	; 0x01
    2766:	c2 0f       	add	r28, r18
    2768:	d1 1d       	adc	r29, r1
    276a:	68 83       	st	Y, r22
    276c:	8f 5f       	subi	r24, 0xFF	; 255
    276e:	95 81       	ldd	r25, Z+5	; 0x05
    2770:	89 23       	and	r24, r25
    2772:	83 83       	std	Z+3, r24	; 0x03
    2774:	16 96       	adiw	r26, 0x06	; 6
    2776:	ed 91       	ld	r30, X+
    2778:	fc 91       	ld	r31, X
    277a:	17 97       	sbiw	r26, 0x07	; 7
    277c:	30 97       	sbiw	r30, 0x00	; 0
    277e:	11 f0       	breq	.+4      	; 0x2784 <__vector_51+0x7a>
    2780:	cd 01       	movw	r24, r26
    2782:	19 95       	eicall
    2784:	ff 91       	pop	r31
    2786:	ef 91       	pop	r30
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	bf 91       	pop	r27
    278e:	af 91       	pop	r26
    2790:	9f 91       	pop	r25
    2792:	8f 91       	pop	r24
    2794:	7f 91       	pop	r23
    2796:	6f 91       	pop	r22
    2798:	5f 91       	pop	r21
    279a:	4f 91       	pop	r20
    279c:	3f 91       	pop	r19
    279e:	2f 91       	pop	r18
    27a0:	0f 90       	pop	r0
    27a2:	0b be       	out	0x3b, r0	; 59
    27a4:	0f 90       	pop	r0
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	0f 90       	pop	r0
    27aa:	1f 90       	pop	r1
    27ac:	18 95       	reti

000027ae <__vector_52>:
    27ae:	1f 92       	push	r1
    27b0:	0f 92       	push	r0
    27b2:	0f b6       	in	r0, 0x3f	; 63
    27b4:	0f 92       	push	r0
    27b6:	11 24       	eor	r1, r1
    27b8:	0b b6       	in	r0, 0x3b	; 59
    27ba:	0f 92       	push	r0
    27bc:	2f 93       	push	r18
    27be:	8f 93       	push	r24
    27c0:	9f 93       	push	r25
    27c2:	af 93       	push	r26
    27c4:	bf 93       	push	r27
    27c6:	ef 93       	push	r30
    27c8:	ff 93       	push	r31
    27ca:	e0 91 04 04 	lds	r30, 0x0404	; 0x800404 <_ser_handle+0x4>
    27ce:	f0 91 05 04 	lds	r31, 0x0405	; 0x800405 <_ser_handle+0x5>
    27d2:	30 97       	sbiw	r30, 0x00	; 0
    27d4:	b9 f0       	breq	.+46     	; 0x2804 <__vector_52+0x56>
    27d6:	02 80       	ldd	r0, Z+2	; 0x02
    27d8:	f3 81       	ldd	r31, Z+3	; 0x03
    27da:	e0 2d       	mov	r30, r0
    27dc:	93 81       	ldd	r25, Z+3	; 0x03
    27de:	82 81       	ldd	r24, Z+2	; 0x02
    27e0:	98 17       	cp	r25, r24
    27e2:	b1 f0       	breq	.+44     	; 0x2810 <__vector_52+0x62>
    27e4:	92 81       	ldd	r25, Z+2	; 0x02
    27e6:	85 81       	ldd	r24, Z+5	; 0x05
    27e8:	28 2f       	mov	r18, r24
    27ea:	26 95       	lsr	r18
    27ec:	29 23       	and	r18, r25
    27ee:	a0 81       	ld	r26, Z
    27f0:	b1 81       	ldd	r27, Z+1	; 0x01
    27f2:	a2 0f       	add	r26, r18
    27f4:	b1 1d       	adc	r27, r1
    27f6:	2c 91       	ld	r18, X
    27f8:	9f 5f       	subi	r25, 0xFF	; 255
    27fa:	89 23       	and	r24, r25
    27fc:	82 83       	std	Z+2, r24	; 0x02
    27fe:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    2802:	0b c0       	rjmp	.+22     	; 0x281a <__vector_52+0x6c>
    2804:	e1 ed       	ldi	r30, 0xD1	; 209
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	8f 7d       	andi	r24, 0xDF	; 223
    280c:	80 83       	st	Z, r24
    280e:	05 c0       	rjmp	.+10     	; 0x281a <__vector_52+0x6c>
    2810:	e1 ed       	ldi	r30, 0xD1	; 209
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	80 81       	ld	r24, Z
    2816:	8f 7d       	andi	r24, 0xDF	; 223
    2818:	80 83       	st	Z, r24
    281a:	ff 91       	pop	r31
    281c:	ef 91       	pop	r30
    281e:	bf 91       	pop	r27
    2820:	af 91       	pop	r26
    2822:	9f 91       	pop	r25
    2824:	8f 91       	pop	r24
    2826:	2f 91       	pop	r18
    2828:	0f 90       	pop	r0
    282a:	0b be       	out	0x3b, r0	; 59
    282c:	0f 90       	pop	r0
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	0f 90       	pop	r0
    2832:	1f 90       	pop	r1
    2834:	18 95       	reti

00002836 <__vector_54>:
    2836:	1f 92       	push	r1
    2838:	0f 92       	push	r0
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	0f 92       	push	r0
    283e:	11 24       	eor	r1, r1
    2840:	0b b6       	in	r0, 0x3b	; 59
    2842:	0f 92       	push	r0
    2844:	2f 93       	push	r18
    2846:	3f 93       	push	r19
    2848:	4f 93       	push	r20
    284a:	5f 93       	push	r21
    284c:	6f 93       	push	r22
    284e:	7f 93       	push	r23
    2850:	8f 93       	push	r24
    2852:	9f 93       	push	r25
    2854:	af 93       	push	r26
    2856:	bf 93       	push	r27
    2858:	cf 93       	push	r28
    285a:	df 93       	push	r29
    285c:	ef 93       	push	r30
    285e:	ff 93       	push	r31
    2860:	a0 91 06 04 	lds	r26, 0x0406	; 0x800406 <_ser_handle+0x6>
    2864:	b0 91 07 04 	lds	r27, 0x0407	; 0x800407 <_ser_handle+0x7>
    2868:	10 97       	sbiw	r26, 0x00	; 0
    286a:	11 f1       	breq	.+68     	; 0x28b0 <__vector_54+0x7a>
    286c:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    2870:	14 96       	adiw	r26, 0x04	; 4
    2872:	ed 91       	ld	r30, X+
    2874:	fc 91       	ld	r31, X
    2876:	15 97       	sbiw	r26, 0x05	; 5
    2878:	93 81       	ldd	r25, Z+3	; 0x03
    287a:	82 81       	ldd	r24, Z+2	; 0x02
    287c:	25 81       	ldd	r18, Z+5	; 0x05
    287e:	98 1b       	sub	r25, r24
    2880:	92 23       	and	r25, r18
    2882:	84 81       	ldd	r24, Z+4	; 0x04
    2884:	98 17       	cp	r25, r24
    2886:	61 f0       	breq	.+24     	; 0x28a0 <__vector_54+0x6a>
    2888:	83 81       	ldd	r24, Z+3	; 0x03
    288a:	26 95       	lsr	r18
    288c:	28 23       	and	r18, r24
    288e:	c0 81       	ld	r28, Z
    2890:	d1 81       	ldd	r29, Z+1	; 0x01
    2892:	c2 0f       	add	r28, r18
    2894:	d1 1d       	adc	r29, r1
    2896:	68 83       	st	Y, r22
    2898:	8f 5f       	subi	r24, 0xFF	; 255
    289a:	95 81       	ldd	r25, Z+5	; 0x05
    289c:	89 23       	and	r24, r25
    289e:	83 83       	std	Z+3, r24	; 0x03
    28a0:	16 96       	adiw	r26, 0x06	; 6
    28a2:	ed 91       	ld	r30, X+
    28a4:	fc 91       	ld	r31, X
    28a6:	17 97       	sbiw	r26, 0x07	; 7
    28a8:	30 97       	sbiw	r30, 0x00	; 0
    28aa:	11 f0       	breq	.+4      	; 0x28b0 <__vector_54+0x7a>
    28ac:	cd 01       	movw	r24, r26
    28ae:	19 95       	eicall
    28b0:	ff 91       	pop	r31
    28b2:	ef 91       	pop	r30
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	bf 91       	pop	r27
    28ba:	af 91       	pop	r26
    28bc:	9f 91       	pop	r25
    28be:	8f 91       	pop	r24
    28c0:	7f 91       	pop	r23
    28c2:	6f 91       	pop	r22
    28c4:	5f 91       	pop	r21
    28c6:	4f 91       	pop	r20
    28c8:	3f 91       	pop	r19
    28ca:	2f 91       	pop	r18
    28cc:	0f 90       	pop	r0
    28ce:	0b be       	out	0x3b, r0	; 59
    28d0:	0f 90       	pop	r0
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	0f 90       	pop	r0
    28d6:	1f 90       	pop	r1
    28d8:	18 95       	reti

000028da <__vector_55>:
    28da:	1f 92       	push	r1
    28dc:	0f 92       	push	r0
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	0f 92       	push	r0
    28e2:	11 24       	eor	r1, r1
    28e4:	0b b6       	in	r0, 0x3b	; 59
    28e6:	0f 92       	push	r0
    28e8:	2f 93       	push	r18
    28ea:	8f 93       	push	r24
    28ec:	9f 93       	push	r25
    28ee:	af 93       	push	r26
    28f0:	bf 93       	push	r27
    28f2:	ef 93       	push	r30
    28f4:	ff 93       	push	r31
    28f6:	e0 91 06 04 	lds	r30, 0x0406	; 0x800406 <_ser_handle+0x6>
    28fa:	f0 91 07 04 	lds	r31, 0x0407	; 0x800407 <_ser_handle+0x7>
    28fe:	30 97       	sbiw	r30, 0x00	; 0
    2900:	b9 f0       	breq	.+46     	; 0x2930 <__vector_55+0x56>
    2902:	02 80       	ldd	r0, Z+2	; 0x02
    2904:	f3 81       	ldd	r31, Z+3	; 0x03
    2906:	e0 2d       	mov	r30, r0
    2908:	93 81       	ldd	r25, Z+3	; 0x03
    290a:	82 81       	ldd	r24, Z+2	; 0x02
    290c:	98 17       	cp	r25, r24
    290e:	b1 f0       	breq	.+44     	; 0x293c <__vector_55+0x62>
    2910:	92 81       	ldd	r25, Z+2	; 0x02
    2912:	85 81       	ldd	r24, Z+5	; 0x05
    2914:	28 2f       	mov	r18, r24
    2916:	26 95       	lsr	r18
    2918:	29 23       	and	r18, r25
    291a:	a0 81       	ld	r26, Z
    291c:	b1 81       	ldd	r27, Z+1	; 0x01
    291e:	a2 0f       	add	r26, r18
    2920:	b1 1d       	adc	r27, r1
    2922:	2c 91       	ld	r18, X
    2924:	9f 5f       	subi	r25, 0xFF	; 255
    2926:	89 23       	and	r24, r25
    2928:	82 83       	std	Z+2, r24	; 0x02
    292a:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    292e:	0b c0       	rjmp	.+22     	; 0x2946 <__vector_55+0x6c>
    2930:	e1 e3       	ldi	r30, 0x31	; 49
    2932:	f1 e0       	ldi	r31, 0x01	; 1
    2934:	80 81       	ld	r24, Z
    2936:	8f 7d       	andi	r24, 0xDF	; 223
    2938:	80 83       	st	Z, r24
    293a:	05 c0       	rjmp	.+10     	; 0x2946 <__vector_55+0x6c>
    293c:	e1 e3       	ldi	r30, 0x31	; 49
    293e:	f1 e0       	ldi	r31, 0x01	; 1
    2940:	80 81       	ld	r24, Z
    2942:	8f 7d       	andi	r24, 0xDF	; 223
    2944:	80 83       	st	Z, r24
    2946:	ff 91       	pop	r31
    2948:	ef 91       	pop	r30
    294a:	bf 91       	pop	r27
    294c:	af 91       	pop	r26
    294e:	9f 91       	pop	r25
    2950:	8f 91       	pop	r24
    2952:	2f 91       	pop	r18
    2954:	0f 90       	pop	r0
    2956:	0b be       	out	0x3b, r0	; 59
    2958:	0f 90       	pop	r0
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	0f 90       	pop	r0
    295e:	1f 90       	pop	r1
    2960:	18 95       	reti

00002962 <usart_getchar>:
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	1f 92       	push	r1
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	be 01       	movw	r22, r28
    296e:	6f 5f       	subi	r22, 0xFF	; 255
    2970:	7f 4f       	sbci	r23, 0xFF	; 255
    2972:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_com_serial_instance>
    2976:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <_com_serial_instance+0x1>
    297a:	7f dd       	rcall	.-1282   	; 0x247a <serial_get_byte>
    297c:	81 11       	cpse	r24, r1
    297e:	f6 cf       	rjmp	.-20     	; 0x296c <usart_getchar+0xa>
    2980:	89 81       	ldd	r24, Y+1	; 0x01
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	0f 90       	pop	r0
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	08 95       	ret

0000298c <usart_putchar>:
    298c:	68 2f       	mov	r22, r24
    298e:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <_com_serial_instance>
    2992:	90 91 09 04 	lds	r25, 0x0409	; 0x800409 <_com_serial_instance+0x1>
    2996:	4c dd       	rcall	.-1384   	; 0x2430 <serial_send_byte>
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	90 e0       	ldi	r25, 0x00	; 0
    299c:	08 95       	ret

0000299e <stdioCreate>:
    299e:	8f 92       	push	r8
    29a0:	9f 92       	push	r9
    29a2:	af 92       	push	r10
    29a4:	cf 92       	push	r12
    29a6:	ef 92       	push	r14
    29a8:	0f 93       	push	r16
    29aa:	81 2c       	mov	r8, r1
    29ac:	91 2c       	mov	r9, r1
    29ae:	68 94       	set
    29b0:	aa 24       	eor	r10, r10
    29b2:	a7 f8       	bld	r10, 7
    29b4:	68 94       	set
    29b6:	cc 24       	eor	r12, r12
    29b8:	c7 f8       	bld	r12, 7
    29ba:	e1 2c       	mov	r14, r1
    29bc:	00 e0       	ldi	r16, 0x00	; 0
    29be:	23 e0       	ldi	r18, 0x03	; 3
    29c0:	40 e0       	ldi	r20, 0x00	; 0
    29c2:	51 ee       	ldi	r21, 0xE1	; 225
    29c4:	60 e0       	ldi	r22, 0x00	; 0
    29c6:	70 e0       	ldi	r23, 0x00	; 0
    29c8:	9d dc       	rcall	.-1734   	; 0x2304 <serial_new_instance>
    29ca:	90 93 09 04 	sts	0x0409, r25	; 0x800409 <_com_serial_instance+0x1>
    29ce:	80 93 08 04 	sts	0x0408, r24	; 0x800408 <_com_serial_instance>
    29d2:	e1 e3       	ldi	r30, 0x31	; 49
    29d4:	f4 e0       	ldi	r31, 0x04	; 4
    29d6:	82 e1       	ldi	r24, 0x12	; 18
    29d8:	92 e0       	ldi	r25, 0x02	; 2
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	80 83       	st	Z, r24
    29de:	93 83       	std	Z+3, r25	; 0x03
    29e0:	82 83       	std	Z+2, r24	; 0x02
    29e2:	0f 91       	pop	r16
    29e4:	ef 90       	pop	r14
    29e6:	cf 90       	pop	r12
    29e8:	af 90       	pop	r10
    29ea:	9f 90       	pop	r9
    29ec:	8f 90       	pop	r8
    29ee:	08 95       	ret

000029f0 <_initTwiInterface>:
    29f0:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <_twiIsInitiated>
    29f4:	81 11       	cpse	r24, r1
    29f6:	0c c0       	rjmp	.+24     	; 0x2a10 <_initTwiInterface+0x20>
    29f8:	8c e0       	ldi	r24, 0x0C	; 12
    29fa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    29fe:	8f ef       	ldi	r24, 0xFF	; 255
    2a00:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2a04:	84 e0       	ldi	r24, 0x04	; 4
    2a06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <_twiIsInitiated>
    2a10:	08 95       	ret

00002a12 <twiCreate>:
    2a12:	af 92       	push	r10
    2a14:	bf 92       	push	r11
    2a16:	cf 92       	push	r12
    2a18:	df 92       	push	r13
    2a1a:	ef 92       	push	r14
    2a1c:	ff 92       	push	r15
    2a1e:	0f 93       	push	r16
    2a20:	1f 93       	push	r17
    2a22:	cf 93       	push	r28
    2a24:	df 93       	push	r29
    2a26:	a8 2e       	mov	r10, r24
    2a28:	b6 2e       	mov	r11, r22
    2a2a:	69 01       	movw	r12, r18
    2a2c:	7a 01       	movw	r14, r20
    2a2e:	84 e0       	ldi	r24, 0x04	; 4
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	cb d3       	rcall	.+1942   	; 0x31ca <malloc>
    2a34:	ec 01       	movw	r28, r24
    2a36:	89 2b       	or	r24, r25
    2a38:	61 f1       	breq	.+88     	; 0x2a92 <twiCreate+0x80>
    2a3a:	a8 82       	st	Y, r10
    2a3c:	81 e0       	ldi	r24, 0x01	; 1
    2a3e:	b8 12       	cpse	r11, r24
    2a40:	12 c0       	rjmp	.+36     	; 0x2a66 <twiCreate+0x54>
    2a42:	c7 01       	movw	r24, r14
    2a44:	b6 01       	movw	r22, r12
    2a46:	20 ea       	ldi	r18, 0xA0	; 160
    2a48:	36 e8       	ldi	r19, 0x86	; 134
    2a4a:	41 e0       	ldi	r20, 0x01	; 1
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	79 d3       	rcall	.+1778   	; 0x3142 <__udivmodsi4>
    2a50:	da 01       	movw	r26, r20
    2a52:	c9 01       	movw	r24, r18
    2a54:	40 97       	sbiw	r24, 0x10	; 16
    2a56:	a1 09       	sbc	r26, r1
    2a58:	b1 09       	sbc	r27, r1
    2a5a:	b6 95       	lsr	r27
    2a5c:	a7 95       	ror	r26
    2a5e:	97 95       	ror	r25
    2a60:	87 95       	ror	r24
    2a62:	89 83       	std	Y+1, r24	; 0x01
    2a64:	11 c0       	rjmp	.+34     	; 0x2a88 <twiCreate+0x76>
    2a66:	c7 01       	movw	r24, r14
    2a68:	b6 01       	movw	r22, r12
    2a6a:	20 e8       	ldi	r18, 0x80	; 128
    2a6c:	3a e1       	ldi	r19, 0x1A	; 26
    2a6e:	46 e0       	ldi	r20, 0x06	; 6
    2a70:	50 e0       	ldi	r21, 0x00	; 0
    2a72:	67 d3       	rcall	.+1742   	; 0x3142 <__udivmodsi4>
    2a74:	da 01       	movw	r26, r20
    2a76:	c9 01       	movw	r24, r18
    2a78:	40 97       	sbiw	r24, 0x10	; 16
    2a7a:	a1 09       	sbc	r26, r1
    2a7c:	b1 09       	sbc	r27, r1
    2a7e:	b6 95       	lsr	r27
    2a80:	a7 95       	ror	r26
    2a82:	97 95       	ror	r25
    2a84:	87 95       	ror	r24
    2a86:	89 83       	std	Y+1, r24	; 0x01
    2a88:	1b 83       	std	Y+3, r17	; 0x03
    2a8a:	0a 83       	std	Y+2, r16	; 0x02
    2a8c:	8c 2f       	mov	r24, r28
    2a8e:	9d 2f       	mov	r25, r29
    2a90:	02 c0       	rjmp	.+4      	; 0x2a96 <twiCreate+0x84>
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
    2a9a:	1f 91       	pop	r17
    2a9c:	0f 91       	pop	r16
    2a9e:	ff 90       	pop	r15
    2aa0:	ef 90       	pop	r14
    2aa2:	df 90       	pop	r13
    2aa4:	cf 90       	pop	r12
    2aa6:	bf 90       	pop	r11
    2aa8:	af 90       	pop	r10
    2aaa:	08 95       	ret

00002aac <twiIsBusy>:
    2aac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ab0:	81 70       	andi	r24, 0x01	; 1
    2ab2:	08 95       	ret

00002ab4 <twiTransmit>:
    2ab4:	ff 92       	push	r15
    2ab6:	0f 93       	push	r16
    2ab8:	1f 93       	push	r17
    2aba:	cf 93       	push	r28
    2abc:	df 93       	push	r29
    2abe:	00 97       	sbiw	r24, 0x00	; 0
    2ac0:	d1 f1       	breq	.+116    	; 0x2b36 <twiTransmit+0x82>
    2ac2:	4a 30       	cpi	r20, 0x0A	; 10
    2ac4:	d0 f5       	brcc	.+116    	; 0x2b3a <twiTransmit+0x86>
    2ac6:	f4 2e       	mov	r15, r20
    2ac8:	8b 01       	movw	r16, r22
    2aca:	ec 01       	movw	r28, r24
    2acc:	ef df       	rcall	.-34     	; 0x2aac <twiIsBusy>
    2ace:	81 11       	cpse	r24, r1
    2ad0:	36 c0       	rjmp	.+108    	; 0x2b3e <twiTransmit+0x8a>
    2ad2:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <_twiCurrentHandler>
    2ad6:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <_twiCurrentHandler+0x1>
    2ada:	c8 17       	cp	r28, r24
    2adc:	d9 07       	cpc	r29, r25
    2ade:	41 f0       	breq	.+16     	; 0x2af0 <twiTransmit+0x3c>
    2ae0:	87 df       	rcall	.-242    	; 0x29f0 <_initTwiInterface>
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2ae8:	d0 93 0c 04 	sts	0x040C, r29	; 0x80040c <_twiCurrentHandler+0x1>
    2aec:	c0 93 0b 04 	sts	0x040B, r28	; 0x80040b <_twiCurrentHandler>
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	8f 0d       	add	r24, r15
    2af4:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <_twiMessageLen>
    2af8:	88 81       	ld	r24, Y
    2afa:	88 0f       	add	r24, r24
    2afc:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <_twiMessageBuffer>
    2b00:	ff 20       	and	r15, r15
    2b02:	89 f0       	breq	.+34     	; 0x2b26 <twiTransmit+0x72>
    2b04:	f8 01       	movw	r30, r16
    2b06:	af e0       	ldi	r26, 0x0F	; 15
    2b08:	b4 e0       	ldi	r27, 0x04	; 4
    2b0a:	4f ef       	ldi	r20, 0xFF	; 255
    2b0c:	4f 0d       	add	r20, r15
    2b0e:	64 2f       	mov	r22, r20
    2b10:	70 e0       	ldi	r23, 0x00	; 0
    2b12:	cb 01       	movw	r24, r22
    2b14:	01 96       	adiw	r24, 0x01	; 1
    2b16:	b8 01       	movw	r22, r16
    2b18:	68 0f       	add	r22, r24
    2b1a:	79 1f       	adc	r23, r25
    2b1c:	81 91       	ld	r24, Z+
    2b1e:	8d 93       	st	X+, r24
    2b20:	e6 17       	cp	r30, r22
    2b22:	f7 07       	cpc	r31, r23
    2b24:	d9 f7       	brne	.-10     	; 0x2b1c <twiTransmit+0x68>
    2b26:	88 ef       	ldi	r24, 0xF8	; 248
    2b28:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    2b2c:	85 ea       	ldi	r24, 0xA5	; 165
    2b2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2b32:	84 e0       	ldi	r24, 0x04	; 4
    2b34:	05 c0       	rjmp	.+10     	; 0x2b40 <twiTransmit+0x8c>
    2b36:	86 e0       	ldi	r24, 0x06	; 6
    2b38:	03 c0       	rjmp	.+6      	; 0x2b40 <twiTransmit+0x8c>
    2b3a:	87 e0       	ldi	r24, 0x07	; 7
    2b3c:	01 c0       	rjmp	.+2      	; 0x2b40 <twiTransmit+0x8c>
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	1f 91       	pop	r17
    2b46:	0f 91       	pop	r16
    2b48:	ff 90       	pop	r15
    2b4a:	08 95       	ret

00002b4c <twiReceive>:
    2b4c:	1f 93       	push	r17
    2b4e:	cf 93       	push	r28
    2b50:	df 93       	push	r29
    2b52:	00 97       	sbiw	r24, 0x00	; 0
    2b54:	29 f1       	breq	.+74     	; 0x2ba0 <twiReceive+0x54>
    2b56:	6b 30       	cpi	r22, 0x0B	; 11
    2b58:	28 f5       	brcc	.+74     	; 0x2ba4 <twiReceive+0x58>
    2b5a:	16 2f       	mov	r17, r22
    2b5c:	ec 01       	movw	r28, r24
    2b5e:	a6 df       	rcall	.-180    	; 0x2aac <twiIsBusy>
    2b60:	81 11       	cpse	r24, r1
    2b62:	22 c0       	rjmp	.+68     	; 0x2ba8 <twiReceive+0x5c>
    2b64:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <_twiCurrentHandler>
    2b68:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <_twiCurrentHandler+0x1>
    2b6c:	c8 17       	cp	r28, r24
    2b6e:	d9 07       	cpc	r29, r25
    2b70:	41 f0       	breq	.+16     	; 0x2b82 <twiReceive+0x36>
    2b72:	3e df       	rcall	.-388    	; 0x29f0 <_initTwiInterface>
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    2b7a:	d0 93 0c 04 	sts	0x040C, r29	; 0x80040c <_twiCurrentHandler+0x1>
    2b7e:	c0 93 0b 04 	sts	0x040B, r28	; 0x80040b <_twiCurrentHandler>
    2b82:	10 93 0d 04 	sts	0x040D, r17	; 0x80040d <_twiMessageLen>
    2b86:	88 81       	ld	r24, Y
    2b88:	88 0f       	add	r24, r24
    2b8a:	81 60       	ori	r24, 0x01	; 1
    2b8c:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <_twiMessageBuffer>
    2b90:	88 ef       	ldi	r24, 0xF8	; 248
    2b92:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    2b96:	85 ea       	ldi	r24, 0xA5	; 165
    2b98:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2b9c:	85 e0       	ldi	r24, 0x05	; 5
    2b9e:	05 c0       	rjmp	.+10     	; 0x2baa <twiReceive+0x5e>
    2ba0:	86 e0       	ldi	r24, 0x06	; 6
    2ba2:	03 c0       	rjmp	.+6      	; 0x2baa <twiReceive+0x5e>
    2ba4:	87 e0       	ldi	r24, 0x07	; 7
    2ba6:	01 c0       	rjmp	.+2      	; 0x2baa <twiReceive+0x5e>
    2ba8:	82 e0       	ldi	r24, 0x02	; 2
    2baa:	df 91       	pop	r29
    2bac:	cf 91       	pop	r28
    2bae:	1f 91       	pop	r17
    2bb0:	08 95       	ret

00002bb2 <__vector_39>:
    2bb2:	1f 92       	push	r1
    2bb4:	0f 92       	push	r0
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	0f 92       	push	r0
    2bba:	11 24       	eor	r1, r1
    2bbc:	0b b6       	in	r0, 0x3b	; 59
    2bbe:	0f 92       	push	r0
    2bc0:	2f 93       	push	r18
    2bc2:	3f 93       	push	r19
    2bc4:	4f 93       	push	r20
    2bc6:	5f 93       	push	r21
    2bc8:	6f 93       	push	r22
    2bca:	7f 93       	push	r23
    2bcc:	8f 93       	push	r24
    2bce:	9f 93       	push	r25
    2bd0:	af 93       	push	r26
    2bd2:	bf 93       	push	r27
    2bd4:	ef 93       	push	r30
    2bd6:	ff 93       	push	r31
    2bd8:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2bdc:	8e 2f       	mov	r24, r30
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	fc 01       	movw	r30, r24
    2be2:	38 97       	sbiw	r30, 0x08	; 8
    2be4:	e1 35       	cpi	r30, 0x51	; 81
    2be6:	f1 05       	cpc	r31, r1
    2be8:	08 f0       	brcs	.+2      	; 0x2bec <__vector_39+0x3a>
    2bea:	75 c0       	rjmp	.+234    	; 0x2cd6 <__vector_39+0x124>
    2bec:	88 27       	eor	r24, r24
    2bee:	e4 58       	subi	r30, 0x84	; 132
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	8f 4f       	sbci	r24, 0xFF	; 255
    2bf4:	c8 c2       	rjmp	.+1424   	; 0x3186 <__tablejump2__>
    2bf6:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_index.1885>
    2bfa:	e0 91 0a 04 	lds	r30, 0x040A	; 0x80040a <_index.1885>
    2bfe:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <_twiMessageLen>
    2c02:	e8 17       	cp	r30, r24
    2c04:	70 f4       	brcc	.+28     	; 0x2c22 <__vector_39+0x70>
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	8e 0f       	add	r24, r30
    2c0a:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <_index.1885>
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	e2 5f       	subi	r30, 0xF2	; 242
    2c12:	fb 4f       	sbci	r31, 0xFB	; 251
    2c14:	80 81       	ld	r24, Z
    2c16:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2c1a:	85 e8       	ldi	r24, 0x85	; 133
    2c1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2c20:	72 c0       	rjmp	.+228    	; 0x2d06 <__vector_39+0x154>
    2c22:	84 e9       	ldi	r24, 0x94	; 148
    2c24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2c28:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <_twiCurrentHandler>
    2c2c:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <_twiCurrentHandler+0x1>
    2c30:	dc 01       	movw	r26, r24
    2c32:	12 96       	adiw	r26, 0x02	; 2
    2c34:	ed 91       	ld	r30, X+
    2c36:	fc 91       	ld	r31, X
    2c38:	13 97       	sbiw	r26, 0x03	; 3
    2c3a:	30 97       	sbiw	r30, 0x00	; 0
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <__vector_39+0x8e>
    2c3e:	63 c0       	rjmp	.+198    	; 0x2d06 <__vector_39+0x154>
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	40 e0       	ldi	r20, 0x00	; 0
    2c44:	50 e0       	ldi	r21, 0x00	; 0
    2c46:	64 e0       	ldi	r22, 0x04	; 4
    2c48:	19 95       	eicall
    2c4a:	5d c0       	rjmp	.+186    	; 0x2d06 <__vector_39+0x154>
    2c4c:	e0 91 0a 04 	lds	r30, 0x040A	; 0x80040a <_index.1885>
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	8e 0f       	add	r24, r30
    2c54:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <_index.1885>
    2c58:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	e2 5f       	subi	r30, 0xF2	; 242
    2c60:	fb 4f       	sbci	r31, 0xFB	; 251
    2c62:	80 83       	st	Z, r24
    2c64:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2c68:	80 34       	cpi	r24, 0x40	; 64
    2c6a:	11 f4       	brne	.+4      	; 0x2c70 <__vector_39+0xbe>
    2c6c:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <_index.1885>
    2c70:	20 91 0a 04 	lds	r18, 0x040A	; 0x80040a <_index.1885>
    2c74:	30 e0       	ldi	r19, 0x00	; 0
    2c76:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <_twiMessageLen>
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	28 17       	cp	r18, r24
    2c80:	39 07       	cpc	r19, r25
    2c82:	24 f4       	brge	.+8      	; 0x2c8c <__vector_39+0xda>
    2c84:	85 ec       	ldi	r24, 0xC5	; 197
    2c86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2c8a:	3d c0       	rjmp	.+122    	; 0x2d06 <__vector_39+0x154>
    2c8c:	85 e8       	ldi	r24, 0x85	; 133
    2c8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2c92:	39 c0       	rjmp	.+114    	; 0x2d06 <__vector_39+0x154>
    2c94:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    2c98:	e0 91 0a 04 	lds	r30, 0x040A	; 0x80040a <_index.1885>
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	e2 5f       	subi	r30, 0xF2	; 242
    2ca0:	fb 4f       	sbci	r31, 0xFB	; 251
    2ca2:	80 83       	st	Z, r24
    2ca4:	84 e9       	ldi	r24, 0x94	; 148
    2ca6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2caa:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <_twiCurrentHandler>
    2cae:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <_twiCurrentHandler+0x1>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	12 96       	adiw	r26, 0x02	; 2
    2cb6:	ed 91       	ld	r30, X+
    2cb8:	fc 91       	ld	r31, X
    2cba:	13 97       	sbiw	r26, 0x03	; 3
    2cbc:	30 97       	sbiw	r30, 0x00	; 0
    2cbe:	19 f1       	breq	.+70     	; 0x2d06 <__vector_39+0x154>
    2cc0:	20 91 0d 04 	lds	r18, 0x040D	; 0x80040d <_twiMessageLen>
    2cc4:	4e e0       	ldi	r20, 0x0E	; 14
    2cc6:	54 e0       	ldi	r21, 0x04	; 4
    2cc8:	65 e0       	ldi	r22, 0x05	; 5
    2cca:	19 95       	eicall
    2ccc:	1c c0       	rjmp	.+56     	; 0x2d06 <__vector_39+0x154>
    2cce:	85 ea       	ldi	r24, 0xA5	; 165
    2cd0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2cd4:	18 c0       	rjmp	.+48     	; 0x2d06 <__vector_39+0x154>
    2cd6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    2cda:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <_twiCurrentState>
    2cde:	84 e0       	ldi	r24, 0x04	; 4
    2ce0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    2ce4:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <_twiCurrentHandler>
    2ce8:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <_twiCurrentHandler+0x1>
    2cec:	dc 01       	movw	r26, r24
    2cee:	12 96       	adiw	r26, 0x02	; 2
    2cf0:	ed 91       	ld	r30, X+
    2cf2:	fc 91       	ld	r31, X
    2cf4:	13 97       	sbiw	r26, 0x03	; 3
    2cf6:	30 97       	sbiw	r30, 0x00	; 0
    2cf8:	31 f0       	breq	.+12     	; 0x2d06 <__vector_39+0x154>
    2cfa:	20 e0       	ldi	r18, 0x00	; 0
    2cfc:	40 e0       	ldi	r20, 0x00	; 0
    2cfe:	50 e0       	ldi	r21, 0x00	; 0
    2d00:	60 91 20 02 	lds	r22, 0x0220	; 0x800220 <_twiCurrentState>
    2d04:	19 95       	eicall
    2d06:	ff 91       	pop	r31
    2d08:	ef 91       	pop	r30
    2d0a:	bf 91       	pop	r27
    2d0c:	af 91       	pop	r26
    2d0e:	9f 91       	pop	r25
    2d10:	8f 91       	pop	r24
    2d12:	7f 91       	pop	r23
    2d14:	6f 91       	pop	r22
    2d16:	5f 91       	pop	r21
    2d18:	4f 91       	pop	r20
    2d1a:	3f 91       	pop	r19
    2d1c:	2f 91       	pop	r18
    2d1e:	0f 90       	pop	r0
    2d20:	0b be       	out	0x3b, r0	; 59
    2d22:	0f 90       	pop	r0
    2d24:	0f be       	out	0x3f, r0	; 63
    2d26:	0f 90       	pop	r0
    2d28:	1f 90       	pop	r1
    2d2a:	18 95       	reti

00002d2c <fifo_init>:
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	41 11       	cpse	r20, r1
    2d30:	01 c0       	rjmp	.+2      	; 0x2d34 <fifo_init+0x8>
    2d32:	6c d3       	rcall	.+1752   	; 0x340c <abort>
    2d34:	84 2f       	mov	r24, r20
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	9c 01       	movw	r18, r24
    2d3a:	21 50       	subi	r18, 0x01	; 1
    2d3c:	31 09       	sbc	r19, r1
    2d3e:	82 23       	and	r24, r18
    2d40:	93 23       	and	r25, r19
    2d42:	89 2b       	or	r24, r25
    2d44:	09 f0       	breq	.+2      	; 0x2d48 <fifo_init+0x1c>
    2d46:	62 d3       	rcall	.+1732   	; 0x340c <abort>
    2d48:	41 38       	cpi	r20, 0x81	; 129
    2d4a:	08 f0       	brcs	.+2      	; 0x2d4e <fifo_init+0x22>
    2d4c:	5f d3       	rcall	.+1726   	; 0x340c <abort>
    2d4e:	12 82       	std	Z+2, r1	; 0x02
    2d50:	13 82       	std	Z+3, r1	; 0x03
    2d52:	44 83       	std	Z+4, r20	; 0x04
    2d54:	44 0f       	add	r20, r20
    2d56:	41 50       	subi	r20, 0x01	; 1
    2d58:	45 83       	std	Z+5, r20	; 0x05
    2d5a:	71 83       	std	Z+1, r23	; 0x01
    2d5c:	60 83       	st	Z, r22
    2d5e:	80 e0       	ldi	r24, 0x00	; 0
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	08 95       	ret

00002d64 <__subsf3>:
    2d64:	50 58       	subi	r21, 0x80	; 128

00002d66 <__addsf3>:
    2d66:	bb 27       	eor	r27, r27
    2d68:	aa 27       	eor	r26, r26
    2d6a:	0e d0       	rcall	.+28     	; 0x2d88 <__addsf3x>
    2d6c:	4d c1       	rjmp	.+666    	; 0x3008 <__fp_round>
    2d6e:	3e d1       	rcall	.+636    	; 0x2fec <__fp_pscA>
    2d70:	30 f0       	brcs	.+12     	; 0x2d7e <__addsf3+0x18>
    2d72:	43 d1       	rcall	.+646    	; 0x2ffa <__fp_pscB>
    2d74:	20 f0       	brcs	.+8      	; 0x2d7e <__addsf3+0x18>
    2d76:	31 f4       	brne	.+12     	; 0x2d84 <__addsf3+0x1e>
    2d78:	9f 3f       	cpi	r25, 0xFF	; 255
    2d7a:	11 f4       	brne	.+4      	; 0x2d80 <__addsf3+0x1a>
    2d7c:	1e f4       	brtc	.+6      	; 0x2d84 <__addsf3+0x1e>
    2d7e:	33 c1       	rjmp	.+614    	; 0x2fe6 <__fp_nan>
    2d80:	0e f4       	brtc	.+2      	; 0x2d84 <__addsf3+0x1e>
    2d82:	e0 95       	com	r30
    2d84:	e7 fb       	bst	r30, 7
    2d86:	29 c1       	rjmp	.+594    	; 0x2fda <__fp_inf>

00002d88 <__addsf3x>:
    2d88:	e9 2f       	mov	r30, r25
    2d8a:	4f d1       	rcall	.+670    	; 0x302a <__fp_split3>
    2d8c:	80 f3       	brcs	.-32     	; 0x2d6e <__addsf3+0x8>
    2d8e:	ba 17       	cp	r27, r26
    2d90:	62 07       	cpc	r22, r18
    2d92:	73 07       	cpc	r23, r19
    2d94:	84 07       	cpc	r24, r20
    2d96:	95 07       	cpc	r25, r21
    2d98:	18 f0       	brcs	.+6      	; 0x2da0 <__addsf3x+0x18>
    2d9a:	71 f4       	brne	.+28     	; 0x2db8 <__addsf3x+0x30>
    2d9c:	9e f5       	brtc	.+102    	; 0x2e04 <__addsf3x+0x7c>
    2d9e:	67 c1       	rjmp	.+718    	; 0x306e <__fp_zero>
    2da0:	0e f4       	brtc	.+2      	; 0x2da4 <__addsf3x+0x1c>
    2da2:	e0 95       	com	r30
    2da4:	0b 2e       	mov	r0, r27
    2da6:	ba 2f       	mov	r27, r26
    2da8:	a0 2d       	mov	r26, r0
    2daa:	0b 01       	movw	r0, r22
    2dac:	b9 01       	movw	r22, r18
    2dae:	90 01       	movw	r18, r0
    2db0:	0c 01       	movw	r0, r24
    2db2:	ca 01       	movw	r24, r20
    2db4:	a0 01       	movw	r20, r0
    2db6:	11 24       	eor	r1, r1
    2db8:	ff 27       	eor	r31, r31
    2dba:	59 1b       	sub	r21, r25
    2dbc:	99 f0       	breq	.+38     	; 0x2de4 <__addsf3x+0x5c>
    2dbe:	59 3f       	cpi	r21, 0xF9	; 249
    2dc0:	50 f4       	brcc	.+20     	; 0x2dd6 <__addsf3x+0x4e>
    2dc2:	50 3e       	cpi	r21, 0xE0	; 224
    2dc4:	68 f1       	brcs	.+90     	; 0x2e20 <__addsf3x+0x98>
    2dc6:	1a 16       	cp	r1, r26
    2dc8:	f0 40       	sbci	r31, 0x00	; 0
    2dca:	a2 2f       	mov	r26, r18
    2dcc:	23 2f       	mov	r18, r19
    2dce:	34 2f       	mov	r19, r20
    2dd0:	44 27       	eor	r20, r20
    2dd2:	58 5f       	subi	r21, 0xF8	; 248
    2dd4:	f3 cf       	rjmp	.-26     	; 0x2dbc <__addsf3x+0x34>
    2dd6:	46 95       	lsr	r20
    2dd8:	37 95       	ror	r19
    2dda:	27 95       	ror	r18
    2ddc:	a7 95       	ror	r26
    2dde:	f0 40       	sbci	r31, 0x00	; 0
    2de0:	53 95       	inc	r21
    2de2:	c9 f7       	brne	.-14     	; 0x2dd6 <__addsf3x+0x4e>
    2de4:	7e f4       	brtc	.+30     	; 0x2e04 <__addsf3x+0x7c>
    2de6:	1f 16       	cp	r1, r31
    2de8:	ba 0b       	sbc	r27, r26
    2dea:	62 0b       	sbc	r22, r18
    2dec:	73 0b       	sbc	r23, r19
    2dee:	84 0b       	sbc	r24, r20
    2df0:	ba f0       	brmi	.+46     	; 0x2e20 <__addsf3x+0x98>
    2df2:	91 50       	subi	r25, 0x01	; 1
    2df4:	a1 f0       	breq	.+40     	; 0x2e1e <__addsf3x+0x96>
    2df6:	ff 0f       	add	r31, r31
    2df8:	bb 1f       	adc	r27, r27
    2dfa:	66 1f       	adc	r22, r22
    2dfc:	77 1f       	adc	r23, r23
    2dfe:	88 1f       	adc	r24, r24
    2e00:	c2 f7       	brpl	.-16     	; 0x2df2 <__addsf3x+0x6a>
    2e02:	0e c0       	rjmp	.+28     	; 0x2e20 <__addsf3x+0x98>
    2e04:	ba 0f       	add	r27, r26
    2e06:	62 1f       	adc	r22, r18
    2e08:	73 1f       	adc	r23, r19
    2e0a:	84 1f       	adc	r24, r20
    2e0c:	48 f4       	brcc	.+18     	; 0x2e20 <__addsf3x+0x98>
    2e0e:	87 95       	ror	r24
    2e10:	77 95       	ror	r23
    2e12:	67 95       	ror	r22
    2e14:	b7 95       	ror	r27
    2e16:	f7 95       	ror	r31
    2e18:	9e 3f       	cpi	r25, 0xFE	; 254
    2e1a:	08 f0       	brcs	.+2      	; 0x2e1e <__addsf3x+0x96>
    2e1c:	b3 cf       	rjmp	.-154    	; 0x2d84 <__addsf3+0x1e>
    2e1e:	93 95       	inc	r25
    2e20:	88 0f       	add	r24, r24
    2e22:	08 f0       	brcs	.+2      	; 0x2e26 <__addsf3x+0x9e>
    2e24:	99 27       	eor	r25, r25
    2e26:	ee 0f       	add	r30, r30
    2e28:	97 95       	ror	r25
    2e2a:	87 95       	ror	r24
    2e2c:	08 95       	ret

00002e2e <__divsf3>:
    2e2e:	0c d0       	rcall	.+24     	; 0x2e48 <__divsf3x>
    2e30:	eb c0       	rjmp	.+470    	; 0x3008 <__fp_round>
    2e32:	e3 d0       	rcall	.+454    	; 0x2ffa <__fp_pscB>
    2e34:	40 f0       	brcs	.+16     	; 0x2e46 <__divsf3+0x18>
    2e36:	da d0       	rcall	.+436    	; 0x2fec <__fp_pscA>
    2e38:	30 f0       	brcs	.+12     	; 0x2e46 <__divsf3+0x18>
    2e3a:	21 f4       	brne	.+8      	; 0x2e44 <__divsf3+0x16>
    2e3c:	5f 3f       	cpi	r21, 0xFF	; 255
    2e3e:	19 f0       	breq	.+6      	; 0x2e46 <__divsf3+0x18>
    2e40:	cc c0       	rjmp	.+408    	; 0x2fda <__fp_inf>
    2e42:	51 11       	cpse	r21, r1
    2e44:	15 c1       	rjmp	.+554    	; 0x3070 <__fp_szero>
    2e46:	cf c0       	rjmp	.+414    	; 0x2fe6 <__fp_nan>

00002e48 <__divsf3x>:
    2e48:	f0 d0       	rcall	.+480    	; 0x302a <__fp_split3>
    2e4a:	98 f3       	brcs	.-26     	; 0x2e32 <__divsf3+0x4>

00002e4c <__divsf3_pse>:
    2e4c:	99 23       	and	r25, r25
    2e4e:	c9 f3       	breq	.-14     	; 0x2e42 <__divsf3+0x14>
    2e50:	55 23       	and	r21, r21
    2e52:	b1 f3       	breq	.-20     	; 0x2e40 <__divsf3+0x12>
    2e54:	95 1b       	sub	r25, r21
    2e56:	55 0b       	sbc	r21, r21
    2e58:	bb 27       	eor	r27, r27
    2e5a:	aa 27       	eor	r26, r26
    2e5c:	62 17       	cp	r22, r18
    2e5e:	73 07       	cpc	r23, r19
    2e60:	84 07       	cpc	r24, r20
    2e62:	38 f0       	brcs	.+14     	; 0x2e72 <__divsf3_pse+0x26>
    2e64:	9f 5f       	subi	r25, 0xFF	; 255
    2e66:	5f 4f       	sbci	r21, 0xFF	; 255
    2e68:	22 0f       	add	r18, r18
    2e6a:	33 1f       	adc	r19, r19
    2e6c:	44 1f       	adc	r20, r20
    2e6e:	aa 1f       	adc	r26, r26
    2e70:	a9 f3       	breq	.-22     	; 0x2e5c <__divsf3_pse+0x10>
    2e72:	33 d0       	rcall	.+102    	; 0x2eda <__divsf3_pse+0x8e>
    2e74:	0e 2e       	mov	r0, r30
    2e76:	3a f0       	brmi	.+14     	; 0x2e86 <__divsf3_pse+0x3a>
    2e78:	e0 e8       	ldi	r30, 0x80	; 128
    2e7a:	30 d0       	rcall	.+96     	; 0x2edc <__divsf3_pse+0x90>
    2e7c:	91 50       	subi	r25, 0x01	; 1
    2e7e:	50 40       	sbci	r21, 0x00	; 0
    2e80:	e6 95       	lsr	r30
    2e82:	00 1c       	adc	r0, r0
    2e84:	ca f7       	brpl	.-14     	; 0x2e78 <__divsf3_pse+0x2c>
    2e86:	29 d0       	rcall	.+82     	; 0x2eda <__divsf3_pse+0x8e>
    2e88:	fe 2f       	mov	r31, r30
    2e8a:	27 d0       	rcall	.+78     	; 0x2eda <__divsf3_pse+0x8e>
    2e8c:	66 0f       	add	r22, r22
    2e8e:	77 1f       	adc	r23, r23
    2e90:	88 1f       	adc	r24, r24
    2e92:	bb 1f       	adc	r27, r27
    2e94:	26 17       	cp	r18, r22
    2e96:	37 07       	cpc	r19, r23
    2e98:	48 07       	cpc	r20, r24
    2e9a:	ab 07       	cpc	r26, r27
    2e9c:	b0 e8       	ldi	r27, 0x80	; 128
    2e9e:	09 f0       	breq	.+2      	; 0x2ea2 <__divsf3_pse+0x56>
    2ea0:	bb 0b       	sbc	r27, r27
    2ea2:	80 2d       	mov	r24, r0
    2ea4:	bf 01       	movw	r22, r30
    2ea6:	ff 27       	eor	r31, r31
    2ea8:	93 58       	subi	r25, 0x83	; 131
    2eaa:	5f 4f       	sbci	r21, 0xFF	; 255
    2eac:	2a f0       	brmi	.+10     	; 0x2eb8 <__divsf3_pse+0x6c>
    2eae:	9e 3f       	cpi	r25, 0xFE	; 254
    2eb0:	51 05       	cpc	r21, r1
    2eb2:	68 f0       	brcs	.+26     	; 0x2ece <__divsf3_pse+0x82>
    2eb4:	92 c0       	rjmp	.+292    	; 0x2fda <__fp_inf>
    2eb6:	dc c0       	rjmp	.+440    	; 0x3070 <__fp_szero>
    2eb8:	5f 3f       	cpi	r21, 0xFF	; 255
    2eba:	ec f3       	brlt	.-6      	; 0x2eb6 <__divsf3_pse+0x6a>
    2ebc:	98 3e       	cpi	r25, 0xE8	; 232
    2ebe:	dc f3       	brlt	.-10     	; 0x2eb6 <__divsf3_pse+0x6a>
    2ec0:	86 95       	lsr	r24
    2ec2:	77 95       	ror	r23
    2ec4:	67 95       	ror	r22
    2ec6:	b7 95       	ror	r27
    2ec8:	f7 95       	ror	r31
    2eca:	9f 5f       	subi	r25, 0xFF	; 255
    2ecc:	c9 f7       	brne	.-14     	; 0x2ec0 <__divsf3_pse+0x74>
    2ece:	88 0f       	add	r24, r24
    2ed0:	91 1d       	adc	r25, r1
    2ed2:	96 95       	lsr	r25
    2ed4:	87 95       	ror	r24
    2ed6:	97 f9       	bld	r25, 7
    2ed8:	08 95       	ret
    2eda:	e1 e0       	ldi	r30, 0x01	; 1
    2edc:	66 0f       	add	r22, r22
    2ede:	77 1f       	adc	r23, r23
    2ee0:	88 1f       	adc	r24, r24
    2ee2:	bb 1f       	adc	r27, r27
    2ee4:	62 17       	cp	r22, r18
    2ee6:	73 07       	cpc	r23, r19
    2ee8:	84 07       	cpc	r24, r20
    2eea:	ba 07       	cpc	r27, r26
    2eec:	20 f0       	brcs	.+8      	; 0x2ef6 <__divsf3_pse+0xaa>
    2eee:	62 1b       	sub	r22, r18
    2ef0:	73 0b       	sbc	r23, r19
    2ef2:	84 0b       	sbc	r24, r20
    2ef4:	ba 0b       	sbc	r27, r26
    2ef6:	ee 1f       	adc	r30, r30
    2ef8:	88 f7       	brcc	.-30     	; 0x2edc <__divsf3_pse+0x90>
    2efa:	e0 95       	com	r30
    2efc:	08 95       	ret

00002efe <__fixsfsi>:
    2efe:	04 d0       	rcall	.+8      	; 0x2f08 <__fixunssfsi>
    2f00:	68 94       	set
    2f02:	b1 11       	cpse	r27, r1
    2f04:	b5 c0       	rjmp	.+362    	; 0x3070 <__fp_szero>
    2f06:	08 95       	ret

00002f08 <__fixunssfsi>:
    2f08:	98 d0       	rcall	.+304    	; 0x303a <__fp_splitA>
    2f0a:	88 f0       	brcs	.+34     	; 0x2f2e <__fixunssfsi+0x26>
    2f0c:	9f 57       	subi	r25, 0x7F	; 127
    2f0e:	90 f0       	brcs	.+36     	; 0x2f34 <__fixunssfsi+0x2c>
    2f10:	b9 2f       	mov	r27, r25
    2f12:	99 27       	eor	r25, r25
    2f14:	b7 51       	subi	r27, 0x17	; 23
    2f16:	a0 f0       	brcs	.+40     	; 0x2f40 <__fixunssfsi+0x38>
    2f18:	d1 f0       	breq	.+52     	; 0x2f4e <__fixunssfsi+0x46>
    2f1a:	66 0f       	add	r22, r22
    2f1c:	77 1f       	adc	r23, r23
    2f1e:	88 1f       	adc	r24, r24
    2f20:	99 1f       	adc	r25, r25
    2f22:	1a f0       	brmi	.+6      	; 0x2f2a <__fixunssfsi+0x22>
    2f24:	ba 95       	dec	r27
    2f26:	c9 f7       	brne	.-14     	; 0x2f1a <__fixunssfsi+0x12>
    2f28:	12 c0       	rjmp	.+36     	; 0x2f4e <__fixunssfsi+0x46>
    2f2a:	b1 30       	cpi	r27, 0x01	; 1
    2f2c:	81 f0       	breq	.+32     	; 0x2f4e <__fixunssfsi+0x46>
    2f2e:	9f d0       	rcall	.+318    	; 0x306e <__fp_zero>
    2f30:	b1 e0       	ldi	r27, 0x01	; 1
    2f32:	08 95       	ret
    2f34:	9c c0       	rjmp	.+312    	; 0x306e <__fp_zero>
    2f36:	67 2f       	mov	r22, r23
    2f38:	78 2f       	mov	r23, r24
    2f3a:	88 27       	eor	r24, r24
    2f3c:	b8 5f       	subi	r27, 0xF8	; 248
    2f3e:	39 f0       	breq	.+14     	; 0x2f4e <__fixunssfsi+0x46>
    2f40:	b9 3f       	cpi	r27, 0xF9	; 249
    2f42:	cc f3       	brlt	.-14     	; 0x2f36 <__fixunssfsi+0x2e>
    2f44:	86 95       	lsr	r24
    2f46:	77 95       	ror	r23
    2f48:	67 95       	ror	r22
    2f4a:	b3 95       	inc	r27
    2f4c:	d9 f7       	brne	.-10     	; 0x2f44 <__fixunssfsi+0x3c>
    2f4e:	3e f4       	brtc	.+14     	; 0x2f5e <__fixunssfsi+0x56>
    2f50:	90 95       	com	r25
    2f52:	80 95       	com	r24
    2f54:	70 95       	com	r23
    2f56:	61 95       	neg	r22
    2f58:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f5e:	08 95       	ret

00002f60 <__floatunsisf>:
    2f60:	e8 94       	clt
    2f62:	09 c0       	rjmp	.+18     	; 0x2f76 <__floatsisf+0x12>

00002f64 <__floatsisf>:
    2f64:	97 fb       	bst	r25, 7
    2f66:	3e f4       	brtc	.+14     	; 0x2f76 <__floatsisf+0x12>
    2f68:	90 95       	com	r25
    2f6a:	80 95       	com	r24
    2f6c:	70 95       	com	r23
    2f6e:	61 95       	neg	r22
    2f70:	7f 4f       	sbci	r23, 0xFF	; 255
    2f72:	8f 4f       	sbci	r24, 0xFF	; 255
    2f74:	9f 4f       	sbci	r25, 0xFF	; 255
    2f76:	99 23       	and	r25, r25
    2f78:	a9 f0       	breq	.+42     	; 0x2fa4 <__floatsisf+0x40>
    2f7a:	f9 2f       	mov	r31, r25
    2f7c:	96 e9       	ldi	r25, 0x96	; 150
    2f7e:	bb 27       	eor	r27, r27
    2f80:	93 95       	inc	r25
    2f82:	f6 95       	lsr	r31
    2f84:	87 95       	ror	r24
    2f86:	77 95       	ror	r23
    2f88:	67 95       	ror	r22
    2f8a:	b7 95       	ror	r27
    2f8c:	f1 11       	cpse	r31, r1
    2f8e:	f8 cf       	rjmp	.-16     	; 0x2f80 <__floatsisf+0x1c>
    2f90:	fa f4       	brpl	.+62     	; 0x2fd0 <__floatsisf+0x6c>
    2f92:	bb 0f       	add	r27, r27
    2f94:	11 f4       	brne	.+4      	; 0x2f9a <__floatsisf+0x36>
    2f96:	60 ff       	sbrs	r22, 0
    2f98:	1b c0       	rjmp	.+54     	; 0x2fd0 <__floatsisf+0x6c>
    2f9a:	6f 5f       	subi	r22, 0xFF	; 255
    2f9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f9e:	8f 4f       	sbci	r24, 0xFF	; 255
    2fa0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fa2:	16 c0       	rjmp	.+44     	; 0x2fd0 <__floatsisf+0x6c>
    2fa4:	88 23       	and	r24, r24
    2fa6:	11 f0       	breq	.+4      	; 0x2fac <__floatsisf+0x48>
    2fa8:	96 e9       	ldi	r25, 0x96	; 150
    2faa:	11 c0       	rjmp	.+34     	; 0x2fce <__floatsisf+0x6a>
    2fac:	77 23       	and	r23, r23
    2fae:	21 f0       	breq	.+8      	; 0x2fb8 <__floatsisf+0x54>
    2fb0:	9e e8       	ldi	r25, 0x8E	; 142
    2fb2:	87 2f       	mov	r24, r23
    2fb4:	76 2f       	mov	r23, r22
    2fb6:	05 c0       	rjmp	.+10     	; 0x2fc2 <__floatsisf+0x5e>
    2fb8:	66 23       	and	r22, r22
    2fba:	71 f0       	breq	.+28     	; 0x2fd8 <__floatsisf+0x74>
    2fbc:	96 e8       	ldi	r25, 0x86	; 134
    2fbe:	86 2f       	mov	r24, r22
    2fc0:	70 e0       	ldi	r23, 0x00	; 0
    2fc2:	60 e0       	ldi	r22, 0x00	; 0
    2fc4:	2a f0       	brmi	.+10     	; 0x2fd0 <__floatsisf+0x6c>
    2fc6:	9a 95       	dec	r25
    2fc8:	66 0f       	add	r22, r22
    2fca:	77 1f       	adc	r23, r23
    2fcc:	88 1f       	adc	r24, r24
    2fce:	da f7       	brpl	.-10     	; 0x2fc6 <__floatsisf+0x62>
    2fd0:	88 0f       	add	r24, r24
    2fd2:	96 95       	lsr	r25
    2fd4:	87 95       	ror	r24
    2fd6:	97 f9       	bld	r25, 7
    2fd8:	08 95       	ret

00002fda <__fp_inf>:
    2fda:	97 f9       	bld	r25, 7
    2fdc:	9f 67       	ori	r25, 0x7F	; 127
    2fde:	80 e8       	ldi	r24, 0x80	; 128
    2fe0:	70 e0       	ldi	r23, 0x00	; 0
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	08 95       	ret

00002fe6 <__fp_nan>:
    2fe6:	9f ef       	ldi	r25, 0xFF	; 255
    2fe8:	80 ec       	ldi	r24, 0xC0	; 192
    2fea:	08 95       	ret

00002fec <__fp_pscA>:
    2fec:	00 24       	eor	r0, r0
    2fee:	0a 94       	dec	r0
    2ff0:	16 16       	cp	r1, r22
    2ff2:	17 06       	cpc	r1, r23
    2ff4:	18 06       	cpc	r1, r24
    2ff6:	09 06       	cpc	r0, r25
    2ff8:	08 95       	ret

00002ffa <__fp_pscB>:
    2ffa:	00 24       	eor	r0, r0
    2ffc:	0a 94       	dec	r0
    2ffe:	12 16       	cp	r1, r18
    3000:	13 06       	cpc	r1, r19
    3002:	14 06       	cpc	r1, r20
    3004:	05 06       	cpc	r0, r21
    3006:	08 95       	ret

00003008 <__fp_round>:
    3008:	09 2e       	mov	r0, r25
    300a:	03 94       	inc	r0
    300c:	00 0c       	add	r0, r0
    300e:	11 f4       	brne	.+4      	; 0x3014 <__fp_round+0xc>
    3010:	88 23       	and	r24, r24
    3012:	52 f0       	brmi	.+20     	; 0x3028 <__fp_round+0x20>
    3014:	bb 0f       	add	r27, r27
    3016:	40 f4       	brcc	.+16     	; 0x3028 <__fp_round+0x20>
    3018:	bf 2b       	or	r27, r31
    301a:	11 f4       	brne	.+4      	; 0x3020 <__fp_round+0x18>
    301c:	60 ff       	sbrs	r22, 0
    301e:	04 c0       	rjmp	.+8      	; 0x3028 <__fp_round+0x20>
    3020:	6f 5f       	subi	r22, 0xFF	; 255
    3022:	7f 4f       	sbci	r23, 0xFF	; 255
    3024:	8f 4f       	sbci	r24, 0xFF	; 255
    3026:	9f 4f       	sbci	r25, 0xFF	; 255
    3028:	08 95       	ret

0000302a <__fp_split3>:
    302a:	57 fd       	sbrc	r21, 7
    302c:	90 58       	subi	r25, 0x80	; 128
    302e:	44 0f       	add	r20, r20
    3030:	55 1f       	adc	r21, r21
    3032:	59 f0       	breq	.+22     	; 0x304a <__fp_splitA+0x10>
    3034:	5f 3f       	cpi	r21, 0xFF	; 255
    3036:	71 f0       	breq	.+28     	; 0x3054 <__fp_splitA+0x1a>
    3038:	47 95       	ror	r20

0000303a <__fp_splitA>:
    303a:	88 0f       	add	r24, r24
    303c:	97 fb       	bst	r25, 7
    303e:	99 1f       	adc	r25, r25
    3040:	61 f0       	breq	.+24     	; 0x305a <__fp_splitA+0x20>
    3042:	9f 3f       	cpi	r25, 0xFF	; 255
    3044:	79 f0       	breq	.+30     	; 0x3064 <__fp_splitA+0x2a>
    3046:	87 95       	ror	r24
    3048:	08 95       	ret
    304a:	12 16       	cp	r1, r18
    304c:	13 06       	cpc	r1, r19
    304e:	14 06       	cpc	r1, r20
    3050:	55 1f       	adc	r21, r21
    3052:	f2 cf       	rjmp	.-28     	; 0x3038 <__fp_split3+0xe>
    3054:	46 95       	lsr	r20
    3056:	f1 df       	rcall	.-30     	; 0x303a <__fp_splitA>
    3058:	08 c0       	rjmp	.+16     	; 0x306a <__fp_splitA+0x30>
    305a:	16 16       	cp	r1, r22
    305c:	17 06       	cpc	r1, r23
    305e:	18 06       	cpc	r1, r24
    3060:	99 1f       	adc	r25, r25
    3062:	f1 cf       	rjmp	.-30     	; 0x3046 <__fp_splitA+0xc>
    3064:	86 95       	lsr	r24
    3066:	71 05       	cpc	r23, r1
    3068:	61 05       	cpc	r22, r1
    306a:	08 94       	sec
    306c:	08 95       	ret

0000306e <__fp_zero>:
    306e:	e8 94       	clt

00003070 <__fp_szero>:
    3070:	bb 27       	eor	r27, r27
    3072:	66 27       	eor	r22, r22
    3074:	77 27       	eor	r23, r23
    3076:	cb 01       	movw	r24, r22
    3078:	97 f9       	bld	r25, 7
    307a:	08 95       	ret

0000307c <__mulsf3>:
    307c:	0b d0       	rcall	.+22     	; 0x3094 <__mulsf3x>
    307e:	c4 cf       	rjmp	.-120    	; 0x3008 <__fp_round>
    3080:	b5 df       	rcall	.-150    	; 0x2fec <__fp_pscA>
    3082:	28 f0       	brcs	.+10     	; 0x308e <__mulsf3+0x12>
    3084:	ba df       	rcall	.-140    	; 0x2ffa <__fp_pscB>
    3086:	18 f0       	brcs	.+6      	; 0x308e <__mulsf3+0x12>
    3088:	95 23       	and	r25, r21
    308a:	09 f0       	breq	.+2      	; 0x308e <__mulsf3+0x12>
    308c:	a6 cf       	rjmp	.-180    	; 0x2fda <__fp_inf>
    308e:	ab cf       	rjmp	.-170    	; 0x2fe6 <__fp_nan>
    3090:	11 24       	eor	r1, r1
    3092:	ee cf       	rjmp	.-36     	; 0x3070 <__fp_szero>

00003094 <__mulsf3x>:
    3094:	ca df       	rcall	.-108    	; 0x302a <__fp_split3>
    3096:	a0 f3       	brcs	.-24     	; 0x3080 <__mulsf3+0x4>

00003098 <__mulsf3_pse>:
    3098:	95 9f       	mul	r25, r21
    309a:	d1 f3       	breq	.-12     	; 0x3090 <__mulsf3+0x14>
    309c:	95 0f       	add	r25, r21
    309e:	50 e0       	ldi	r21, 0x00	; 0
    30a0:	55 1f       	adc	r21, r21
    30a2:	62 9f       	mul	r22, r18
    30a4:	f0 01       	movw	r30, r0
    30a6:	72 9f       	mul	r23, r18
    30a8:	bb 27       	eor	r27, r27
    30aa:	f0 0d       	add	r31, r0
    30ac:	b1 1d       	adc	r27, r1
    30ae:	63 9f       	mul	r22, r19
    30b0:	aa 27       	eor	r26, r26
    30b2:	f0 0d       	add	r31, r0
    30b4:	b1 1d       	adc	r27, r1
    30b6:	aa 1f       	adc	r26, r26
    30b8:	64 9f       	mul	r22, r20
    30ba:	66 27       	eor	r22, r22
    30bc:	b0 0d       	add	r27, r0
    30be:	a1 1d       	adc	r26, r1
    30c0:	66 1f       	adc	r22, r22
    30c2:	82 9f       	mul	r24, r18
    30c4:	22 27       	eor	r18, r18
    30c6:	b0 0d       	add	r27, r0
    30c8:	a1 1d       	adc	r26, r1
    30ca:	62 1f       	adc	r22, r18
    30cc:	73 9f       	mul	r23, r19
    30ce:	b0 0d       	add	r27, r0
    30d0:	a1 1d       	adc	r26, r1
    30d2:	62 1f       	adc	r22, r18
    30d4:	83 9f       	mul	r24, r19
    30d6:	a0 0d       	add	r26, r0
    30d8:	61 1d       	adc	r22, r1
    30da:	22 1f       	adc	r18, r18
    30dc:	74 9f       	mul	r23, r20
    30de:	33 27       	eor	r19, r19
    30e0:	a0 0d       	add	r26, r0
    30e2:	61 1d       	adc	r22, r1
    30e4:	23 1f       	adc	r18, r19
    30e6:	84 9f       	mul	r24, r20
    30e8:	60 0d       	add	r22, r0
    30ea:	21 1d       	adc	r18, r1
    30ec:	82 2f       	mov	r24, r18
    30ee:	76 2f       	mov	r23, r22
    30f0:	6a 2f       	mov	r22, r26
    30f2:	11 24       	eor	r1, r1
    30f4:	9f 57       	subi	r25, 0x7F	; 127
    30f6:	50 40       	sbci	r21, 0x00	; 0
    30f8:	8a f0       	brmi	.+34     	; 0x311c <__mulsf3_pse+0x84>
    30fa:	e1 f0       	breq	.+56     	; 0x3134 <__mulsf3_pse+0x9c>
    30fc:	88 23       	and	r24, r24
    30fe:	4a f0       	brmi	.+18     	; 0x3112 <__mulsf3_pse+0x7a>
    3100:	ee 0f       	add	r30, r30
    3102:	ff 1f       	adc	r31, r31
    3104:	bb 1f       	adc	r27, r27
    3106:	66 1f       	adc	r22, r22
    3108:	77 1f       	adc	r23, r23
    310a:	88 1f       	adc	r24, r24
    310c:	91 50       	subi	r25, 0x01	; 1
    310e:	50 40       	sbci	r21, 0x00	; 0
    3110:	a9 f7       	brne	.-22     	; 0x30fc <__mulsf3_pse+0x64>
    3112:	9e 3f       	cpi	r25, 0xFE	; 254
    3114:	51 05       	cpc	r21, r1
    3116:	70 f0       	brcs	.+28     	; 0x3134 <__mulsf3_pse+0x9c>
    3118:	60 cf       	rjmp	.-320    	; 0x2fda <__fp_inf>
    311a:	aa cf       	rjmp	.-172    	; 0x3070 <__fp_szero>
    311c:	5f 3f       	cpi	r21, 0xFF	; 255
    311e:	ec f3       	brlt	.-6      	; 0x311a <__mulsf3_pse+0x82>
    3120:	98 3e       	cpi	r25, 0xE8	; 232
    3122:	dc f3       	brlt	.-10     	; 0x311a <__mulsf3_pse+0x82>
    3124:	86 95       	lsr	r24
    3126:	77 95       	ror	r23
    3128:	67 95       	ror	r22
    312a:	b7 95       	ror	r27
    312c:	f7 95       	ror	r31
    312e:	e7 95       	ror	r30
    3130:	9f 5f       	subi	r25, 0xFF	; 255
    3132:	c1 f7       	brne	.-16     	; 0x3124 <__mulsf3_pse+0x8c>
    3134:	fe 2b       	or	r31, r30
    3136:	88 0f       	add	r24, r24
    3138:	91 1d       	adc	r25, r1
    313a:	96 95       	lsr	r25
    313c:	87 95       	ror	r24
    313e:	97 f9       	bld	r25, 7
    3140:	08 95       	ret

00003142 <__udivmodsi4>:
    3142:	a1 e2       	ldi	r26, 0x21	; 33
    3144:	1a 2e       	mov	r1, r26
    3146:	aa 1b       	sub	r26, r26
    3148:	bb 1b       	sub	r27, r27
    314a:	fd 01       	movw	r30, r26
    314c:	0d c0       	rjmp	.+26     	; 0x3168 <__udivmodsi4_ep>

0000314e <__udivmodsi4_loop>:
    314e:	aa 1f       	adc	r26, r26
    3150:	bb 1f       	adc	r27, r27
    3152:	ee 1f       	adc	r30, r30
    3154:	ff 1f       	adc	r31, r31
    3156:	a2 17       	cp	r26, r18
    3158:	b3 07       	cpc	r27, r19
    315a:	e4 07       	cpc	r30, r20
    315c:	f5 07       	cpc	r31, r21
    315e:	20 f0       	brcs	.+8      	; 0x3168 <__udivmodsi4_ep>
    3160:	a2 1b       	sub	r26, r18
    3162:	b3 0b       	sbc	r27, r19
    3164:	e4 0b       	sbc	r30, r20
    3166:	f5 0b       	sbc	r31, r21

00003168 <__udivmodsi4_ep>:
    3168:	66 1f       	adc	r22, r22
    316a:	77 1f       	adc	r23, r23
    316c:	88 1f       	adc	r24, r24
    316e:	99 1f       	adc	r25, r25
    3170:	1a 94       	dec	r1
    3172:	69 f7       	brne	.-38     	; 0x314e <__udivmodsi4_loop>
    3174:	60 95       	com	r22
    3176:	70 95       	com	r23
    3178:	80 95       	com	r24
    317a:	90 95       	com	r25
    317c:	9b 01       	movw	r18, r22
    317e:	ac 01       	movw	r20, r24
    3180:	bd 01       	movw	r22, r26
    3182:	cf 01       	movw	r24, r30
    3184:	08 95       	ret

00003186 <__tablejump2__>:
    3186:	ee 0f       	add	r30, r30
    3188:	ff 1f       	adc	r31, r31
    318a:	88 1f       	adc	r24, r24
    318c:	8b bf       	out	0x3b, r24	; 59
    318e:	07 90       	elpm	r0, Z+
    3190:	f6 91       	elpm	r31, Z
    3192:	e0 2d       	mov	r30, r0
    3194:	19 94       	eijmp

00003196 <calloc>:
    3196:	0f 93       	push	r16
    3198:	1f 93       	push	r17
    319a:	cf 93       	push	r28
    319c:	df 93       	push	r29
    319e:	86 9f       	mul	r24, r22
    31a0:	80 01       	movw	r16, r0
    31a2:	87 9f       	mul	r24, r23
    31a4:	10 0d       	add	r17, r0
    31a6:	96 9f       	mul	r25, r22
    31a8:	10 0d       	add	r17, r0
    31aa:	11 24       	eor	r1, r1
    31ac:	c8 01       	movw	r24, r16
    31ae:	0d d0       	rcall	.+26     	; 0x31ca <malloc>
    31b0:	ec 01       	movw	r28, r24
    31b2:	00 97       	sbiw	r24, 0x00	; 0
    31b4:	21 f0       	breq	.+8      	; 0x31be <calloc+0x28>
    31b6:	a8 01       	movw	r20, r16
    31b8:	60 e0       	ldi	r22, 0x00	; 0
    31ba:	70 e0       	ldi	r23, 0x00	; 0
    31bc:	34 d1       	rcall	.+616    	; 0x3426 <memset>
    31be:	ce 01       	movw	r24, r28
    31c0:	df 91       	pop	r29
    31c2:	cf 91       	pop	r28
    31c4:	1f 91       	pop	r17
    31c6:	0f 91       	pop	r16
    31c8:	08 95       	ret

000031ca <malloc>:
    31ca:	0f 93       	push	r16
    31cc:	1f 93       	push	r17
    31ce:	cf 93       	push	r28
    31d0:	df 93       	push	r29
    31d2:	82 30       	cpi	r24, 0x02	; 2
    31d4:	91 05       	cpc	r25, r1
    31d6:	10 f4       	brcc	.+4      	; 0x31dc <malloc+0x12>
    31d8:	82 e0       	ldi	r24, 0x02	; 2
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	e0 91 2f 04 	lds	r30, 0x042F	; 0x80042f <__flp>
    31e0:	f0 91 30 04 	lds	r31, 0x0430	; 0x800430 <__flp+0x1>
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	a0 e0       	ldi	r26, 0x00	; 0
    31ea:	b0 e0       	ldi	r27, 0x00	; 0
    31ec:	30 97       	sbiw	r30, 0x00	; 0
    31ee:	19 f1       	breq	.+70     	; 0x3236 <malloc+0x6c>
    31f0:	40 81       	ld	r20, Z
    31f2:	51 81       	ldd	r21, Z+1	; 0x01
    31f4:	02 81       	ldd	r16, Z+2	; 0x02
    31f6:	13 81       	ldd	r17, Z+3	; 0x03
    31f8:	48 17       	cp	r20, r24
    31fa:	59 07       	cpc	r21, r25
    31fc:	c8 f0       	brcs	.+50     	; 0x3230 <malloc+0x66>
    31fe:	84 17       	cp	r24, r20
    3200:	95 07       	cpc	r25, r21
    3202:	69 f4       	brne	.+26     	; 0x321e <malloc+0x54>
    3204:	10 97       	sbiw	r26, 0x00	; 0
    3206:	31 f0       	breq	.+12     	; 0x3214 <malloc+0x4a>
    3208:	12 96       	adiw	r26, 0x02	; 2
    320a:	0c 93       	st	X, r16
    320c:	12 97       	sbiw	r26, 0x02	; 2
    320e:	13 96       	adiw	r26, 0x03	; 3
    3210:	1c 93       	st	X, r17
    3212:	27 c0       	rjmp	.+78     	; 0x3262 <malloc+0x98>
    3214:	00 93 2f 04 	sts	0x042F, r16	; 0x80042f <__flp>
    3218:	10 93 30 04 	sts	0x0430, r17	; 0x800430 <__flp+0x1>
    321c:	22 c0       	rjmp	.+68     	; 0x3262 <malloc+0x98>
    321e:	21 15       	cp	r18, r1
    3220:	31 05       	cpc	r19, r1
    3222:	19 f0       	breq	.+6      	; 0x322a <malloc+0x60>
    3224:	42 17       	cp	r20, r18
    3226:	53 07       	cpc	r21, r19
    3228:	18 f4       	brcc	.+6      	; 0x3230 <malloc+0x66>
    322a:	9a 01       	movw	r18, r20
    322c:	bd 01       	movw	r22, r26
    322e:	ef 01       	movw	r28, r30
    3230:	df 01       	movw	r26, r30
    3232:	f8 01       	movw	r30, r16
    3234:	db cf       	rjmp	.-74     	; 0x31ec <malloc+0x22>
    3236:	21 15       	cp	r18, r1
    3238:	31 05       	cpc	r19, r1
    323a:	f9 f0       	breq	.+62     	; 0x327a <malloc+0xb0>
    323c:	28 1b       	sub	r18, r24
    323e:	39 0b       	sbc	r19, r25
    3240:	24 30       	cpi	r18, 0x04	; 4
    3242:	31 05       	cpc	r19, r1
    3244:	80 f4       	brcc	.+32     	; 0x3266 <malloc+0x9c>
    3246:	8a 81       	ldd	r24, Y+2	; 0x02
    3248:	9b 81       	ldd	r25, Y+3	; 0x03
    324a:	61 15       	cp	r22, r1
    324c:	71 05       	cpc	r23, r1
    324e:	21 f0       	breq	.+8      	; 0x3258 <malloc+0x8e>
    3250:	fb 01       	movw	r30, r22
    3252:	93 83       	std	Z+3, r25	; 0x03
    3254:	82 83       	std	Z+2, r24	; 0x02
    3256:	04 c0       	rjmp	.+8      	; 0x3260 <malloc+0x96>
    3258:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <__flp+0x1>
    325c:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <__flp>
    3260:	fe 01       	movw	r30, r28
    3262:	32 96       	adiw	r30, 0x02	; 2
    3264:	44 c0       	rjmp	.+136    	; 0x32ee <malloc+0x124>
    3266:	fe 01       	movw	r30, r28
    3268:	e2 0f       	add	r30, r18
    326a:	f3 1f       	adc	r31, r19
    326c:	81 93       	st	Z+, r24
    326e:	91 93       	st	Z+, r25
    3270:	22 50       	subi	r18, 0x02	; 2
    3272:	31 09       	sbc	r19, r1
    3274:	39 83       	std	Y+1, r19	; 0x01
    3276:	28 83       	st	Y, r18
    3278:	3a c0       	rjmp	.+116    	; 0x32ee <malloc+0x124>
    327a:	20 91 2d 04 	lds	r18, 0x042D	; 0x80042d <__brkval>
    327e:	30 91 2e 04 	lds	r19, 0x042E	; 0x80042e <__brkval+0x1>
    3282:	23 2b       	or	r18, r19
    3284:	41 f4       	brne	.+16     	; 0x3296 <malloc+0xcc>
    3286:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    328a:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    328e:	30 93 2e 04 	sts	0x042E, r19	; 0x80042e <__brkval+0x1>
    3292:	20 93 2d 04 	sts	0x042D, r18	; 0x80042d <__brkval>
    3296:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    329a:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    329e:	21 15       	cp	r18, r1
    32a0:	31 05       	cpc	r19, r1
    32a2:	41 f4       	brne	.+16     	; 0x32b4 <malloc+0xea>
    32a4:	2d b7       	in	r18, 0x3d	; 61
    32a6:	3e b7       	in	r19, 0x3e	; 62
    32a8:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    32ac:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    32b0:	24 1b       	sub	r18, r20
    32b2:	35 0b       	sbc	r19, r21
    32b4:	e0 91 2d 04 	lds	r30, 0x042D	; 0x80042d <__brkval>
    32b8:	f0 91 2e 04 	lds	r31, 0x042E	; 0x80042e <__brkval+0x1>
    32bc:	e2 17       	cp	r30, r18
    32be:	f3 07       	cpc	r31, r19
    32c0:	a0 f4       	brcc	.+40     	; 0x32ea <malloc+0x120>
    32c2:	2e 1b       	sub	r18, r30
    32c4:	3f 0b       	sbc	r19, r31
    32c6:	28 17       	cp	r18, r24
    32c8:	39 07       	cpc	r19, r25
    32ca:	78 f0       	brcs	.+30     	; 0x32ea <malloc+0x120>
    32cc:	ac 01       	movw	r20, r24
    32ce:	4e 5f       	subi	r20, 0xFE	; 254
    32d0:	5f 4f       	sbci	r21, 0xFF	; 255
    32d2:	24 17       	cp	r18, r20
    32d4:	35 07       	cpc	r19, r21
    32d6:	48 f0       	brcs	.+18     	; 0x32ea <malloc+0x120>
    32d8:	4e 0f       	add	r20, r30
    32da:	5f 1f       	adc	r21, r31
    32dc:	50 93 2e 04 	sts	0x042E, r21	; 0x80042e <__brkval+0x1>
    32e0:	40 93 2d 04 	sts	0x042D, r20	; 0x80042d <__brkval>
    32e4:	81 93       	st	Z+, r24
    32e6:	91 93       	st	Z+, r25
    32e8:	02 c0       	rjmp	.+4      	; 0x32ee <malloc+0x124>
    32ea:	e0 e0       	ldi	r30, 0x00	; 0
    32ec:	f0 e0       	ldi	r31, 0x00	; 0
    32ee:	cf 01       	movw	r24, r30
    32f0:	df 91       	pop	r29
    32f2:	cf 91       	pop	r28
    32f4:	1f 91       	pop	r17
    32f6:	0f 91       	pop	r16
    32f8:	08 95       	ret

000032fa <free>:
    32fa:	cf 93       	push	r28
    32fc:	df 93       	push	r29
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	09 f4       	brne	.+2      	; 0x3304 <free+0xa>
    3302:	81 c0       	rjmp	.+258    	; 0x3406 <free+0x10c>
    3304:	fc 01       	movw	r30, r24
    3306:	32 97       	sbiw	r30, 0x02	; 2
    3308:	13 82       	std	Z+3, r1	; 0x03
    330a:	12 82       	std	Z+2, r1	; 0x02
    330c:	a0 91 2f 04 	lds	r26, 0x042F	; 0x80042f <__flp>
    3310:	b0 91 30 04 	lds	r27, 0x0430	; 0x800430 <__flp+0x1>
    3314:	10 97       	sbiw	r26, 0x00	; 0
    3316:	81 f4       	brne	.+32     	; 0x3338 <free+0x3e>
    3318:	20 81       	ld	r18, Z
    331a:	31 81       	ldd	r19, Z+1	; 0x01
    331c:	82 0f       	add	r24, r18
    331e:	93 1f       	adc	r25, r19
    3320:	20 91 2d 04 	lds	r18, 0x042D	; 0x80042d <__brkval>
    3324:	30 91 2e 04 	lds	r19, 0x042E	; 0x80042e <__brkval+0x1>
    3328:	28 17       	cp	r18, r24
    332a:	39 07       	cpc	r19, r25
    332c:	51 f5       	brne	.+84     	; 0x3382 <free+0x88>
    332e:	f0 93 2e 04 	sts	0x042E, r31	; 0x80042e <__brkval+0x1>
    3332:	e0 93 2d 04 	sts	0x042D, r30	; 0x80042d <__brkval>
    3336:	67 c0       	rjmp	.+206    	; 0x3406 <free+0x10c>
    3338:	ed 01       	movw	r28, r26
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	30 e0       	ldi	r19, 0x00	; 0
    333e:	ce 17       	cp	r28, r30
    3340:	df 07       	cpc	r29, r31
    3342:	40 f4       	brcc	.+16     	; 0x3354 <free+0x5a>
    3344:	4a 81       	ldd	r20, Y+2	; 0x02
    3346:	5b 81       	ldd	r21, Y+3	; 0x03
    3348:	9e 01       	movw	r18, r28
    334a:	41 15       	cp	r20, r1
    334c:	51 05       	cpc	r21, r1
    334e:	f1 f0       	breq	.+60     	; 0x338c <free+0x92>
    3350:	ea 01       	movw	r28, r20
    3352:	f5 cf       	rjmp	.-22     	; 0x333e <free+0x44>
    3354:	d3 83       	std	Z+3, r29	; 0x03
    3356:	c2 83       	std	Z+2, r28	; 0x02
    3358:	40 81       	ld	r20, Z
    335a:	51 81       	ldd	r21, Z+1	; 0x01
    335c:	84 0f       	add	r24, r20
    335e:	95 1f       	adc	r25, r21
    3360:	c8 17       	cp	r28, r24
    3362:	d9 07       	cpc	r29, r25
    3364:	59 f4       	brne	.+22     	; 0x337c <free+0x82>
    3366:	88 81       	ld	r24, Y
    3368:	99 81       	ldd	r25, Y+1	; 0x01
    336a:	84 0f       	add	r24, r20
    336c:	95 1f       	adc	r25, r21
    336e:	02 96       	adiw	r24, 0x02	; 2
    3370:	91 83       	std	Z+1, r25	; 0x01
    3372:	80 83       	st	Z, r24
    3374:	8a 81       	ldd	r24, Y+2	; 0x02
    3376:	9b 81       	ldd	r25, Y+3	; 0x03
    3378:	93 83       	std	Z+3, r25	; 0x03
    337a:	82 83       	std	Z+2, r24	; 0x02
    337c:	21 15       	cp	r18, r1
    337e:	31 05       	cpc	r19, r1
    3380:	29 f4       	brne	.+10     	; 0x338c <free+0x92>
    3382:	f0 93 30 04 	sts	0x0430, r31	; 0x800430 <__flp+0x1>
    3386:	e0 93 2f 04 	sts	0x042F, r30	; 0x80042f <__flp>
    338a:	3d c0       	rjmp	.+122    	; 0x3406 <free+0x10c>
    338c:	e9 01       	movw	r28, r18
    338e:	fb 83       	std	Y+3, r31	; 0x03
    3390:	ea 83       	std	Y+2, r30	; 0x02
    3392:	49 91       	ld	r20, Y+
    3394:	59 91       	ld	r21, Y+
    3396:	c4 0f       	add	r28, r20
    3398:	d5 1f       	adc	r29, r21
    339a:	ec 17       	cp	r30, r28
    339c:	fd 07       	cpc	r31, r29
    339e:	61 f4       	brne	.+24     	; 0x33b8 <free+0xbe>
    33a0:	80 81       	ld	r24, Z
    33a2:	91 81       	ldd	r25, Z+1	; 0x01
    33a4:	84 0f       	add	r24, r20
    33a6:	95 1f       	adc	r25, r21
    33a8:	02 96       	adiw	r24, 0x02	; 2
    33aa:	e9 01       	movw	r28, r18
    33ac:	99 83       	std	Y+1, r25	; 0x01
    33ae:	88 83       	st	Y, r24
    33b0:	82 81       	ldd	r24, Z+2	; 0x02
    33b2:	93 81       	ldd	r25, Z+3	; 0x03
    33b4:	9b 83       	std	Y+3, r25	; 0x03
    33b6:	8a 83       	std	Y+2, r24	; 0x02
    33b8:	e0 e0       	ldi	r30, 0x00	; 0
    33ba:	f0 e0       	ldi	r31, 0x00	; 0
    33bc:	12 96       	adiw	r26, 0x02	; 2
    33be:	8d 91       	ld	r24, X+
    33c0:	9c 91       	ld	r25, X
    33c2:	13 97       	sbiw	r26, 0x03	; 3
    33c4:	00 97       	sbiw	r24, 0x00	; 0
    33c6:	19 f0       	breq	.+6      	; 0x33ce <free+0xd4>
    33c8:	fd 01       	movw	r30, r26
    33ca:	dc 01       	movw	r26, r24
    33cc:	f7 cf       	rjmp	.-18     	; 0x33bc <free+0xc2>
    33ce:	8d 91       	ld	r24, X+
    33d0:	9c 91       	ld	r25, X
    33d2:	11 97       	sbiw	r26, 0x01	; 1
    33d4:	9d 01       	movw	r18, r26
    33d6:	2e 5f       	subi	r18, 0xFE	; 254
    33d8:	3f 4f       	sbci	r19, 0xFF	; 255
    33da:	82 0f       	add	r24, r18
    33dc:	93 1f       	adc	r25, r19
    33de:	20 91 2d 04 	lds	r18, 0x042D	; 0x80042d <__brkval>
    33e2:	30 91 2e 04 	lds	r19, 0x042E	; 0x80042e <__brkval+0x1>
    33e6:	28 17       	cp	r18, r24
    33e8:	39 07       	cpc	r19, r25
    33ea:	69 f4       	brne	.+26     	; 0x3406 <free+0x10c>
    33ec:	30 97       	sbiw	r30, 0x00	; 0
    33ee:	29 f4       	brne	.+10     	; 0x33fa <free+0x100>
    33f0:	10 92 30 04 	sts	0x0430, r1	; 0x800430 <__flp+0x1>
    33f4:	10 92 2f 04 	sts	0x042F, r1	; 0x80042f <__flp>
    33f8:	02 c0       	rjmp	.+4      	; 0x33fe <free+0x104>
    33fa:	13 82       	std	Z+3, r1	; 0x03
    33fc:	12 82       	std	Z+2, r1	; 0x02
    33fe:	b0 93 2e 04 	sts	0x042E, r27	; 0x80042e <__brkval+0x1>
    3402:	a0 93 2d 04 	sts	0x042D, r26	; 0x80042d <__brkval>
    3406:	df 91       	pop	r29
    3408:	cf 91       	pop	r28
    340a:	08 95       	ret

0000340c <abort>:
    340c:	81 e0       	ldi	r24, 0x01	; 1
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	f8 94       	cli
    3412:	00 c3       	rjmp	.+1536   	; 0x3a14 <_exit>

00003414 <memcpy>:
    3414:	fb 01       	movw	r30, r22
    3416:	dc 01       	movw	r26, r24
    3418:	02 c0       	rjmp	.+4      	; 0x341e <memcpy+0xa>
    341a:	01 90       	ld	r0, Z+
    341c:	0d 92       	st	X+, r0
    341e:	41 50       	subi	r20, 0x01	; 1
    3420:	50 40       	sbci	r21, 0x00	; 0
    3422:	d8 f7       	brcc	.-10     	; 0x341a <memcpy+0x6>
    3424:	08 95       	ret

00003426 <memset>:
    3426:	dc 01       	movw	r26, r24
    3428:	01 c0       	rjmp	.+2      	; 0x342c <memset+0x6>
    342a:	6d 93       	st	X+, r22
    342c:	41 50       	subi	r20, 0x01	; 1
    342e:	50 40       	sbci	r21, 0x00	; 0
    3430:	e0 f7       	brcc	.-8      	; 0x342a <memset+0x4>
    3432:	08 95       	ret

00003434 <printf>:
    3434:	cf 93       	push	r28
    3436:	df 93       	push	r29
    3438:	cd b7       	in	r28, 0x3d	; 61
    343a:	de b7       	in	r29, 0x3e	; 62
    343c:	ae 01       	movw	r20, r28
    343e:	4a 5f       	subi	r20, 0xFA	; 250
    3440:	5f 4f       	sbci	r21, 0xFF	; 255
    3442:	fa 01       	movw	r30, r20
    3444:	61 91       	ld	r22, Z+
    3446:	71 91       	ld	r23, Z+
    3448:	af 01       	movw	r20, r30
    344a:	80 91 33 04 	lds	r24, 0x0433	; 0x800433 <__iob+0x2>
    344e:	90 91 34 04 	lds	r25, 0x0434	; 0x800434 <__iob+0x3>
    3452:	33 d0       	rcall	.+102    	; 0x34ba <vfprintf>
    3454:	df 91       	pop	r29
    3456:	cf 91       	pop	r28
    3458:	08 95       	ret

0000345a <puts>:
    345a:	0f 93       	push	r16
    345c:	1f 93       	push	r17
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	e0 91 33 04 	lds	r30, 0x0433	; 0x800433 <__iob+0x2>
    3466:	f0 91 34 04 	lds	r31, 0x0434	; 0x800434 <__iob+0x3>
    346a:	23 81       	ldd	r18, Z+3	; 0x03
    346c:	21 ff       	sbrs	r18, 1
    346e:	1b c0       	rjmp	.+54     	; 0x34a6 <puts+0x4c>
    3470:	8c 01       	movw	r16, r24
    3472:	d0 e0       	ldi	r29, 0x00	; 0
    3474:	c0 e0       	ldi	r28, 0x00	; 0
    3476:	f8 01       	movw	r30, r16
    3478:	81 91       	ld	r24, Z+
    347a:	8f 01       	movw	r16, r30
    347c:	60 91 33 04 	lds	r22, 0x0433	; 0x800433 <__iob+0x2>
    3480:	70 91 34 04 	lds	r23, 0x0434	; 0x800434 <__iob+0x3>
    3484:	db 01       	movw	r26, r22
    3486:	18 96       	adiw	r26, 0x08	; 8
    3488:	ed 91       	ld	r30, X+
    348a:	fc 91       	ld	r31, X
    348c:	19 97       	sbiw	r26, 0x09	; 9
    348e:	88 23       	and	r24, r24
    3490:	31 f0       	breq	.+12     	; 0x349e <puts+0x44>
    3492:	19 95       	eicall
    3494:	89 2b       	or	r24, r25
    3496:	79 f3       	breq	.-34     	; 0x3476 <puts+0x1c>
    3498:	df ef       	ldi	r29, 0xFF	; 255
    349a:	cf ef       	ldi	r28, 0xFF	; 255
    349c:	ec cf       	rjmp	.-40     	; 0x3476 <puts+0x1c>
    349e:	8a e0       	ldi	r24, 0x0A	; 10
    34a0:	19 95       	eicall
    34a2:	89 2b       	or	r24, r25
    34a4:	19 f0       	breq	.+6      	; 0x34ac <puts+0x52>
    34a6:	8f ef       	ldi	r24, 0xFF	; 255
    34a8:	9f ef       	ldi	r25, 0xFF	; 255
    34aa:	02 c0       	rjmp	.+4      	; 0x34b0 <puts+0x56>
    34ac:	8d 2f       	mov	r24, r29
    34ae:	9c 2f       	mov	r25, r28
    34b0:	df 91       	pop	r29
    34b2:	cf 91       	pop	r28
    34b4:	1f 91       	pop	r17
    34b6:	0f 91       	pop	r16
    34b8:	08 95       	ret

000034ba <vfprintf>:
    34ba:	2f 92       	push	r2
    34bc:	3f 92       	push	r3
    34be:	4f 92       	push	r4
    34c0:	5f 92       	push	r5
    34c2:	6f 92       	push	r6
    34c4:	7f 92       	push	r7
    34c6:	8f 92       	push	r8
    34c8:	9f 92       	push	r9
    34ca:	af 92       	push	r10
    34cc:	bf 92       	push	r11
    34ce:	cf 92       	push	r12
    34d0:	df 92       	push	r13
    34d2:	ef 92       	push	r14
    34d4:	ff 92       	push	r15
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
    34de:	cd b7       	in	r28, 0x3d	; 61
    34e0:	de b7       	in	r29, 0x3e	; 62
    34e2:	2b 97       	sbiw	r28, 0x0b	; 11
    34e4:	0f b6       	in	r0, 0x3f	; 63
    34e6:	f8 94       	cli
    34e8:	de bf       	out	0x3e, r29	; 62
    34ea:	0f be       	out	0x3f, r0	; 63
    34ec:	cd bf       	out	0x3d, r28	; 61
    34ee:	6c 01       	movw	r12, r24
    34f0:	7b 01       	movw	r14, r22
    34f2:	8a 01       	movw	r16, r20
    34f4:	fc 01       	movw	r30, r24
    34f6:	17 82       	std	Z+7, r1	; 0x07
    34f8:	16 82       	std	Z+6, r1	; 0x06
    34fa:	83 81       	ldd	r24, Z+3	; 0x03
    34fc:	81 ff       	sbrs	r24, 1
    34fe:	bf c1       	rjmp	.+894    	; 0x387e <vfprintf+0x3c4>
    3500:	ce 01       	movw	r24, r28
    3502:	01 96       	adiw	r24, 0x01	; 1
    3504:	3c 01       	movw	r6, r24
    3506:	f6 01       	movw	r30, r12
    3508:	93 81       	ldd	r25, Z+3	; 0x03
    350a:	f7 01       	movw	r30, r14
    350c:	93 fd       	sbrc	r25, 3
    350e:	85 91       	lpm	r24, Z+
    3510:	93 ff       	sbrs	r25, 3
    3512:	81 91       	ld	r24, Z+
    3514:	7f 01       	movw	r14, r30
    3516:	88 23       	and	r24, r24
    3518:	09 f4       	brne	.+2      	; 0x351c <vfprintf+0x62>
    351a:	ad c1       	rjmp	.+858    	; 0x3876 <vfprintf+0x3bc>
    351c:	85 32       	cpi	r24, 0x25	; 37
    351e:	39 f4       	brne	.+14     	; 0x352e <vfprintf+0x74>
    3520:	93 fd       	sbrc	r25, 3
    3522:	85 91       	lpm	r24, Z+
    3524:	93 ff       	sbrs	r25, 3
    3526:	81 91       	ld	r24, Z+
    3528:	7f 01       	movw	r14, r30
    352a:	85 32       	cpi	r24, 0x25	; 37
    352c:	21 f4       	brne	.+8      	; 0x3536 <vfprintf+0x7c>
    352e:	b6 01       	movw	r22, r12
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	d6 d1       	rcall	.+940    	; 0x38e0 <fputc>
    3534:	e8 cf       	rjmp	.-48     	; 0x3506 <vfprintf+0x4c>
    3536:	91 2c       	mov	r9, r1
    3538:	21 2c       	mov	r2, r1
    353a:	31 2c       	mov	r3, r1
    353c:	ff e1       	ldi	r31, 0x1F	; 31
    353e:	f3 15       	cp	r31, r3
    3540:	d8 f0       	brcs	.+54     	; 0x3578 <vfprintf+0xbe>
    3542:	8b 32       	cpi	r24, 0x2B	; 43
    3544:	79 f0       	breq	.+30     	; 0x3564 <vfprintf+0xaa>
    3546:	38 f4       	brcc	.+14     	; 0x3556 <vfprintf+0x9c>
    3548:	80 32       	cpi	r24, 0x20	; 32
    354a:	79 f0       	breq	.+30     	; 0x356a <vfprintf+0xb0>
    354c:	83 32       	cpi	r24, 0x23	; 35
    354e:	a1 f4       	brne	.+40     	; 0x3578 <vfprintf+0xbe>
    3550:	23 2d       	mov	r18, r3
    3552:	20 61       	ori	r18, 0x10	; 16
    3554:	1d c0       	rjmp	.+58     	; 0x3590 <vfprintf+0xd6>
    3556:	8d 32       	cpi	r24, 0x2D	; 45
    3558:	61 f0       	breq	.+24     	; 0x3572 <vfprintf+0xb8>
    355a:	80 33       	cpi	r24, 0x30	; 48
    355c:	69 f4       	brne	.+26     	; 0x3578 <vfprintf+0xbe>
    355e:	23 2d       	mov	r18, r3
    3560:	21 60       	ori	r18, 0x01	; 1
    3562:	16 c0       	rjmp	.+44     	; 0x3590 <vfprintf+0xd6>
    3564:	83 2d       	mov	r24, r3
    3566:	82 60       	ori	r24, 0x02	; 2
    3568:	38 2e       	mov	r3, r24
    356a:	e3 2d       	mov	r30, r3
    356c:	e4 60       	ori	r30, 0x04	; 4
    356e:	3e 2e       	mov	r3, r30
    3570:	2a c0       	rjmp	.+84     	; 0x35c6 <vfprintf+0x10c>
    3572:	f3 2d       	mov	r31, r3
    3574:	f8 60       	ori	r31, 0x08	; 8
    3576:	1d c0       	rjmp	.+58     	; 0x35b2 <vfprintf+0xf8>
    3578:	37 fc       	sbrc	r3, 7
    357a:	2d c0       	rjmp	.+90     	; 0x35d6 <vfprintf+0x11c>
    357c:	20 ed       	ldi	r18, 0xD0	; 208
    357e:	28 0f       	add	r18, r24
    3580:	2a 30       	cpi	r18, 0x0A	; 10
    3582:	40 f0       	brcs	.+16     	; 0x3594 <vfprintf+0xda>
    3584:	8e 32       	cpi	r24, 0x2E	; 46
    3586:	b9 f4       	brne	.+46     	; 0x35b6 <vfprintf+0xfc>
    3588:	36 fc       	sbrc	r3, 6
    358a:	75 c1       	rjmp	.+746    	; 0x3876 <vfprintf+0x3bc>
    358c:	23 2d       	mov	r18, r3
    358e:	20 64       	ori	r18, 0x40	; 64
    3590:	32 2e       	mov	r3, r18
    3592:	19 c0       	rjmp	.+50     	; 0x35c6 <vfprintf+0x10c>
    3594:	36 fe       	sbrs	r3, 6
    3596:	06 c0       	rjmp	.+12     	; 0x35a4 <vfprintf+0xea>
    3598:	8a e0       	ldi	r24, 0x0A	; 10
    359a:	98 9e       	mul	r9, r24
    359c:	20 0d       	add	r18, r0
    359e:	11 24       	eor	r1, r1
    35a0:	92 2e       	mov	r9, r18
    35a2:	11 c0       	rjmp	.+34     	; 0x35c6 <vfprintf+0x10c>
    35a4:	ea e0       	ldi	r30, 0x0A	; 10
    35a6:	2e 9e       	mul	r2, r30
    35a8:	20 0d       	add	r18, r0
    35aa:	11 24       	eor	r1, r1
    35ac:	22 2e       	mov	r2, r18
    35ae:	f3 2d       	mov	r31, r3
    35b0:	f0 62       	ori	r31, 0x20	; 32
    35b2:	3f 2e       	mov	r3, r31
    35b4:	08 c0       	rjmp	.+16     	; 0x35c6 <vfprintf+0x10c>
    35b6:	8c 36       	cpi	r24, 0x6C	; 108
    35b8:	21 f4       	brne	.+8      	; 0x35c2 <vfprintf+0x108>
    35ba:	83 2d       	mov	r24, r3
    35bc:	80 68       	ori	r24, 0x80	; 128
    35be:	38 2e       	mov	r3, r24
    35c0:	02 c0       	rjmp	.+4      	; 0x35c6 <vfprintf+0x10c>
    35c2:	88 36       	cpi	r24, 0x68	; 104
    35c4:	41 f4       	brne	.+16     	; 0x35d6 <vfprintf+0x11c>
    35c6:	f7 01       	movw	r30, r14
    35c8:	93 fd       	sbrc	r25, 3
    35ca:	85 91       	lpm	r24, Z+
    35cc:	93 ff       	sbrs	r25, 3
    35ce:	81 91       	ld	r24, Z+
    35d0:	7f 01       	movw	r14, r30
    35d2:	81 11       	cpse	r24, r1
    35d4:	b3 cf       	rjmp	.-154    	; 0x353c <vfprintf+0x82>
    35d6:	98 2f       	mov	r25, r24
    35d8:	9f 7d       	andi	r25, 0xDF	; 223
    35da:	95 54       	subi	r25, 0x45	; 69
    35dc:	93 30       	cpi	r25, 0x03	; 3
    35de:	28 f4       	brcc	.+10     	; 0x35ea <vfprintf+0x130>
    35e0:	0c 5f       	subi	r16, 0xFC	; 252
    35e2:	1f 4f       	sbci	r17, 0xFF	; 255
    35e4:	9f e3       	ldi	r25, 0x3F	; 63
    35e6:	99 83       	std	Y+1, r25	; 0x01
    35e8:	0d c0       	rjmp	.+26     	; 0x3604 <vfprintf+0x14a>
    35ea:	83 36       	cpi	r24, 0x63	; 99
    35ec:	31 f0       	breq	.+12     	; 0x35fa <vfprintf+0x140>
    35ee:	83 37       	cpi	r24, 0x73	; 115
    35f0:	71 f0       	breq	.+28     	; 0x360e <vfprintf+0x154>
    35f2:	83 35       	cpi	r24, 0x53	; 83
    35f4:	09 f0       	breq	.+2      	; 0x35f8 <vfprintf+0x13e>
    35f6:	55 c0       	rjmp	.+170    	; 0x36a2 <vfprintf+0x1e8>
    35f8:	20 c0       	rjmp	.+64     	; 0x363a <vfprintf+0x180>
    35fa:	f8 01       	movw	r30, r16
    35fc:	80 81       	ld	r24, Z
    35fe:	89 83       	std	Y+1, r24	; 0x01
    3600:	0e 5f       	subi	r16, 0xFE	; 254
    3602:	1f 4f       	sbci	r17, 0xFF	; 255
    3604:	88 24       	eor	r8, r8
    3606:	83 94       	inc	r8
    3608:	91 2c       	mov	r9, r1
    360a:	53 01       	movw	r10, r6
    360c:	12 c0       	rjmp	.+36     	; 0x3632 <vfprintf+0x178>
    360e:	28 01       	movw	r4, r16
    3610:	f2 e0       	ldi	r31, 0x02	; 2
    3612:	4f 0e       	add	r4, r31
    3614:	51 1c       	adc	r5, r1
    3616:	f8 01       	movw	r30, r16
    3618:	a0 80       	ld	r10, Z
    361a:	b1 80       	ldd	r11, Z+1	; 0x01
    361c:	36 fe       	sbrs	r3, 6
    361e:	03 c0       	rjmp	.+6      	; 0x3626 <vfprintf+0x16c>
    3620:	69 2d       	mov	r22, r9
    3622:	70 e0       	ldi	r23, 0x00	; 0
    3624:	02 c0       	rjmp	.+4      	; 0x362a <vfprintf+0x170>
    3626:	6f ef       	ldi	r22, 0xFF	; 255
    3628:	7f ef       	ldi	r23, 0xFF	; 255
    362a:	c5 01       	movw	r24, r10
    362c:	4e d1       	rcall	.+668    	; 0x38ca <strnlen>
    362e:	4c 01       	movw	r8, r24
    3630:	82 01       	movw	r16, r4
    3632:	f3 2d       	mov	r31, r3
    3634:	ff 77       	andi	r31, 0x7F	; 127
    3636:	3f 2e       	mov	r3, r31
    3638:	15 c0       	rjmp	.+42     	; 0x3664 <vfprintf+0x1aa>
    363a:	28 01       	movw	r4, r16
    363c:	22 e0       	ldi	r18, 0x02	; 2
    363e:	42 0e       	add	r4, r18
    3640:	51 1c       	adc	r5, r1
    3642:	f8 01       	movw	r30, r16
    3644:	a0 80       	ld	r10, Z
    3646:	b1 80       	ldd	r11, Z+1	; 0x01
    3648:	36 fe       	sbrs	r3, 6
    364a:	03 c0       	rjmp	.+6      	; 0x3652 <vfprintf+0x198>
    364c:	69 2d       	mov	r22, r9
    364e:	70 e0       	ldi	r23, 0x00	; 0
    3650:	02 c0       	rjmp	.+4      	; 0x3656 <vfprintf+0x19c>
    3652:	6f ef       	ldi	r22, 0xFF	; 255
    3654:	7f ef       	ldi	r23, 0xFF	; 255
    3656:	c5 01       	movw	r24, r10
    3658:	2d d1       	rcall	.+602    	; 0x38b4 <strnlen_P>
    365a:	4c 01       	movw	r8, r24
    365c:	f3 2d       	mov	r31, r3
    365e:	f0 68       	ori	r31, 0x80	; 128
    3660:	3f 2e       	mov	r3, r31
    3662:	82 01       	movw	r16, r4
    3664:	33 fc       	sbrc	r3, 3
    3666:	19 c0       	rjmp	.+50     	; 0x369a <vfprintf+0x1e0>
    3668:	82 2d       	mov	r24, r2
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	88 16       	cp	r8, r24
    366e:	99 06       	cpc	r9, r25
    3670:	a0 f4       	brcc	.+40     	; 0x369a <vfprintf+0x1e0>
    3672:	b6 01       	movw	r22, r12
    3674:	80 e2       	ldi	r24, 0x20	; 32
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	33 d1       	rcall	.+614    	; 0x38e0 <fputc>
    367a:	2a 94       	dec	r2
    367c:	f5 cf       	rjmp	.-22     	; 0x3668 <vfprintf+0x1ae>
    367e:	f5 01       	movw	r30, r10
    3680:	37 fc       	sbrc	r3, 7
    3682:	85 91       	lpm	r24, Z+
    3684:	37 fe       	sbrs	r3, 7
    3686:	81 91       	ld	r24, Z+
    3688:	5f 01       	movw	r10, r30
    368a:	b6 01       	movw	r22, r12
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	28 d1       	rcall	.+592    	; 0x38e0 <fputc>
    3690:	21 10       	cpse	r2, r1
    3692:	2a 94       	dec	r2
    3694:	21 e0       	ldi	r18, 0x01	; 1
    3696:	82 1a       	sub	r8, r18
    3698:	91 08       	sbc	r9, r1
    369a:	81 14       	cp	r8, r1
    369c:	91 04       	cpc	r9, r1
    369e:	79 f7       	brne	.-34     	; 0x367e <vfprintf+0x1c4>
    36a0:	e1 c0       	rjmp	.+450    	; 0x3864 <vfprintf+0x3aa>
    36a2:	84 36       	cpi	r24, 0x64	; 100
    36a4:	11 f0       	breq	.+4      	; 0x36aa <vfprintf+0x1f0>
    36a6:	89 36       	cpi	r24, 0x69	; 105
    36a8:	39 f5       	brne	.+78     	; 0x36f8 <vfprintf+0x23e>
    36aa:	f8 01       	movw	r30, r16
    36ac:	37 fe       	sbrs	r3, 7
    36ae:	07 c0       	rjmp	.+14     	; 0x36be <vfprintf+0x204>
    36b0:	60 81       	ld	r22, Z
    36b2:	71 81       	ldd	r23, Z+1	; 0x01
    36b4:	82 81       	ldd	r24, Z+2	; 0x02
    36b6:	93 81       	ldd	r25, Z+3	; 0x03
    36b8:	0c 5f       	subi	r16, 0xFC	; 252
    36ba:	1f 4f       	sbci	r17, 0xFF	; 255
    36bc:	08 c0       	rjmp	.+16     	; 0x36ce <vfprintf+0x214>
    36be:	60 81       	ld	r22, Z
    36c0:	71 81       	ldd	r23, Z+1	; 0x01
    36c2:	07 2e       	mov	r0, r23
    36c4:	00 0c       	add	r0, r0
    36c6:	88 0b       	sbc	r24, r24
    36c8:	99 0b       	sbc	r25, r25
    36ca:	0e 5f       	subi	r16, 0xFE	; 254
    36cc:	1f 4f       	sbci	r17, 0xFF	; 255
    36ce:	f3 2d       	mov	r31, r3
    36d0:	ff 76       	andi	r31, 0x6F	; 111
    36d2:	3f 2e       	mov	r3, r31
    36d4:	97 ff       	sbrs	r25, 7
    36d6:	09 c0       	rjmp	.+18     	; 0x36ea <vfprintf+0x230>
    36d8:	90 95       	com	r25
    36da:	80 95       	com	r24
    36dc:	70 95       	com	r23
    36de:	61 95       	neg	r22
    36e0:	7f 4f       	sbci	r23, 0xFF	; 255
    36e2:	8f 4f       	sbci	r24, 0xFF	; 255
    36e4:	9f 4f       	sbci	r25, 0xFF	; 255
    36e6:	f0 68       	ori	r31, 0x80	; 128
    36e8:	3f 2e       	mov	r3, r31
    36ea:	2a e0       	ldi	r18, 0x0A	; 10
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	a3 01       	movw	r20, r6
    36f0:	33 d1       	rcall	.+614    	; 0x3958 <__ultoa_invert>
    36f2:	88 2e       	mov	r8, r24
    36f4:	86 18       	sub	r8, r6
    36f6:	44 c0       	rjmp	.+136    	; 0x3780 <vfprintf+0x2c6>
    36f8:	85 37       	cpi	r24, 0x75	; 117
    36fa:	31 f4       	brne	.+12     	; 0x3708 <vfprintf+0x24e>
    36fc:	23 2d       	mov	r18, r3
    36fe:	2f 7e       	andi	r18, 0xEF	; 239
    3700:	b2 2e       	mov	r11, r18
    3702:	2a e0       	ldi	r18, 0x0A	; 10
    3704:	30 e0       	ldi	r19, 0x00	; 0
    3706:	25 c0       	rjmp	.+74     	; 0x3752 <vfprintf+0x298>
    3708:	93 2d       	mov	r25, r3
    370a:	99 7f       	andi	r25, 0xF9	; 249
    370c:	b9 2e       	mov	r11, r25
    370e:	8f 36       	cpi	r24, 0x6F	; 111
    3710:	c1 f0       	breq	.+48     	; 0x3742 <vfprintf+0x288>
    3712:	18 f4       	brcc	.+6      	; 0x371a <vfprintf+0x260>
    3714:	88 35       	cpi	r24, 0x58	; 88
    3716:	79 f0       	breq	.+30     	; 0x3736 <vfprintf+0x27c>
    3718:	ae c0       	rjmp	.+348    	; 0x3876 <vfprintf+0x3bc>
    371a:	80 37       	cpi	r24, 0x70	; 112
    371c:	19 f0       	breq	.+6      	; 0x3724 <vfprintf+0x26a>
    371e:	88 37       	cpi	r24, 0x78	; 120
    3720:	21 f0       	breq	.+8      	; 0x372a <vfprintf+0x270>
    3722:	a9 c0       	rjmp	.+338    	; 0x3876 <vfprintf+0x3bc>
    3724:	e9 2f       	mov	r30, r25
    3726:	e0 61       	ori	r30, 0x10	; 16
    3728:	be 2e       	mov	r11, r30
    372a:	b4 fe       	sbrs	r11, 4
    372c:	0d c0       	rjmp	.+26     	; 0x3748 <vfprintf+0x28e>
    372e:	fb 2d       	mov	r31, r11
    3730:	f4 60       	ori	r31, 0x04	; 4
    3732:	bf 2e       	mov	r11, r31
    3734:	09 c0       	rjmp	.+18     	; 0x3748 <vfprintf+0x28e>
    3736:	34 fe       	sbrs	r3, 4
    3738:	0a c0       	rjmp	.+20     	; 0x374e <vfprintf+0x294>
    373a:	29 2f       	mov	r18, r25
    373c:	26 60       	ori	r18, 0x06	; 6
    373e:	b2 2e       	mov	r11, r18
    3740:	06 c0       	rjmp	.+12     	; 0x374e <vfprintf+0x294>
    3742:	28 e0       	ldi	r18, 0x08	; 8
    3744:	30 e0       	ldi	r19, 0x00	; 0
    3746:	05 c0       	rjmp	.+10     	; 0x3752 <vfprintf+0x298>
    3748:	20 e1       	ldi	r18, 0x10	; 16
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	02 c0       	rjmp	.+4      	; 0x3752 <vfprintf+0x298>
    374e:	20 e1       	ldi	r18, 0x10	; 16
    3750:	32 e0       	ldi	r19, 0x02	; 2
    3752:	f8 01       	movw	r30, r16
    3754:	b7 fe       	sbrs	r11, 7
    3756:	07 c0       	rjmp	.+14     	; 0x3766 <vfprintf+0x2ac>
    3758:	60 81       	ld	r22, Z
    375a:	71 81       	ldd	r23, Z+1	; 0x01
    375c:	82 81       	ldd	r24, Z+2	; 0x02
    375e:	93 81       	ldd	r25, Z+3	; 0x03
    3760:	0c 5f       	subi	r16, 0xFC	; 252
    3762:	1f 4f       	sbci	r17, 0xFF	; 255
    3764:	06 c0       	rjmp	.+12     	; 0x3772 <vfprintf+0x2b8>
    3766:	60 81       	ld	r22, Z
    3768:	71 81       	ldd	r23, Z+1	; 0x01
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	90 e0       	ldi	r25, 0x00	; 0
    376e:	0e 5f       	subi	r16, 0xFE	; 254
    3770:	1f 4f       	sbci	r17, 0xFF	; 255
    3772:	a3 01       	movw	r20, r6
    3774:	f1 d0       	rcall	.+482    	; 0x3958 <__ultoa_invert>
    3776:	88 2e       	mov	r8, r24
    3778:	86 18       	sub	r8, r6
    377a:	fb 2d       	mov	r31, r11
    377c:	ff 77       	andi	r31, 0x7F	; 127
    377e:	3f 2e       	mov	r3, r31
    3780:	36 fe       	sbrs	r3, 6
    3782:	0d c0       	rjmp	.+26     	; 0x379e <vfprintf+0x2e4>
    3784:	23 2d       	mov	r18, r3
    3786:	2e 7f       	andi	r18, 0xFE	; 254
    3788:	a2 2e       	mov	r10, r18
    378a:	89 14       	cp	r8, r9
    378c:	58 f4       	brcc	.+22     	; 0x37a4 <vfprintf+0x2ea>
    378e:	34 fe       	sbrs	r3, 4
    3790:	0b c0       	rjmp	.+22     	; 0x37a8 <vfprintf+0x2ee>
    3792:	32 fc       	sbrc	r3, 2
    3794:	09 c0       	rjmp	.+18     	; 0x37a8 <vfprintf+0x2ee>
    3796:	83 2d       	mov	r24, r3
    3798:	8e 7e       	andi	r24, 0xEE	; 238
    379a:	a8 2e       	mov	r10, r24
    379c:	05 c0       	rjmp	.+10     	; 0x37a8 <vfprintf+0x2ee>
    379e:	b8 2c       	mov	r11, r8
    37a0:	a3 2c       	mov	r10, r3
    37a2:	03 c0       	rjmp	.+6      	; 0x37aa <vfprintf+0x2f0>
    37a4:	b8 2c       	mov	r11, r8
    37a6:	01 c0       	rjmp	.+2      	; 0x37aa <vfprintf+0x2f0>
    37a8:	b9 2c       	mov	r11, r9
    37aa:	a4 fe       	sbrs	r10, 4
    37ac:	0f c0       	rjmp	.+30     	; 0x37cc <vfprintf+0x312>
    37ae:	fe 01       	movw	r30, r28
    37b0:	e8 0d       	add	r30, r8
    37b2:	f1 1d       	adc	r31, r1
    37b4:	80 81       	ld	r24, Z
    37b6:	80 33       	cpi	r24, 0x30	; 48
    37b8:	21 f4       	brne	.+8      	; 0x37c2 <vfprintf+0x308>
    37ba:	9a 2d       	mov	r25, r10
    37bc:	99 7e       	andi	r25, 0xE9	; 233
    37be:	a9 2e       	mov	r10, r25
    37c0:	09 c0       	rjmp	.+18     	; 0x37d4 <vfprintf+0x31a>
    37c2:	a2 fe       	sbrs	r10, 2
    37c4:	06 c0       	rjmp	.+12     	; 0x37d2 <vfprintf+0x318>
    37c6:	b3 94       	inc	r11
    37c8:	b3 94       	inc	r11
    37ca:	04 c0       	rjmp	.+8      	; 0x37d4 <vfprintf+0x31a>
    37cc:	8a 2d       	mov	r24, r10
    37ce:	86 78       	andi	r24, 0x86	; 134
    37d0:	09 f0       	breq	.+2      	; 0x37d4 <vfprintf+0x31a>
    37d2:	b3 94       	inc	r11
    37d4:	a3 fc       	sbrc	r10, 3
    37d6:	10 c0       	rjmp	.+32     	; 0x37f8 <vfprintf+0x33e>
    37d8:	a0 fe       	sbrs	r10, 0
    37da:	06 c0       	rjmp	.+12     	; 0x37e8 <vfprintf+0x32e>
    37dc:	b2 14       	cp	r11, r2
    37de:	80 f4       	brcc	.+32     	; 0x3800 <vfprintf+0x346>
    37e0:	28 0c       	add	r2, r8
    37e2:	92 2c       	mov	r9, r2
    37e4:	9b 18       	sub	r9, r11
    37e6:	0d c0       	rjmp	.+26     	; 0x3802 <vfprintf+0x348>
    37e8:	b2 14       	cp	r11, r2
    37ea:	58 f4       	brcc	.+22     	; 0x3802 <vfprintf+0x348>
    37ec:	b6 01       	movw	r22, r12
    37ee:	80 e2       	ldi	r24, 0x20	; 32
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	76 d0       	rcall	.+236    	; 0x38e0 <fputc>
    37f4:	b3 94       	inc	r11
    37f6:	f8 cf       	rjmp	.-16     	; 0x37e8 <vfprintf+0x32e>
    37f8:	b2 14       	cp	r11, r2
    37fa:	18 f4       	brcc	.+6      	; 0x3802 <vfprintf+0x348>
    37fc:	2b 18       	sub	r2, r11
    37fe:	02 c0       	rjmp	.+4      	; 0x3804 <vfprintf+0x34a>
    3800:	98 2c       	mov	r9, r8
    3802:	21 2c       	mov	r2, r1
    3804:	a4 fe       	sbrs	r10, 4
    3806:	0f c0       	rjmp	.+30     	; 0x3826 <vfprintf+0x36c>
    3808:	b6 01       	movw	r22, r12
    380a:	80 e3       	ldi	r24, 0x30	; 48
    380c:	90 e0       	ldi	r25, 0x00	; 0
    380e:	68 d0       	rcall	.+208    	; 0x38e0 <fputc>
    3810:	a2 fe       	sbrs	r10, 2
    3812:	16 c0       	rjmp	.+44     	; 0x3840 <vfprintf+0x386>
    3814:	a1 fc       	sbrc	r10, 1
    3816:	03 c0       	rjmp	.+6      	; 0x381e <vfprintf+0x364>
    3818:	88 e7       	ldi	r24, 0x78	; 120
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	02 c0       	rjmp	.+4      	; 0x3822 <vfprintf+0x368>
    381e:	88 e5       	ldi	r24, 0x58	; 88
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	b6 01       	movw	r22, r12
    3824:	0c c0       	rjmp	.+24     	; 0x383e <vfprintf+0x384>
    3826:	8a 2d       	mov	r24, r10
    3828:	86 78       	andi	r24, 0x86	; 134
    382a:	51 f0       	breq	.+20     	; 0x3840 <vfprintf+0x386>
    382c:	a1 fe       	sbrs	r10, 1
    382e:	02 c0       	rjmp	.+4      	; 0x3834 <vfprintf+0x37a>
    3830:	8b e2       	ldi	r24, 0x2B	; 43
    3832:	01 c0       	rjmp	.+2      	; 0x3836 <vfprintf+0x37c>
    3834:	80 e2       	ldi	r24, 0x20	; 32
    3836:	a7 fc       	sbrc	r10, 7
    3838:	8d e2       	ldi	r24, 0x2D	; 45
    383a:	b6 01       	movw	r22, r12
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	50 d0       	rcall	.+160    	; 0x38e0 <fputc>
    3840:	89 14       	cp	r8, r9
    3842:	30 f4       	brcc	.+12     	; 0x3850 <vfprintf+0x396>
    3844:	b6 01       	movw	r22, r12
    3846:	80 e3       	ldi	r24, 0x30	; 48
    3848:	90 e0       	ldi	r25, 0x00	; 0
    384a:	4a d0       	rcall	.+148    	; 0x38e0 <fputc>
    384c:	9a 94       	dec	r9
    384e:	f8 cf       	rjmp	.-16     	; 0x3840 <vfprintf+0x386>
    3850:	8a 94       	dec	r8
    3852:	f3 01       	movw	r30, r6
    3854:	e8 0d       	add	r30, r8
    3856:	f1 1d       	adc	r31, r1
    3858:	80 81       	ld	r24, Z
    385a:	b6 01       	movw	r22, r12
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	40 d0       	rcall	.+128    	; 0x38e0 <fputc>
    3860:	81 10       	cpse	r8, r1
    3862:	f6 cf       	rjmp	.-20     	; 0x3850 <vfprintf+0x396>
    3864:	22 20       	and	r2, r2
    3866:	09 f4       	brne	.+2      	; 0x386a <vfprintf+0x3b0>
    3868:	4e ce       	rjmp	.-868    	; 0x3506 <vfprintf+0x4c>
    386a:	b6 01       	movw	r22, r12
    386c:	80 e2       	ldi	r24, 0x20	; 32
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	37 d0       	rcall	.+110    	; 0x38e0 <fputc>
    3872:	2a 94       	dec	r2
    3874:	f7 cf       	rjmp	.-18     	; 0x3864 <vfprintf+0x3aa>
    3876:	f6 01       	movw	r30, r12
    3878:	86 81       	ldd	r24, Z+6	; 0x06
    387a:	97 81       	ldd	r25, Z+7	; 0x07
    387c:	02 c0       	rjmp	.+4      	; 0x3882 <vfprintf+0x3c8>
    387e:	8f ef       	ldi	r24, 0xFF	; 255
    3880:	9f ef       	ldi	r25, 0xFF	; 255
    3882:	2b 96       	adiw	r28, 0x0b	; 11
    3884:	0f b6       	in	r0, 0x3f	; 63
    3886:	f8 94       	cli
    3888:	de bf       	out	0x3e, r29	; 62
    388a:	0f be       	out	0x3f, r0	; 63
    388c:	cd bf       	out	0x3d, r28	; 61
    388e:	df 91       	pop	r29
    3890:	cf 91       	pop	r28
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
    3896:	ff 90       	pop	r15
    3898:	ef 90       	pop	r14
    389a:	df 90       	pop	r13
    389c:	cf 90       	pop	r12
    389e:	bf 90       	pop	r11
    38a0:	af 90       	pop	r10
    38a2:	9f 90       	pop	r9
    38a4:	8f 90       	pop	r8
    38a6:	7f 90       	pop	r7
    38a8:	6f 90       	pop	r6
    38aa:	5f 90       	pop	r5
    38ac:	4f 90       	pop	r4
    38ae:	3f 90       	pop	r3
    38b0:	2f 90       	pop	r2
    38b2:	08 95       	ret

000038b4 <strnlen_P>:
    38b4:	fc 01       	movw	r30, r24
    38b6:	05 90       	lpm	r0, Z+
    38b8:	61 50       	subi	r22, 0x01	; 1
    38ba:	70 40       	sbci	r23, 0x00	; 0
    38bc:	01 10       	cpse	r0, r1
    38be:	d8 f7       	brcc	.-10     	; 0x38b6 <strnlen_P+0x2>
    38c0:	80 95       	com	r24
    38c2:	90 95       	com	r25
    38c4:	8e 0f       	add	r24, r30
    38c6:	9f 1f       	adc	r25, r31
    38c8:	08 95       	ret

000038ca <strnlen>:
    38ca:	fc 01       	movw	r30, r24
    38cc:	61 50       	subi	r22, 0x01	; 1
    38ce:	70 40       	sbci	r23, 0x00	; 0
    38d0:	01 90       	ld	r0, Z+
    38d2:	01 10       	cpse	r0, r1
    38d4:	d8 f7       	brcc	.-10     	; 0x38cc <strnlen+0x2>
    38d6:	80 95       	com	r24
    38d8:	90 95       	com	r25
    38da:	8e 0f       	add	r24, r30
    38dc:	9f 1f       	adc	r25, r31
    38de:	08 95       	ret

000038e0 <fputc>:
    38e0:	0f 93       	push	r16
    38e2:	1f 93       	push	r17
    38e4:	cf 93       	push	r28
    38e6:	df 93       	push	r29
    38e8:	fb 01       	movw	r30, r22
    38ea:	23 81       	ldd	r18, Z+3	; 0x03
    38ec:	21 fd       	sbrc	r18, 1
    38ee:	03 c0       	rjmp	.+6      	; 0x38f6 <fputc+0x16>
    38f0:	8f ef       	ldi	r24, 0xFF	; 255
    38f2:	9f ef       	ldi	r25, 0xFF	; 255
    38f4:	2c c0       	rjmp	.+88     	; 0x394e <fputc+0x6e>
    38f6:	22 ff       	sbrs	r18, 2
    38f8:	16 c0       	rjmp	.+44     	; 0x3926 <fputc+0x46>
    38fa:	46 81       	ldd	r20, Z+6	; 0x06
    38fc:	57 81       	ldd	r21, Z+7	; 0x07
    38fe:	24 81       	ldd	r18, Z+4	; 0x04
    3900:	35 81       	ldd	r19, Z+5	; 0x05
    3902:	42 17       	cp	r20, r18
    3904:	53 07       	cpc	r21, r19
    3906:	44 f4       	brge	.+16     	; 0x3918 <fputc+0x38>
    3908:	a0 81       	ld	r26, Z
    390a:	b1 81       	ldd	r27, Z+1	; 0x01
    390c:	9d 01       	movw	r18, r26
    390e:	2f 5f       	subi	r18, 0xFF	; 255
    3910:	3f 4f       	sbci	r19, 0xFF	; 255
    3912:	31 83       	std	Z+1, r19	; 0x01
    3914:	20 83       	st	Z, r18
    3916:	8c 93       	st	X, r24
    3918:	26 81       	ldd	r18, Z+6	; 0x06
    391a:	37 81       	ldd	r19, Z+7	; 0x07
    391c:	2f 5f       	subi	r18, 0xFF	; 255
    391e:	3f 4f       	sbci	r19, 0xFF	; 255
    3920:	37 83       	std	Z+7, r19	; 0x07
    3922:	26 83       	std	Z+6, r18	; 0x06
    3924:	14 c0       	rjmp	.+40     	; 0x394e <fputc+0x6e>
    3926:	8b 01       	movw	r16, r22
    3928:	ec 01       	movw	r28, r24
    392a:	fb 01       	movw	r30, r22
    392c:	00 84       	ldd	r0, Z+8	; 0x08
    392e:	f1 85       	ldd	r31, Z+9	; 0x09
    3930:	e0 2d       	mov	r30, r0
    3932:	19 95       	eicall
    3934:	89 2b       	or	r24, r25
    3936:	e1 f6       	brne	.-72     	; 0x38f0 <fputc+0x10>
    3938:	d8 01       	movw	r26, r16
    393a:	16 96       	adiw	r26, 0x06	; 6
    393c:	8d 91       	ld	r24, X+
    393e:	9c 91       	ld	r25, X
    3940:	17 97       	sbiw	r26, 0x07	; 7
    3942:	01 96       	adiw	r24, 0x01	; 1
    3944:	17 96       	adiw	r26, 0x07	; 7
    3946:	9c 93       	st	X, r25
    3948:	8e 93       	st	-X, r24
    394a:	16 97       	sbiw	r26, 0x06	; 6
    394c:	ce 01       	movw	r24, r28
    394e:	df 91       	pop	r29
    3950:	cf 91       	pop	r28
    3952:	1f 91       	pop	r17
    3954:	0f 91       	pop	r16
    3956:	08 95       	ret

00003958 <__ultoa_invert>:
    3958:	fa 01       	movw	r30, r20
    395a:	aa 27       	eor	r26, r26
    395c:	28 30       	cpi	r18, 0x08	; 8
    395e:	51 f1       	breq	.+84     	; 0x39b4 <__ultoa_invert+0x5c>
    3960:	20 31       	cpi	r18, 0x10	; 16
    3962:	81 f1       	breq	.+96     	; 0x39c4 <__ultoa_invert+0x6c>
    3964:	e8 94       	clt
    3966:	6f 93       	push	r22
    3968:	6e 7f       	andi	r22, 0xFE	; 254
    396a:	6e 5f       	subi	r22, 0xFE	; 254
    396c:	7f 4f       	sbci	r23, 0xFF	; 255
    396e:	8f 4f       	sbci	r24, 0xFF	; 255
    3970:	9f 4f       	sbci	r25, 0xFF	; 255
    3972:	af 4f       	sbci	r26, 0xFF	; 255
    3974:	b1 e0       	ldi	r27, 0x01	; 1
    3976:	3e d0       	rcall	.+124    	; 0x39f4 <__ultoa_invert+0x9c>
    3978:	b4 e0       	ldi	r27, 0x04	; 4
    397a:	3c d0       	rcall	.+120    	; 0x39f4 <__ultoa_invert+0x9c>
    397c:	67 0f       	add	r22, r23
    397e:	78 1f       	adc	r23, r24
    3980:	89 1f       	adc	r24, r25
    3982:	9a 1f       	adc	r25, r26
    3984:	a1 1d       	adc	r26, r1
    3986:	68 0f       	add	r22, r24
    3988:	79 1f       	adc	r23, r25
    398a:	8a 1f       	adc	r24, r26
    398c:	91 1d       	adc	r25, r1
    398e:	a1 1d       	adc	r26, r1
    3990:	6a 0f       	add	r22, r26
    3992:	71 1d       	adc	r23, r1
    3994:	81 1d       	adc	r24, r1
    3996:	91 1d       	adc	r25, r1
    3998:	a1 1d       	adc	r26, r1
    399a:	20 d0       	rcall	.+64     	; 0x39dc <__ultoa_invert+0x84>
    399c:	09 f4       	brne	.+2      	; 0x39a0 <__ultoa_invert+0x48>
    399e:	68 94       	set
    39a0:	3f 91       	pop	r19
    39a2:	2a e0       	ldi	r18, 0x0A	; 10
    39a4:	26 9f       	mul	r18, r22
    39a6:	11 24       	eor	r1, r1
    39a8:	30 19       	sub	r19, r0
    39aa:	30 5d       	subi	r19, 0xD0	; 208
    39ac:	31 93       	st	Z+, r19
    39ae:	de f6       	brtc	.-74     	; 0x3966 <__ultoa_invert+0xe>
    39b0:	cf 01       	movw	r24, r30
    39b2:	08 95       	ret
    39b4:	46 2f       	mov	r20, r22
    39b6:	47 70       	andi	r20, 0x07	; 7
    39b8:	40 5d       	subi	r20, 0xD0	; 208
    39ba:	41 93       	st	Z+, r20
    39bc:	b3 e0       	ldi	r27, 0x03	; 3
    39be:	0f d0       	rcall	.+30     	; 0x39de <__ultoa_invert+0x86>
    39c0:	c9 f7       	brne	.-14     	; 0x39b4 <__ultoa_invert+0x5c>
    39c2:	f6 cf       	rjmp	.-20     	; 0x39b0 <__ultoa_invert+0x58>
    39c4:	46 2f       	mov	r20, r22
    39c6:	4f 70       	andi	r20, 0x0F	; 15
    39c8:	40 5d       	subi	r20, 0xD0	; 208
    39ca:	4a 33       	cpi	r20, 0x3A	; 58
    39cc:	18 f0       	brcs	.+6      	; 0x39d4 <__ultoa_invert+0x7c>
    39ce:	49 5d       	subi	r20, 0xD9	; 217
    39d0:	31 fd       	sbrc	r19, 1
    39d2:	40 52       	subi	r20, 0x20	; 32
    39d4:	41 93       	st	Z+, r20
    39d6:	02 d0       	rcall	.+4      	; 0x39dc <__ultoa_invert+0x84>
    39d8:	a9 f7       	brne	.-22     	; 0x39c4 <__ultoa_invert+0x6c>
    39da:	ea cf       	rjmp	.-44     	; 0x39b0 <__ultoa_invert+0x58>
    39dc:	b4 e0       	ldi	r27, 0x04	; 4
    39de:	a6 95       	lsr	r26
    39e0:	97 95       	ror	r25
    39e2:	87 95       	ror	r24
    39e4:	77 95       	ror	r23
    39e6:	67 95       	ror	r22
    39e8:	ba 95       	dec	r27
    39ea:	c9 f7       	brne	.-14     	; 0x39de <__ultoa_invert+0x86>
    39ec:	00 97       	sbiw	r24, 0x00	; 0
    39ee:	61 05       	cpc	r22, r1
    39f0:	71 05       	cpc	r23, r1
    39f2:	08 95       	ret
    39f4:	9b 01       	movw	r18, r22
    39f6:	ac 01       	movw	r20, r24
    39f8:	0a 2e       	mov	r0, r26
    39fa:	06 94       	lsr	r0
    39fc:	57 95       	ror	r21
    39fe:	47 95       	ror	r20
    3a00:	37 95       	ror	r19
    3a02:	27 95       	ror	r18
    3a04:	ba 95       	dec	r27
    3a06:	c9 f7       	brne	.-14     	; 0x39fa <__ultoa_invert+0xa2>
    3a08:	62 0f       	add	r22, r18
    3a0a:	73 1f       	adc	r23, r19
    3a0c:	84 1f       	adc	r24, r20
    3a0e:	95 1f       	adc	r25, r21
    3a10:	a0 1d       	adc	r26, r0
    3a12:	08 95       	ret

00003a14 <_exit>:
    3a14:	f8 94       	cli

00003a16 <__stop_program>:
    3a16:	ff cf       	rjmp	.-2      	; 0x3a16 <__stop_program>
