
MyFirstProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000046a  00800200  00004b54  00004be8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004b54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021d  0080066a  0080066a  00005052  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00005052  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000050b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a30  00000000  00000000  000050f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000cefd  00000000  00000000  00005b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034c3  00000000  00000000  00012a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000062a9  00000000  00000000  00015ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002084  00000000  00000000  0001c18c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003c9b  00000000  00000000  0001e210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b3d5  00000000  00000000  00021eab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a50  00000000  00000000  0002d280  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	05 c2       	rjmp	.+1034   	; 0x40c <__ctors_end>
       2:	00 00       	nop
       4:	24 c2       	rjmp	.+1096   	; 0x44e <__bad_interrupt>
       6:	00 00       	nop
       8:	22 c2       	rjmp	.+1092   	; 0x44e <__bad_interrupt>
       a:	00 00       	nop
       c:	20 c2       	rjmp	.+1088   	; 0x44e <__bad_interrupt>
       e:	00 00       	nop
      10:	1e c2       	rjmp	.+1084   	; 0x44e <__bad_interrupt>
      12:	00 00       	nop
      14:	1c c2       	rjmp	.+1080   	; 0x44e <__bad_interrupt>
      16:	00 00       	nop
      18:	1a c2       	rjmp	.+1076   	; 0x44e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	18 c2       	rjmp	.+1072   	; 0x44e <__bad_interrupt>
      1e:	00 00       	nop
      20:	16 c2       	rjmp	.+1068   	; 0x44e <__bad_interrupt>
      22:	00 00       	nop
      24:	14 c2       	rjmp	.+1064   	; 0x44e <__bad_interrupt>
      26:	00 00       	nop
      28:	12 c2       	rjmp	.+1060   	; 0x44e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	10 c2       	rjmp	.+1056   	; 0x44e <__bad_interrupt>
      2e:	00 00       	nop
      30:	5c c4       	rjmp	.+2232   	; 0x8ea <__vector_12>
      32:	00 00       	nop
      34:	0c c2       	rjmp	.+1048   	; 0x44e <__bad_interrupt>
      36:	00 00       	nop
      38:	0a c2       	rjmp	.+1044   	; 0x44e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	08 c2       	rjmp	.+1040   	; 0x44e <__bad_interrupt>
      3e:	00 00       	nop
      40:	06 c2       	rjmp	.+1036   	; 0x44e <__bad_interrupt>
      42:	00 00       	nop
      44:	04 c2       	rjmp	.+1032   	; 0x44e <__bad_interrupt>
      46:	00 00       	nop
      48:	02 c2       	rjmp	.+1028   	; 0x44e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	00 c2       	rjmp	.+1024   	; 0x44e <__bad_interrupt>
      4e:	00 00       	nop
      50:	fe c1       	rjmp	.+1020   	; 0x44e <__bad_interrupt>
      52:	00 00       	nop
      54:	fc c1       	rjmp	.+1016   	; 0x44e <__bad_interrupt>
      56:	00 00       	nop
      58:	fa c1       	rjmp	.+1012   	; 0x44e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f8 c1       	rjmp	.+1008   	; 0x44e <__bad_interrupt>
      5e:	00 00       	nop
      60:	f6 c1       	rjmp	.+1004   	; 0x44e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 a7 1b 	jmp	0x374e	; 0x374e <__vector_25>
      68:	0c 94 f9 1b 	jmp	0x37f2	; 0x37f2 <__vector_26>
      6c:	f0 c1       	rjmp	.+992    	; 0x44e <__bad_interrupt>
      6e:	00 00       	nop
      70:	ee c1       	rjmp	.+988    	; 0x44e <__bad_interrupt>
      72:	00 00       	nop
      74:	ec c1       	rjmp	.+984    	; 0x44e <__bad_interrupt>
      76:	00 00       	nop
      78:	ea c1       	rjmp	.+980    	; 0x44e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e8 c1       	rjmp	.+976    	; 0x44e <__bad_interrupt>
      7e:	00 00       	nop
      80:	e6 c1       	rjmp	.+972    	; 0x44e <__bad_interrupt>
      82:	00 00       	nop
      84:	e4 c1       	rjmp	.+968    	; 0x44e <__bad_interrupt>
      86:	00 00       	nop
      88:	e2 c1       	rjmp	.+964    	; 0x44e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e0 c1       	rjmp	.+960    	; 0x44e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__vector_36>
      94:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <__vector_37>
      98:	da c1       	rjmp	.+948    	; 0x44e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 46 1e 	jmp	0x3c8c	; 0x3c8c <__vector_39>
      a0:	d6 c1       	rjmp	.+940    	; 0x44e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	d4 c1       	rjmp	.+936    	; 0x44e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	d2 c1       	rjmp	.+932    	; 0x44e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	d0 c1       	rjmp	.+928    	; 0x44e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	ce c1       	rjmp	.+924    	; 0x44e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	cc c1       	rjmp	.+920    	; 0x44e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ca c1       	rjmp	.+916    	; 0x44e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	c8 c1       	rjmp	.+912    	; 0x44e <__bad_interrupt>
      be:	00 00       	nop
      c0:	c6 c1       	rjmp	.+908    	; 0x44e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	c4 c1       	rjmp	.+904    	; 0x44e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	c2 c1       	rjmp	.+900    	; 0x44e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 d3 1c 	jmp	0x39a6	; 0x39a6 <__vector_51>
      d0:	0c 94 25 1d 	jmp	0x3a4a	; 0x3a4a <__vector_52>
      d4:	bc c1       	rjmp	.+888    	; 0x44e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 69 1d 	jmp	0x3ad2	; 0x3ad2 <__vector_54>
      dc:	0c 94 bb 1d 	jmp	0x3b76	; 0x3b76 <__vector_55>
      e0:	b6 c1       	rjmp	.+876    	; 0x44e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	95 01       	movw	r18, r10
      e6:	95 01       	movw	r18, r10
      e8:	95 01       	movw	r18, r10
      ea:	c4 01       	movw	r24, r8
      ec:	cc 01       	movw	r24, r24
      ee:	db 01       	movw	r26, r22
      f0:	95 01       	movw	r18, r10
      f2:	95 01       	movw	r18, r10
      f4:	c4 01       	movw	r24, r8
      f6:	cc 01       	movw	r24, r24
      f8:	68 1e       	adc	r6, r24
      fa:	d8 1e       	adc	r13, r24
      fc:	d8 1e       	adc	r13, r24
      fe:	d8 1e       	adc	r13, r24
     100:	d8 1e       	adc	r13, r24
     102:	d8 1e       	adc	r13, r24
     104:	d8 1e       	adc	r13, r24
     106:	d8 1e       	adc	r13, r24
     108:	68 1e       	adc	r6, r24
     10a:	d8 1e       	adc	r13, r24
     10c:	d8 1e       	adc	r13, r24
     10e:	d8 1e       	adc	r13, r24
     110:	d8 1e       	adc	r13, r24
     112:	d8 1e       	adc	r13, r24
     114:	d8 1e       	adc	r13, r24
     116:	d8 1e       	adc	r13, r24
     118:	6a 1e       	adc	r6, r26
     11a:	d8 1e       	adc	r13, r24
     11c:	d8 1e       	adc	r13, r24
     11e:	d8 1e       	adc	r13, r24
     120:	d8 1e       	adc	r13, r24
     122:	d8 1e       	adc	r13, r24
     124:	d8 1e       	adc	r13, r24
     126:	d8 1e       	adc	r13, r24
     128:	d8 1e       	adc	r13, r24
     12a:	d8 1e       	adc	r13, r24
     12c:	d8 1e       	adc	r13, r24
     12e:	d8 1e       	adc	r13, r24
     130:	d8 1e       	adc	r13, r24
     132:	d8 1e       	adc	r13, r24
     134:	d8 1e       	adc	r13, r24
     136:	d8 1e       	adc	r13, r24
     138:	6a 1e       	adc	r6, r26
     13a:	d8 1e       	adc	r13, r24
     13c:	d8 1e       	adc	r13, r24
     13e:	d8 1e       	adc	r13, r24
     140:	d8 1e       	adc	r13, r24
     142:	d8 1e       	adc	r13, r24
     144:	d8 1e       	adc	r13, r24
     146:	d8 1e       	adc	r13, r24
     148:	d8 1e       	adc	r13, r24
     14a:	d8 1e       	adc	r13, r24
     14c:	d8 1e       	adc	r13, r24
     14e:	d8 1e       	adc	r13, r24
     150:	d8 1e       	adc	r13, r24
     152:	d8 1e       	adc	r13, r24
     154:	d8 1e       	adc	r13, r24
     156:	d8 1e       	adc	r13, r24
     158:	d4 1e       	adc	r13, r20
     15a:	d8 1e       	adc	r13, r24
     15c:	d8 1e       	adc	r13, r24
     15e:	d8 1e       	adc	r13, r24
     160:	d8 1e       	adc	r13, r24
     162:	d8 1e       	adc	r13, r24
     164:	d8 1e       	adc	r13, r24
     166:	d8 1e       	adc	r13, r24
     168:	9f 1e       	adc	r9, r31
     16a:	d8 1e       	adc	r13, r24
     16c:	d8 1e       	adc	r13, r24
     16e:	d8 1e       	adc	r13, r24
     170:	d8 1e       	adc	r13, r24
     172:	d8 1e       	adc	r13, r24
     174:	d8 1e       	adc	r13, r24
     176:	d8 1e       	adc	r13, r24
     178:	d8 1e       	adc	r13, r24
     17a:	d8 1e       	adc	r13, r24
     17c:	d8 1e       	adc	r13, r24
     17e:	d8 1e       	adc	r13, r24
     180:	d8 1e       	adc	r13, r24
     182:	d8 1e       	adc	r13, r24
     184:	d8 1e       	adc	r13, r24
     186:	d8 1e       	adc	r13, r24
     188:	93 1e       	adc	r9, r19
     18a:	d8 1e       	adc	r13, r24
     18c:	d8 1e       	adc	r13, r24
     18e:	d8 1e       	adc	r13, r24
     190:	d8 1e       	adc	r13, r24
     192:	d8 1e       	adc	r13, r24
     194:	d8 1e       	adc	r13, r24
     196:	d8 1e       	adc	r13, r24
     198:	b7 1e       	adc	r11, r23

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	02 e8       	ldi	r16, 0x82	; 130
     19c:	16 e0       	ldi	r17, 0x06	; 6
     19e:	0f 2e       	mov	r0, r31
     1a0:	fa ea       	ldi	r31, 0xAA	; 170
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f6 e0       	ldi	r31, 0x06	; 6
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	15 96       	adiw	r26, 0x05	; 5
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	16 97       	sbiw	r26, 0x06	; 6
     1c2:	c6 81       	ldd	r28, Z+6	; 0x06
     1c4:	d7 81       	ldd	r29, Z+7	; 0x07
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	f5 d1       	rcall	.+1002   	; 0x5b6 <uxListRemove>
     1cc:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <uxCurrentNumberOfTasks>
     1d6:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8f 89       	ldd	r24, Y+23	; 0x17
     1e6:	98 8d       	ldd	r25, Y+24	; 0x18
     1e8:	73 d1       	rcall	.+742    	; 0x4d0 <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	71 d1       	rcall	.+738    	; 0x4d0 <vPortFree>
     1ee:	80 91 81 06 	lds	r24, 0x0681	; 0x800681 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	b0 d2       	rcall	.+1376   	; 0x760 <vPortYield>
     200:	0e 94 bd 12 	call	0x257a	; 0x257a <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	00 d0       	rcall	.+0      	; 0x20c <prvTimerTask+0x6>
     20c:	00 d0       	rcall	.+0      	; 0x20e <prvTimerTask+0x8>
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     218:	44 24       	eor	r4, r4
     21a:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     21c:	e1 2c       	mov	r14, r1
     21e:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     220:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     222:	c8 2e       	mov	r12, r24
     224:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
     226:	e0 91 d8 06 	lds	r30, 0x06D8	; 0x8006d8 <pxCurrentTimerList>
     22a:	f0 91 d9 06 	lds	r31, 0x06D9	; 0x8006d9 <pxCurrentTimerList+0x1>
     22e:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
     230:	88 23       	and	r24, r24
     232:	09 f4       	brne	.+2      	; 0x236 <prvTimerTask+0x30>
     234:	d7 c0       	rjmp	.+430    	; 0x3e4 <prvTimerTask+0x1de>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
     236:	05 80       	ldd	r0, Z+5	; 0x05
     238:	f6 81       	ldd	r31, Z+6	; 0x06
     23a:	e0 2d       	mov	r30, r0
     23c:	a0 80       	ld	r10, Z
     23e:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     240:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     244:	c4 01       	movw	r24, r8
     246:	0e 94 4f 12 	call	0x249e	; 0x249e <prvSampleTimeNow>
     24a:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	81 11       	cpse	r24, r1
     250:	48 c0       	rjmp	.+144    	; 0x2e2 <prvTimerTask+0xdc>
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     252:	0a 15       	cp	r16, r10
     254:	1b 05       	cpc	r17, r11
     256:	b0 f1       	brcs	.+108    	; 0x2c4 <prvTimerTask+0xbe>
            {
                ( void ) xTaskResumeAll();
     258:	0e 94 bd 0c 	call	0x197a	; 0x197a <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
     25c:	e0 91 d8 06 	lds	r30, 0x06D8	; 0x8006d8 <pxCurrentTimerList>
     260:	f0 91 d9 06 	lds	r31, 0x06D9	; 0x8006d9 <pxCurrentTimerList+0x1>
     264:	05 80       	ldd	r0, Z+5	; 0x05
     266:	f6 81       	ldd	r31, Z+6	; 0x06
     268:	e0 2d       	mov	r30, r0
     26a:	66 80       	ldd	r6, Z+6	; 0x06
     26c:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     26e:	c3 01       	movw	r24, r6
     270:	02 96       	adiw	r24, 0x02	; 2
     272:	a1 d1       	rcall	.+834    	; 0x5b6 <uxListRemove>
    traceTIMER_EXPIRED( pxTimer );

    /* If the timer is an auto reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     274:	d3 01       	movw	r26, r6
     276:	53 96       	adiw	r26, 0x13	; 19
     278:	8c 91       	ld	r24, X
     27a:	53 97       	sbiw	r26, 0x13	; 19
     27c:	82 ff       	sbrs	r24, 2
     27e:	17 c0       	rjmp	.+46     	; 0x2ae <prvTimerTask+0xa8>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
     280:	1c 96       	adiw	r26, 0x0c	; 12
     282:	6d 91       	ld	r22, X+
     284:	7c 91       	ld	r23, X
     286:	1d 97       	sbiw	r26, 0x0d	; 13
     288:	6a 0d       	add	r22, r10
     28a:	7b 1d       	adc	r23, r11
     28c:	95 01       	movw	r18, r10
     28e:	a8 01       	movw	r20, r16
     290:	c3 01       	movw	r24, r6
     292:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <prvInsertTimerInActiveList>
     296:	88 23       	and	r24, r24
     298:	69 f0       	breq	.+26     	; 0x2b4 <prvTimerTask+0xae>
        {
            /* The timer expired before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
     29a:	0e 2d       	mov	r16, r14
     29c:	1f 2d       	mov	r17, r15
     29e:	2e 2d       	mov	r18, r14
     2a0:	3f 2d       	mov	r19, r15
     2a2:	a5 01       	movw	r20, r10
     2a4:	65 2d       	mov	r22, r5
     2a6:	c3 01       	movw	r24, r6
     2a8:	0e 94 08 12 	call	0x2410	; 0x2410 <xTimerGenericCommand>
     2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <prvTimerTask+0xae>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     2ae:	8e 7f       	andi	r24, 0xFE	; 254
     2b0:	f3 01       	movw	r30, r6
     2b2:	83 8b       	std	Z+19, r24	; 0x13
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     2b4:	d3 01       	movw	r26, r6
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	ed 91       	ld	r30, X+
     2ba:	fc 91       	ld	r31, X
     2bc:	51 97       	sbiw	r26, 0x11	; 17
     2be:	c3 01       	movw	r24, r6
     2c0:	19 95       	eicall
     2c2:	84 c0       	rjmp	.+264    	; 0x3cc <prvTimerTask+0x1c6>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expired? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
     2c4:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
     2c6:	b5 01       	movw	r22, r10
     2c8:	60 1b       	sub	r22, r16
     2ca:	71 0b       	sbc	r23, r17
     2cc:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xTimerQueue>
     2d0:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xTimerQueue+0x1>
     2d4:	78 d6       	rcall	.+3312   	; 0xfc6 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
     2d6:	0e 94 bd 0c 	call	0x197a	; 0x197a <xTaskResumeAll>
     2da:	81 11       	cpse	r24, r1
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
     2dc:	77 c0       	rjmp	.+238    	; 0x3cc <prvTimerTask+0x1c6>
     2de:	40 d2       	rcall	.+1152   	; 0x760 <vPortYield>
     2e0:	75 c0       	rjmp	.+234    	; 0x3cc <prvTimerTask+0x1c6>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
     2e2:	0e 94 bd 0c 	call	0x197a	; 0x197a <xTaskResumeAll>
     2e6:	72 c0       	rjmp	.+228    	; 0x3cc <prvTimerTask+0x1c6>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
     2e8:	89 81       	ldd	r24, Y+1	; 0x01
     2ea:	88 23       	and	r24, r24
     2ec:	0c f4       	brge	.+2      	; 0x2f0 <prvTimerTask+0xea>
     2ee:	6e c0       	rjmp	.+220    	; 0x3cc <prvTimerTask+0x1c6>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
     2f0:	ac 80       	ldd	r10, Y+4	; 0x04
     2f2:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
     2f4:	f5 01       	movw	r30, r10
     2f6:	82 85       	ldd	r24, Z+10	; 0x0a
     2f8:	93 85       	ldd	r25, Z+11	; 0x0b
     2fa:	89 2b       	or	r24, r25
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
     2fc:	19 f0       	breq	.+6      	; 0x304 <prvTimerTask+0xfe>
     2fe:	c5 01       	movw	r24, r10
     300:	02 96       	adiw	r24, 0x02	; 2
     302:	59 d1       	rcall	.+690    	; 0x5b6 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     304:	ce 01       	movw	r24, r28
     306:	06 96       	adiw	r24, 0x06	; 6
     308:	0e 94 4f 12 	call	0x249e	; 0x249e <prvSampleTimeNow>
     30c:	ac 01       	movw	r20, r24

            switch( xMessage.xMessageID )
     30e:	e9 81       	ldd	r30, Y+1	; 0x01
     310:	0e 2e       	mov	r0, r30
     312:	00 0c       	add	r0, r0
     314:	ff 0b       	sbc	r31, r31
     316:	ea 30       	cpi	r30, 0x0A	; 10
     318:	f1 05       	cpc	r31, r1
     31a:	08 f0       	brcs	.+2      	; 0x31e <prvTimerTask+0x118>
     31c:	57 c0       	rjmp	.+174    	; 0x3cc <prvTimerTask+0x1c6>
     31e:	88 27       	eor	r24, r24
     320:	ee 58       	subi	r30, 0x8E	; 142
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	8f 4f       	sbci	r24, 0xFF	; 255
     326:	0c 94 09 21 	jmp	0x4212	; 0x4212 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     32a:	d5 01       	movw	r26, r10
     32c:	53 96       	adiw	r26, 0x13	; 19
     32e:	8c 91       	ld	r24, X
     330:	53 97       	sbiw	r26, 0x13	; 19
     332:	81 60       	ori	r24, 0x01	; 1
     334:	53 96       	adiw	r26, 0x13	; 19
     336:	8c 93       	st	X, r24
     338:	53 97       	sbiw	r26, 0x13	; 19
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
     33a:	2a 81       	ldd	r18, Y+2	; 0x02
     33c:	3b 81       	ldd	r19, Y+3	; 0x03
     33e:	1c 96       	adiw	r26, 0x0c	; 12
     340:	6d 91       	ld	r22, X+
     342:	7c 91       	ld	r23, X
     344:	1d 97       	sbiw	r26, 0x0d	; 13
     346:	62 0f       	add	r22, r18
     348:	73 1f       	adc	r23, r19
     34a:	c5 01       	movw	r24, r10
     34c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <prvInsertTimerInActiveList>
     350:	88 23       	and	r24, r24
     352:	e1 f1       	breq	.+120    	; 0x3cc <prvTimerTask+0x1c6>
                    {
                        /* The timer expired before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
     354:	d5 01       	movw	r26, r10
     356:	50 96       	adiw	r26, 0x10	; 16
     358:	ed 91       	ld	r30, X+
     35a:	fc 91       	ld	r31, X
     35c:	51 97       	sbiw	r26, 0x11	; 17
     35e:	c5 01       	movw	r24, r10
     360:	19 95       	eicall
                        traceTIMER_EXPIRED( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
     362:	f5 01       	movw	r30, r10
     364:	83 89       	ldd	r24, Z+19	; 0x13
     366:	82 ff       	sbrs	r24, 2
     368:	31 c0       	rjmp	.+98     	; 0x3cc <prvTimerTask+0x1c6>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
     36a:	4a 81       	ldd	r20, Y+2	; 0x02
     36c:	5b 81       	ldd	r21, Y+3	; 0x03
     36e:	84 85       	ldd	r24, Z+12	; 0x0c
     370:	95 85       	ldd	r25, Z+13	; 0x0d
     372:	48 0f       	add	r20, r24
     374:	59 1f       	adc	r21, r25
     376:	0e 2d       	mov	r16, r14
     378:	1f 2d       	mov	r17, r15
     37a:	2e 2d       	mov	r18, r14
     37c:	3f 2d       	mov	r19, r15
     37e:	65 2d       	mov	r22, r5
     380:	c5 01       	movw	r24, r10
     382:	0e 94 08 12 	call	0x2410	; 0x2410 <xTimerGenericCommand>
     386:	22 c0       	rjmp	.+68     	; 0x3cc <prvTimerTask+0x1c6>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     388:	d5 01       	movw	r26, r10
     38a:	53 96       	adiw	r26, 0x13	; 19
     38c:	8c 91       	ld	r24, X
     38e:	53 97       	sbiw	r26, 0x13	; 19
     390:	8e 7f       	andi	r24, 0xFE	; 254
     392:	53 96       	adiw	r26, 0x13	; 19
     394:	8c 93       	st	X, r24
     396:	1a c0       	rjmp	.+52     	; 0x3cc <prvTimerTask+0x1c6>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
     398:	f5 01       	movw	r30, r10
     39a:	83 89       	ldd	r24, Z+19	; 0x13
     39c:	81 60       	ori	r24, 0x01	; 1
     39e:	83 8b       	std	Z+19, r24	; 0x13
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
     3a0:	6a 81       	ldd	r22, Y+2	; 0x02
     3a2:	7b 81       	ldd	r23, Y+3	; 0x03
     3a4:	75 87       	std	Z+13, r23	; 0x0d
     3a6:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
     3a8:	64 0f       	add	r22, r20
     3aa:	75 1f       	adc	r23, r21
     3ac:	9a 01       	movw	r18, r20
     3ae:	c5 01       	movw	r24, r10
     3b0:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <prvInsertTimerInActiveList>
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <prvTimerTask+0x1c6>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
     3b6:	d5 01       	movw	r26, r10
     3b8:	53 96       	adiw	r26, 0x13	; 19
     3ba:	8c 91       	ld	r24, X
     3bc:	81 fd       	sbrc	r24, 1
                        {
                            vPortFree( pxTimer );
     3be:	03 c0       	rjmp	.+6      	; 0x3c6 <prvTimerTask+0x1c0>
     3c0:	c5 01       	movw	r24, r10
     3c2:	86 d0       	rcall	.+268    	; 0x4d0 <vPortFree>
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <prvTimerTask+0x1c6>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
     3c6:	8e 7f       	andi	r24, 0xFE	; 254
     3c8:	f5 01       	movw	r30, r10
     3ca:	83 8b       	std	Z+19, r24	; 0x13
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
     3cc:	4e 2d       	mov	r20, r14
     3ce:	5f 2d       	mov	r21, r15
     3d0:	6c 2d       	mov	r22, r12
     3d2:	7d 2d       	mov	r23, r13
     3d4:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xTimerQueue>
     3d8:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xTimerQueue+0x1>
     3dc:	af d4       	rcall	.+2398   	; 0xd3c <xQueueReceive>
     3de:	81 11       	cpse	r24, r1
     3e0:	83 cf       	rjmp	.-250    	; 0x2e8 <prvTimerTask+0xe2>
     3e2:	21 cf       	rjmp	.-446    	; 0x226 <prvTimerTask+0x20>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
     3e4:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expired or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
     3e8:	c4 01       	movw	r24, r8
     3ea:	0e 94 4f 12 	call	0x249e	; 0x249e <prvSampleTimeNow>
     3ee:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	81 11       	cpse	r24, r1
     3f4:	76 cf       	rjmp	.-276    	; 0x2e2 <prvTimerTask+0xdc>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
     3f6:	e0 91 d6 06 	lds	r30, 0x06D6	; 0x8006d6 <pxOverflowTimerList>
     3fa:	f0 91 d7 06 	lds	r31, 0x06D7	; 0x8006d7 <pxOverflowTimerList+0x1>
     3fe:	80 81       	ld	r24, Z
     400:	44 2d       	mov	r20, r4
     402:	81 11       	cpse	r24, r1
     404:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
     406:	ae 2c       	mov	r10, r14
     408:	bf 2c       	mov	r11, r15
     40a:	5d cf       	rjmp	.-326    	; 0x2c6 <prvTimerTask+0xc0>

0000040c <__ctors_end>:
     40c:	11 24       	eor	r1, r1
     40e:	1f be       	out	0x3f, r1	; 63
     410:	cf ef       	ldi	r28, 0xFF	; 255
     412:	d1 e2       	ldi	r29, 0x21	; 33
     414:	de bf       	out	0x3e, r29	; 62
     416:	cd bf       	out	0x3d, r28	; 61
     418:	00 e0       	ldi	r16, 0x00	; 0
     41a:	0c bf       	out	0x3c, r16	; 60

0000041c <__do_copy_data>:
     41c:	16 e0       	ldi	r17, 0x06	; 6
     41e:	a0 e0       	ldi	r26, 0x00	; 0
     420:	b2 e0       	ldi	r27, 0x02	; 2
     422:	e4 e5       	ldi	r30, 0x54	; 84
     424:	fb e4       	ldi	r31, 0x4B	; 75
     426:	00 e0       	ldi	r16, 0x00	; 0
     428:	0b bf       	out	0x3b, r16	; 59
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x14>
     42c:	07 90       	elpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	aa 36       	cpi	r26, 0x6A	; 106
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0x10>

00000436 <__do_clear_bss>:
     436:	28 e0       	ldi	r18, 0x08	; 8
     438:	aa e6       	ldi	r26, 0x6A	; 106
     43a:	b6 e0       	ldi	r27, 0x06	; 6
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	a7 38       	cpi	r26, 0x87	; 135
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <main>
     44a:	0c 94 a8 25 	jmp	0x4b50	; 0x4b50 <_exit>

0000044e <__bad_interrupt>:
     44e:	d8 cd       	rjmp	.-1104   	; 0x0 <__vectors>

00000450 <co2_callback>:
		//vTaskDelayUntil(&xLastWakeTimeCO2,SENSOR_TIMER*60);
	//}
}

// call back function for getting co2 value
void co2_callback(uint16_t co2_ppm) {
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	1f 92       	push	r1
     456:	1f 92       	push	r1
     458:	cd b7       	in	r28, 0x3d	; 61
     45a:	de b7       	in	r29, 0x3e	; 62
	co2_ppm_pointer = &co2_ppm;
     45c:	ce 01       	movw	r24, r28
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	90 93 54 08 	sts	0x0854, r25	; 0x800854 <co2_ppm_pointer+0x1>
     464:	80 93 53 08 	sts	0x0853, r24	; 0x800853 <co2_ppm_pointer>
}
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <co2_sensor_init>:

uint16_t* co2_ppm_pointer;

// create drivers
void co2_sensor_init() {	
	mh_z19_create(ser_USART3, co2_callback);
     472:	68 e2       	ldi	r22, 0x28	; 40
     474:	72 e0       	ldi	r23, 0x02	; 2
     476:	83 e0       	ldi	r24, 0x03	; 3
     478:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <mh_z19_create>
     47c:	08 95       	ret

0000047e <trace_init>:
	 #if (configUSE_TRACE_FACILITY == 1)
	 #ifdef HAL_DEFS_H_

	 #else
		// Used on VIA MEGA Shield rev. 2.0.0
		DDRK |= _BV(DDK0) | _BV(DDK1) | _BV(DDK2) | _BV(DDK3);
     47e:	e7 e0       	ldi	r30, 0x07	; 7
     480:	f1 e0       	ldi	r31, 0x01	; 1
     482:	80 81       	ld	r24, Z
     484:	8f 60       	ori	r24, 0x0F	; 15
     486:	80 83       	st	Z, r24
     488:	08 95       	ret

0000048a <task_switch_in>:
	void task_switch_in(uint8_t task_no) {
		 #ifdef HAL_DEFS_H_

		 #else
		 // Used on VIA MEGA Shield rev. 2.0.0
		 PORTK &= 0b11110000;
     48a:	e8 e0       	ldi	r30, 0x08	; 8
     48c:	f1 e0       	ldi	r31, 0x01	; 1
     48e:	90 81       	ld	r25, Z
     490:	90 7f       	andi	r25, 0xF0	; 240
     492:	90 83       	st	Z, r25
		 PORTK |= (task_no & 0b00001111);
     494:	90 81       	ld	r25, Z
     496:	8f 70       	andi	r24, 0x0F	; 15
     498:	98 2b       	or	r25, r24
     49a:	90 83       	st	Z, r25
     49c:	08 95       	ret

0000049e <task_switch_out>:
	void task_switch_out(uint8_t task_no) {
		#ifdef HAL_DEFS_H_

		#else
		// Used on VIA MEGA Shield rev. 2.0.0
		PORTK &= 0b11110000;
     49e:	e8 e0       	ldi	r30, 0x08	; 8
     4a0:	f1 e0       	ldi	r31, 0x01	; 1
     4a2:	80 81       	ld	r24, Z
     4a4:	80 7f       	andi	r24, 0xF0	; 240
     4a6:	80 83       	st	Z, r24
     4a8:	08 95       	ret

000004aa <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     4aa:	cf 93       	push	r28
     4ac:	df 93       	push	r29
     4ae:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
     4b0:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
     4b4:	ce 01       	movw	r24, r28
     4b6:	0e 94 2b 21 	call	0x4256	; 0x4256 <malloc>
     4ba:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     4bc:	0e 94 bd 0c 	call	0x197a	; 0x197a <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
     4c0:	20 97       	sbiw	r28, 0x00	; 0
     4c2:	11 f4       	brne	.+4      	; 0x4c8 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
     4c4:	0e 94 be 12 	call	0x257c	; 0x257c <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
     4c8:	ce 01       	movw	r24, r28
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
    if( pv )
     4d4:	00 97       	sbiw	r24, 0x00	; 0
     4d6:	41 f0       	breq	.+16     	; 0x4e8 <vPortFree+0x18>
     4d8:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
     4da:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <vTaskSuspendAll>
        {
            free( pv );
     4de:	ce 01       	movw	r24, r28
     4e0:	0e 94 c3 21 	call	0x4386	; 0x4386 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
     4e4:	0e 94 bd 0c 	call	0x197a	; 0x197a <xTaskResumeAll>
    }
}
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     4ee:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4f0:	03 96       	adiw	r24, 0x03	; 3
     4f2:	92 83       	std	Z+2, r25	; 0x02
     4f4:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     4f6:	2f ef       	ldi	r18, 0xFF	; 255
     4f8:	3f ef       	ldi	r19, 0xFF	; 255
     4fa:	34 83       	std	Z+4, r19	; 0x04
     4fc:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     4fe:	96 83       	std	Z+6, r25	; 0x06
     500:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     502:	90 87       	std	Z+8, r25	; 0x08
     504:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     506:	10 82       	st	Z, r1
     508:	08 95       	ret

0000050a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     50a:	fc 01       	movw	r30, r24
     50c:	11 86       	std	Z+9, r1	; 0x09
     50e:	10 86       	std	Z+8, r1	; 0x08
     510:	08 95       	ret

00000512 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	9c 01       	movw	r18, r24
     518:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     51a:	dc 01       	movw	r26, r24
     51c:	11 96       	adiw	r26, 0x01	; 1
     51e:	cd 91       	ld	r28, X+
     520:	dc 91       	ld	r29, X
     522:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     524:	d3 83       	std	Z+3, r29	; 0x03
     526:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     528:	8c 81       	ldd	r24, Y+4	; 0x04
     52a:	9d 81       	ldd	r25, Y+5	; 0x05
     52c:	95 83       	std	Z+5, r25	; 0x05
     52e:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     530:	8c 81       	ldd	r24, Y+4	; 0x04
     532:	9d 81       	ldd	r25, Y+5	; 0x05
     534:	dc 01       	movw	r26, r24
     536:	13 96       	adiw	r26, 0x03	; 3
     538:	7c 93       	st	X, r23
     53a:	6e 93       	st	-X, r22
     53c:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     53e:	7d 83       	std	Y+5, r23	; 0x05
     540:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     542:	31 87       	std	Z+9, r19	; 0x09
     544:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     546:	f9 01       	movw	r30, r18
     548:	80 81       	ld	r24, Z
     54a:	8f 5f       	subi	r24, 0xFF	; 255
     54c:	80 83       	st	Z, r24
}
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	08 95       	ret

00000554 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     55a:	48 81       	ld	r20, Y
     55c:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stored in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     55e:	4f 3f       	cpi	r20, 0xFF	; 255
     560:	2f ef       	ldi	r18, 0xFF	; 255
     562:	52 07       	cpc	r21, r18
     564:	21 f4       	brne	.+8      	; 0x56e <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     566:	fc 01       	movw	r30, r24
     568:	a7 81       	ldd	r26, Z+7	; 0x07
     56a:	b0 85       	ldd	r27, Z+8	; 0x08
     56c:	0d c0       	rjmp	.+26     	; 0x588 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     56e:	dc 01       	movw	r26, r24
     570:	13 96       	adiw	r26, 0x03	; 3
     572:	01 c0       	rjmp	.+2      	; 0x576 <vListInsert+0x22>
     574:	df 01       	movw	r26, r30
     576:	12 96       	adiw	r26, 0x02	; 2
     578:	ed 91       	ld	r30, X+
     57a:	fc 91       	ld	r31, X
     57c:	13 97       	sbiw	r26, 0x03	; 3
     57e:	20 81       	ld	r18, Z
     580:	31 81       	ldd	r19, Z+1	; 0x01
     582:	42 17       	cp	r20, r18
     584:	53 07       	cpc	r21, r19
     586:	b0 f7       	brcc	.-20     	; 0x574 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     588:	12 96       	adiw	r26, 0x02	; 2
     58a:	ed 91       	ld	r30, X+
     58c:	fc 91       	ld	r31, X
     58e:	13 97       	sbiw	r26, 0x03	; 3
     590:	fb 83       	std	Y+3, r31	; 0x03
     592:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     594:	d5 83       	std	Z+5, r29	; 0x05
     596:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     598:	bd 83       	std	Y+5, r27	; 0x05
     59a:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     59c:	13 96       	adiw	r26, 0x03	; 3
     59e:	dc 93       	st	X, r29
     5a0:	ce 93       	st	-X, r28
     5a2:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
     5a4:	99 87       	std	Y+9, r25	; 0x09
     5a6:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     5a8:	fc 01       	movw	r30, r24
     5aa:	20 81       	ld	r18, Z
     5ac:	2f 5f       	subi	r18, 0xFF	; 255
     5ae:	20 83       	st	Z, r18
}
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	08 95       	ret

000005b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
     5bc:	a0 85       	ldd	r26, Z+8	; 0x08
     5be:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     5c0:	c2 81       	ldd	r28, Z+2	; 0x02
     5c2:	d3 81       	ldd	r29, Z+3	; 0x03
     5c4:	84 81       	ldd	r24, Z+4	; 0x04
     5c6:	95 81       	ldd	r25, Z+5	; 0x05
     5c8:	9d 83       	std	Y+5, r25	; 0x05
     5ca:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5cc:	c4 81       	ldd	r28, Z+4	; 0x04
     5ce:	d5 81       	ldd	r29, Z+5	; 0x05
     5d0:	82 81       	ldd	r24, Z+2	; 0x02
     5d2:	93 81       	ldd	r25, Z+3	; 0x03
     5d4:	9b 83       	std	Y+3, r25	; 0x03
     5d6:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     5d8:	11 96       	adiw	r26, 0x01	; 1
     5da:	8d 91       	ld	r24, X+
     5dc:	9c 91       	ld	r25, X
     5de:	12 97       	sbiw	r26, 0x02	; 2
     5e0:	e8 17       	cp	r30, r24
     5e2:	f9 07       	cpc	r31, r25
     5e4:	31 f4       	brne	.+12     	; 0x5f2 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     5e6:	84 81       	ldd	r24, Z+4	; 0x04
     5e8:	95 81       	ldd	r25, Z+5	; 0x05
     5ea:	12 96       	adiw	r26, 0x02	; 2
     5ec:	9c 93       	st	X, r25
     5ee:	8e 93       	st	-X, r24
     5f0:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5f2:	11 86       	std	Z+9, r1	; 0x09
     5f4:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     5f6:	8c 91       	ld	r24, X
     5f8:	81 50       	subi	r24, 0x01	; 1
     5fa:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5fc:	8c 91       	ld	r24, X
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	08 95       	ret

00000604 <pxPortInitialiseStack>:
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     604:	31 e1       	ldi	r19, 0x11	; 17
     606:	fc 01       	movw	r30, r24
     608:	30 83       	st	Z, r19
     60a:	31 97       	sbiw	r30, 0x01	; 1
     60c:	22 e2       	ldi	r18, 0x22	; 34
     60e:	20 83       	st	Z, r18
     610:	31 97       	sbiw	r30, 0x01	; 1
     612:	a3 e3       	ldi	r26, 0x33	; 51
     614:	a0 83       	st	Z, r26
     616:	31 97       	sbiw	r30, 0x01	; 1
     618:	60 83       	st	Z, r22
     61a:	31 97       	sbiw	r30, 0x01	; 1
     61c:	70 83       	st	Z, r23
     61e:	31 97       	sbiw	r30, 0x01	; 1
     620:	10 82       	st	Z, r1
     622:	31 97       	sbiw	r30, 0x01	; 1
     624:	10 82       	st	Z, r1
     626:	31 97       	sbiw	r30, 0x01	; 1
     628:	60 e8       	ldi	r22, 0x80	; 128
     62a:	60 83       	st	Z, r22
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	10 82       	st	Z, r1
     630:	31 97       	sbiw	r30, 0x01	; 1
     632:	10 82       	st	Z, r1
     634:	31 97       	sbiw	r30, 0x01	; 1
     636:	10 82       	st	Z, r1
     638:	31 97       	sbiw	r30, 0x01	; 1
     63a:	62 e0       	ldi	r22, 0x02	; 2
     63c:	60 83       	st	Z, r22
     63e:	31 97       	sbiw	r30, 0x01	; 1
     640:	63 e0       	ldi	r22, 0x03	; 3
     642:	60 83       	st	Z, r22
     644:	31 97       	sbiw	r30, 0x01	; 1
     646:	64 e0       	ldi	r22, 0x04	; 4
     648:	60 83       	st	Z, r22
     64a:	31 97       	sbiw	r30, 0x01	; 1
     64c:	65 e0       	ldi	r22, 0x05	; 5
     64e:	60 83       	st	Z, r22
     650:	31 97       	sbiw	r30, 0x01	; 1
     652:	66 e0       	ldi	r22, 0x06	; 6
     654:	60 83       	st	Z, r22
     656:	31 97       	sbiw	r30, 0x01	; 1
     658:	67 e0       	ldi	r22, 0x07	; 7
     65a:	60 83       	st	Z, r22
     65c:	31 97       	sbiw	r30, 0x01	; 1
     65e:	68 e0       	ldi	r22, 0x08	; 8
     660:	60 83       	st	Z, r22
     662:	31 97       	sbiw	r30, 0x01	; 1
     664:	69 e0       	ldi	r22, 0x09	; 9
     666:	60 83       	st	Z, r22
     668:	31 97       	sbiw	r30, 0x01	; 1
     66a:	60 e1       	ldi	r22, 0x10	; 16
     66c:	60 83       	st	Z, r22
     66e:	31 97       	sbiw	r30, 0x01	; 1
     670:	30 83       	st	Z, r19
     672:	31 97       	sbiw	r30, 0x01	; 1
     674:	32 e1       	ldi	r19, 0x12	; 18
     676:	30 83       	st	Z, r19
     678:	31 97       	sbiw	r30, 0x01	; 1
     67a:	33 e1       	ldi	r19, 0x13	; 19
     67c:	30 83       	st	Z, r19
     67e:	31 97       	sbiw	r30, 0x01	; 1
     680:	34 e1       	ldi	r19, 0x14	; 20
     682:	30 83       	st	Z, r19
     684:	31 97       	sbiw	r30, 0x01	; 1
     686:	35 e1       	ldi	r19, 0x15	; 21
     688:	30 83       	st	Z, r19
     68a:	31 97       	sbiw	r30, 0x01	; 1
     68c:	36 e1       	ldi	r19, 0x16	; 22
     68e:	30 83       	st	Z, r19
     690:	31 97       	sbiw	r30, 0x01	; 1
     692:	37 e1       	ldi	r19, 0x17	; 23
     694:	30 83       	st	Z, r19
     696:	31 97       	sbiw	r30, 0x01	; 1
     698:	38 e1       	ldi	r19, 0x18	; 24
     69a:	30 83       	st	Z, r19
     69c:	31 97       	sbiw	r30, 0x01	; 1
     69e:	39 e1       	ldi	r19, 0x19	; 25
     6a0:	30 83       	st	Z, r19
     6a2:	31 97       	sbiw	r30, 0x01	; 1
     6a4:	30 e2       	ldi	r19, 0x20	; 32
     6a6:	30 83       	st	Z, r19
     6a8:	31 97       	sbiw	r30, 0x01	; 1
     6aa:	31 e2       	ldi	r19, 0x21	; 33
     6ac:	30 83       	st	Z, r19
     6ae:	31 97       	sbiw	r30, 0x01	; 1
     6b0:	20 83       	st	Z, r18
     6b2:	31 97       	sbiw	r30, 0x01	; 1
     6b4:	23 e2       	ldi	r18, 0x23	; 35
     6b6:	20 83       	st	Z, r18
     6b8:	31 97       	sbiw	r30, 0x01	; 1
     6ba:	40 83       	st	Z, r20
     6bc:	31 97       	sbiw	r30, 0x01	; 1
     6be:	50 83       	st	Z, r21
     6c0:	31 97       	sbiw	r30, 0x01	; 1
     6c2:	26 e2       	ldi	r18, 0x26	; 38
     6c4:	20 83       	st	Z, r18
     6c6:	31 97       	sbiw	r30, 0x01	; 1
     6c8:	27 e2       	ldi	r18, 0x27	; 39
     6ca:	20 83       	st	Z, r18
     6cc:	31 97       	sbiw	r30, 0x01	; 1
     6ce:	28 e2       	ldi	r18, 0x28	; 40
     6d0:	20 83       	st	Z, r18
     6d2:	31 97       	sbiw	r30, 0x01	; 1
     6d4:	29 e2       	ldi	r18, 0x29	; 41
     6d6:	20 83       	st	Z, r18
     6d8:	31 97       	sbiw	r30, 0x01	; 1
     6da:	20 e3       	ldi	r18, 0x30	; 48
     6dc:	20 83       	st	Z, r18
     6de:	31 97       	sbiw	r30, 0x01	; 1
     6e0:	21 e3       	ldi	r18, 0x31	; 49
     6e2:	20 83       	st	Z, r18
     6e4:	89 97       	sbiw	r24, 0x29	; 41
     6e6:	08 95       	ret

000006e8 <xPortStartScheduler>:
     6e8:	a8 95       	wdr
     6ea:	90 ec       	ldi	r25, 0xC0	; 192
     6ec:	88 e1       	ldi	r24, 0x18	; 24
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	f8 94       	cli
     6f2:	a8 95       	wdr
     6f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     6f8:	0f be       	out	0x3f, r0	; 63
     6fa:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     6fe:	a0 91 ce 06 	lds	r26, 0x06CE	; 0x8006ce <pxCurrentTCB>
     702:	b0 91 cf 06 	lds	r27, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
     706:	cd 91       	ld	r28, X+
     708:	cd bf       	out	0x3d, r28	; 61
     70a:	dd 91       	ld	r29, X+
     70c:	de bf       	out	0x3e, r29	; 62
     70e:	ff 91       	pop	r31
     710:	ef 91       	pop	r30
     712:	df 91       	pop	r29
     714:	cf 91       	pop	r28
     716:	bf 91       	pop	r27
     718:	af 91       	pop	r26
     71a:	9f 91       	pop	r25
     71c:	8f 91       	pop	r24
     71e:	7f 91       	pop	r23
     720:	6f 91       	pop	r22
     722:	5f 91       	pop	r21
     724:	4f 91       	pop	r20
     726:	3f 91       	pop	r19
     728:	2f 91       	pop	r18
     72a:	1f 91       	pop	r17
     72c:	0f 91       	pop	r16
     72e:	ff 90       	pop	r15
     730:	ef 90       	pop	r14
     732:	df 90       	pop	r13
     734:	cf 90       	pop	r12
     736:	bf 90       	pop	r11
     738:	af 90       	pop	r10
     73a:	9f 90       	pop	r9
     73c:	8f 90       	pop	r8
     73e:	7f 90       	pop	r7
     740:	6f 90       	pop	r6
     742:	5f 90       	pop	r5
     744:	4f 90       	pop	r4
     746:	3f 90       	pop	r3
     748:	2f 90       	pop	r2
     74a:	1f 90       	pop	r1
     74c:	0f 90       	pop	r0
     74e:	0c be       	out	0x3c, r0	; 60
     750:	0f 90       	pop	r0
     752:	0b be       	out	0x3b, r0	; 59
     754:	0f 90       	pop	r0
     756:	0f be       	out	0x3f, r0	; 63
     758:	0f 90       	pop	r0
     75a:	08 95       	ret
     75c:	81 e0       	ldi	r24, 0x01	; 1
     75e:	08 95       	ret

00000760 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYield( void )
{
    portSAVE_CONTEXT();
     760:	0f 92       	push	r0
     762:	0f b6       	in	r0, 0x3f	; 63
     764:	f8 94       	cli
     766:	0f 92       	push	r0
     768:	0b b6       	in	r0, 0x3b	; 59
     76a:	0f 92       	push	r0
     76c:	0c b6       	in	r0, 0x3c	; 60
     76e:	0f 92       	push	r0
     770:	1f 92       	push	r1
     772:	11 24       	eor	r1, r1
     774:	2f 92       	push	r2
     776:	3f 92       	push	r3
     778:	4f 92       	push	r4
     77a:	5f 92       	push	r5
     77c:	6f 92       	push	r6
     77e:	7f 92       	push	r7
     780:	8f 92       	push	r8
     782:	9f 92       	push	r9
     784:	af 92       	push	r10
     786:	bf 92       	push	r11
     788:	cf 92       	push	r12
     78a:	df 92       	push	r13
     78c:	ef 92       	push	r14
     78e:	ff 92       	push	r15
     790:	0f 93       	push	r16
     792:	1f 93       	push	r17
     794:	2f 93       	push	r18
     796:	3f 93       	push	r19
     798:	4f 93       	push	r20
     79a:	5f 93       	push	r21
     79c:	6f 93       	push	r22
     79e:	7f 93       	push	r23
     7a0:	8f 93       	push	r24
     7a2:	9f 93       	push	r25
     7a4:	af 93       	push	r26
     7a6:	bf 93       	push	r27
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ef 93       	push	r30
     7ae:	ff 93       	push	r31
     7b0:	a0 91 ce 06 	lds	r26, 0x06CE	; 0x8006ce <pxCurrentTCB>
     7b4:	b0 91 cf 06 	lds	r27, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
     7b8:	0d b6       	in	r0, 0x3d	; 61
     7ba:	0d 92       	st	X+, r0
     7bc:	0e b6       	in	r0, 0x3e	; 62
     7be:	0d 92       	st	X+, r0
    vTaskSwitchContext();
     7c0:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vTaskSwitchContext>
    portRESTORE_CONTEXT();
     7c4:	a0 91 ce 06 	lds	r26, 0x06CE	; 0x8006ce <pxCurrentTCB>
     7c8:	b0 91 cf 06 	lds	r27, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
     7cc:	cd 91       	ld	r28, X+
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	dd 91       	ld	r29, X+
     7d2:	de bf       	out	0x3e, r29	; 62
     7d4:	ff 91       	pop	r31
     7d6:	ef 91       	pop	r30
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	bf 91       	pop	r27
     7de:	af 91       	pop	r26
     7e0:	9f 91       	pop	r25
     7e2:	8f 91       	pop	r24
     7e4:	7f 91       	pop	r23
     7e6:	6f 91       	pop	r22
     7e8:	5f 91       	pop	r21
     7ea:	4f 91       	pop	r20
     7ec:	3f 91       	pop	r19
     7ee:	2f 91       	pop	r18
     7f0:	1f 91       	pop	r17
     7f2:	0f 91       	pop	r16
     7f4:	ff 90       	pop	r15
     7f6:	ef 90       	pop	r14
     7f8:	df 90       	pop	r13
     7fa:	cf 90       	pop	r12
     7fc:	bf 90       	pop	r11
     7fe:	af 90       	pop	r10
     800:	9f 90       	pop	r9
     802:	8f 90       	pop	r8
     804:	7f 90       	pop	r7
     806:	6f 90       	pop	r6
     808:	5f 90       	pop	r5
     80a:	4f 90       	pop	r4
     80c:	3f 90       	pop	r3
     80e:	2f 90       	pop	r2
     810:	1f 90       	pop	r1
     812:	0f 90       	pop	r0
     814:	0c be       	out	0x3c, r0	; 60
     816:	0f 90       	pop	r0
     818:	0b be       	out	0x3b, r0	; 59
     81a:	0f 90       	pop	r0
     81c:	0f be       	out	0x3f, r0	; 63
     81e:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     820:	08 95       	ret

00000822 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     822:	0f 92       	push	r0
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	0f 92       	push	r0
     82a:	0b b6       	in	r0, 0x3b	; 59
     82c:	0f 92       	push	r0
     82e:	0c b6       	in	r0, 0x3c	; 60
     830:	0f 92       	push	r0
     832:	1f 92       	push	r1
     834:	11 24       	eor	r1, r1
     836:	2f 92       	push	r2
     838:	3f 92       	push	r3
     83a:	4f 92       	push	r4
     83c:	5f 92       	push	r5
     83e:	6f 92       	push	r6
     840:	7f 92       	push	r7
     842:	8f 92       	push	r8
     844:	9f 92       	push	r9
     846:	af 92       	push	r10
     848:	bf 92       	push	r11
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	2f 93       	push	r18
     858:	3f 93       	push	r19
     85a:	4f 93       	push	r20
     85c:	5f 93       	push	r21
     85e:	6f 93       	push	r22
     860:	7f 93       	push	r23
     862:	8f 93       	push	r24
     864:	9f 93       	push	r25
     866:	af 93       	push	r26
     868:	bf 93       	push	r27
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ef 93       	push	r30
     870:	ff 93       	push	r31
     872:	a0 91 ce 06 	lds	r26, 0x06CE	; 0x8006ce <pxCurrentTCB>
     876:	b0 91 cf 06 	lds	r27, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
     87a:	0d b6       	in	r0, 0x3d	; 61
     87c:	0d 92       	st	X+, r0
     87e:	0e b6       	in	r0, 0x3e	; 62
     880:	0d 92       	st	X+, r0

    sleep_reset();        //     reset the sleep_mode() faster than sleep_disable();
     882:	13 be       	out	0x33, r1	; 51

    if( xTaskIncrementTick() != pdFALSE )
     884:	c0 d7       	rcall	.+3968   	; 0x1806 <xTaskIncrementTick>
     886:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     888:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vTaskSwitchContext>
    }

    portRESTORE_CONTEXT();
     88c:	a0 91 ce 06 	lds	r26, 0x06CE	; 0x8006ce <pxCurrentTCB>
     890:	b0 91 cf 06 	lds	r27, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
     894:	cd 91       	ld	r28, X+
     896:	cd bf       	out	0x3d, r28	; 61
     898:	dd 91       	ld	r29, X+
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	ff 91       	pop	r31
     89e:	ef 91       	pop	r30
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	bf 91       	pop	r27
     8a6:	af 91       	pop	r26
     8a8:	9f 91       	pop	r25
     8aa:	8f 91       	pop	r24
     8ac:	7f 91       	pop	r23
     8ae:	6f 91       	pop	r22
     8b0:	5f 91       	pop	r21
     8b2:	4f 91       	pop	r20
     8b4:	3f 91       	pop	r19
     8b6:	2f 91       	pop	r18
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	ff 90       	pop	r15
     8be:	ef 90       	pop	r14
     8c0:	df 90       	pop	r13
     8c2:	cf 90       	pop	r12
     8c4:	bf 90       	pop	r11
     8c6:	af 90       	pop	r10
     8c8:	9f 90       	pop	r9
     8ca:	8f 90       	pop	r8
     8cc:	7f 90       	pop	r7
     8ce:	6f 90       	pop	r6
     8d0:	5f 90       	pop	r5
     8d2:	4f 90       	pop	r4
     8d4:	3f 90       	pop	r3
     8d6:	2f 90       	pop	r2
     8d8:	1f 90       	pop	r1
     8da:	0f 90       	pop	r0
     8dc:	0c be       	out	0x3c, r0	; 60
     8de:	0f 90       	pop	r0
     8e0:	0b be       	out	0x3b, r0	; 59
     8e2:	0f 90       	pop	r0
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     8e8:	08 95       	ret

000008ea <__vector_12>:
     */
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
//  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     8ea:	9b df       	rcall	.-202    	; 0x822 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     8ec:	18 95       	reti

000008ee <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
     8f2:	0f 92       	push	r0
     8f4:	fc 01       	movw	r30, r24
     8f6:	92 8d       	ldd	r25, Z+26	; 0x1a
     8f8:	0f 90       	pop	r0
     8fa:	0f be       	out	0x3f, r0	; 63
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	91 11       	cpse	r25, r1
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	08 95       	ret

00000904 <prvCopyDataToQueue>:
     904:	0f 93       	push	r16
     906:	1f 93       	push	r17
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	ec 01       	movw	r28, r24
     90e:	04 2f       	mov	r16, r20
     910:	1a 8d       	ldd	r17, Y+26	; 0x1a
     912:	4c 8d       	ldd	r20, Y+28	; 0x1c
     914:	41 11       	cpse	r20, r1
     916:	0c c0       	rjmp	.+24     	; 0x930 <prvCopyDataToQueue+0x2c>
     918:	88 81       	ld	r24, Y
     91a:	99 81       	ldd	r25, Y+1	; 0x01
     91c:	89 2b       	or	r24, r25
     91e:	09 f0       	breq	.+2      	; 0x922 <prvCopyDataToQueue+0x1e>
     920:	42 c0       	rjmp	.+132    	; 0x9a6 <prvCopyDataToQueue+0xa2>
     922:	8c 81       	ldd	r24, Y+4	; 0x04
     924:	9d 81       	ldd	r25, Y+5	; 0x05
     926:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <xTaskPriorityDisinherit>
     92a:	1d 82       	std	Y+5, r1	; 0x05
     92c:	1c 82       	std	Y+4, r1	; 0x04
     92e:	42 c0       	rjmp	.+132    	; 0x9b4 <prvCopyDataToQueue+0xb0>
     930:	01 11       	cpse	r16, r1
     932:	17 c0       	rjmp	.+46     	; 0x962 <prvCopyDataToQueue+0x5e>
     934:	50 e0       	ldi	r21, 0x00	; 0
     936:	8a 81       	ldd	r24, Y+2	; 0x02
     938:	9b 81       	ldd	r25, Y+3	; 0x03
     93a:	0e 94 50 22 	call	0x44a0	; 0x44a0 <memcpy>
     93e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     940:	8a 81       	ldd	r24, Y+2	; 0x02
     942:	9b 81       	ldd	r25, Y+3	; 0x03
     944:	82 0f       	add	r24, r18
     946:	91 1d       	adc	r25, r1
     948:	9b 83       	std	Y+3, r25	; 0x03
     94a:	8a 83       	std	Y+2, r24	; 0x02
     94c:	2c 81       	ldd	r18, Y+4	; 0x04
     94e:	3d 81       	ldd	r19, Y+5	; 0x05
     950:	82 17       	cp	r24, r18
     952:	93 07       	cpc	r25, r19
     954:	50 f1       	brcs	.+84     	; 0x9aa <prvCopyDataToQueue+0xa6>
     956:	88 81       	ld	r24, Y
     958:	99 81       	ldd	r25, Y+1	; 0x01
     95a:	9b 83       	std	Y+3, r25	; 0x03
     95c:	8a 83       	std	Y+2, r24	; 0x02
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	29 c0       	rjmp	.+82     	; 0x9b4 <prvCopyDataToQueue+0xb0>
     962:	50 e0       	ldi	r21, 0x00	; 0
     964:	8e 81       	ldd	r24, Y+6	; 0x06
     966:	9f 81       	ldd	r25, Y+7	; 0x07
     968:	0e 94 50 22 	call	0x44a0	; 0x44a0 <memcpy>
     96c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	91 95       	neg	r25
     972:	81 95       	neg	r24
     974:	91 09       	sbc	r25, r1
     976:	2e 81       	ldd	r18, Y+6	; 0x06
     978:	3f 81       	ldd	r19, Y+7	; 0x07
     97a:	28 0f       	add	r18, r24
     97c:	39 1f       	adc	r19, r25
     97e:	3f 83       	std	Y+7, r19	; 0x07
     980:	2e 83       	std	Y+6, r18	; 0x06
     982:	48 81       	ld	r20, Y
     984:	59 81       	ldd	r21, Y+1	; 0x01
     986:	24 17       	cp	r18, r20
     988:	35 07       	cpc	r19, r21
     98a:	30 f4       	brcc	.+12     	; 0x998 <prvCopyDataToQueue+0x94>
     98c:	2c 81       	ldd	r18, Y+4	; 0x04
     98e:	3d 81       	ldd	r19, Y+5	; 0x05
     990:	82 0f       	add	r24, r18
     992:	93 1f       	adc	r25, r19
     994:	9f 83       	std	Y+7, r25	; 0x07
     996:	8e 83       	std	Y+6, r24	; 0x06
     998:	02 30       	cpi	r16, 0x02	; 2
     99a:	49 f4       	brne	.+18     	; 0x9ae <prvCopyDataToQueue+0xaa>
     99c:	11 23       	and	r17, r17
     99e:	49 f0       	breq	.+18     	; 0x9b2 <prvCopyDataToQueue+0xae>
     9a0:	11 50       	subi	r17, 0x01	; 1
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	07 c0       	rjmp	.+14     	; 0x9b4 <prvCopyDataToQueue+0xb0>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	05 c0       	rjmp	.+10     	; 0x9b4 <prvCopyDataToQueue+0xb0>
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <prvCopyDataToQueue+0xb0>
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	01 c0       	rjmp	.+2      	; 0x9b4 <prvCopyDataToQueue+0xb0>
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	1f 5f       	subi	r17, 0xFF	; 255
     9b6:	1a 8f       	std	Y+26, r17	; 0x1a
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	1f 91       	pop	r17
     9be:	0f 91       	pop	r16
     9c0:	08 95       	ret

000009c2 <prvCopyDataFromQueue>:
     9c2:	fc 01       	movw	r30, r24
     9c4:	44 8d       	ldd	r20, Z+28	; 0x1c
     9c6:	44 23       	and	r20, r20
     9c8:	a9 f0       	breq	.+42     	; 0x9f4 <prvCopyDataFromQueue+0x32>
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	26 81       	ldd	r18, Z+6	; 0x06
     9ce:	37 81       	ldd	r19, Z+7	; 0x07
     9d0:	24 0f       	add	r18, r20
     9d2:	35 1f       	adc	r19, r21
     9d4:	37 83       	std	Z+7, r19	; 0x07
     9d6:	26 83       	std	Z+6, r18	; 0x06
     9d8:	84 81       	ldd	r24, Z+4	; 0x04
     9da:	95 81       	ldd	r25, Z+5	; 0x05
     9dc:	28 17       	cp	r18, r24
     9de:	39 07       	cpc	r19, r25
     9e0:	20 f0       	brcs	.+8      	; 0x9ea <prvCopyDataFromQueue+0x28>
     9e2:	80 81       	ld	r24, Z
     9e4:	91 81       	ldd	r25, Z+1	; 0x01
     9e6:	97 83       	std	Z+7, r25	; 0x07
     9e8:	86 83       	std	Z+6, r24	; 0x06
     9ea:	cb 01       	movw	r24, r22
     9ec:	66 81       	ldd	r22, Z+6	; 0x06
     9ee:	77 81       	ldd	r23, Z+7	; 0x07
     9f0:	0c 94 50 22 	jmp	0x44a0	; 0x44a0 <memcpy>
     9f4:	08 95       	ret

000009f6 <prvUnlockQueue>:
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	8c 01       	movw	r16, r24
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	0f 92       	push	r0
     a08:	fc 01       	movw	r30, r24
     a0a:	c6 8d       	ldd	r28, Z+30	; 0x1e
     a0c:	1c 16       	cp	r1, r28
     a0e:	ac f4       	brge	.+42     	; 0xa3a <prvUnlockQueue+0x44>
     a10:	81 89       	ldd	r24, Z+17	; 0x11
     a12:	81 11       	cpse	r24, r1
     a14:	06 c0       	rjmp	.+12     	; 0xa22 <prvUnlockQueue+0x2c>
     a16:	11 c0       	rjmp	.+34     	; 0xa3a <prvUnlockQueue+0x44>
     a18:	f8 01       	movw	r30, r16
     a1a:	81 89       	ldd	r24, Z+17	; 0x11
     a1c:	81 11       	cpse	r24, r1
     a1e:	05 c0       	rjmp	.+10     	; 0xa2a <prvUnlockQueue+0x34>
     a20:	0c c0       	rjmp	.+24     	; 0xa3a <prvUnlockQueue+0x44>
     a22:	78 01       	movw	r14, r16
     a24:	f1 e1       	ldi	r31, 0x11	; 17
     a26:	ef 0e       	add	r14, r31
     a28:	f1 1c       	adc	r15, r1
     a2a:	c7 01       	movw	r24, r14
     a2c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <xTaskRemoveFromEventList>
     a30:	81 11       	cpse	r24, r1
     a32:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <vTaskMissedYield>
     a36:	c1 50       	subi	r28, 0x01	; 1
     a38:	79 f7       	brne	.-34     	; 0xa18 <prvUnlockQueue+0x22>
     a3a:	8f ef       	ldi	r24, 0xFF	; 255
     a3c:	f8 01       	movw	r30, r16
     a3e:	86 8f       	std	Z+30, r24	; 0x1e
     a40:	0f 90       	pop	r0
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	0f 92       	push	r0
     a4a:	c5 8d       	ldd	r28, Z+29	; 0x1d
     a4c:	1c 16       	cp	r1, r28
     a4e:	ac f4       	brge	.+42     	; 0xa7a <prvUnlockQueue+0x84>
     a50:	80 85       	ldd	r24, Z+8	; 0x08
     a52:	81 11       	cpse	r24, r1
     a54:	06 c0       	rjmp	.+12     	; 0xa62 <prvUnlockQueue+0x6c>
     a56:	11 c0       	rjmp	.+34     	; 0xa7a <prvUnlockQueue+0x84>
     a58:	f8 01       	movw	r30, r16
     a5a:	80 85       	ldd	r24, Z+8	; 0x08
     a5c:	81 11       	cpse	r24, r1
     a5e:	05 c0       	rjmp	.+10     	; 0xa6a <prvUnlockQueue+0x74>
     a60:	0c c0       	rjmp	.+24     	; 0xa7a <prvUnlockQueue+0x84>
     a62:	78 01       	movw	r14, r16
     a64:	f8 e0       	ldi	r31, 0x08	; 8
     a66:	ef 0e       	add	r14, r31
     a68:	f1 1c       	adc	r15, r1
     a6a:	c7 01       	movw	r24, r14
     a6c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <xTaskRemoveFromEventList>
     a70:	81 11       	cpse	r24, r1
     a72:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <vTaskMissedYield>
     a76:	c1 50       	subi	r28, 0x01	; 1
     a78:	79 f7       	brne	.-34     	; 0xa58 <prvUnlockQueue+0x62>
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	f8 01       	movw	r30, r16
     a7e:	85 8f       	std	Z+29, r24	; 0x1d
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cf 91       	pop	r28
     a86:	1f 91       	pop	r17
     a88:	0f 91       	pop	r16
     a8a:	ff 90       	pop	r15
     a8c:	ef 90       	pop	r14
     a8e:	08 95       	ret

00000a90 <xQueueGenericReset>:
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	ec 01       	movw	r28, r24
     a96:	0f b6       	in	r0, 0x3f	; 63
     a98:	f8 94       	cli
     a9a:	0f 92       	push	r0
     a9c:	e8 81       	ld	r30, Y
     a9e:	f9 81       	ldd	r31, Y+1	; 0x01
     aa0:	8b 8d       	ldd	r24, Y+27	; 0x1b
     aa2:	2c 8d       	ldd	r18, Y+28	; 0x1c
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	82 9f       	mul	r24, r18
     aaa:	a0 01       	movw	r20, r0
     aac:	83 9f       	mul	r24, r19
     aae:	50 0d       	add	r21, r0
     ab0:	92 9f       	mul	r25, r18
     ab2:	50 0d       	add	r21, r0
     ab4:	11 24       	eor	r1, r1
     ab6:	4e 0f       	add	r20, r30
     ab8:	5f 1f       	adc	r21, r31
     aba:	5d 83       	std	Y+5, r21	; 0x05
     abc:	4c 83       	std	Y+4, r20	; 0x04
     abe:	1a 8e       	std	Y+26, r1	; 0x1a
     ac0:	fb 83       	std	Y+3, r31	; 0x03
     ac2:	ea 83       	std	Y+2, r30	; 0x02
     ac4:	01 97       	sbiw	r24, 0x01	; 1
     ac6:	82 9f       	mul	r24, r18
     ac8:	a0 01       	movw	r20, r0
     aca:	83 9f       	mul	r24, r19
     acc:	50 0d       	add	r21, r0
     ace:	92 9f       	mul	r25, r18
     ad0:	50 0d       	add	r21, r0
     ad2:	11 24       	eor	r1, r1
     ad4:	cf 01       	movw	r24, r30
     ad6:	84 0f       	add	r24, r20
     ad8:	95 1f       	adc	r25, r21
     ada:	9f 83       	std	Y+7, r25	; 0x07
     adc:	8e 83       	std	Y+6, r24	; 0x06
     ade:	8f ef       	ldi	r24, 0xFF	; 255
     ae0:	8d 8f       	std	Y+29, r24	; 0x1d
     ae2:	8e 8f       	std	Y+30, r24	; 0x1e
     ae4:	61 11       	cpse	r22, r1
     ae6:	0b c0       	rjmp	.+22     	; 0xafe <xQueueGenericReset+0x6e>
     ae8:	88 85       	ldd	r24, Y+8	; 0x08
     aea:	88 23       	and	r24, r24
     aec:	71 f0       	breq	.+28     	; 0xb0a <xQueueGenericReset+0x7a>
     aee:	ce 01       	movw	r24, r28
     af0:	08 96       	adiw	r24, 0x08	; 8
     af2:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <xTaskRemoveFromEventList>
     af6:	88 23       	and	r24, r24
     af8:	41 f0       	breq	.+16     	; 0xb0a <xQueueGenericReset+0x7a>
     afa:	32 de       	rcall	.-924    	; 0x760 <vPortYield>
     afc:	06 c0       	rjmp	.+12     	; 0xb0a <xQueueGenericReset+0x7a>
     afe:	ce 01       	movw	r24, r28
     b00:	08 96       	adiw	r24, 0x08	; 8
     b02:	f5 dc       	rcall	.-1558   	; 0x4ee <vListInitialise>
     b04:	ce 01       	movw	r24, r28
     b06:	41 96       	adiw	r24, 0x11	; 17
     b08:	f2 dc       	rcall	.-1564   	; 0x4ee <vListInitialise>
     b0a:	0f 90       	pop	r0
     b0c:	0f be       	out	0x3f, r0	; 63
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	08 95       	ret

00000b16 <xQueueGenericCreate>:
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	08 2f       	mov	r16, r24
     b22:	16 2f       	mov	r17, r22
     b24:	f4 2e       	mov	r15, r20
     b26:	66 23       	and	r22, r22
     b28:	b9 f0       	breq	.+46     	; 0xb58 <xQueueGenericCreate+0x42>
     b2a:	86 9f       	mul	r24, r22
     b2c:	c0 01       	movw	r24, r0
     b2e:	11 24       	eor	r1, r1
     b30:	81 96       	adiw	r24, 0x21	; 33
     b32:	bb dc       	rcall	.-1674   	; 0x4aa <pvPortMalloc>
     b34:	ec 01       	movw	r28, r24
     b36:	00 97       	sbiw	r24, 0x00	; 0
     b38:	41 f4       	brne	.+16     	; 0xb4a <xQueueGenericCreate+0x34>
     b3a:	14 c0       	rjmp	.+40     	; 0xb64 <xQueueGenericCreate+0x4e>
     b3c:	0b 8f       	std	Y+27, r16	; 0x1b
     b3e:	1c 8f       	std	Y+28, r17	; 0x1c
     b40:	61 e0       	ldi	r22, 0x01	; 1
     b42:	ce 01       	movw	r24, r28
     b44:	a5 df       	rcall	.-182    	; 0xa90 <xQueueGenericReset>
     b46:	f8 a2       	std	Y+32, r15	; 0x20
     b48:	0d c0       	rjmp	.+26     	; 0xb64 <xQueueGenericCreate+0x4e>
     b4a:	81 96       	adiw	r24, 0x21	; 33
     b4c:	99 83       	std	Y+1, r25	; 0x01
     b4e:	88 83       	st	Y, r24
     b50:	f5 cf       	rjmp	.-22     	; 0xb3c <xQueueGenericCreate+0x26>
     b52:	d9 83       	std	Y+1, r29	; 0x01
     b54:	c8 83       	st	Y, r28
     b56:	f2 cf       	rjmp	.-28     	; 0xb3c <xQueueGenericCreate+0x26>
     b58:	81 e2       	ldi	r24, 0x21	; 33
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	a6 dc       	rcall	.-1716   	; 0x4aa <pvPortMalloc>
     b5e:	ec 01       	movw	r28, r24
     b60:	89 2b       	or	r24, r25
     b62:	b9 f7       	brne	.-18     	; 0xb52 <xQueueGenericCreate+0x3c>
     b64:	ce 01       	movw	r24, r28
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	08 95       	ret

00000b72 <xQueueGenericSend>:
     b72:	9f 92       	push	r9
     b74:	af 92       	push	r10
     b76:	bf 92       	push	r11
     b78:	cf 92       	push	r12
     b7a:	df 92       	push	r13
     b7c:	ef 92       	push	r14
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
     b88:	00 d0       	rcall	.+0      	; 0xb8a <xQueueGenericSend+0x18>
     b8a:	1f 92       	push	r1
     b8c:	1f 92       	push	r1
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	8c 01       	movw	r16, r24
     b94:	6b 01       	movw	r12, r22
     b96:	5d 83       	std	Y+5, r21	; 0x05
     b98:	4c 83       	std	Y+4, r20	; 0x04
     b9a:	a2 2e       	mov	r10, r18
     b9c:	b1 2c       	mov	r11, r1
     b9e:	99 24       	eor	r9, r9
     ba0:	93 94       	inc	r9
     ba2:	7c 01       	movw	r14, r24
     ba4:	88 e0       	ldi	r24, 0x08	; 8
     ba6:	e8 0e       	add	r14, r24
     ba8:	f1 1c       	adc	r15, r1
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	f8 94       	cli
     bae:	0f 92       	push	r0
     bb0:	f8 01       	movw	r30, r16
     bb2:	92 8d       	ldd	r25, Z+26	; 0x1a
     bb4:	83 8d       	ldd	r24, Z+27	; 0x1b
     bb6:	98 17       	cp	r25, r24
     bb8:	18 f0       	brcs	.+6      	; 0xbc0 <xQueueGenericSend+0x4e>
     bba:	f2 e0       	ldi	r31, 0x02	; 2
     bbc:	af 12       	cpse	r10, r31
     bbe:	16 c0       	rjmp	.+44     	; 0xbec <xQueueGenericSend+0x7a>
     bc0:	4a 2d       	mov	r20, r10
     bc2:	b6 01       	movw	r22, r12
     bc4:	c8 01       	movw	r24, r16
     bc6:	9e de       	rcall	.-708    	; 0x904 <prvCopyDataToQueue>
     bc8:	f8 01       	movw	r30, r16
     bca:	91 89       	ldd	r25, Z+17	; 0x11
     bcc:	99 23       	and	r25, r25
     bce:	41 f0       	breq	.+16     	; 0xbe0 <xQueueGenericSend+0x6e>
     bd0:	c8 01       	movw	r24, r16
     bd2:	41 96       	adiw	r24, 0x11	; 17
     bd4:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <xTaskRemoveFromEventList>
     bd8:	88 23       	and	r24, r24
     bda:	21 f0       	breq	.+8      	; 0xbe4 <xQueueGenericSend+0x72>
     bdc:	c1 dd       	rcall	.-1150   	; 0x760 <vPortYield>
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <xQueueGenericSend+0x72>
     be0:	81 11       	cpse	r24, r1
     be2:	be dd       	rcall	.-1156   	; 0x760 <vPortYield>
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	47 c0       	rjmp	.+142    	; 0xc7a <xQueueGenericSend+0x108>
     bec:	8c 81       	ldd	r24, Y+4	; 0x04
     bee:	9d 81       	ldd	r25, Y+5	; 0x05
     bf0:	89 2b       	or	r24, r25
     bf2:	21 f4       	brne	.+8      	; 0xbfc <xQueueGenericSend+0x8a>
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	3f c0       	rjmp	.+126    	; 0xc7a <xQueueGenericSend+0x108>
     bfc:	b1 10       	cpse	r11, r1
     bfe:	05 c0       	rjmp	.+10     	; 0xc0a <xQueueGenericSend+0x98>
     c00:	ce 01       	movw	r24, r28
     c02:	01 96       	adiw	r24, 0x01	; 1
     c04:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <vTaskInternalSetTimeOutState>
     c08:	b9 2c       	mov	r11, r9
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	eb d5       	rcall	.+3030   	; 0x17e6 <vTaskSuspendAll>
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	0f 92       	push	r0
     c16:	f8 01       	movw	r30, r16
     c18:	85 8d       	ldd	r24, Z+29	; 0x1d
     c1a:	8f 3f       	cpi	r24, 0xFF	; 255
     c1c:	09 f4       	brne	.+2      	; 0xc20 <xQueueGenericSend+0xae>
     c1e:	15 8e       	std	Z+29, r1	; 0x1d
     c20:	f8 01       	movw	r30, r16
     c22:	86 8d       	ldd	r24, Z+30	; 0x1e
     c24:	8f 3f       	cpi	r24, 0xFF	; 255
     c26:	09 f4       	brne	.+2      	; 0xc2a <xQueueGenericSend+0xb8>
     c28:	16 8e       	std	Z+30, r1	; 0x1e
     c2a:	0f 90       	pop	r0
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	be 01       	movw	r22, r28
     c30:	6c 5f       	subi	r22, 0xFC	; 252
     c32:	7f 4f       	sbci	r23, 0xFF	; 255
     c34:	ce 01       	movw	r24, r28
     c36:	01 96       	adiw	r24, 0x01	; 1
     c38:	0e 94 55 0e 	call	0x1caa	; 0x1caa <xTaskCheckForTimeOut>
     c3c:	81 11       	cpse	r24, r1
     c3e:	19 c0       	rjmp	.+50     	; 0xc72 <xQueueGenericSend+0x100>
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	f8 94       	cli
     c44:	0f 92       	push	r0
     c46:	f8 01       	movw	r30, r16
     c48:	92 8d       	ldd	r25, Z+26	; 0x1a
     c4a:	83 8d       	ldd	r24, Z+27	; 0x1b
     c4c:	0f 90       	pop	r0
     c4e:	0f be       	out	0x3f, r0	; 63
     c50:	98 13       	cpse	r25, r24
     c52:	0b c0       	rjmp	.+22     	; 0xc6a <xQueueGenericSend+0xf8>
     c54:	6c 81       	ldd	r22, Y+4	; 0x04
     c56:	7d 81       	ldd	r23, Y+5	; 0x05
     c58:	c7 01       	movw	r24, r14
     c5a:	ab d7       	rcall	.+3926   	; 0x1bb2 <vTaskPlaceOnEventList>
     c5c:	c8 01       	movw	r24, r16
     c5e:	cb de       	rcall	.-618    	; 0x9f6 <prvUnlockQueue>
     c60:	8c d6       	rcall	.+3352   	; 0x197a <xTaskResumeAll>
     c62:	81 11       	cpse	r24, r1
     c64:	a2 cf       	rjmp	.-188    	; 0xbaa <xQueueGenericSend+0x38>
     c66:	7c dd       	rcall	.-1288   	; 0x760 <vPortYield>
     c68:	a0 cf       	rjmp	.-192    	; 0xbaa <xQueueGenericSend+0x38>
     c6a:	c8 01       	movw	r24, r16
     c6c:	c4 de       	rcall	.-632    	; 0x9f6 <prvUnlockQueue>
     c6e:	85 d6       	rcall	.+3338   	; 0x197a <xTaskResumeAll>
     c70:	9c cf       	rjmp	.-200    	; 0xbaa <xQueueGenericSend+0x38>
     c72:	c8 01       	movw	r24, r16
     c74:	c0 de       	rcall	.-640    	; 0x9f6 <prvUnlockQueue>
     c76:	81 d6       	rcall	.+3330   	; 0x197a <xTaskResumeAll>
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	bf 90       	pop	r11
     c96:	af 90       	pop	r10
     c98:	9f 90       	pop	r9
     c9a:	08 95       	ret

00000c9c <xQueueCreateMutex>:
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	48 2f       	mov	r20, r24
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	37 df       	rcall	.-402    	; 0xb16 <xQueueGenericCreate>
     ca8:	ec 01       	movw	r28, r24
     caa:	00 97       	sbiw	r24, 0x00	; 0
     cac:	59 f0       	breq	.+22     	; 0xcc4 <xQueueCreateMutex+0x28>
     cae:	1d 82       	std	Y+5, r1	; 0x05
     cb0:	1c 82       	std	Y+4, r1	; 0x04
     cb2:	19 82       	std	Y+1, r1	; 0x01
     cb4:	18 82       	st	Y, r1
     cb6:	1e 82       	std	Y+6, r1	; 0x06
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	50 e0       	ldi	r21, 0x00	; 0
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	57 df       	rcall	.-338    	; 0xb72 <xQueueGenericSend>
     cc4:	ce 01       	movw	r24, r28
     cc6:	df 91       	pop	r29
     cc8:	cf 91       	pop	r28
     cca:	08 95       	ret

00000ccc <xQueueGenericSendFromISR>:
     ccc:	ef 92       	push	r14
     cce:	ff 92       	push	r15
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	8a 01       	movw	r16, r20
     cda:	fc 01       	movw	r30, r24
     cdc:	52 8d       	ldd	r21, Z+26	; 0x1a
     cde:	33 8d       	ldd	r19, Z+27	; 0x1b
     ce0:	53 17       	cp	r21, r19
     ce2:	10 f0       	brcs	.+4      	; 0xce8 <xQueueGenericSendFromISR+0x1c>
     ce4:	22 30       	cpi	r18, 0x02	; 2
     ce6:	e1 f4       	brne	.+56     	; 0xd20 <xQueueGenericSendFromISR+0x54>
     ce8:	42 2f       	mov	r20, r18
     cea:	78 01       	movw	r14, r16
     cec:	ec 01       	movw	r28, r24
     cee:	1e 8d       	ldd	r17, Y+30	; 0x1e
     cf0:	09 de       	rcall	.-1006   	; 0x904 <prvCopyDataToQueue>
     cf2:	1f 3f       	cpi	r17, 0xFF	; 255
     cf4:	79 f4       	brne	.+30     	; 0xd14 <xQueueGenericSendFromISR+0x48>
     cf6:	89 89       	ldd	r24, Y+17	; 0x11
     cf8:	88 23       	and	r24, r24
     cfa:	a1 f0       	breq	.+40     	; 0xd24 <xQueueGenericSendFromISR+0x58>
     cfc:	ce 01       	movw	r24, r28
     cfe:	41 96       	adiw	r24, 0x11	; 17
     d00:	81 d7       	rcall	.+3842   	; 0x1c04 <xTaskRemoveFromEventList>
     d02:	88 23       	and	r24, r24
     d04:	89 f0       	breq	.+34     	; 0xd28 <xQueueGenericSendFromISR+0x5c>
     d06:	e1 14       	cp	r14, r1
     d08:	f1 04       	cpc	r15, r1
     d0a:	81 f0       	breq	.+32     	; 0xd2c <xQueueGenericSendFromISR+0x60>
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	f7 01       	movw	r30, r14
     d10:	80 83       	st	Z, r24
     d12:	0d c0       	rjmp	.+26     	; 0xd2e <xQueueGenericSendFromISR+0x62>
     d14:	ff 24       	eor	r15, r15
     d16:	f3 94       	inc	r15
     d18:	f1 0e       	add	r15, r17
     d1a:	fe 8e       	std	Y+30, r15	; 0x1e
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	07 c0       	rjmp	.+14     	; 0xd2e <xQueueGenericSendFromISR+0x62>
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <xQueueGenericSendFromISR+0x62>
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	03 c0       	rjmp	.+6      	; 0xd2e <xQueueGenericSendFromISR+0x62>
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <xQueueGenericSendFromISR+0x62>
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	df 91       	pop	r29
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	08 95       	ret

00000d3c <xQueueReceive>:
     d3c:	9f 92       	push	r9
     d3e:	af 92       	push	r10
     d40:	bf 92       	push	r11
     d42:	cf 92       	push	r12
     d44:	df 92       	push	r13
     d46:	ef 92       	push	r14
     d48:	ff 92       	push	r15
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	00 d0       	rcall	.+0      	; 0xd54 <xQueueReceive+0x18>
     d54:	1f 92       	push	r1
     d56:	1f 92       	push	r1
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	8c 01       	movw	r16, r24
     d5e:	5b 01       	movw	r10, r22
     d60:	5d 83       	std	Y+5, r21	; 0x05
     d62:	4c 83       	std	Y+4, r20	; 0x04
     d64:	e1 2c       	mov	r14, r1
     d66:	99 24       	eor	r9, r9
     d68:	93 94       	inc	r9
     d6a:	6c 01       	movw	r12, r24
     d6c:	81 e1       	ldi	r24, 0x11	; 17
     d6e:	c8 0e       	add	r12, r24
     d70:	d1 1c       	adc	r13, r1
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	0f 92       	push	r0
     d78:	f8 01       	movw	r30, r16
     d7a:	f2 8c       	ldd	r15, Z+26	; 0x1a
     d7c:	ff 20       	and	r15, r15
     d7e:	91 f0       	breq	.+36     	; 0xda4 <xQueueReceive+0x68>
     d80:	b5 01       	movw	r22, r10
     d82:	c8 01       	movw	r24, r16
     d84:	1e de       	rcall	.-964    	; 0x9c2 <prvCopyDataFromQueue>
     d86:	fa 94       	dec	r15
     d88:	f8 01       	movw	r30, r16
     d8a:	f2 8e       	std	Z+26, r15	; 0x1a
     d8c:	80 85       	ldd	r24, Z+8	; 0x08
     d8e:	88 23       	and	r24, r24
     d90:	29 f0       	breq	.+10     	; 0xd9c <xQueueReceive+0x60>
     d92:	c8 01       	movw	r24, r16
     d94:	08 96       	adiw	r24, 0x08	; 8
     d96:	36 d7       	rcall	.+3692   	; 0x1c04 <xTaskRemoveFromEventList>
     d98:	81 11       	cpse	r24, r1
     d9a:	e2 dc       	rcall	.-1596   	; 0x760 <vPortYield>
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	44 c0       	rjmp	.+136    	; 0xe2c <xQueueReceive+0xf0>
     da4:	8c 81       	ldd	r24, Y+4	; 0x04
     da6:	9d 81       	ldd	r25, Y+5	; 0x05
     da8:	89 2b       	or	r24, r25
     daa:	21 f4       	brne	.+8      	; 0xdb4 <xQueueReceive+0x78>
     dac:	0f 90       	pop	r0
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	3c c0       	rjmp	.+120    	; 0xe2c <xQueueReceive+0xf0>
     db4:	e1 10       	cpse	r14, r1
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <xQueueReceive+0x84>
     db8:	ce 01       	movw	r24, r28
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	6b d7       	rcall	.+3798   	; 0x1c94 <vTaskInternalSetTimeOutState>
     dbe:	e9 2c       	mov	r14, r9
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	10 d5       	rcall	.+2592   	; 0x17e6 <vTaskSuspendAll>
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	0f 92       	push	r0
     dcc:	f8 01       	movw	r30, r16
     dce:	85 8d       	ldd	r24, Z+29	; 0x1d
     dd0:	8f 3f       	cpi	r24, 0xFF	; 255
     dd2:	09 f4       	brne	.+2      	; 0xdd6 <xQueueReceive+0x9a>
     dd4:	15 8e       	std	Z+29, r1	; 0x1d
     dd6:	f8 01       	movw	r30, r16
     dd8:	86 8d       	ldd	r24, Z+30	; 0x1e
     dda:	8f 3f       	cpi	r24, 0xFF	; 255
     ddc:	09 f4       	brne	.+2      	; 0xde0 <xQueueReceive+0xa4>
     dde:	16 8e       	std	Z+30, r1	; 0x1e
     de0:	0f 90       	pop	r0
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	be 01       	movw	r22, r28
     de6:	6c 5f       	subi	r22, 0xFC	; 252
     de8:	7f 4f       	sbci	r23, 0xFF	; 255
     dea:	ce 01       	movw	r24, r28
     dec:	01 96       	adiw	r24, 0x01	; 1
     dee:	5d d7       	rcall	.+3770   	; 0x1caa <xTaskCheckForTimeOut>
     df0:	81 11       	cpse	r24, r1
     df2:	13 c0       	rjmp	.+38     	; 0xe1a <xQueueReceive+0xde>
     df4:	c8 01       	movw	r24, r16
     df6:	7b dd       	rcall	.-1290   	; 0x8ee <prvIsQueueEmpty>
     df8:	88 23       	and	r24, r24
     dfa:	59 f0       	breq	.+22     	; 0xe12 <xQueueReceive+0xd6>
     dfc:	6c 81       	ldd	r22, Y+4	; 0x04
     dfe:	7d 81       	ldd	r23, Y+5	; 0x05
     e00:	c6 01       	movw	r24, r12
     e02:	d7 d6       	rcall	.+3502   	; 0x1bb2 <vTaskPlaceOnEventList>
     e04:	c8 01       	movw	r24, r16
     e06:	f7 dd       	rcall	.-1042   	; 0x9f6 <prvUnlockQueue>
     e08:	b8 d5       	rcall	.+2928   	; 0x197a <xTaskResumeAll>
     e0a:	81 11       	cpse	r24, r1
     e0c:	b2 cf       	rjmp	.-156    	; 0xd72 <xQueueReceive+0x36>
     e0e:	a8 dc       	rcall	.-1712   	; 0x760 <vPortYield>
     e10:	b0 cf       	rjmp	.-160    	; 0xd72 <xQueueReceive+0x36>
     e12:	c8 01       	movw	r24, r16
     e14:	f0 dd       	rcall	.-1056   	; 0x9f6 <prvUnlockQueue>
     e16:	b1 d5       	rcall	.+2914   	; 0x197a <xTaskResumeAll>
     e18:	ac cf       	rjmp	.-168    	; 0xd72 <xQueueReceive+0x36>
     e1a:	c8 01       	movw	r24, r16
     e1c:	ec dd       	rcall	.-1064   	; 0x9f6 <prvUnlockQueue>
     e1e:	ad d5       	rcall	.+2906   	; 0x197a <xTaskResumeAll>
     e20:	c8 01       	movw	r24, r16
     e22:	65 dd       	rcall	.-1334   	; 0x8ee <prvIsQueueEmpty>
     e24:	88 23       	and	r24, r24
     e26:	09 f4       	brne	.+2      	; 0xe2a <xQueueReceive+0xee>
     e28:	a4 cf       	rjmp	.-184    	; 0xd72 <xQueueReceive+0x36>
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	0f 90       	pop	r0
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	bf 90       	pop	r11
     e48:	af 90       	pop	r10
     e4a:	9f 90       	pop	r9
     e4c:	08 95       	ret

00000e4e <xQueueSemaphoreTake>:
     e4e:	bf 92       	push	r11
     e50:	cf 92       	push	r12
     e52:	df 92       	push	r13
     e54:	ef 92       	push	r14
     e56:	ff 92       	push	r15
     e58:	0f 93       	push	r16
     e5a:	1f 93       	push	r17
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	00 d0       	rcall	.+0      	; 0xe62 <xQueueSemaphoreTake+0x14>
     e62:	1f 92       	push	r1
     e64:	1f 92       	push	r1
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	8c 01       	movw	r16, r24
     e6c:	7d 83       	std	Y+5, r23	; 0x05
     e6e:	6c 83       	std	Y+4, r22	; 0x04
     e70:	b1 2c       	mov	r11, r1
     e72:	d1 2c       	mov	r13, r1
     e74:	cc 24       	eor	r12, r12
     e76:	c3 94       	inc	r12
     e78:	7c 01       	movw	r14, r24
     e7a:	81 e1       	ldi	r24, 0x11	; 17
     e7c:	e8 0e       	add	r14, r24
     e7e:	f1 1c       	adc	r15, r1
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	0f 92       	push	r0
     e86:	d8 01       	movw	r26, r16
     e88:	5a 96       	adiw	r26, 0x1a	; 26
     e8a:	8c 91       	ld	r24, X
     e8c:	5a 97       	sbiw	r26, 0x1a	; 26
     e8e:	88 23       	and	r24, r24
     e90:	d9 f0       	breq	.+54     	; 0xec8 <xQueueSemaphoreTake+0x7a>
     e92:	81 50       	subi	r24, 0x01	; 1
     e94:	5a 96       	adiw	r26, 0x1a	; 26
     e96:	8c 93       	st	X, r24
     e98:	5a 97       	sbiw	r26, 0x1a	; 26
     e9a:	8d 91       	ld	r24, X+
     e9c:	9c 91       	ld	r25, X
     e9e:	89 2b       	or	r24, r25
     ea0:	29 f4       	brne	.+10     	; 0xeac <xQueueSemaphoreTake+0x5e>
     ea2:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <pvTaskIncrementMutexHeldCount>
     ea6:	f8 01       	movw	r30, r16
     ea8:	95 83       	std	Z+5, r25	; 0x05
     eaa:	84 83       	std	Z+4, r24	; 0x04
     eac:	d8 01       	movw	r26, r16
     eae:	18 96       	adiw	r26, 0x08	; 8
     eb0:	8c 91       	ld	r24, X
     eb2:	88 23       	and	r24, r24
     eb4:	29 f0       	breq	.+10     	; 0xec0 <xQueueSemaphoreTake+0x72>
     eb6:	c8 01       	movw	r24, r16
     eb8:	08 96       	adiw	r24, 0x08	; 8
     eba:	a4 d6       	rcall	.+3400   	; 0x1c04 <xTaskRemoveFromEventList>
     ebc:	81 11       	cpse	r24, r1
     ebe:	50 dc       	rcall	.-1888   	; 0x760 <vPortYield>
     ec0:	0f 90       	pop	r0
     ec2:	0f be       	out	0x3f, r0	; 63
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	70 c0       	rjmp	.+224    	; 0xfa8 <xQueueSemaphoreTake+0x15a>
     ec8:	8c 81       	ldd	r24, Y+4	; 0x04
     eca:	9d 81       	ldd	r25, Y+5	; 0x05
     ecc:	89 2b       	or	r24, r25
     ece:	21 f4       	brne	.+8      	; 0xed8 <xQueueSemaphoreTake+0x8a>
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	68 c0       	rjmp	.+208    	; 0xfa8 <xQueueSemaphoreTake+0x15a>
     ed8:	d1 10       	cpse	r13, r1
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <xQueueSemaphoreTake+0x96>
     edc:	ce 01       	movw	r24, r28
     ede:	01 96       	adiw	r24, 0x01	; 1
     ee0:	d9 d6       	rcall	.+3506   	; 0x1c94 <vTaskInternalSetTimeOutState>
     ee2:	dc 2c       	mov	r13, r12
     ee4:	0f 90       	pop	r0
     ee6:	0f be       	out	0x3f, r0	; 63
     ee8:	7e d4       	rcall	.+2300   	; 0x17e6 <vTaskSuspendAll>
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	0f 92       	push	r0
     ef0:	f8 01       	movw	r30, r16
     ef2:	85 8d       	ldd	r24, Z+29	; 0x1d
     ef4:	8f 3f       	cpi	r24, 0xFF	; 255
     ef6:	09 f4       	brne	.+2      	; 0xefa <xQueueSemaphoreTake+0xac>
     ef8:	15 8e       	std	Z+29, r1	; 0x1d
     efa:	d8 01       	movw	r26, r16
     efc:	5e 96       	adiw	r26, 0x1e	; 30
     efe:	8c 91       	ld	r24, X
     f00:	5e 97       	sbiw	r26, 0x1e	; 30
     f02:	8f 3f       	cpi	r24, 0xFF	; 255
     f04:	11 f4       	brne	.+4      	; 0xf0a <xQueueSemaphoreTake+0xbc>
     f06:	5e 96       	adiw	r26, 0x1e	; 30
     f08:	1c 92       	st	X, r1
     f0a:	0f 90       	pop	r0
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	be 01       	movw	r22, r28
     f10:	6c 5f       	subi	r22, 0xFC	; 252
     f12:	7f 4f       	sbci	r23, 0xFF	; 255
     f14:	ce 01       	movw	r24, r28
     f16:	01 96       	adiw	r24, 0x01	; 1
     f18:	c8 d6       	rcall	.+3472   	; 0x1caa <xTaskCheckForTimeOut>
     f1a:	81 11       	cpse	r24, r1
     f1c:	21 c0       	rjmp	.+66     	; 0xf60 <xQueueSemaphoreTake+0x112>
     f1e:	c8 01       	movw	r24, r16
     f20:	e6 dc       	rcall	.-1588   	; 0x8ee <prvIsQueueEmpty>
     f22:	88 23       	and	r24, r24
     f24:	c9 f0       	breq	.+50     	; 0xf58 <xQueueSemaphoreTake+0x10a>
     f26:	f8 01       	movw	r30, r16
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	89 2b       	or	r24, r25
     f2e:	49 f4       	brne	.+18     	; 0xf42 <xQueueSemaphoreTake+0xf4>
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	0f 92       	push	r0
     f36:	84 81       	ldd	r24, Z+4	; 0x04
     f38:	95 81       	ldd	r25, Z+5	; 0x05
     f3a:	03 d7       	rcall	.+3590   	; 0x1d42 <xTaskPriorityInherit>
     f3c:	b8 2e       	mov	r11, r24
     f3e:	0f 90       	pop	r0
     f40:	0f be       	out	0x3f, r0	; 63
     f42:	6c 81       	ldd	r22, Y+4	; 0x04
     f44:	7d 81       	ldd	r23, Y+5	; 0x05
     f46:	c7 01       	movw	r24, r14
     f48:	34 d6       	rcall	.+3176   	; 0x1bb2 <vTaskPlaceOnEventList>
     f4a:	c8 01       	movw	r24, r16
     f4c:	54 dd       	rcall	.-1368   	; 0x9f6 <prvUnlockQueue>
     f4e:	15 d5       	rcall	.+2602   	; 0x197a <xTaskResumeAll>
     f50:	81 11       	cpse	r24, r1
     f52:	96 cf       	rjmp	.-212    	; 0xe80 <xQueueSemaphoreTake+0x32>
     f54:	05 dc       	rcall	.-2038   	; 0x760 <vPortYield>
     f56:	94 cf       	rjmp	.-216    	; 0xe80 <xQueueSemaphoreTake+0x32>
     f58:	c8 01       	movw	r24, r16
     f5a:	4d dd       	rcall	.-1382   	; 0x9f6 <prvUnlockQueue>
     f5c:	0e d5       	rcall	.+2588   	; 0x197a <xTaskResumeAll>
     f5e:	90 cf       	rjmp	.-224    	; 0xe80 <xQueueSemaphoreTake+0x32>
     f60:	c8 01       	movw	r24, r16
     f62:	49 dd       	rcall	.-1390   	; 0x9f6 <prvUnlockQueue>
     f64:	0a d5       	rcall	.+2580   	; 0x197a <xTaskResumeAll>
     f66:	c8 01       	movw	r24, r16
     f68:	c2 dc       	rcall	.-1660   	; 0x8ee <prvIsQueueEmpty>
     f6a:	88 23       	and	r24, r24
     f6c:	09 f4       	brne	.+2      	; 0xf70 <xQueueSemaphoreTake+0x122>
     f6e:	88 cf       	rjmp	.-240    	; 0xe80 <xQueueSemaphoreTake+0x32>
     f70:	bb 20       	and	r11, r11
     f72:	c9 f0       	breq	.+50     	; 0xfa6 <xQueueSemaphoreTake+0x158>
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	0f 92       	push	r0
     f7a:	f8 01       	movw	r30, r16
     f7c:	81 89       	ldd	r24, Z+17	; 0x11
     f7e:	88 23       	and	r24, r24
     f80:	39 f0       	breq	.+14     	; 0xf90 <xQueueSemaphoreTake+0x142>
     f82:	06 88       	ldd	r0, Z+22	; 0x16
     f84:	f7 89       	ldd	r31, Z+23	; 0x17
     f86:	e0 2d       	mov	r30, r0
     f88:	80 81       	ld	r24, Z
     f8a:	64 e0       	ldi	r22, 0x04	; 4
     f8c:	68 1b       	sub	r22, r24
     f8e:	01 c0       	rjmp	.+2      	; 0xf92 <xQueueSemaphoreTake+0x144>
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	d8 01       	movw	r26, r16
     f94:	14 96       	adiw	r26, 0x04	; 4
     f96:	8d 91       	ld	r24, X+
     f98:	9c 91       	ld	r25, X
     f9a:	15 97       	sbiw	r26, 0x05	; 5
     f9c:	84 d7       	rcall	.+3848   	; 0x1ea6 <vTaskPriorityDisinheritAfterTimeout>
     f9e:	0f 90       	pop	r0
     fa0:	0f be       	out	0x3f, r0	; 63
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	01 c0       	rjmp	.+2      	; 0xfa8 <xQueueSemaphoreTake+0x15a>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	0f 90       	pop	r0
     faa:	0f 90       	pop	r0
     fac:	0f 90       	pop	r0
     fae:	0f 90       	pop	r0
     fb0:	0f 90       	pop	r0
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	0f 91       	pop	r16
     fba:	ff 90       	pop	r15
     fbc:	ef 90       	pop	r14
     fbe:	df 90       	pop	r13
     fc0:	cf 90       	pop	r12
     fc2:	bf 90       	pop	r11
     fc4:	08 95       	ret

00000fc6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
     fc6:	cf 93       	push	r28
     fc8:	df 93       	push	r29
     fca:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	0f 92       	push	r0
     fd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fd4:	8f 3f       	cpi	r24, 0xFF	; 255
     fd6:	09 f4       	brne	.+2      	; 0xfda <vQueueWaitForMessageRestricted+0x14>
     fd8:	1d 8e       	std	Y+29, r1	; 0x1d
     fda:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fdc:	8f 3f       	cpi	r24, 0xFF	; 255
     fde:	09 f4       	brne	.+2      	; 0xfe2 <vQueueWaitForMessageRestricted+0x1c>
     fe0:	1e 8e       	std	Y+30, r1	; 0x1e
     fe2:	0f 90       	pop	r0
     fe4:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     fe6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     fe8:	81 11       	cpse	r24, r1
     fea:	03 c0       	rjmp	.+6      	; 0xff2 <vQueueWaitForMessageRestricted+0x2c>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     fec:	ce 01       	movw	r24, r28
     fee:	41 96       	adiw	r24, 0x11	; 17
     ff0:	f1 d5       	rcall	.+3042   	; 0x1bd4 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
     ff2:	ce 01       	movw	r24, r28
     ff4:	00 dd       	rcall	.-1536   	; 0x9f6 <prvUnlockQueue>
    }
     ff6:	df 91       	pop	r29
     ff8:	cf 91       	pop	r28
     ffa:	08 95       	ret

00000ffc <prvBytesInBuffer>:
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
     ffc:	fc 01       	movw	r30, r24
     ffe:	44 81       	ldd	r20, Z+4	; 0x04
    1000:	55 81       	ldd	r21, Z+5	; 0x05
    1002:	22 81       	ldd	r18, Z+2	; 0x02
    1004:	33 81       	ldd	r19, Z+3	; 0x03
    1006:	24 0f       	add	r18, r20
    1008:	35 1f       	adc	r19, r21
    100a:	80 81       	ld	r24, Z
    100c:	91 81       	ldd	r25, Z+1	; 0x01
    100e:	b9 01       	movw	r22, r18
    1010:	68 1b       	sub	r22, r24
    1012:	79 0b       	sbc	r23, r25
    1014:	cb 01       	movw	r24, r22
    1016:	64 17       	cp	r22, r20
    1018:	75 07       	cpc	r23, r21
    101a:	10 f0       	brcs	.+4      	; 0x1020 <prvBytesInBuffer+0x24>
    101c:	84 1b       	sub	r24, r20
    101e:	95 0b       	sbc	r25, r21
    1020:	08 95       	ret

00001022 <prvWriteBytesToBuffer>:
    1022:	af 92       	push	r10
    1024:	bf 92       	push	r11
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	6c 01       	movw	r12, r24
    1038:	5b 01       	movw	r10, r22
    103a:	7a 01       	movw	r14, r20
    103c:	fc 01       	movw	r30, r24
    103e:	c2 81       	ldd	r28, Z+2	; 0x02
    1040:	d3 81       	ldd	r29, Z+3	; 0x03
    1042:	04 81       	ldd	r16, Z+4	; 0x04
    1044:	15 81       	ldd	r17, Z+5	; 0x05
    1046:	0c 1b       	sub	r16, r28
    1048:	1d 0b       	sbc	r17, r29
    104a:	40 17       	cp	r20, r16
    104c:	51 07       	cpc	r21, r17
    104e:	08 f4       	brcc	.+2      	; 0x1052 <prvWriteBytesToBuffer+0x30>
    1050:	8a 01       	movw	r16, r20
    1052:	f6 01       	movw	r30, r12
    1054:	84 85       	ldd	r24, Z+12	; 0x0c
    1056:	95 85       	ldd	r25, Z+13	; 0x0d
    1058:	a8 01       	movw	r20, r16
    105a:	b5 01       	movw	r22, r10
    105c:	8c 0f       	add	r24, r28
    105e:	9d 1f       	adc	r25, r29
    1060:	0e 94 50 22 	call	0x44a0	; 0x44a0 <memcpy>
    1064:	0e 15       	cp	r16, r14
    1066:	1f 05       	cpc	r17, r15
    1068:	58 f4       	brcc	.+22     	; 0x1080 <prvWriteBytesToBuffer+0x5e>
    106a:	a7 01       	movw	r20, r14
    106c:	40 1b       	sub	r20, r16
    106e:	51 0b       	sbc	r21, r17
    1070:	b5 01       	movw	r22, r10
    1072:	60 0f       	add	r22, r16
    1074:	71 1f       	adc	r23, r17
    1076:	f6 01       	movw	r30, r12
    1078:	84 85       	ldd	r24, Z+12	; 0x0c
    107a:	95 85       	ldd	r25, Z+13	; 0x0d
    107c:	0e 94 50 22 	call	0x44a0	; 0x44a0 <memcpy>
    1080:	ce 01       	movw	r24, r28
    1082:	8e 0d       	add	r24, r14
    1084:	9f 1d       	adc	r25, r15
    1086:	f6 01       	movw	r30, r12
    1088:	24 81       	ldd	r18, Z+4	; 0x04
    108a:	35 81       	ldd	r19, Z+5	; 0x05
    108c:	82 17       	cp	r24, r18
    108e:	93 07       	cpc	r25, r19
    1090:	10 f0       	brcs	.+4      	; 0x1096 <prvWriteBytesToBuffer+0x74>
    1092:	82 1b       	sub	r24, r18
    1094:	93 0b       	sbc	r25, r19
    1096:	f6 01       	movw	r30, r12
    1098:	93 83       	std	Z+3, r25	; 0x03
    109a:	82 83       	std	Z+2, r24	; 0x02
    109c:	c7 01       	movw	r24, r14
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	bf 90       	pop	r11
    10b0:	af 90       	pop	r10
    10b2:	08 95       	ret

000010b4 <prvWriteMessageToBuffer>:
    10b4:	cf 92       	push	r12
    10b6:	df 92       	push	r13
    10b8:	ef 92       	push	r14
    10ba:	ff 92       	push	r15
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	1f 92       	push	r1
    10c6:	1f 92       	push	r1
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	5a 83       	std	Y+2, r21	; 0x02
    10ce:	49 83       	std	Y+1, r20	; 0x01
    10d0:	21 15       	cp	r18, r1
    10d2:	31 05       	cpc	r19, r1
    10d4:	c9 f0       	breq	.+50     	; 0x1108 <prvWriteMessageToBuffer+0x54>
    10d6:	6b 01       	movw	r12, r22
    10d8:	7c 01       	movw	r14, r24
    10da:	fc 01       	movw	r30, r24
    10dc:	86 85       	ldd	r24, Z+14	; 0x0e
    10de:	80 fd       	sbrc	r24, 0
    10e0:	08 c0       	rjmp	.+16     	; 0x10f2 <prvWriteMessageToBuffer+0x3e>
    10e2:	ca 01       	movw	r24, r20
    10e4:	24 17       	cp	r18, r20
    10e6:	35 07       	cpc	r19, r21
    10e8:	08 f4       	brcc	.+2      	; 0x10ec <prvWriteMessageToBuffer+0x38>
    10ea:	c9 01       	movw	r24, r18
    10ec:	9a 83       	std	Y+2, r25	; 0x02
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	11 c0       	rjmp	.+34     	; 0x1114 <prvWriteMessageToBuffer+0x60>
    10f2:	20 17       	cp	r18, r16
    10f4:	31 07       	cpc	r19, r17
    10f6:	58 f0       	brcs	.+22     	; 0x110e <prvWriteMessageToBuffer+0x5a>
    10f8:	42 e0       	ldi	r20, 0x02	; 2
    10fa:	50 e0       	ldi	r21, 0x00	; 0
    10fc:	be 01       	movw	r22, r28
    10fe:	6f 5f       	subi	r22, 0xFF	; 255
    1100:	7f 4f       	sbci	r23, 0xFF	; 255
    1102:	c7 01       	movw	r24, r14
    1104:	8e df       	rcall	.-228    	; 0x1022 <prvWriteBytesToBuffer>
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <prvWriteMessageToBuffer+0x60>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	08 c0       	rjmp	.+16     	; 0x111e <prvWriteMessageToBuffer+0x6a>
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	05 c0       	rjmp	.+10     	; 0x111e <prvWriteMessageToBuffer+0x6a>
    1114:	49 81       	ldd	r20, Y+1	; 0x01
    1116:	5a 81       	ldd	r21, Y+2	; 0x02
    1118:	b6 01       	movw	r22, r12
    111a:	c7 01       	movw	r24, r14
    111c:	82 df       	rcall	.-252    	; 0x1022 <prvWriteBytesToBuffer>
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	1f 91       	pop	r17
    1128:	0f 91       	pop	r16
    112a:	ff 90       	pop	r15
    112c:	ef 90       	pop	r14
    112e:	df 90       	pop	r13
    1130:	cf 90       	pop	r12
    1132:	08 95       	ret

00001134 <prvReadBytesFromBuffer>:
    1134:	af 92       	push	r10
    1136:	bf 92       	push	r11
    1138:	cf 92       	push	r12
    113a:	df 92       	push	r13
    113c:	ef 92       	push	r14
    113e:	ff 92       	push	r15
    1140:	0f 93       	push	r16
    1142:	1f 93       	push	r17
    1144:	cf 93       	push	r28
    1146:	df 93       	push	r29
    1148:	7c 01       	movw	r14, r24
    114a:	5b 01       	movw	r10, r22
    114c:	e9 01       	movw	r28, r18
    114e:	42 17       	cp	r20, r18
    1150:	53 07       	cpc	r21, r19
    1152:	08 f4       	brcc	.+2      	; 0x1156 <prvReadBytesFromBuffer+0x22>
    1154:	ea 01       	movw	r28, r20
    1156:	20 97       	sbiw	r28, 0x00	; 0
    1158:	79 f1       	breq	.+94     	; 0x11b8 <prvReadBytesFromBuffer+0x84>
    115a:	f7 01       	movw	r30, r14
    115c:	00 81       	ld	r16, Z
    115e:	11 81       	ldd	r17, Z+1	; 0x01
    1160:	c4 80       	ldd	r12, Z+4	; 0x04
    1162:	d5 80       	ldd	r13, Z+5	; 0x05
    1164:	c0 1a       	sub	r12, r16
    1166:	d1 0a       	sbc	r13, r17
    1168:	cc 15       	cp	r28, r12
    116a:	dd 05       	cpc	r29, r13
    116c:	08 f4       	brcc	.+2      	; 0x1170 <prvReadBytesFromBuffer+0x3c>
    116e:	6e 01       	movw	r12, r28
    1170:	f7 01       	movw	r30, r14
    1172:	64 85       	ldd	r22, Z+12	; 0x0c
    1174:	75 85       	ldd	r23, Z+13	; 0x0d
    1176:	60 0f       	add	r22, r16
    1178:	71 1f       	adc	r23, r17
    117a:	a6 01       	movw	r20, r12
    117c:	c5 01       	movw	r24, r10
    117e:	0e 94 50 22 	call	0x44a0	; 0x44a0 <memcpy>
    1182:	cc 16       	cp	r12, r28
    1184:	dd 06       	cpc	r13, r29
    1186:	58 f4       	brcc	.+22     	; 0x119e <prvReadBytesFromBuffer+0x6a>
    1188:	ae 01       	movw	r20, r28
    118a:	4c 19       	sub	r20, r12
    118c:	5d 09       	sbc	r21, r13
    118e:	f7 01       	movw	r30, r14
    1190:	64 85       	ldd	r22, Z+12	; 0x0c
    1192:	75 85       	ldd	r23, Z+13	; 0x0d
    1194:	c5 01       	movw	r24, r10
    1196:	8c 0d       	add	r24, r12
    1198:	9d 1d       	adc	r25, r13
    119a:	0e 94 50 22 	call	0x44a0	; 0x44a0 <memcpy>
    119e:	0c 0f       	add	r16, r28
    11a0:	1d 1f       	adc	r17, r29
    11a2:	f7 01       	movw	r30, r14
    11a4:	84 81       	ldd	r24, Z+4	; 0x04
    11a6:	95 81       	ldd	r25, Z+5	; 0x05
    11a8:	08 17       	cp	r16, r24
    11aa:	19 07       	cpc	r17, r25
    11ac:	10 f0       	brcs	.+4      	; 0x11b2 <prvReadBytesFromBuffer+0x7e>
    11ae:	08 1b       	sub	r16, r24
    11b0:	19 0b       	sbc	r17, r25
    11b2:	f7 01       	movw	r30, r14
    11b4:	11 83       	std	Z+1, r17	; 0x01
    11b6:	00 83       	st	Z, r16
    11b8:	ce 01       	movw	r24, r28
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	ff 90       	pop	r15
    11c4:	ef 90       	pop	r14
    11c6:	df 90       	pop	r13
    11c8:	cf 90       	pop	r12
    11ca:	bf 90       	pop	r11
    11cc:	af 90       	pop	r10
    11ce:	08 95       	ret

000011d0 <xStreamBufferGenericCreate>:
    11d0:	ef 92       	push	r14
    11d2:	ff 92       	push	r15
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	eb 01       	movw	r28, r22
    11dc:	11 e0       	ldi	r17, 0x01	; 1
    11de:	41 30       	cpi	r20, 0x01	; 1
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <xStreamBufferGenericCreate+0x14>
    11e2:	10 e0       	ldi	r17, 0x00	; 0
    11e4:	20 97       	sbiw	r28, 0x00	; 0
    11e6:	11 f4       	brne	.+4      	; 0x11ec <xStreamBufferGenericCreate+0x1c>
    11e8:	c1 e0       	ldi	r28, 0x01	; 1
    11ea:	d0 e0       	ldi	r29, 0x00	; 0
    11ec:	7c 01       	movw	r14, r24
    11ee:	2f ef       	ldi	r18, 0xFF	; 255
    11f0:	e2 1a       	sub	r14, r18
    11f2:	f2 0a       	sbc	r15, r18
    11f4:	41 96       	adiw	r24, 0x11	; 17
    11f6:	59 d9       	rcall	.-3406   	; 0x4aa <pvPortMalloc>
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	81 f0       	breq	.+32     	; 0x121c <xStreamBufferGenericCreate+0x4c>
    11fc:	20 e1       	ldi	r18, 0x10	; 16
    11fe:	fc 01       	movw	r30, r24
    1200:	11 92       	st	Z+, r1
    1202:	2a 95       	dec	r18
    1204:	e9 f7       	brne	.-6      	; 0x1200 <xStreamBufferGenericCreate+0x30>
    1206:	9c 01       	movw	r18, r24
    1208:	20 5f       	subi	r18, 0xF0	; 240
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	fc 01       	movw	r30, r24
    120e:	35 87       	std	Z+13, r19	; 0x0d
    1210:	24 87       	std	Z+12, r18	; 0x0c
    1212:	f5 82       	std	Z+5, r15	; 0x05
    1214:	e4 82       	std	Z+4, r14	; 0x04
    1216:	d7 83       	std	Z+7, r29	; 0x07
    1218:	c6 83       	std	Z+6, r28	; 0x06
    121a:	16 87       	std	Z+14, r17	; 0x0e
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	08 95       	ret

00001228 <xStreamBufferReset>:
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	fc 01       	movw	r30, r24
    122e:	27 85       	ldd	r18, Z+15	; 0x0f
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	0f 92       	push	r0
    1236:	80 85       	ldd	r24, Z+8	; 0x08
    1238:	91 85       	ldd	r25, Z+9	; 0x09
    123a:	89 2b       	or	r24, r25
    123c:	d1 f4       	brne	.+52     	; 0x1272 <xStreamBufferReset+0x4a>
    123e:	82 85       	ldd	r24, Z+10	; 0x0a
    1240:	93 85       	ldd	r25, Z+11	; 0x0b
    1242:	89 2b       	or	r24, r25
    1244:	c1 f4       	brne	.+48     	; 0x1276 <xStreamBufferReset+0x4e>
    1246:	86 85       	ldd	r24, Z+14	; 0x0e
    1248:	46 81       	ldd	r20, Z+6	; 0x06
    124a:	57 81       	ldd	r21, Z+7	; 0x07
    124c:	64 81       	ldd	r22, Z+4	; 0x04
    124e:	75 81       	ldd	r23, Z+5	; 0x05
    1250:	a4 85       	ldd	r26, Z+12	; 0x0c
    1252:	b5 85       	ldd	r27, Z+13	; 0x0d
    1254:	90 e1       	ldi	r25, 0x10	; 16
    1256:	ef 01       	movw	r28, r30
    1258:	19 92       	st	Y+, r1
    125a:	9a 95       	dec	r25
    125c:	e9 f7       	brne	.-6      	; 0x1258 <xStreamBufferReset+0x30>
    125e:	b5 87       	std	Z+13, r27	; 0x0d
    1260:	a4 87       	std	Z+12, r26	; 0x0c
    1262:	75 83       	std	Z+5, r23	; 0x05
    1264:	64 83       	std	Z+4, r22	; 0x04
    1266:	57 83       	std	Z+7, r21	; 0x07
    1268:	46 83       	std	Z+6, r20	; 0x06
    126a:	86 87       	std	Z+14, r24	; 0x0e
    126c:	27 87       	std	Z+15, r18	; 0x0f
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	03 c0       	rjmp	.+6      	; 0x1278 <xStreamBufferReset+0x50>
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	01 c0       	rjmp	.+2      	; 0x1278 <xStreamBufferReset+0x50>
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	0f 90       	pop	r0
    127a:	0f be       	out	0x3f, r0	; 63
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	08 95       	ret

00001282 <xStreamBufferSpacesAvailable>:
    1282:	fc 01       	movw	r30, r24
    1284:	24 81       	ldd	r18, Z+4	; 0x04
    1286:	35 81       	ldd	r19, Z+5	; 0x05
    1288:	80 81       	ld	r24, Z
    128a:	91 81       	ldd	r25, Z+1	; 0x01
    128c:	42 81       	ldd	r20, Z+2	; 0x02
    128e:	53 81       	ldd	r21, Z+3	; 0x03
    1290:	82 0f       	add	r24, r18
    1292:	93 1f       	adc	r25, r19
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	84 1b       	sub	r24, r20
    1298:	95 0b       	sbc	r25, r21
    129a:	82 17       	cp	r24, r18
    129c:	93 07       	cpc	r25, r19
    129e:	10 f0       	brcs	.+4      	; 0x12a4 <xStreamBufferSpacesAvailable+0x22>
    12a0:	82 1b       	sub	r24, r18
    12a2:	93 0b       	sbc	r25, r19
    12a4:	08 95       	ret

000012a6 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void *pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    12a6:	af 92       	push	r10
    12a8:	bf 92       	push	r11
    12aa:	cf 92       	push	r12
    12ac:	df 92       	push	r13
    12ae:	ef 92       	push	r14
    12b0:	ff 92       	push	r15
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	cf 93       	push	r28
    12b8:	df 93       	push	r29
    12ba:	ec 01       	movw	r28, r24
    12bc:	5b 01       	movw	r10, r22
    12be:	6a 01       	movw	r12, r20
    12c0:	79 01       	movw	r14, r18

    /* This send function is used to write to both message buffers and stream
    buffers.  If this is a message buffer then the space needed must be
    increased by the amount of bytes needed to store the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    12c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    12c4:	80 ff       	sbrs	r24, 0
    12c6:	04 c0       	rjmp	.+8      	; 0x12d0 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    12c8:	8a 01       	movw	r16, r20
    12ca:	0e 5f       	subi	r16, 0xFE	; 254
    12cc:	1f 4f       	sbci	r17, 0xFF	; 255
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
    12d0:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    12d2:	ce 01       	movw	r24, r28
    12d4:	d6 df       	rcall	.-84     	; 0x1282 <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    12d6:	9c 01       	movw	r18, r24
    12d8:	a6 01       	movw	r20, r12
    12da:	b5 01       	movw	r22, r10
    12dc:	ce 01       	movw	r24, r28
    12de:	ea de       	rcall	.-556    	; 0x10b4 <prvWriteMessageToBuffer>
    12e0:	6c 01       	movw	r12, r24

    if( xReturn > ( size_t ) 0 )
    12e2:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    12e4:	b1 f0       	breq	.+44     	; 0x1312 <xStreamBufferSendFromISR+0x6c>
    12e6:	ce 01       	movw	r24, r28
    12e8:	89 de       	rcall	.-750    	; 0xffc <prvBytesInBuffer>
    12ea:	2e 81       	ldd	r18, Y+6	; 0x06
    12ec:	3f 81       	ldd	r19, Y+7	; 0x07
    12ee:	82 17       	cp	r24, r18
    12f0:	93 07       	cpc	r25, r19
    12f2:	78 f0       	brcs	.+30     	; 0x1312 <xStreamBufferSendFromISR+0x6c>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    12f4:	88 85       	ldd	r24, Y+8	; 0x08
    12f6:	99 85       	ldd	r25, Y+9	; 0x09
    12f8:	89 2b       	or	r24, r25
    12fa:	59 f0       	breq	.+22     	; 0x1312 <xStreamBufferSendFromISR+0x6c>
    12fc:	88 85       	ldd	r24, Y+8	; 0x08
    12fe:	99 85       	ldd	r25, Y+9	; 0x09
    1300:	00 e0       	ldi	r16, 0x00	; 0
    1302:	10 e0       	ldi	r17, 0x00	; 0
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	40 e0       	ldi	r20, 0x00	; 0
    1308:	50 e0       	ldi	r21, 0x00	; 0
    130a:	ba 01       	movw	r22, r20
    130c:	2f d7       	rcall	.+3678   	; 0x216c <xTaskGenericNotifyFromISR>
    130e:	19 86       	std	Y+9, r1	; 0x09
    1310:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    1312:	c6 01       	movw	r24, r12
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	1f 91       	pop	r17
    131a:	0f 91       	pop	r16
    131c:	ff 90       	pop	r15
    131e:	ef 90       	pop	r14
    1320:	df 90       	pop	r13
    1322:	cf 90       	pop	r12
    1324:	bf 90       	pop	r11
    1326:	af 90       	pop	r10
    1328:	08 95       	ret

0000132a <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    132a:	6f 92       	push	r6
    132c:	7f 92       	push	r7
    132e:	8f 92       	push	r8
    1330:	9f 92       	push	r9
    1332:	af 92       	push	r10
    1334:	bf 92       	push	r11
    1336:	cf 92       	push	r12
    1338:	df 92       	push	r13
    133a:	ef 92       	push	r14
    133c:	ff 92       	push	r15
    133e:	0f 93       	push	r16
    1340:	1f 93       	push	r17
    1342:	cf 93       	push	r28
    1344:	df 93       	push	r29
    1346:	1f 92       	push	r1
    1348:	1f 92       	push	r1
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	6c 01       	movw	r12, r24
    1350:	3b 01       	movw	r6, r22
    1352:	4a 01       	movw	r8, r20
    1354:	79 01       	movw	r14, r18
    /* This receive function is used by both message buffers, which store
    discrete messages, and stream buffers, which store a continuous stream of
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1356:	fc 01       	movw	r30, r24
    1358:	86 85       	ldd	r24, Z+14	; 0x0e
    135a:	80 fd       	sbrc	r24, 0
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <xStreamBufferReceive+0x3a>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    135e:	a1 2c       	mov	r10, r1
    1360:	b1 2c       	mov	r11, r1
    1362:	04 c0       	rjmp	.+8      	; 0x136c <xStreamBufferReceive+0x42>
    bytes.  Discrete messages include an additional
    sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
    message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1364:	68 94       	set
    1366:	aa 24       	eor	r10, r10
    1368:	a1 f8       	bld	r10, 1
    136a:	b1 2c       	mov	r11, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    136c:	e1 14       	cp	r14, r1
    136e:	f1 04       	cpc	r15, r1
    1370:	29 f1       	breq	.+74     	; 0x13bc <xStreamBufferReceive+0x92>
    {
        /* Checking if there is data and clearing the notification state must be
        performed atomically. */
        taskENTER_CRITICAL();
    1372:	0f b6       	in	r0, 0x3f	; 63
    1374:	f8 94       	cli
    1376:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1378:	c6 01       	movw	r24, r12
    137a:	40 de       	rcall	.-896    	; 0xffc <prvBytesInBuffer>
    137c:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
            xBytesToStoreMessageLength holds the number of bytes used to hold
            the length of the next discrete message.  If this function was
            invoked by a stream buffer read then xBytesToStoreMessageLength will
            be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    137e:	a8 16       	cp	r10, r24
    1380:	b9 06       	cpc	r11, r25
    1382:	38 f0       	brcs	.+14     	; 0x1392 <xStreamBufferReceive+0x68>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1384:	80 e0       	ldi	r24, 0x00	; 0
    1386:	90 e0       	ldi	r25, 0x00	; 0

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1388:	81 d7       	rcall	.+3842   	; 0x228c <xTaskNotifyStateClear>
    138a:	c8 d4       	rcall	.+2448   	; 0x1d1c <xTaskGetCurrentTaskHandle>
    138c:	f6 01       	movw	r30, r12
    138e:	91 87       	std	Z+9, r25	; 0x09
    1390:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1392:	0f 90       	pop	r0
    1394:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1396:	a0 16       	cp	r10, r16
    1398:	b1 06       	cpc	r11, r17
    139a:	b0 f0       	brcs	.+44     	; 0x13c8 <xStreamBufferReceive+0x9e>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    139c:	00 e0       	ldi	r16, 0x00	; 0
    139e:	10 e0       	ldi	r17, 0x00	; 0
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	a9 01       	movw	r20, r18
    13a6:	60 e0       	ldi	r22, 0x00	; 0
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	cb 01       	movw	r24, r22
    13ac:	de d5       	rcall	.+3004   	; 0x1f6a <xTaskNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    13ae:	f6 01       	movw	r30, r12
    13b0:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13b2:	10 86       	std	Z+8, r1	; 0x08
    13b4:	c6 01       	movw	r24, r12
    13b6:	22 de       	rcall	.-956    	; 0xffc <prvBytesInBuffer>
    13b8:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    13ba:	03 c0       	rjmp	.+6      	; 0x13c2 <xStreamBufferReceive+0x98>
    13bc:	c6 01       	movw	r24, r12
    13be:	1e de       	rcall	.-964    	; 0xffc <prvBytesInBuffer>
    13c0:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
    holds the number of bytes used to store the message length) or a stream of
    bytes (where xBytesToStoreMessageLength is zero), the number of bytes
    available must be greater than xBytesToStoreMessageLength to be able to
    read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    13c2:	a0 16       	cp	r10, r16
    13c4:	b1 06       	cpc	r11, r17
    13c6:	b8 f5       	brcc	.+110    	; 0x1436 <xStreamBufferReceive+0x10c>
                                        size_t xBytesToStoreMessageLength )
{
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    13c8:	a1 14       	cp	r10, r1
    13ca:	b1 04       	cpc	r11, r1
    13cc:	c1 f0       	breq	.+48     	; 0x13fe <xStreamBufferReceive+0xd4>
    {
        /* A discrete message is being received.  First receive the length
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    13ce:	f6 01       	movw	r30, r12
    13d0:	e0 80       	ld	r14, Z
    13d2:	f1 80       	ldd	r15, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    13d4:	98 01       	movw	r18, r16
    13d6:	a5 01       	movw	r20, r10
    13d8:	be 01       	movw	r22, r28
    13da:	6f 5f       	subi	r22, 0xFF	; 255
    13dc:	7f 4f       	sbci	r23, 0xFF	; 255
    13de:	c6 01       	movw	r24, r12
    13e0:	a9 de       	rcall	.-686    	; 0x1134 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    13e2:	89 81       	ldd	r24, Y+1	; 0x01
    13e4:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
        read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    13e6:	0a 19       	sub	r16, r10
    13e8:	1b 09       	sbc	r17, r11

        /* Check there is enough space in the buffer provided by the
        user. */
        if( xNextMessageLength > xBufferLengthBytes )
    13ea:	88 16       	cp	r8, r24
    13ec:	99 06       	cpc	r9, r25
    13ee:	30 f4       	brcc	.+12     	; 0x13fc <xStreamBufferReceive+0xd2>
        {
            /* The user has provided insufficient space to read the message
            so return the buffer to its previous state (so the length of
            the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    13f0:	f6 01       	movw	r30, r12
    13f2:	f1 82       	std	Z+1, r15	; 0x01
    13f4:	e0 82       	st	Z, r14
            xNextMessageLength = 0;
    13f6:	81 2c       	mov	r8, r1
    13f8:	91 2c       	mov	r9, r1
        of the message.  A copy of the tail is stored so the buffer can be
        returned to its prior state if the length of the message is too
        large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    13fa:	01 c0       	rjmp	.+2      	; 0x13fe <xStreamBufferReceive+0xd4>
        message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    13fc:	4c 01       	movw	r8, r24
    13fe:	98 01       	movw	r18, r16
    1400:	a4 01       	movw	r20, r8
    1402:	b3 01       	movw	r22, r6
    1404:	c6 01       	movw	r24, r12
    1406:	96 de       	rcall	.-724    	; 0x1134 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1408:	7c 01       	movw	r14, r24
    140a:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    140c:	b1 f0       	breq	.+44     	; 0x143a <xStreamBufferReceive+0x110>
    140e:	eb d1       	rcall	.+982    	; 0x17e6 <vTaskSuspendAll>
    1410:	f6 01       	movw	r30, r12
    1412:	82 85       	ldd	r24, Z+10	; 0x0a
    1414:	93 85       	ldd	r25, Z+11	; 0x0b
    1416:	89 2b       	or	r24, r25
    1418:	61 f0       	breq	.+24     	; 0x1432 <xStreamBufferReceive+0x108>
    141a:	82 85       	ldd	r24, Z+10	; 0x0a
    141c:	93 85       	ldd	r25, Z+11	; 0x0b
    141e:	00 e0       	ldi	r16, 0x00	; 0
    1420:	10 e0       	ldi	r17, 0x00	; 0
    1422:	20 e0       	ldi	r18, 0x00	; 0
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	ba 01       	movw	r22, r20
    142a:	22 d6       	rcall	.+3140   	; 0x2070 <xTaskGenericNotify>
    142c:	f6 01       	movw	r30, r12
    142e:	13 86       	std	Z+11, r1	; 0x0b
    1430:	12 86       	std	Z+10, r1	; 0x0a
    1432:	a3 d2       	rcall	.+1350   	; 0x197a <xTaskResumeAll>
    1434:	02 c0       	rjmp	.+4      	; 0x143a <xStreamBufferReceive+0x110>
                             void *pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    1436:	e1 2c       	mov	r14, r1
    1438:	f1 2c       	mov	r15, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    143a:	c7 01       	movw	r24, r14
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	ff 90       	pop	r15
    144a:	ef 90       	pop	r14
    144c:	df 90       	pop	r13
    144e:	cf 90       	pop	r12
    1450:	bf 90       	pop	r11
    1452:	af 90       	pop	r10
    1454:	9f 90       	pop	r9
    1456:	8f 90       	pop	r8
    1458:	7f 90       	pop	r7
    145a:	6f 90       	pop	r6
    145c:	08 95       	ret

0000145e <prvResetNextTaskUnblockTime>:
    145e:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <pxDelayedTaskList>
    1462:	f0 91 97 06 	lds	r31, 0x0697	; 0x800697 <pxDelayedTaskList+0x1>
    1466:	80 81       	ld	r24, Z
    1468:	81 11       	cpse	r24, r1
    146a:	07 c0       	rjmp	.+14     	; 0x147a <prvResetNextTaskUnblockTime+0x1c>
    146c:	8f ef       	ldi	r24, 0xFF	; 255
    146e:	9f ef       	ldi	r25, 0xFF	; 255
    1470:	90 93 6e 06 	sts	0x066E, r25	; 0x80066e <xNextTaskUnblockTime+0x1>
    1474:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <xNextTaskUnblockTime>
    1478:	08 95       	ret
    147a:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <pxDelayedTaskList>
    147e:	f0 91 97 06 	lds	r31, 0x0697	; 0x800697 <pxDelayedTaskList+0x1>
    1482:	05 80       	ldd	r0, Z+5	; 0x05
    1484:	f6 81       	ldd	r31, Z+6	; 0x06
    1486:	e0 2d       	mov	r30, r0
    1488:	06 80       	ldd	r0, Z+6	; 0x06
    148a:	f7 81       	ldd	r31, Z+7	; 0x07
    148c:	e0 2d       	mov	r30, r0
    148e:	82 81       	ldd	r24, Z+2	; 0x02
    1490:	93 81       	ldd	r25, Z+3	; 0x03
    1492:	90 93 6e 06 	sts	0x066E, r25	; 0x80066e <xNextTaskUnblockTime+0x1>
    1496:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <xNextTaskUnblockTime>
    149a:	08 95       	ret

0000149c <prvAddCurrentTaskToDelayedList>:
    149c:	ff 92       	push	r15
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	df 93       	push	r29
    14a6:	ec 01       	movw	r28, r24
    14a8:	f6 2e       	mov	r15, r22
    14aa:	00 91 75 06 	lds	r16, 0x0675	; 0x800675 <xTickCount>
    14ae:	10 91 76 06 	lds	r17, 0x0676	; 0x800676 <xTickCount+0x1>
    14b2:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <pxCurrentTCB>
    14b6:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    14ba:	02 96       	adiw	r24, 0x02	; 2
    14bc:	7c d8       	rcall	.-3848   	; 0x5b6 <uxListRemove>
    14be:	cf 3f       	cpi	r28, 0xFF	; 255
    14c0:	8f ef       	ldi	r24, 0xFF	; 255
    14c2:	d8 07       	cpc	r29, r24
    14c4:	61 f4       	brne	.+24     	; 0x14de <prvAddCurrentTaskToDelayedList+0x42>
    14c6:	ff 20       	and	r15, r15
    14c8:	51 f0       	breq	.+20     	; 0x14de <prvAddCurrentTaskToDelayedList+0x42>
    14ca:	60 91 ce 06 	lds	r22, 0x06CE	; 0x8006ce <pxCurrentTCB>
    14ce:	70 91 cf 06 	lds	r23, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    14d2:	6e 5f       	subi	r22, 0xFE	; 254
    14d4:	7f 4f       	sbci	r23, 0xFF	; 255
    14d6:	88 e7       	ldi	r24, 0x78	; 120
    14d8:	96 e0       	ldi	r25, 0x06	; 6
    14da:	1b d8       	rcall	.-4042   	; 0x512 <vListInsertEnd>
    14dc:	2d c0       	rjmp	.+90     	; 0x1538 <prvAddCurrentTaskToDelayedList+0x9c>
    14de:	c0 0f       	add	r28, r16
    14e0:	d1 1f       	adc	r29, r17
    14e2:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    14e6:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    14ea:	d3 83       	std	Z+3, r29	; 0x03
    14ec:	c2 83       	std	Z+2, r28	; 0x02
    14ee:	c0 17       	cp	r28, r16
    14f0:	d1 07       	cpc	r29, r17
    14f2:	60 f4       	brcc	.+24     	; 0x150c <prvAddCurrentTaskToDelayedList+0x70>
    14f4:	60 91 ce 06 	lds	r22, 0x06CE	; 0x8006ce <pxCurrentTCB>
    14f8:	70 91 cf 06 	lds	r23, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    14fc:	80 91 94 06 	lds	r24, 0x0694	; 0x800694 <pxOverflowDelayedTaskList>
    1500:	90 91 95 06 	lds	r25, 0x0695	; 0x800695 <pxOverflowDelayedTaskList+0x1>
    1504:	6e 5f       	subi	r22, 0xFE	; 254
    1506:	7f 4f       	sbci	r23, 0xFF	; 255
    1508:	25 d8       	rcall	.-4022   	; 0x554 <vListInsert>
    150a:	16 c0       	rjmp	.+44     	; 0x1538 <prvAddCurrentTaskToDelayedList+0x9c>
    150c:	60 91 ce 06 	lds	r22, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1510:	70 91 cf 06 	lds	r23, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1514:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <pxDelayedTaskList>
    1518:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <pxDelayedTaskList+0x1>
    151c:	6e 5f       	subi	r22, 0xFE	; 254
    151e:	7f 4f       	sbci	r23, 0xFF	; 255
    1520:	19 d8       	rcall	.-4046   	; 0x554 <vListInsert>
    1522:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <xNextTaskUnblockTime>
    1526:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <xNextTaskUnblockTime+0x1>
    152a:	c8 17       	cp	r28, r24
    152c:	d9 07       	cpc	r29, r25
    152e:	20 f4       	brcc	.+8      	; 0x1538 <prvAddCurrentTaskToDelayedList+0x9c>
    1530:	d0 93 6e 06 	sts	0x066E, r29	; 0x80066e <xNextTaskUnblockTime+0x1>
    1534:	c0 93 6d 06 	sts	0x066D, r28	; 0x80066d <xNextTaskUnblockTime>
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	08 95       	ret

00001544 <xTaskCreate>:
    1544:	4f 92       	push	r4
    1546:	5f 92       	push	r5
    1548:	6f 92       	push	r6
    154a:	7f 92       	push	r7
    154c:	8f 92       	push	r8
    154e:	9f 92       	push	r9
    1550:	af 92       	push	r10
    1552:	bf 92       	push	r11
    1554:	cf 92       	push	r12
    1556:	df 92       	push	r13
    1558:	ef 92       	push	r14
    155a:	ff 92       	push	r15
    155c:	0f 93       	push	r16
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	4c 01       	movw	r8, r24
    1564:	6b 01       	movw	r12, r22
    1566:	5a 01       	movw	r10, r20
    1568:	29 01       	movw	r4, r18
    156a:	ca 01       	movw	r24, r20
    156c:	0e 94 55 02 	call	0x4aa	; 0x4aa <pvPortMalloc>
    1570:	3c 01       	movw	r6, r24
    1572:	89 2b       	or	r24, r25
    1574:	09 f4       	brne	.+2      	; 0x1578 <xTaskCreate+0x34>
    1576:	f3 c0       	rjmp	.+486    	; 0x175e <xTaskCreate+0x21a>
    1578:	8c e2       	ldi	r24, 0x2C	; 44
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 55 02 	call	0x4aa	; 0x4aa <pvPortMalloc>
    1580:	ec 01       	movw	r28, r24
    1582:	89 2b       	or	r24, r25
    1584:	99 f0       	breq	.+38     	; 0x15ac <xTaskCreate+0x68>
    1586:	78 8e       	std	Y+24, r7	; 0x18
    1588:	6f 8a       	std	Y+23, r6	; 0x17
    158a:	a5 01       	movw	r20, r10
    158c:	65 ea       	ldi	r22, 0xA5	; 165
    158e:	70 e0       	ldi	r23, 0x00	; 0
    1590:	c3 01       	movw	r24, r6
    1592:	0e 94 59 22 	call	0x44b2	; 0x44b2 <memset>
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	a8 1a       	sub	r10, r24
    159a:	b1 08       	sbc	r11, r1
    159c:	8f 89       	ldd	r24, Y+23	; 0x17
    159e:	98 8d       	ldd	r25, Y+24	; 0x18
    15a0:	a8 0e       	add	r10, r24
    15a2:	b9 1e       	adc	r11, r25
    15a4:	c1 14       	cp	r12, r1
    15a6:	d1 04       	cpc	r13, r1
    15a8:	29 f4       	brne	.+10     	; 0x15b4 <xTaskCreate+0x70>
    15aa:	20 c0       	rjmp	.+64     	; 0x15ec <xTaskCreate+0xa8>
    15ac:	c3 01       	movw	r24, r6
    15ae:	0e 94 68 02 	call	0x4d0	; 0x4d0 <vPortFree>
    15b2:	d5 c0       	rjmp	.+426    	; 0x175e <xTaskCreate+0x21a>
    15b4:	d6 01       	movw	r26, r12
    15b6:	8c 91       	ld	r24, X
    15b8:	89 8f       	std	Y+25, r24	; 0x19
    15ba:	8c 91       	ld	r24, X
    15bc:	88 23       	and	r24, r24
    15be:	a1 f0       	breq	.+40     	; 0x15e8 <xTaskCreate+0xa4>
    15c0:	ae 01       	movw	r20, r28
    15c2:	46 5e       	subi	r20, 0xE6	; 230
    15c4:	5f 4f       	sbci	r21, 0xFF	; 255
    15c6:	f6 01       	movw	r30, r12
    15c8:	31 96       	adiw	r30, 0x01	; 1
    15ca:	b8 e0       	ldi	r27, 0x08	; 8
    15cc:	cb 0e       	add	r12, r27
    15ce:	d1 1c       	adc	r13, r1
    15d0:	cf 01       	movw	r24, r30
    15d2:	21 91       	ld	r18, Z+
    15d4:	da 01       	movw	r26, r20
    15d6:	2d 93       	st	X+, r18
    15d8:	ad 01       	movw	r20, r26
    15da:	dc 01       	movw	r26, r24
    15dc:	8c 91       	ld	r24, X
    15de:	88 23       	and	r24, r24
    15e0:	19 f0       	breq	.+6      	; 0x15e8 <xTaskCreate+0xa4>
    15e2:	ec 15       	cp	r30, r12
    15e4:	fd 05       	cpc	r31, r13
    15e6:	a1 f7       	brne	.-24     	; 0x15d0 <xTaskCreate+0x8c>
    15e8:	18 a2       	std	Y+32, r1	; 0x20
    15ea:	01 c0       	rjmp	.+2      	; 0x15ee <xTaskCreate+0xaa>
    15ec:	19 8e       	std	Y+25, r1	; 0x19
    15ee:	04 30       	cpi	r16, 0x04	; 4
    15f0:	08 f0       	brcs	.+2      	; 0x15f4 <xTaskCreate+0xb0>
    15f2:	03 e0       	ldi	r16, 0x03	; 3
    15f4:	0e 8b       	std	Y+22, r16	; 0x16
    15f6:	0b a3       	std	Y+35, r16	; 0x23
    15f8:	1c a2       	std	Y+36, r1	; 0x24
    15fa:	6e 01       	movw	r12, r28
    15fc:	b2 e0       	ldi	r27, 0x02	; 2
    15fe:	cb 0e       	add	r12, r27
    1600:	d1 1c       	adc	r13, r1
    1602:	c6 01       	movw	r24, r12
    1604:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialiseItem>
    1608:	ce 01       	movw	r24, r28
    160a:	0c 96       	adiw	r24, 0x0c	; 12
    160c:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialiseItem>
    1610:	d9 87       	std	Y+9, r29	; 0x09
    1612:	c8 87       	std	Y+8, r28	; 0x08
    1614:	84 e0       	ldi	r24, 0x04	; 4
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	80 1b       	sub	r24, r16
    161a:	91 09       	sbc	r25, r1
    161c:	9d 87       	std	Y+13, r25	; 0x0d
    161e:	8c 87       	std	Y+12, r24	; 0x0c
    1620:	db 8b       	std	Y+19, r29	; 0x13
    1622:	ca 8b       	std	Y+18, r28	; 0x12
    1624:	1e a2       	std	Y+38, r1	; 0x26
    1626:	1d a2       	std	Y+37, r1	; 0x25
    1628:	1f a2       	std	Y+39, r1	; 0x27
    162a:	18 a6       	std	Y+40, r1	; 0x28
    162c:	19 a6       	std	Y+41, r1	; 0x29
    162e:	1a a6       	std	Y+42, r1	; 0x2a
    1630:	1b a6       	std	Y+43, r1	; 0x2b
    1632:	a2 01       	movw	r20, r4
    1634:	b4 01       	movw	r22, r8
    1636:	c5 01       	movw	r24, r10
    1638:	0e 94 02 03 	call	0x604	; 0x604 <pxPortInitialiseStack>
    163c:	99 83       	std	Y+1, r25	; 0x01
    163e:	88 83       	st	Y, r24
    1640:	e1 14       	cp	r14, r1
    1642:	f1 04       	cpc	r15, r1
    1644:	19 f0       	breq	.+6      	; 0x164c <xTaskCreate+0x108>
    1646:	f7 01       	movw	r30, r14
    1648:	d1 83       	std	Z+1, r29	; 0x01
    164a:	c0 83       	st	Z, r28
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	f8 94       	cli
    1650:	0f 92       	push	r0
    1652:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <uxCurrentNumberOfTasks>
    1656:	8f 5f       	subi	r24, 0xFF	; 255
    1658:	80 93 77 06 	sts	0x0677, r24	; 0x800677 <uxCurrentNumberOfTasks>
    165c:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1660:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1664:	89 2b       	or	r24, r25
    1666:	d1 f5       	brne	.+116    	; 0x16dc <xTaskCreate+0x198>
    1668:	d0 93 cf 06 	sts	0x06CF, r29	; 0x8006cf <pxCurrentTCB+0x1>
    166c:	c0 93 ce 06 	sts	0x06CE, r28	; 0x8006ce <pxCurrentTCB>
    1670:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <uxCurrentNumberOfTasks>
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	09 f0       	breq	.+2      	; 0x167a <xTaskCreate+0x136>
    1678:	41 c0       	rjmp	.+130    	; 0x16fc <xTaskCreate+0x1b8>
    167a:	8a ea       	ldi	r24, 0xAA	; 170
    167c:	96 e0       	ldi	r25, 0x06	; 6
    167e:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    1682:	83 eb       	ldi	r24, 0xB3	; 179
    1684:	96 e0       	ldi	r25, 0x06	; 6
    1686:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    168a:	8c eb       	ldi	r24, 0xBC	; 188
    168c:	96 e0       	ldi	r25, 0x06	; 6
    168e:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    1692:	85 ec       	ldi	r24, 0xC5	; 197
    1694:	96 e0       	ldi	r25, 0x06	; 6
    1696:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    169a:	81 ea       	ldi	r24, 0xA1	; 161
    169c:	96 e0       	ldi	r25, 0x06	; 6
    169e:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    16a2:	88 e9       	ldi	r24, 0x98	; 152
    16a4:	96 e0       	ldi	r25, 0x06	; 6
    16a6:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    16aa:	8b e8       	ldi	r24, 0x8B	; 139
    16ac:	96 e0       	ldi	r25, 0x06	; 6
    16ae:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    16b2:	82 e8       	ldi	r24, 0x82	; 130
    16b4:	96 e0       	ldi	r25, 0x06	; 6
    16b6:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    16ba:	88 e7       	ldi	r24, 0x78	; 120
    16bc:	96 e0       	ldi	r25, 0x06	; 6
    16be:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
    16c2:	81 ea       	ldi	r24, 0xA1	; 161
    16c4:	96 e0       	ldi	r25, 0x06	; 6
    16c6:	90 93 97 06 	sts	0x0697, r25	; 0x800697 <pxDelayedTaskList+0x1>
    16ca:	80 93 96 06 	sts	0x0696, r24	; 0x800696 <pxDelayedTaskList>
    16ce:	88 e9       	ldi	r24, 0x98	; 152
    16d0:	96 e0       	ldi	r25, 0x06	; 6
    16d2:	90 93 95 06 	sts	0x0695, r25	; 0x800695 <pxOverflowDelayedTaskList+0x1>
    16d6:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <pxOverflowDelayedTaskList>
    16da:	10 c0       	rjmp	.+32     	; 0x16fc <xTaskCreate+0x1b8>
    16dc:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <xSchedulerRunning>
    16e0:	81 11       	cpse	r24, r1
    16e2:	0c c0       	rjmp	.+24     	; 0x16fc <xTaskCreate+0x1b8>
    16e4:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    16e8:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    16ec:	96 89       	ldd	r25, Z+22	; 0x16
    16ee:	8e 89       	ldd	r24, Y+22	; 0x16
    16f0:	89 17       	cp	r24, r25
    16f2:	20 f0       	brcs	.+8      	; 0x16fc <xTaskCreate+0x1b8>
    16f4:	d0 93 cf 06 	sts	0x06CF, r29	; 0x8006cf <pxCurrentTCB+0x1>
    16f8:	c0 93 ce 06 	sts	0x06CE, r28	; 0x8006ce <pxCurrentTCB>
    16fc:	80 91 6f 06 	lds	r24, 0x066F	; 0x80066f <uxTaskNumber>
    1700:	8f 5f       	subi	r24, 0xFF	; 255
    1702:	80 93 6f 06 	sts	0x066F, r24	; 0x80066f <uxTaskNumber>
    1706:	89 a3       	std	Y+33, r24	; 0x21
    1708:	8e 89       	ldd	r24, Y+22	; 0x16
    170a:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <uxTopReadyPriority>
    170e:	98 17       	cp	r25, r24
    1710:	10 f4       	brcc	.+4      	; 0x1716 <xTaskCreate+0x1d2>
    1712:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <uxTopReadyPriority>
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9c 01       	movw	r18, r24
    171a:	22 0f       	add	r18, r18
    171c:	33 1f       	adc	r19, r19
    171e:	22 0f       	add	r18, r18
    1720:	33 1f       	adc	r19, r19
    1722:	22 0f       	add	r18, r18
    1724:	33 1f       	adc	r19, r19
    1726:	82 0f       	add	r24, r18
    1728:	93 1f       	adc	r25, r19
    172a:	b6 01       	movw	r22, r12
    172c:	86 55       	subi	r24, 0x56	; 86
    172e:	99 4f       	sbci	r25, 0xF9	; 249
    1730:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1734:	0f 90       	pop	r0
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <xSchedulerRunning>
    173c:	88 23       	and	r24, r24
    173e:	59 f0       	breq	.+22     	; 0x1756 <xTaskCreate+0x212>
    1740:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1744:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1748:	96 89       	ldd	r25, Z+22	; 0x16
    174a:	8e 89       	ldd	r24, Y+22	; 0x16
    174c:	98 17       	cp	r25, r24
    174e:	28 f4       	brcc	.+10     	; 0x175a <xTaskCreate+0x216>
    1750:	07 d8       	rcall	.-4082   	; 0x760 <vPortYield>
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	05 c0       	rjmp	.+10     	; 0x1760 <xTaskCreate+0x21c>
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	03 c0       	rjmp	.+6      	; 0x1760 <xTaskCreate+0x21c>
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	01 c0       	rjmp	.+2      	; 0x1760 <xTaskCreate+0x21c>
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	0f 91       	pop	r16
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	df 90       	pop	r13
    176c:	cf 90       	pop	r12
    176e:	bf 90       	pop	r11
    1770:	af 90       	pop	r10
    1772:	9f 90       	pop	r9
    1774:	8f 90       	pop	r8
    1776:	7f 90       	pop	r7
    1778:	6f 90       	pop	r6
    177a:	5f 90       	pop	r5
    177c:	4f 90       	pop	r4
    177e:	08 95       	ret

00001780 <vTaskStartScheduler>:
    1780:	ef 92       	push	r14
    1782:	ff 92       	push	r15
    1784:	0f 93       	push	r16
    1786:	0f 2e       	mov	r0, r31
    1788:	fb e6       	ldi	r31, 0x6B	; 107
    178a:	ef 2e       	mov	r14, r31
    178c:	f6 e0       	ldi	r31, 0x06	; 6
    178e:	ff 2e       	mov	r15, r31
    1790:	f0 2d       	mov	r31, r0
    1792:	00 e0       	ldi	r16, 0x00	; 0
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 ec       	ldi	r20, 0xC0	; 192
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	6d e3       	ldi	r22, 0x3D	; 61
    179e:	72 e0       	ldi	r23, 0x02	; 2
    17a0:	8d ec       	ldi	r24, 0xCD	; 205
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	cf de       	rcall	.-610    	; 0x1544 <xTaskCreate>
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	d1 f4       	brne	.+52     	; 0x17de <vTaskStartScheduler+0x5e>
    17aa:	dc d5       	rcall	.+3000   	; 0x2364 <xTimerCreateTimerTask>
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	b9 f4       	brne	.+46     	; 0x17de <vTaskStartScheduler+0x5e>
    17b0:	f8 94       	cli
    17b2:	8f ef       	ldi	r24, 0xFF	; 255
    17b4:	9f ef       	ldi	r25, 0xFF	; 255
    17b6:	90 93 6e 06 	sts	0x066E, r25	; 0x80066e <xNextTaskUnblockTime+0x1>
    17ba:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <xNextTaskUnblockTime>
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	80 93 73 06 	sts	0x0673, r24	; 0x800673 <xSchedulerRunning>
    17c4:	10 92 76 06 	sts	0x0676, r1	; 0x800676 <xTickCount+0x1>
    17c8:	10 92 75 06 	sts	0x0675, r1	; 0x800675 <xTickCount>
    17cc:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    17d0:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    17d4:	85 a1       	ldd	r24, Z+37	; 0x25
    17d6:	0e 94 45 02 	call	0x48a	; 0x48a <task_switch_in>
    17da:	0e 94 74 03 	call	0x6e8	; 0x6e8 <xPortStartScheduler>
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	08 95       	ret

000017e6 <vTaskSuspendAll>:
    17e6:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <__data_end>
    17ea:	8f 5f       	subi	r24, 0xFF	; 255
    17ec:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <__data_end>
    17f0:	08 95       	ret

000017f2 <xTaskGetTickCount>:
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	0f 92       	push	r0
    17f8:	80 91 75 06 	lds	r24, 0x0675	; 0x800675 <xTickCount>
    17fc:	90 91 76 06 	lds	r25, 0x0676	; 0x800676 <xTickCount+0x1>
    1800:	0f 90       	pop	r0
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	08 95       	ret

00001806 <xTaskIncrementTick>:
    1806:	cf 92       	push	r12
    1808:	df 92       	push	r13
    180a:	ef 92       	push	r14
    180c:	ff 92       	push	r15
    180e:	0f 93       	push	r16
    1810:	1f 93       	push	r17
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <__data_end>
    181a:	81 11       	cpse	r24, r1
    181c:	98 c0       	rjmp	.+304    	; 0x194e <xTaskIncrementTick+0x148>
    181e:	e0 90 75 06 	lds	r14, 0x0675	; 0x800675 <xTickCount>
    1822:	f0 90 76 06 	lds	r15, 0x0676	; 0x800676 <xTickCount+0x1>
    1826:	8f ef       	ldi	r24, 0xFF	; 255
    1828:	e8 1a       	sub	r14, r24
    182a:	f8 0a       	sbc	r15, r24
    182c:	f0 92 76 06 	sts	0x0676, r15	; 0x800676 <xTickCount+0x1>
    1830:	e0 92 75 06 	sts	0x0675, r14	; 0x800675 <xTickCount>
    1834:	e1 14       	cp	r14, r1
    1836:	f1 04       	cpc	r15, r1
    1838:	b1 f4       	brne	.+44     	; 0x1866 <xTaskIncrementTick+0x60>
    183a:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <pxDelayedTaskList>
    183e:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <pxDelayedTaskList+0x1>
    1842:	20 91 94 06 	lds	r18, 0x0694	; 0x800694 <pxOverflowDelayedTaskList>
    1846:	30 91 95 06 	lds	r19, 0x0695	; 0x800695 <pxOverflowDelayedTaskList+0x1>
    184a:	30 93 97 06 	sts	0x0697, r19	; 0x800697 <pxDelayedTaskList+0x1>
    184e:	20 93 96 06 	sts	0x0696, r18	; 0x800696 <pxDelayedTaskList>
    1852:	90 93 95 06 	sts	0x0695, r25	; 0x800695 <pxOverflowDelayedTaskList+0x1>
    1856:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <pxOverflowDelayedTaskList>
    185a:	80 91 70 06 	lds	r24, 0x0670	; 0x800670 <xNumOfOverflows>
    185e:	8f 5f       	subi	r24, 0xFF	; 255
    1860:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <xNumOfOverflows>
    1864:	fc dd       	rcall	.-1032   	; 0x145e <prvResetNextTaskUnblockTime>
    1866:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <xNextTaskUnblockTime>
    186a:	90 91 6e 06 	lds	r25, 0x066E	; 0x80066e <xNextTaskUnblockTime+0x1>
    186e:	e8 16       	cp	r14, r24
    1870:	f9 06       	cpc	r15, r25
    1872:	10 f4       	brcc	.+4      	; 0x1878 <xTaskIncrementTick+0x72>
    1874:	d1 2c       	mov	r13, r1
    1876:	53 c0       	rjmp	.+166    	; 0x191e <xTaskIncrementTick+0x118>
    1878:	d1 2c       	mov	r13, r1
    187a:	cc 24       	eor	r12, r12
    187c:	c3 94       	inc	r12
    187e:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <pxDelayedTaskList>
    1882:	f0 91 97 06 	lds	r31, 0x0697	; 0x800697 <pxDelayedTaskList+0x1>
    1886:	80 81       	ld	r24, Z
    1888:	81 11       	cpse	r24, r1
    188a:	07 c0       	rjmp	.+14     	; 0x189a <xTaskIncrementTick+0x94>
    188c:	8f ef       	ldi	r24, 0xFF	; 255
    188e:	9f ef       	ldi	r25, 0xFF	; 255
    1890:	90 93 6e 06 	sts	0x066E, r25	; 0x80066e <xNextTaskUnblockTime+0x1>
    1894:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <xNextTaskUnblockTime>
    1898:	42 c0       	rjmp	.+132    	; 0x191e <xTaskIncrementTick+0x118>
    189a:	e0 91 96 06 	lds	r30, 0x0696	; 0x800696 <pxDelayedTaskList>
    189e:	f0 91 97 06 	lds	r31, 0x0697	; 0x800697 <pxDelayedTaskList+0x1>
    18a2:	05 80       	ldd	r0, Z+5	; 0x05
    18a4:	f6 81       	ldd	r31, Z+6	; 0x06
    18a6:	e0 2d       	mov	r30, r0
    18a8:	c6 81       	ldd	r28, Z+6	; 0x06
    18aa:	d7 81       	ldd	r29, Z+7	; 0x07
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	9b 81       	ldd	r25, Y+3	; 0x03
    18b0:	e8 16       	cp	r14, r24
    18b2:	f9 06       	cpc	r15, r25
    18b4:	28 f4       	brcc	.+10     	; 0x18c0 <xTaskIncrementTick+0xba>
    18b6:	90 93 6e 06 	sts	0x066E, r25	; 0x80066e <xNextTaskUnblockTime+0x1>
    18ba:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <xNextTaskUnblockTime>
    18be:	2f c0       	rjmp	.+94     	; 0x191e <xTaskIncrementTick+0x118>
    18c0:	8e 01       	movw	r16, r28
    18c2:	0e 5f       	subi	r16, 0xFE	; 254
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	c8 01       	movw	r24, r16
    18c8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    18cc:	8c 89       	ldd	r24, Y+20	; 0x14
    18ce:	9d 89       	ldd	r25, Y+21	; 0x15
    18d0:	89 2b       	or	r24, r25
    18d2:	21 f0       	breq	.+8      	; 0x18dc <xTaskIncrementTick+0xd6>
    18d4:	ce 01       	movw	r24, r28
    18d6:	0c 96       	adiw	r24, 0x0c	; 12
    18d8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    18dc:	8e 89       	ldd	r24, Y+22	; 0x16
    18de:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <uxTopReadyPriority>
    18e2:	98 17       	cp	r25, r24
    18e4:	10 f4       	brcc	.+4      	; 0x18ea <xTaskIncrementTick+0xe4>
    18e6:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <uxTopReadyPriority>
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	9c 01       	movw	r18, r24
    18ee:	22 0f       	add	r18, r18
    18f0:	33 1f       	adc	r19, r19
    18f2:	22 0f       	add	r18, r18
    18f4:	33 1f       	adc	r19, r19
    18f6:	22 0f       	add	r18, r18
    18f8:	33 1f       	adc	r19, r19
    18fa:	82 0f       	add	r24, r18
    18fc:	93 1f       	adc	r25, r19
    18fe:	b8 01       	movw	r22, r16
    1900:	86 55       	subi	r24, 0x56	; 86
    1902:	99 4f       	sbci	r25, 0xF9	; 249
    1904:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1908:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    190c:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1910:	9e 89       	ldd	r25, Y+22	; 0x16
    1912:	86 89       	ldd	r24, Z+22	; 0x16
    1914:	98 17       	cp	r25, r24
    1916:	08 f4       	brcc	.+2      	; 0x191a <xTaskIncrementTick+0x114>
    1918:	b2 cf       	rjmp	.-156    	; 0x187e <xTaskIncrementTick+0x78>
    191a:	dc 2c       	mov	r13, r12
    191c:	b0 cf       	rjmp	.-160    	; 0x187e <xTaskIncrementTick+0x78>
    191e:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1922:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1926:	86 89       	ldd	r24, Z+22	; 0x16
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	fc 01       	movw	r30, r24
    192c:	ee 0f       	add	r30, r30
    192e:	ff 1f       	adc	r31, r31
    1930:	ee 0f       	add	r30, r30
    1932:	ff 1f       	adc	r31, r31
    1934:	ee 0f       	add	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	8e 0f       	add	r24, r30
    193a:	9f 1f       	adc	r25, r31
    193c:	fc 01       	movw	r30, r24
    193e:	e6 55       	subi	r30, 0x56	; 86
    1940:	f9 4f       	sbci	r31, 0xF9	; 249
    1942:	80 81       	ld	r24, Z
    1944:	82 30       	cpi	r24, 0x02	; 2
    1946:	48 f0       	brcs	.+18     	; 0x195a <xTaskIncrementTick+0x154>
    1948:	dd 24       	eor	r13, r13
    194a:	d3 94       	inc	r13
    194c:	06 c0       	rjmp	.+12     	; 0x195a <xTaskIncrementTick+0x154>
    194e:	80 91 72 06 	lds	r24, 0x0672	; 0x800672 <uxPendedTicks>
    1952:	8f 5f       	subi	r24, 0xFF	; 255
    1954:	80 93 72 06 	sts	0x0672, r24	; 0x800672 <uxPendedTicks>
    1958:	d1 2c       	mov	r13, r1
    195a:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <xYieldPending>
    195e:	88 23       	and	r24, r24
    1960:	11 f0       	breq	.+4      	; 0x1966 <xTaskIncrementTick+0x160>
    1962:	dd 24       	eor	r13, r13
    1964:	d3 94       	inc	r13
    1966:	8d 2d       	mov	r24, r13
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	ff 90       	pop	r15
    1972:	ef 90       	pop	r14
    1974:	df 90       	pop	r13
    1976:	cf 90       	pop	r12
    1978:	08 95       	ret

0000197a <xTaskResumeAll>:
    197a:	df 92       	push	r13
    197c:	ef 92       	push	r14
    197e:	ff 92       	push	r15
    1980:	0f 93       	push	r16
    1982:	1f 93       	push	r17
    1984:	cf 93       	push	r28
    1986:	df 93       	push	r29
    1988:	0f b6       	in	r0, 0x3f	; 63
    198a:	f8 94       	cli
    198c:	0f 92       	push	r0
    198e:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <__data_end>
    1992:	81 50       	subi	r24, 0x01	; 1
    1994:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <__data_end>
    1998:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <__data_end>
    199c:	81 11       	cpse	r24, r1
    199e:	5d c0       	rjmp	.+186    	; 0x1a5a <xTaskResumeAll+0xe0>
    19a0:	80 91 77 06 	lds	r24, 0x0677	; 0x800677 <uxCurrentNumberOfTasks>
    19a4:	81 11       	cpse	r24, r1
    19a6:	33 c0       	rjmp	.+102    	; 0x1a0e <xTaskResumeAll+0x94>
    19a8:	5b c0       	rjmp	.+182    	; 0x1a60 <xTaskResumeAll+0xe6>
    19aa:	d7 01       	movw	r26, r14
    19ac:	15 96       	adiw	r26, 0x05	; 5
    19ae:	ed 91       	ld	r30, X+
    19b0:	fc 91       	ld	r31, X
    19b2:	16 97       	sbiw	r26, 0x06	; 6
    19b4:	c6 81       	ldd	r28, Z+6	; 0x06
    19b6:	d7 81       	ldd	r29, Z+7	; 0x07
    19b8:	ce 01       	movw	r24, r28
    19ba:	0c 96       	adiw	r24, 0x0c	; 12
    19bc:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    19c0:	8e 01       	movw	r16, r28
    19c2:	0e 5f       	subi	r16, 0xFE	; 254
    19c4:	1f 4f       	sbci	r17, 0xFF	; 255
    19c6:	c8 01       	movw	r24, r16
    19c8:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    19cc:	8e 89       	ldd	r24, Y+22	; 0x16
    19ce:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <uxTopReadyPriority>
    19d2:	98 17       	cp	r25, r24
    19d4:	10 f4       	brcc	.+4      	; 0x19da <xTaskResumeAll+0x60>
    19d6:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <uxTopReadyPriority>
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9c 01       	movw	r18, r24
    19de:	22 0f       	add	r18, r18
    19e0:	33 1f       	adc	r19, r19
    19e2:	22 0f       	add	r18, r18
    19e4:	33 1f       	adc	r19, r19
    19e6:	22 0f       	add	r18, r18
    19e8:	33 1f       	adc	r19, r19
    19ea:	82 0f       	add	r24, r18
    19ec:	93 1f       	adc	r25, r19
    19ee:	b8 01       	movw	r22, r16
    19f0:	86 55       	subi	r24, 0x56	; 86
    19f2:	99 4f       	sbci	r25, 0xF9	; 249
    19f4:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    19f8:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    19fc:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1a00:	9e 89       	ldd	r25, Y+22	; 0x16
    1a02:	86 89       	ldd	r24, Z+22	; 0x16
    1a04:	98 17       	cp	r25, r24
    1a06:	68 f0       	brcs	.+26     	; 0x1a22 <xTaskResumeAll+0xa8>
    1a08:	d0 92 71 06 	sts	0x0671, r13	; 0x800671 <xYieldPending>
    1a0c:	0a c0       	rjmp	.+20     	; 0x1a22 <xTaskResumeAll+0xa8>
    1a0e:	c0 e0       	ldi	r28, 0x00	; 0
    1a10:	d0 e0       	ldi	r29, 0x00	; 0
    1a12:	0f 2e       	mov	r0, r31
    1a14:	fb e8       	ldi	r31, 0x8B	; 139
    1a16:	ef 2e       	mov	r14, r31
    1a18:	f6 e0       	ldi	r31, 0x06	; 6
    1a1a:	ff 2e       	mov	r15, r31
    1a1c:	f0 2d       	mov	r31, r0
    1a1e:	dd 24       	eor	r13, r13
    1a20:	d3 94       	inc	r13
    1a22:	f7 01       	movw	r30, r14
    1a24:	80 81       	ld	r24, Z
    1a26:	81 11       	cpse	r24, r1
    1a28:	c0 cf       	rjmp	.-128    	; 0x19aa <xTaskResumeAll+0x30>
    1a2a:	cd 2b       	or	r28, r29
    1a2c:	09 f0       	breq	.+2      	; 0x1a30 <xTaskResumeAll+0xb6>
    1a2e:	17 dd       	rcall	.-1490   	; 0x145e <prvResetNextTaskUnblockTime>
    1a30:	c0 91 72 06 	lds	r28, 0x0672	; 0x800672 <uxPendedTicks>
    1a34:	cc 23       	and	r28, r28
    1a36:	49 f0       	breq	.+18     	; 0x1a4a <xTaskResumeAll+0xd0>
    1a38:	d1 e0       	ldi	r29, 0x01	; 1
    1a3a:	e5 de       	rcall	.-566    	; 0x1806 <xTaskIncrementTick>
    1a3c:	81 11       	cpse	r24, r1
    1a3e:	d0 93 71 06 	sts	0x0671, r29	; 0x800671 <xYieldPending>
    1a42:	c1 50       	subi	r28, 0x01	; 1
    1a44:	d1 f7       	brne	.-12     	; 0x1a3a <xTaskResumeAll+0xc0>
    1a46:	10 92 72 06 	sts	0x0672, r1	; 0x800672 <uxPendedTicks>
    1a4a:	80 91 71 06 	lds	r24, 0x0671	; 0x800671 <xYieldPending>
    1a4e:	88 23       	and	r24, r24
    1a50:	31 f0       	breq	.+12     	; 0x1a5e <xTaskResumeAll+0xe4>
    1a52:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	03 c0       	rjmp	.+6      	; 0x1a60 <xTaskResumeAll+0xe6>
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <xTaskResumeAll+0xe6>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	0f 90       	pop	r0
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	df 91       	pop	r29
    1a66:	cf 91       	pop	r28
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	df 90       	pop	r13
    1a72:	08 95       	ret

00001a74 <vTaskDelay>:
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	ec 01       	movw	r28, r24
    1a7a:	89 2b       	or	r24, r25
    1a7c:	39 f0       	breq	.+14     	; 0x1a8c <vTaskDelay+0x18>
    1a7e:	b3 de       	rcall	.-666    	; 0x17e6 <vTaskSuspendAll>
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	ce 01       	movw	r24, r28
    1a84:	0b dd       	rcall	.-1514   	; 0x149c <prvAddCurrentTaskToDelayedList>
    1a86:	79 df       	rcall	.-270    	; 0x197a <xTaskResumeAll>
    1a88:	81 11       	cpse	r24, r1
    1a8a:	02 c0       	rjmp	.+4      	; 0x1a90 <vTaskDelay+0x1c>
    1a8c:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	08 95       	ret

00001a96 <vTaskSwitchContext>:
    1a96:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <__data_end>
    1a9a:	88 23       	and	r24, r24
    1a9c:	21 f0       	breq	.+8      	; 0x1aa6 <vTaskSwitchContext+0x10>
    1a9e:	81 e0       	ldi	r24, 0x01	; 1
    1aa0:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <xYieldPending>
    1aa4:	08 95       	ret
    1aa6:	10 92 71 06 	sts	0x0671, r1	; 0x800671 <xYieldPending>
    1aaa:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1aae:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1ab2:	85 a1       	ldd	r24, Z+37	; 0x25
    1ab4:	0e 94 4f 02 	call	0x49e	; 0x49e <task_switch_out>
    1ab8:	a0 91 ce 06 	lds	r26, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1abc:	b0 91 cf 06 	lds	r27, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1ac0:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1ac4:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1ac8:	2d 91       	ld	r18, X+
    1aca:	3c 91       	ld	r19, X
    1acc:	87 89       	ldd	r24, Z+23	; 0x17
    1ace:	90 8d       	ldd	r25, Z+24	; 0x18
    1ad0:	82 17       	cp	r24, r18
    1ad2:	93 07       	cpc	r25, r19
    1ad4:	58 f0       	brcs	.+22     	; 0x1aec <vTaskSwitchContext+0x56>
    1ad6:	60 91 ce 06 	lds	r22, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1ada:	70 91 cf 06 	lds	r23, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1ade:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1ae2:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1ae6:	67 5e       	subi	r22, 0xE7	; 231
    1ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    1aea:	55 d5       	rcall	.+2730   	; 0x2596 <vApplicationStackOverflowHook>
    1aec:	20 91 74 06 	lds	r18, 0x0674	; 0x800674 <uxTopReadyPriority>
    1af0:	82 2f       	mov	r24, r18
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	fc 01       	movw	r30, r24
    1af6:	ee 0f       	add	r30, r30
    1af8:	ff 1f       	adc	r31, r31
    1afa:	ee 0f       	add	r30, r30
    1afc:	ff 1f       	adc	r31, r31
    1afe:	ee 0f       	add	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	e8 0f       	add	r30, r24
    1b04:	f9 1f       	adc	r31, r25
    1b06:	e6 55       	subi	r30, 0x56	; 86
    1b08:	f9 4f       	sbci	r31, 0xF9	; 249
    1b0a:	30 81       	ld	r19, Z
    1b0c:	31 11       	cpse	r19, r1
    1b0e:	11 c0       	rjmp	.+34     	; 0x1b32 <vTaskSwitchContext+0x9c>
    1b10:	21 50       	subi	r18, 0x01	; 1
    1b12:	82 2f       	mov	r24, r18
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	fc 01       	movw	r30, r24
    1b18:	ee 0f       	add	r30, r30
    1b1a:	ff 1f       	adc	r31, r31
    1b1c:	ee 0f       	add	r30, r30
    1b1e:	ff 1f       	adc	r31, r31
    1b20:	ee 0f       	add	r30, r30
    1b22:	ff 1f       	adc	r31, r31
    1b24:	e8 0f       	add	r30, r24
    1b26:	f9 1f       	adc	r31, r25
    1b28:	e6 55       	subi	r30, 0x56	; 86
    1b2a:	f9 4f       	sbci	r31, 0xF9	; 249
    1b2c:	30 81       	ld	r19, Z
    1b2e:	33 23       	and	r19, r19
    1b30:	79 f3       	breq	.-34     	; 0x1b10 <vTaskSwitchContext+0x7a>
    1b32:	ac 01       	movw	r20, r24
    1b34:	44 0f       	add	r20, r20
    1b36:	55 1f       	adc	r21, r21
    1b38:	44 0f       	add	r20, r20
    1b3a:	55 1f       	adc	r21, r21
    1b3c:	44 0f       	add	r20, r20
    1b3e:	55 1f       	adc	r21, r21
    1b40:	48 0f       	add	r20, r24
    1b42:	59 1f       	adc	r21, r25
    1b44:	da 01       	movw	r26, r20
    1b46:	a6 55       	subi	r26, 0x56	; 86
    1b48:	b9 4f       	sbci	r27, 0xF9	; 249
    1b4a:	11 96       	adiw	r26, 0x01	; 1
    1b4c:	ed 91       	ld	r30, X+
    1b4e:	fc 91       	ld	r31, X
    1b50:	12 97       	sbiw	r26, 0x02	; 2
    1b52:	02 80       	ldd	r0, Z+2	; 0x02
    1b54:	f3 81       	ldd	r31, Z+3	; 0x03
    1b56:	e0 2d       	mov	r30, r0
    1b58:	12 96       	adiw	r26, 0x02	; 2
    1b5a:	fc 93       	st	X, r31
    1b5c:	ee 93       	st	-X, r30
    1b5e:	11 97       	sbiw	r26, 0x01	; 1
    1b60:	43 55       	subi	r20, 0x53	; 83
    1b62:	59 4f       	sbci	r21, 0xF9	; 249
    1b64:	e4 17       	cp	r30, r20
    1b66:	f5 07       	cpc	r31, r21
    1b68:	29 f4       	brne	.+10     	; 0x1b74 <vTaskSwitchContext+0xde>
    1b6a:	42 81       	ldd	r20, Z+2	; 0x02
    1b6c:	53 81       	ldd	r21, Z+3	; 0x03
    1b6e:	fd 01       	movw	r30, r26
    1b70:	52 83       	std	Z+2, r21	; 0x02
    1b72:	41 83       	std	Z+1, r20	; 0x01
    1b74:	fc 01       	movw	r30, r24
    1b76:	ee 0f       	add	r30, r30
    1b78:	ff 1f       	adc	r31, r31
    1b7a:	ee 0f       	add	r30, r30
    1b7c:	ff 1f       	adc	r31, r31
    1b7e:	ee 0f       	add	r30, r30
    1b80:	ff 1f       	adc	r31, r31
    1b82:	8e 0f       	add	r24, r30
    1b84:	9f 1f       	adc	r25, r31
    1b86:	fc 01       	movw	r30, r24
    1b88:	e6 55       	subi	r30, 0x56	; 86
    1b8a:	f9 4f       	sbci	r31, 0xF9	; 249
    1b8c:	01 80       	ldd	r0, Z+1	; 0x01
    1b8e:	f2 81       	ldd	r31, Z+2	; 0x02
    1b90:	e0 2d       	mov	r30, r0
    1b92:	86 81       	ldd	r24, Z+6	; 0x06
    1b94:	97 81       	ldd	r25, Z+7	; 0x07
    1b96:	90 93 cf 06 	sts	0x06CF, r25	; 0x8006cf <pxCurrentTCB+0x1>
    1b9a:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <pxCurrentTCB>
    1b9e:	20 93 74 06 	sts	0x0674, r18	; 0x800674 <uxTopReadyPriority>
    1ba2:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1ba6:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1baa:	85 a1       	ldd	r24, Z+37	; 0x25
    1bac:	0c 94 45 02 	jmp	0x48a	; 0x48a <task_switch_in>
    1bb0:	08 95       	ret

00001bb2 <vTaskPlaceOnEventList>:
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	eb 01       	movw	r28, r22
    1bb8:	60 91 ce 06 	lds	r22, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1bbc:	70 91 cf 06 	lds	r23, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1bc0:	64 5f       	subi	r22, 0xF4	; 244
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	0e 94 aa 02 	call	0x554	; 0x554 <vListInsert>
    1bc8:	61 e0       	ldi	r22, 0x01	; 1
    1bca:	ce 01       	movw	r24, r28
    1bcc:	67 dc       	rcall	.-1842   	; 0x149c <prvAddCurrentTaskToDelayedList>
    1bce:	df 91       	pop	r29
    1bd0:	cf 91       	pop	r28
    1bd2:	08 95       	ret

00001bd4 <vTaskPlaceOnEventListRestricted>:
    1bd4:	0f 93       	push	r16
    1bd6:	1f 93       	push	r17
    1bd8:	cf 93       	push	r28
    1bda:	8b 01       	movw	r16, r22
    1bdc:	c4 2f       	mov	r28, r20
    1bde:	60 91 ce 06 	lds	r22, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1be2:	70 91 cf 06 	lds	r23, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1be6:	64 5f       	subi	r22, 0xF4	; 244
    1be8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bea:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1bee:	cc 23       	and	r28, r28
    1bf0:	11 f0       	breq	.+4      	; 0x1bf6 <vTaskPlaceOnEventListRestricted+0x22>
    1bf2:	0f ef       	ldi	r16, 0xFF	; 255
    1bf4:	1f ef       	ldi	r17, 0xFF	; 255
    1bf6:	6c 2f       	mov	r22, r28
    1bf8:	c8 01       	movw	r24, r16
    1bfa:	50 dc       	rcall	.-1888   	; 0x149c <prvAddCurrentTaskToDelayedList>
    1bfc:	cf 91       	pop	r28
    1bfe:	1f 91       	pop	r17
    1c00:	0f 91       	pop	r16
    1c02:	08 95       	ret

00001c04 <xTaskRemoveFromEventList>:
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	15 96       	adiw	r26, 0x05	; 5
    1c10:	ed 91       	ld	r30, X+
    1c12:	fc 91       	ld	r31, X
    1c14:	16 97       	sbiw	r26, 0x06	; 6
    1c16:	c6 81       	ldd	r28, Z+6	; 0x06
    1c18:	d7 81       	ldd	r29, Z+7	; 0x07
    1c1a:	8e 01       	movw	r16, r28
    1c1c:	04 5f       	subi	r16, 0xF4	; 244
    1c1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c20:	c8 01       	movw	r24, r16
    1c22:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    1c26:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <__data_end>
    1c2a:	81 11       	cpse	r24, r1
    1c2c:	1c c0       	rjmp	.+56     	; 0x1c66 <xTaskRemoveFromEventList+0x62>
    1c2e:	0a 50       	subi	r16, 0x0A	; 10
    1c30:	11 09       	sbc	r17, r1
    1c32:	c8 01       	movw	r24, r16
    1c34:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    1c38:	8e 89       	ldd	r24, Y+22	; 0x16
    1c3a:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <uxTopReadyPriority>
    1c3e:	98 17       	cp	r25, r24
    1c40:	10 f4       	brcc	.+4      	; 0x1c46 <xTaskRemoveFromEventList+0x42>
    1c42:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <uxTopReadyPriority>
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	9c 01       	movw	r18, r24
    1c4a:	22 0f       	add	r18, r18
    1c4c:	33 1f       	adc	r19, r19
    1c4e:	22 0f       	add	r18, r18
    1c50:	33 1f       	adc	r19, r19
    1c52:	22 0f       	add	r18, r18
    1c54:	33 1f       	adc	r19, r19
    1c56:	82 0f       	add	r24, r18
    1c58:	93 1f       	adc	r25, r19
    1c5a:	b8 01       	movw	r22, r16
    1c5c:	86 55       	subi	r24, 0x56	; 86
    1c5e:	99 4f       	sbci	r25, 0xF9	; 249
    1c60:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1c64:	05 c0       	rjmp	.+10     	; 0x1c70 <xTaskRemoveFromEventList+0x6c>
    1c66:	b8 01       	movw	r22, r16
    1c68:	8b e8       	ldi	r24, 0x8B	; 139
    1c6a:	96 e0       	ldi	r25, 0x06	; 6
    1c6c:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1c70:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1c74:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1c78:	9e 89       	ldd	r25, Y+22	; 0x16
    1c7a:	86 89       	ldd	r24, Z+22	; 0x16
    1c7c:	89 17       	cp	r24, r25
    1c7e:	20 f4       	brcc	.+8      	; 0x1c88 <xTaskRemoveFromEventList+0x84>
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <xYieldPending>
    1c86:	01 c0       	rjmp	.+2      	; 0x1c8a <xTaskRemoveFromEventList+0x86>
    1c88:	80 e0       	ldi	r24, 0x00	; 0
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	08 95       	ret

00001c94 <vTaskInternalSetTimeOutState>:
    1c94:	20 91 70 06 	lds	r18, 0x0670	; 0x800670 <xNumOfOverflows>
    1c98:	fc 01       	movw	r30, r24
    1c9a:	20 83       	st	Z, r18
    1c9c:	20 91 75 06 	lds	r18, 0x0675	; 0x800675 <xTickCount>
    1ca0:	30 91 76 06 	lds	r19, 0x0676	; 0x800676 <xTickCount+0x1>
    1ca4:	32 83       	std	Z+2, r19	; 0x02
    1ca6:	21 83       	std	Z+1, r18	; 0x01
    1ca8:	08 95       	ret

00001caa <xTaskCheckForTimeOut>:
    1caa:	cf 93       	push	r28
    1cac:	df 93       	push	r29
    1cae:	0f b6       	in	r0, 0x3f	; 63
    1cb0:	f8 94       	cli
    1cb2:	0f 92       	push	r0
    1cb4:	20 91 75 06 	lds	r18, 0x0675	; 0x800675 <xTickCount>
    1cb8:	30 91 76 06 	lds	r19, 0x0676	; 0x800676 <xTickCount+0x1>
    1cbc:	db 01       	movw	r26, r22
    1cbe:	4d 91       	ld	r20, X+
    1cc0:	5c 91       	ld	r21, X
    1cc2:	4f 3f       	cpi	r20, 0xFF	; 255
    1cc4:	bf ef       	ldi	r27, 0xFF	; 255
    1cc6:	5b 07       	cpc	r21, r27
    1cc8:	e9 f0       	breq	.+58     	; 0x1d04 <xTaskCheckForTimeOut+0x5a>
    1cca:	ec 01       	movw	r28, r24
    1ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cce:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd0:	a0 91 70 06 	lds	r26, 0x0670	; 0x800670 <xNumOfOverflows>
    1cd4:	b8 81       	ld	r27, Y
    1cd6:	ba 17       	cp	r27, r26
    1cd8:	19 f0       	breq	.+6      	; 0x1ce0 <xTaskCheckForTimeOut+0x36>
    1cda:	2e 17       	cp	r18, r30
    1cdc:	3f 07       	cpc	r19, r31
    1cde:	a0 f4       	brcc	.+40     	; 0x1d08 <xTaskCheckForTimeOut+0x5e>
    1ce0:	2e 1b       	sub	r18, r30
    1ce2:	3f 0b       	sbc	r19, r31
    1ce4:	24 17       	cp	r18, r20
    1ce6:	35 07       	cpc	r19, r21
    1ce8:	40 f4       	brcc	.+16     	; 0x1cfa <xTaskCheckForTimeOut+0x50>
    1cea:	fb 01       	movw	r30, r22
    1cec:	42 1b       	sub	r20, r18
    1cee:	53 0b       	sbc	r21, r19
    1cf0:	51 83       	std	Z+1, r21	; 0x01
    1cf2:	40 83       	st	Z, r20
    1cf4:	cf df       	rcall	.-98     	; 0x1c94 <vTaskInternalSetTimeOutState>
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	08 c0       	rjmp	.+16     	; 0x1d0a <xTaskCheckForTimeOut+0x60>
    1cfa:	fb 01       	movw	r30, r22
    1cfc:	11 82       	std	Z+1, r1	; 0x01
    1cfe:	10 82       	st	Z, r1
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	03 c0       	rjmp	.+6      	; 0x1d0a <xTaskCheckForTimeOut+0x60>
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	01 c0       	rjmp	.+2      	; 0x1d0a <xTaskCheckForTimeOut+0x60>
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	0f 90       	pop	r0
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <vTaskMissedYield>:
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <xYieldPending>
    1d1a:	08 95       	ret

00001d1c <xTaskGetCurrentTaskHandle>:
    1d1c:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1d20:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1d24:	08 95       	ret

00001d26 <xTaskGetSchedulerState>:
    1d26:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <xSchedulerRunning>
    1d2a:	88 23       	and	r24, r24
    1d2c:	31 f0       	breq	.+12     	; 0x1d3a <xTaskGetSchedulerState+0x14>
    1d2e:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <__data_end>
    1d32:	88 23       	and	r24, r24
    1d34:	21 f0       	breq	.+8      	; 0x1d3e <xTaskGetSchedulerState+0x18>
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	08 95       	ret
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	08 95       	ret
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
    1d40:	08 95       	ret

00001d42 <xTaskPriorityInherit>:
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	89 2b       	or	r24, r25
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <xTaskPriorityInherit+0x10>
    1d50:	64 c0       	rjmp	.+200    	; 0x1e1a <xTaskPriorityInherit+0xd8>
    1d52:	26 89       	ldd	r18, Z+22	; 0x16
    1d54:	a0 91 ce 06 	lds	r26, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1d58:	b0 91 cf 06 	lds	r27, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1d5c:	56 96       	adiw	r26, 0x16	; 22
    1d5e:	8c 91       	ld	r24, X
    1d60:	28 17       	cp	r18, r24
    1d62:	08 f0       	brcs	.+2      	; 0x1d66 <xTaskPriorityInherit+0x24>
    1d64:	4e c0       	rjmp	.+156    	; 0x1e02 <xTaskPriorityInherit+0xc0>
    1d66:	84 85       	ldd	r24, Z+12	; 0x0c
    1d68:	95 85       	ldd	r25, Z+13	; 0x0d
    1d6a:	99 23       	and	r25, r25
    1d6c:	64 f0       	brlt	.+24     	; 0x1d86 <xTaskPriorityInherit+0x44>
    1d6e:	a0 91 ce 06 	lds	r26, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1d72:	b0 91 cf 06 	lds	r27, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1d76:	56 96       	adiw	r26, 0x16	; 22
    1d78:	3c 91       	ld	r19, X
    1d7a:	84 e0       	ldi	r24, 0x04	; 4
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	83 1b       	sub	r24, r19
    1d80:	91 09       	sbc	r25, r1
    1d82:	95 87       	std	Z+13, r25	; 0x0d
    1d84:	84 87       	std	Z+12, r24	; 0x0c
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	c9 01       	movw	r24, r18
    1d8a:	88 0f       	add	r24, r24
    1d8c:	99 1f       	adc	r25, r25
    1d8e:	88 0f       	add	r24, r24
    1d90:	99 1f       	adc	r25, r25
    1d92:	88 0f       	add	r24, r24
    1d94:	99 1f       	adc	r25, r25
    1d96:	28 0f       	add	r18, r24
    1d98:	39 1f       	adc	r19, r25
    1d9a:	26 55       	subi	r18, 0x56	; 86
    1d9c:	39 4f       	sbci	r19, 0xF9	; 249
    1d9e:	82 85       	ldd	r24, Z+10	; 0x0a
    1da0:	93 85       	ldd	r25, Z+11	; 0x0b
    1da2:	82 17       	cp	r24, r18
    1da4:	93 07       	cpc	r25, r19
    1da6:	21 f5       	brne	.+72     	; 0x1df0 <xTaskPriorityInherit+0xae>
    1da8:	8f 01       	movw	r16, r30
    1daa:	ef 01       	movw	r28, r30
    1dac:	22 96       	adiw	r28, 0x02	; 2
    1dae:	ce 01       	movw	r24, r28
    1db0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    1db4:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1db8:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1dbc:	86 89       	ldd	r24, Z+22	; 0x16
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	86 8b       	std	Z+22, r24	; 0x16
    1dc2:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <uxTopReadyPriority>
    1dc6:	98 17       	cp	r25, r24
    1dc8:	10 f4       	brcc	.+4      	; 0x1dce <xTaskPriorityInherit+0x8c>
    1dca:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <uxTopReadyPriority>
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9c 01       	movw	r18, r24
    1dd2:	22 0f       	add	r18, r18
    1dd4:	33 1f       	adc	r19, r19
    1dd6:	22 0f       	add	r18, r18
    1dd8:	33 1f       	adc	r19, r19
    1dda:	22 0f       	add	r18, r18
    1ddc:	33 1f       	adc	r19, r19
    1dde:	82 0f       	add	r24, r18
    1de0:	93 1f       	adc	r25, r19
    1de2:	be 01       	movw	r22, r28
    1de4:	86 55       	subi	r24, 0x56	; 86
    1de6:	99 4f       	sbci	r25, 0xF9	; 249
    1de8:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	16 c0       	rjmp	.+44     	; 0x1e1c <xTaskPriorityInherit+0xda>
    1df0:	a0 91 ce 06 	lds	r26, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1df4:	b0 91 cf 06 	lds	r27, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1df8:	56 96       	adiw	r26, 0x16	; 22
    1dfa:	8c 91       	ld	r24, X
    1dfc:	86 8b       	std	Z+22, r24	; 0x16
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	0d c0       	rjmp	.+26     	; 0x1e1c <xTaskPriorityInherit+0xda>
    1e02:	a0 91 ce 06 	lds	r26, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1e06:	b0 91 cf 06 	lds	r27, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	23 a1       	ldd	r18, Z+35	; 0x23
    1e0e:	56 96       	adiw	r26, 0x16	; 22
    1e10:	9c 91       	ld	r25, X
    1e12:	29 17       	cp	r18, r25
    1e14:	18 f0       	brcs	.+6      	; 0x1e1c <xTaskPriorityInherit+0xda>
    1e16:	80 e0       	ldi	r24, 0x00	; 0
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <xTaskPriorityInherit+0xda>
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	df 91       	pop	r29
    1e1e:	cf 91       	pop	r28
    1e20:	1f 91       	pop	r17
    1e22:	0f 91       	pop	r16
    1e24:	08 95       	ret

00001e26 <xTaskPriorityDisinherit>:
    1e26:	0f 93       	push	r16
    1e28:	1f 93       	push	r17
    1e2a:	cf 93       	push	r28
    1e2c:	df 93       	push	r29
    1e2e:	fc 01       	movw	r30, r24
    1e30:	89 2b       	or	r24, r25
    1e32:	79 f1       	breq	.+94     	; 0x1e92 <xTaskPriorityDisinherit+0x6c>
    1e34:	84 a1       	ldd	r24, Z+36	; 0x24
    1e36:	81 50       	subi	r24, 0x01	; 1
    1e38:	84 a3       	std	Z+36, r24	; 0x24
    1e3a:	26 89       	ldd	r18, Z+22	; 0x16
    1e3c:	93 a1       	ldd	r25, Z+35	; 0x23
    1e3e:	29 17       	cp	r18, r25
    1e40:	51 f1       	breq	.+84     	; 0x1e96 <xTaskPriorityDisinherit+0x70>
    1e42:	81 11       	cpse	r24, r1
    1e44:	2a c0       	rjmp	.+84     	; 0x1e9a <xTaskPriorityDisinherit+0x74>
    1e46:	ef 01       	movw	r28, r30
    1e48:	8f 01       	movw	r16, r30
    1e4a:	0e 5f       	subi	r16, 0xFE	; 254
    1e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e4e:	c8 01       	movw	r24, r16
    1e50:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    1e54:	8b a1       	ldd	r24, Y+35	; 0x23
    1e56:	8e 8b       	std	Y+22, r24	; 0x16
    1e58:	24 e0       	ldi	r18, 0x04	; 4
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	28 1b       	sub	r18, r24
    1e5e:	31 09       	sbc	r19, r1
    1e60:	3d 87       	std	Y+13, r19	; 0x0d
    1e62:	2c 87       	std	Y+12, r18	; 0x0c
    1e64:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <uxTopReadyPriority>
    1e68:	98 17       	cp	r25, r24
    1e6a:	10 f4       	brcc	.+4      	; 0x1e70 <xTaskPriorityDisinherit+0x4a>
    1e6c:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <uxTopReadyPriority>
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9c 01       	movw	r18, r24
    1e74:	22 0f       	add	r18, r18
    1e76:	33 1f       	adc	r19, r19
    1e78:	22 0f       	add	r18, r18
    1e7a:	33 1f       	adc	r19, r19
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	82 0f       	add	r24, r18
    1e82:	93 1f       	adc	r25, r19
    1e84:	b8 01       	movw	r22, r16
    1e86:	86 55       	subi	r24, 0x56	; 86
    1e88:	99 4f       	sbci	r25, 0xF9	; 249
    1e8a:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	05 c0       	rjmp	.+10     	; 0x1e9c <xTaskPriorityDisinherit+0x76>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	03 c0       	rjmp	.+6      	; 0x1e9c <xTaskPriorityDisinherit+0x76>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	01 c0       	rjmp	.+2      	; 0x1e9c <xTaskPriorityDisinherit+0x76>
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	08 95       	ret

00001ea6 <vTaskPriorityDisinheritAfterTimeout>:
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	fc 01       	movw	r30, r24
    1eb0:	89 2b       	or	r24, r25
    1eb2:	09 f4       	brne	.+2      	; 0x1eb6 <vTaskPriorityDisinheritAfterTimeout+0x10>
    1eb4:	43 c0       	rjmp	.+134    	; 0x1f3c <vTaskPriorityDisinheritAfterTimeout+0x96>
    1eb6:	93 a1       	ldd	r25, Z+35	; 0x23
    1eb8:	96 17       	cp	r25, r22
    1eba:	08 f4       	brcc	.+2      	; 0x1ebe <vTaskPriorityDisinheritAfterTimeout+0x18>
    1ebc:	96 2f       	mov	r25, r22
    1ebe:	86 89       	ldd	r24, Z+22	; 0x16
    1ec0:	89 17       	cp	r24, r25
    1ec2:	e1 f1       	breq	.+120    	; 0x1f3c <vTaskPriorityDisinheritAfterTimeout+0x96>
    1ec4:	24 a1       	ldd	r18, Z+36	; 0x24
    1ec6:	21 30       	cpi	r18, 0x01	; 1
    1ec8:	c9 f5       	brne	.+114    	; 0x1f3c <vTaskPriorityDisinheritAfterTimeout+0x96>
    1eca:	96 8b       	std	Z+22, r25	; 0x16
    1ecc:	24 85       	ldd	r18, Z+12	; 0x0c
    1ece:	35 85       	ldd	r19, Z+13	; 0x0d
    1ed0:	33 23       	and	r19, r19
    1ed2:	34 f0       	brlt	.+12     	; 0x1ee0 <vTaskPriorityDisinheritAfterTimeout+0x3a>
    1ed4:	24 e0       	ldi	r18, 0x04	; 4
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	29 1b       	sub	r18, r25
    1eda:	31 09       	sbc	r19, r1
    1edc:	35 87       	std	Z+13, r19	; 0x0d
    1ede:	24 87       	std	Z+12, r18	; 0x0c
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	9c 01       	movw	r18, r24
    1ee4:	22 0f       	add	r18, r18
    1ee6:	33 1f       	adc	r19, r19
    1ee8:	22 0f       	add	r18, r18
    1eea:	33 1f       	adc	r19, r19
    1eec:	22 0f       	add	r18, r18
    1eee:	33 1f       	adc	r19, r19
    1ef0:	82 0f       	add	r24, r18
    1ef2:	93 1f       	adc	r25, r19
    1ef4:	86 55       	subi	r24, 0x56	; 86
    1ef6:	99 4f       	sbci	r25, 0xF9	; 249
    1ef8:	22 85       	ldd	r18, Z+10	; 0x0a
    1efa:	33 85       	ldd	r19, Z+11	; 0x0b
    1efc:	28 17       	cp	r18, r24
    1efe:	39 07       	cpc	r19, r25
    1f00:	e9 f4       	brne	.+58     	; 0x1f3c <vTaskPriorityDisinheritAfterTimeout+0x96>
    1f02:	ef 01       	movw	r28, r30
    1f04:	8f 01       	movw	r16, r30
    1f06:	0e 5f       	subi	r16, 0xFE	; 254
    1f08:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0a:	c8 01       	movw	r24, r16
    1f0c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    1f10:	8e 89       	ldd	r24, Y+22	; 0x16
    1f12:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <uxTopReadyPriority>
    1f16:	98 17       	cp	r25, r24
    1f18:	10 f4       	brcc	.+4      	; 0x1f1e <vTaskPriorityDisinheritAfterTimeout+0x78>
    1f1a:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <uxTopReadyPriority>
    1f1e:	90 e0       	ldi	r25, 0x00	; 0
    1f20:	9c 01       	movw	r18, r24
    1f22:	22 0f       	add	r18, r18
    1f24:	33 1f       	adc	r19, r19
    1f26:	22 0f       	add	r18, r18
    1f28:	33 1f       	adc	r19, r19
    1f2a:	22 0f       	add	r18, r18
    1f2c:	33 1f       	adc	r19, r19
    1f2e:	82 0f       	add	r24, r18
    1f30:	93 1f       	adc	r25, r19
    1f32:	b8 01       	movw	r22, r16
    1f34:	86 55       	subi	r24, 0x56	; 86
    1f36:	99 4f       	sbci	r25, 0xF9	; 249
    1f38:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	08 95       	ret

00001f46 <pvTaskIncrementMutexHeldCount>:
    1f46:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1f4a:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1f4e:	89 2b       	or	r24, r25
    1f50:	39 f0       	breq	.+14     	; 0x1f60 <pvTaskIncrementMutexHeldCount+0x1a>
    1f52:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1f56:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1f5a:	84 a1       	ldd	r24, Z+36	; 0x24
    1f5c:	8f 5f       	subi	r24, 0xFF	; 255
    1f5e:	84 a3       	std	Z+36, r24	; 0x24
    1f60:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1f64:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1f68:	08 95       	ret

00001f6a <xTaskNotifyWait>:
    1f6a:	4f 92       	push	r4
    1f6c:	5f 92       	push	r5
    1f6e:	6f 92       	push	r6
    1f70:	7f 92       	push	r7
    1f72:	8f 92       	push	r8
    1f74:	9f 92       	push	r9
    1f76:	af 92       	push	r10
    1f78:	bf 92       	push	r11
    1f7a:	ef 92       	push	r14
    1f7c:	ff 92       	push	r15
    1f7e:	0f 93       	push	r16
    1f80:	1f 93       	push	r17
    1f82:	49 01       	movw	r8, r18
    1f84:	5a 01       	movw	r10, r20
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	0f 92       	push	r0
    1f8c:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1f90:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1f94:	23 a5       	ldd	r18, Z+43	; 0x2b
    1f96:	22 30       	cpi	r18, 0x02	; 2
    1f98:	21 f1       	breq	.+72     	; 0x1fe2 <xTaskNotifyWait+0x78>
    1f9a:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1f9e:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1fa2:	47 a0       	ldd	r4, Z+39	; 0x27
    1fa4:	50 a4       	ldd	r5, Z+40	; 0x28
    1fa6:	61 a4       	ldd	r6, Z+41	; 0x29
    1fa8:	72 a4       	ldd	r7, Z+42	; 0x2a
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	80 95       	com	r24
    1fb0:	90 95       	com	r25
    1fb2:	a0 95       	com	r26
    1fb4:	b0 95       	com	r27
    1fb6:	84 21       	and	r24, r4
    1fb8:	95 21       	and	r25, r5
    1fba:	a6 21       	and	r26, r6
    1fbc:	b7 21       	and	r27, r7
    1fbe:	87 a3       	std	Z+39, r24	; 0x27
    1fc0:	90 a7       	std	Z+40, r25	; 0x28
    1fc2:	a1 a7       	std	Z+41, r26	; 0x29
    1fc4:	b2 a7       	std	Z+42, r27	; 0x2a
    1fc6:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1fca:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	83 a7       	std	Z+43, r24	; 0x2b
    1fd2:	e1 14       	cp	r14, r1
    1fd4:	f1 04       	cpc	r15, r1
    1fd6:	29 f0       	breq	.+10     	; 0x1fe2 <xTaskNotifyWait+0x78>
    1fd8:	61 e0       	ldi	r22, 0x01	; 1
    1fda:	c7 01       	movw	r24, r14
    1fdc:	5f da       	rcall	.-2882   	; 0x149c <prvAddCurrentTaskToDelayedList>
    1fde:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    1fe2:	0f 90       	pop	r0
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	0f b6       	in	r0, 0x3f	; 63
    1fe8:	f8 94       	cli
    1fea:	0f 92       	push	r0
    1fec:	01 15       	cp	r16, r1
    1fee:	11 05       	cpc	r17, r1
    1ff0:	69 f0       	breq	.+26     	; 0x200c <xTaskNotifyWait+0xa2>
    1ff2:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    1ff6:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    1ffa:	87 a1       	ldd	r24, Z+39	; 0x27
    1ffc:	90 a5       	ldd	r25, Z+40	; 0x28
    1ffe:	a1 a5       	ldd	r26, Z+41	; 0x29
    2000:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2002:	f8 01       	movw	r30, r16
    2004:	80 83       	st	Z, r24
    2006:	91 83       	std	Z+1, r25	; 0x01
    2008:	a2 83       	std	Z+2, r26	; 0x02
    200a:	b3 83       	std	Z+3, r27	; 0x03
    200c:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    2010:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    2014:	83 a5       	ldd	r24, Z+43	; 0x2b
    2016:	82 30       	cpi	r24, 0x02	; 2
    2018:	b1 f4       	brne	.+44     	; 0x2046 <xTaskNotifyWait+0xdc>
    201a:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    201e:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    2022:	87 a1       	ldd	r24, Z+39	; 0x27
    2024:	90 a5       	ldd	r25, Z+40	; 0x28
    2026:	a1 a5       	ldd	r26, Z+41	; 0x29
    2028:	b2 a5       	ldd	r27, Z+42	; 0x2a
    202a:	80 94       	com	r8
    202c:	90 94       	com	r9
    202e:	a0 94       	com	r10
    2030:	b0 94       	com	r11
    2032:	88 22       	and	r8, r24
    2034:	99 22       	and	r9, r25
    2036:	aa 22       	and	r10, r26
    2038:	bb 22       	and	r11, r27
    203a:	87 a2       	std	Z+39, r8	; 0x27
    203c:	90 a6       	std	Z+40, r9	; 0x28
    203e:	a1 a6       	std	Z+41, r10	; 0x29
    2040:	b2 a6       	std	Z+42, r11	; 0x2a
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	01 c0       	rjmp	.+2      	; 0x2048 <xTaskNotifyWait+0xde>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    204c:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    2050:	13 a6       	std	Z+43, r1	; 0x2b
    2052:	0f 90       	pop	r0
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	1f 91       	pop	r17
    2058:	0f 91       	pop	r16
    205a:	ff 90       	pop	r15
    205c:	ef 90       	pop	r14
    205e:	bf 90       	pop	r11
    2060:	af 90       	pop	r10
    2062:	9f 90       	pop	r9
    2064:	8f 90       	pop	r8
    2066:	7f 90       	pop	r7
    2068:	6f 90       	pop	r6
    206a:	5f 90       	pop	r5
    206c:	4f 90       	pop	r4
    206e:	08 95       	ret

00002070 <xTaskGenericNotify>:
    2070:	0f 93       	push	r16
    2072:	1f 93       	push	r17
    2074:	cf 93       	push	r28
    2076:	df 93       	push	r29
    2078:	fc 01       	movw	r30, r24
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	0f 92       	push	r0
    2080:	01 15       	cp	r16, r1
    2082:	11 05       	cpc	r17, r1
    2084:	49 f0       	breq	.+18     	; 0x2098 <xTaskGenericNotify+0x28>
    2086:	87 a1       	ldd	r24, Z+39	; 0x27
    2088:	90 a5       	ldd	r25, Z+40	; 0x28
    208a:	a1 a5       	ldd	r26, Z+41	; 0x29
    208c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    208e:	e8 01       	movw	r28, r16
    2090:	88 83       	st	Y, r24
    2092:	99 83       	std	Y+1, r25	; 0x01
    2094:	aa 83       	std	Y+2, r26	; 0x02
    2096:	bb 83       	std	Y+3, r27	; 0x03
    2098:	83 a5       	ldd	r24, Z+43	; 0x2b
    209a:	92 e0       	ldi	r25, 0x02	; 2
    209c:	93 a7       	std	Z+43, r25	; 0x2b
    209e:	22 30       	cpi	r18, 0x02	; 2
    20a0:	b1 f0       	breq	.+44     	; 0x20ce <xTaskGenericNotify+0x5e>
    20a2:	18 f4       	brcc	.+6      	; 0x20aa <xTaskGenericNotify+0x3a>
    20a4:	21 30       	cpi	r18, 0x01	; 1
    20a6:	31 f0       	breq	.+12     	; 0x20b4 <xTaskGenericNotify+0x44>
    20a8:	2a c0       	rjmp	.+84     	; 0x20fe <xTaskGenericNotify+0x8e>
    20aa:	23 30       	cpi	r18, 0x03	; 3
    20ac:	e9 f0       	breq	.+58     	; 0x20e8 <xTaskGenericNotify+0x78>
    20ae:	24 30       	cpi	r18, 0x04	; 4
    20b0:	01 f1       	breq	.+64     	; 0x20f2 <xTaskGenericNotify+0x82>
    20b2:	25 c0       	rjmp	.+74     	; 0x20fe <xTaskGenericNotify+0x8e>
    20b4:	07 a1       	ldd	r16, Z+39	; 0x27
    20b6:	10 a5       	ldd	r17, Z+40	; 0x28
    20b8:	21 a5       	ldd	r18, Z+41	; 0x29
    20ba:	32 a5       	ldd	r19, Z+42	; 0x2a
    20bc:	40 2b       	or	r20, r16
    20be:	51 2b       	or	r21, r17
    20c0:	62 2b       	or	r22, r18
    20c2:	73 2b       	or	r23, r19
    20c4:	47 a3       	std	Z+39, r20	; 0x27
    20c6:	50 a7       	std	Z+40, r21	; 0x28
    20c8:	61 a7       	std	Z+41, r22	; 0x29
    20ca:	72 a7       	std	Z+42, r23	; 0x2a
    20cc:	18 c0       	rjmp	.+48     	; 0x20fe <xTaskGenericNotify+0x8e>
    20ce:	47 a1       	ldd	r20, Z+39	; 0x27
    20d0:	50 a5       	ldd	r21, Z+40	; 0x28
    20d2:	61 a5       	ldd	r22, Z+41	; 0x29
    20d4:	72 a5       	ldd	r23, Z+42	; 0x2a
    20d6:	4f 5f       	subi	r20, 0xFF	; 255
    20d8:	5f 4f       	sbci	r21, 0xFF	; 255
    20da:	6f 4f       	sbci	r22, 0xFF	; 255
    20dc:	7f 4f       	sbci	r23, 0xFF	; 255
    20de:	47 a3       	std	Z+39, r20	; 0x27
    20e0:	50 a7       	std	Z+40, r21	; 0x28
    20e2:	61 a7       	std	Z+41, r22	; 0x29
    20e4:	72 a7       	std	Z+42, r23	; 0x2a
    20e6:	0b c0       	rjmp	.+22     	; 0x20fe <xTaskGenericNotify+0x8e>
    20e8:	47 a3       	std	Z+39, r20	; 0x27
    20ea:	50 a7       	std	Z+40, r21	; 0x28
    20ec:	61 a7       	std	Z+41, r22	; 0x29
    20ee:	72 a7       	std	Z+42, r23	; 0x2a
    20f0:	06 c0       	rjmp	.+12     	; 0x20fe <xTaskGenericNotify+0x8e>
    20f2:	82 30       	cpi	r24, 0x02	; 2
    20f4:	79 f1       	breq	.+94     	; 0x2154 <xTaskGenericNotify+0xe4>
    20f6:	47 a3       	std	Z+39, r20	; 0x27
    20f8:	50 a7       	std	Z+40, r21	; 0x28
    20fa:	61 a7       	std	Z+41, r22	; 0x29
    20fc:	72 a7       	std	Z+42, r23	; 0x2a
    20fe:	81 30       	cpi	r24, 0x01	; 1
    2100:	59 f5       	brne	.+86     	; 0x2158 <xTaskGenericNotify+0xe8>
    2102:	ef 01       	movw	r28, r30
    2104:	8f 01       	movw	r16, r30
    2106:	0e 5f       	subi	r16, 0xFE	; 254
    2108:	1f 4f       	sbci	r17, 0xFF	; 255
    210a:	c8 01       	movw	r24, r16
    210c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    2110:	8e 89       	ldd	r24, Y+22	; 0x16
    2112:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <uxTopReadyPriority>
    2116:	98 17       	cp	r25, r24
    2118:	10 f4       	brcc	.+4      	; 0x211e <xTaskGenericNotify+0xae>
    211a:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <uxTopReadyPriority>
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9c 01       	movw	r18, r24
    2122:	22 0f       	add	r18, r18
    2124:	33 1f       	adc	r19, r19
    2126:	22 0f       	add	r18, r18
    2128:	33 1f       	adc	r19, r19
    212a:	22 0f       	add	r18, r18
    212c:	33 1f       	adc	r19, r19
    212e:	82 0f       	add	r24, r18
    2130:	93 1f       	adc	r25, r19
    2132:	b8 01       	movw	r22, r16
    2134:	86 55       	subi	r24, 0x56	; 86
    2136:	99 4f       	sbci	r25, 0xF9	; 249
    2138:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    213c:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    2140:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    2144:	9e 89       	ldd	r25, Y+22	; 0x16
    2146:	86 89       	ldd	r24, Z+22	; 0x16
    2148:	89 17       	cp	r24, r25
    214a:	40 f4       	brcc	.+16     	; 0x215c <xTaskGenericNotify+0xec>
    214c:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    2150:	81 e0       	ldi	r24, 0x01	; 1
    2152:	05 c0       	rjmp	.+10     	; 0x215e <xTaskGenericNotify+0xee>
    2154:	80 e0       	ldi	r24, 0x00	; 0
    2156:	03 c0       	rjmp	.+6      	; 0x215e <xTaskGenericNotify+0xee>
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	01 c0       	rjmp	.+2      	; 0x215e <xTaskGenericNotify+0xee>
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	0f 90       	pop	r0
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	1f 91       	pop	r17
    2168:	0f 91       	pop	r16
    216a:	08 95       	ret

0000216c <xTaskGenericNotifyFromISR>:
    216c:	ef 92       	push	r14
    216e:	ff 92       	push	r15
    2170:	0f 93       	push	r16
    2172:	1f 93       	push	r17
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	fc 01       	movw	r30, r24
    217a:	01 15       	cp	r16, r1
    217c:	11 05       	cpc	r17, r1
    217e:	49 f0       	breq	.+18     	; 0x2192 <xTaskGenericNotifyFromISR+0x26>
    2180:	87 a1       	ldd	r24, Z+39	; 0x27
    2182:	90 a5       	ldd	r25, Z+40	; 0x28
    2184:	a1 a5       	ldd	r26, Z+41	; 0x29
    2186:	b2 a5       	ldd	r27, Z+42	; 0x2a
    2188:	e8 01       	movw	r28, r16
    218a:	88 83       	st	Y, r24
    218c:	99 83       	std	Y+1, r25	; 0x01
    218e:	aa 83       	std	Y+2, r26	; 0x02
    2190:	bb 83       	std	Y+3, r27	; 0x03
    2192:	83 a5       	ldd	r24, Z+43	; 0x2b
    2194:	92 e0       	ldi	r25, 0x02	; 2
    2196:	93 a7       	std	Z+43, r25	; 0x2b
    2198:	22 30       	cpi	r18, 0x02	; 2
    219a:	b1 f0       	breq	.+44     	; 0x21c8 <xTaskGenericNotifyFromISR+0x5c>
    219c:	18 f4       	brcc	.+6      	; 0x21a4 <xTaskGenericNotifyFromISR+0x38>
    219e:	21 30       	cpi	r18, 0x01	; 1
    21a0:	31 f0       	breq	.+12     	; 0x21ae <xTaskGenericNotifyFromISR+0x42>
    21a2:	2b c0       	rjmp	.+86     	; 0x21fa <xTaskGenericNotifyFromISR+0x8e>
    21a4:	23 30       	cpi	r18, 0x03	; 3
    21a6:	e9 f0       	breq	.+58     	; 0x21e2 <xTaskGenericNotifyFromISR+0x76>
    21a8:	24 30       	cpi	r18, 0x04	; 4
    21aa:	01 f1       	breq	.+64     	; 0x21ec <xTaskGenericNotifyFromISR+0x80>
    21ac:	26 c0       	rjmp	.+76     	; 0x21fa <xTaskGenericNotifyFromISR+0x8e>
    21ae:	07 a1       	ldd	r16, Z+39	; 0x27
    21b0:	10 a5       	ldd	r17, Z+40	; 0x28
    21b2:	21 a5       	ldd	r18, Z+41	; 0x29
    21b4:	32 a5       	ldd	r19, Z+42	; 0x2a
    21b6:	40 2b       	or	r20, r16
    21b8:	51 2b       	or	r21, r17
    21ba:	62 2b       	or	r22, r18
    21bc:	73 2b       	or	r23, r19
    21be:	47 a3       	std	Z+39, r20	; 0x27
    21c0:	50 a7       	std	Z+40, r21	; 0x28
    21c2:	61 a7       	std	Z+41, r22	; 0x29
    21c4:	72 a7       	std	Z+42, r23	; 0x2a
    21c6:	19 c0       	rjmp	.+50     	; 0x21fa <xTaskGenericNotifyFromISR+0x8e>
    21c8:	47 a1       	ldd	r20, Z+39	; 0x27
    21ca:	50 a5       	ldd	r21, Z+40	; 0x28
    21cc:	61 a5       	ldd	r22, Z+41	; 0x29
    21ce:	72 a5       	ldd	r23, Z+42	; 0x2a
    21d0:	4f 5f       	subi	r20, 0xFF	; 255
    21d2:	5f 4f       	sbci	r21, 0xFF	; 255
    21d4:	6f 4f       	sbci	r22, 0xFF	; 255
    21d6:	7f 4f       	sbci	r23, 0xFF	; 255
    21d8:	47 a3       	std	Z+39, r20	; 0x27
    21da:	50 a7       	std	Z+40, r21	; 0x28
    21dc:	61 a7       	std	Z+41, r22	; 0x29
    21de:	72 a7       	std	Z+42, r23	; 0x2a
    21e0:	0c c0       	rjmp	.+24     	; 0x21fa <xTaskGenericNotifyFromISR+0x8e>
    21e2:	47 a3       	std	Z+39, r20	; 0x27
    21e4:	50 a7       	std	Z+40, r21	; 0x28
    21e6:	61 a7       	std	Z+41, r22	; 0x29
    21e8:	72 a7       	std	Z+42, r23	; 0x2a
    21ea:	07 c0       	rjmp	.+14     	; 0x21fa <xTaskGenericNotifyFromISR+0x8e>
    21ec:	82 30       	cpi	r24, 0x02	; 2
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <xTaskGenericNotifyFromISR+0x86>
    21f0:	41 c0       	rjmp	.+130    	; 0x2274 <__stack+0x75>
    21f2:	47 a3       	std	Z+39, r20	; 0x27
    21f4:	50 a7       	std	Z+40, r21	; 0x28
    21f6:	61 a7       	std	Z+41, r22	; 0x29
    21f8:	72 a7       	std	Z+42, r23	; 0x2a
    21fa:	81 30       	cpi	r24, 0x01	; 1
    21fc:	e9 f5       	brne	.+122    	; 0x2278 <__stack+0x79>
    21fe:	ef 01       	movw	r28, r30
    2200:	80 91 6a 06 	lds	r24, 0x066A	; 0x80066a <__data_end>
    2204:	81 11       	cpse	r24, r1
    2206:	1d c0       	rjmp	.+58     	; 0x2242 <__stack+0x43>
    2208:	8f 01       	movw	r16, r30
    220a:	0e 5f       	subi	r16, 0xFE	; 254
    220c:	1f 4f       	sbci	r17, 0xFF	; 255
    220e:	c8 01       	movw	r24, r16
    2210:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
    2214:	8e 89       	ldd	r24, Y+22	; 0x16
    2216:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <uxTopReadyPriority>
    221a:	98 17       	cp	r25, r24
    221c:	10 f4       	brcc	.+4      	; 0x2222 <__stack+0x23>
    221e:	80 93 74 06 	sts	0x0674, r24	; 0x800674 <uxTopReadyPriority>
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9c 01       	movw	r18, r24
    2226:	22 0f       	add	r18, r18
    2228:	33 1f       	adc	r19, r19
    222a:	22 0f       	add	r18, r18
    222c:	33 1f       	adc	r19, r19
    222e:	22 0f       	add	r18, r18
    2230:	33 1f       	adc	r19, r19
    2232:	82 0f       	add	r24, r18
    2234:	93 1f       	adc	r25, r19
    2236:	b8 01       	movw	r22, r16
    2238:	86 55       	subi	r24, 0x56	; 86
    223a:	99 4f       	sbci	r25, 0xF9	; 249
    223c:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    2240:	07 c0       	rjmp	.+14     	; 0x2250 <__stack+0x51>
    2242:	bf 01       	movw	r22, r30
    2244:	64 5f       	subi	r22, 0xF4	; 244
    2246:	7f 4f       	sbci	r23, 0xFF	; 255
    2248:	8b e8       	ldi	r24, 0x8B	; 139
    224a:	96 e0       	ldi	r25, 0x06	; 6
    224c:	0e 94 89 02 	call	0x512	; 0x512 <vListInsertEnd>
    2250:	e0 91 ce 06 	lds	r30, 0x06CE	; 0x8006ce <pxCurrentTCB>
    2254:	f0 91 cf 06 	lds	r31, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>
    2258:	9e 89       	ldd	r25, Y+22	; 0x16
    225a:	86 89       	ldd	r24, Z+22	; 0x16
    225c:	89 17       	cp	r24, r25
    225e:	70 f4       	brcc	.+28     	; 0x227c <__stack+0x7d>
    2260:	e1 14       	cp	r14, r1
    2262:	f1 04       	cpc	r15, r1
    2264:	19 f0       	breq	.+6      	; 0x226c <__stack+0x6d>
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	f7 01       	movw	r30, r14
    226a:	80 83       	st	Z, r24
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 93 71 06 	sts	0x0671, r24	; 0x800671 <xYieldPending>
    2272:	05 c0       	rjmp	.+10     	; 0x227e <__stack+0x7f>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	03 c0       	rjmp	.+6      	; 0x227e <__stack+0x7f>
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	01 c0       	rjmp	.+2      	; 0x227e <__stack+0x7f>
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	df 91       	pop	r29
    2280:	cf 91       	pop	r28
    2282:	1f 91       	pop	r17
    2284:	0f 91       	pop	r16
    2286:	ff 90       	pop	r15
    2288:	ef 90       	pop	r14
    228a:	08 95       	ret

0000228c <xTaskNotifyStateClear>:
    TCB_t *pxTCB;
    BaseType_t xReturn;

        /* If null is passed in here then it is the calling task that is having
        its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    228c:	00 97       	sbiw	r24, 0x00	; 0
    228e:	21 f4       	brne	.+8      	; 0x2298 <xTaskNotifyStateClear+0xc>
    2290:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <pxCurrentTCB>
    2294:	90 91 cf 06 	lds	r25, 0x06CF	; 0x8006cf <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	f8 94       	cli
    229c:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
    229e:	fc 01       	movw	r30, r24
    22a0:	23 a5       	ldd	r18, Z+43	; 0x2b
    22a2:	22 30       	cpi	r18, 0x02	; 2
    22a4:	19 f4       	brne	.+6      	; 0x22ac <xTaskNotifyStateClear+0x20>
            {
                pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
    22a6:	13 a6       	std	Z+43, r1	; 0x2b
                xReturn = pdPASS;
    22a8:	81 e0       	ldi	r24, 0x01	; 1
    22aa:	01 c0       	rjmp	.+2      	; 0x22ae <xTaskNotifyStateClear+0x22>
            }
            else
            {
                xReturn = pdFAIL;
    22ac:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    22ae:	0f 90       	pop	r0
    22b0:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    22b2:	08 95       	ret

000022b4 <prvInsertTimerInActiveList>:
    return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
    22b4:	fc 01       	movw	r30, r24
BaseType_t xProcessTimerNow = pdFALSE;

    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
    22b6:	73 83       	std	Z+3, r23	; 0x03
    22b8:	62 83       	std	Z+2, r22	; 0x02
    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    22ba:	91 87       	std	Z+9, r25	; 0x09
    22bc:	80 87       	std	Z+8, r24	; 0x08

    if( xNextExpiryTime <= xTimeNow )
    22be:	46 17       	cp	r20, r22
    22c0:	57 07       	cpc	r21, r23
    22c2:	90 f0       	brcs	.+36     	; 0x22e8 <prvInsertTimerInActiveList+0x34>
    {
        /* Has the expiry time elapsed between the command to start/reset a
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    22c4:	42 1b       	sub	r20, r18
    22c6:	53 0b       	sbc	r21, r19
    22c8:	84 85       	ldd	r24, Z+12	; 0x0c
    22ca:	95 85       	ldd	r25, Z+13	; 0x0d
    22cc:	48 17       	cp	r20, r24
    22ce:	59 07       	cpc	r21, r25
    22d0:	e0 f4       	brcc	.+56     	; 0x230a <prvInsertTimerInActiveList+0x56>
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
    22d2:	bf 01       	movw	r22, r30
    22d4:	6e 5f       	subi	r22, 0xFE	; 254
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255
    22d8:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <pxOverflowTimerList>
    22dc:	90 91 d7 06 	lds	r25, 0x06D7	; 0x8006d7 <pxOverflowTimerList+0x1>
    22e0:	0e 94 aa 02 	call	0x554	; 0x554 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	08 95       	ret
            vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
        }
    }
    else
    {
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
    22e8:	42 17       	cp	r20, r18
    22ea:	53 07       	cpc	r21, r19
    22ec:	18 f4       	brcc	.+6      	; 0x22f4 <prvInsertTimerInActiveList+0x40>
    22ee:	62 17       	cp	r22, r18
    22f0:	73 07       	cpc	r23, r19
    22f2:	68 f4       	brcc	.+26     	; 0x230e <prvInsertTimerInActiveList+0x5a>
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
        }
        else
        {
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    22f4:	bf 01       	movw	r22, r30
    22f6:	6e 5f       	subi	r22, 0xFE	; 254
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <pxCurrentTimerList>
    22fe:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <pxCurrentTimerList+0x1>
    2302:	0e 94 aa 02 	call	0x554	; 0x554 <vListInsert>
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
BaseType_t xProcessTimerNow = pdFALSE;
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	08 95       	ret
        timer was issued, and the time the command was processed? */
        if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
        {
            /* The time between a command being issued and the command being
            processed actually exceeds the timers period.  */
            xProcessTimerNow = pdTRUE;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	08 95       	ret
        if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
        {
            /* If, since the command was issued, the tick count has overflowed
            but the expiry time has not, then the timer must have already passed
            its expiry time and should be processed immediately. */
            xProcessTimerNow = pdTRUE;
    230e:	81 e0       	ldi	r24, 0x01	; 1
            vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
        }
    }

    return xProcessTimerNow;
}
    2310:	08 95       	ret

00002312 <prvCheckForValidListAndQueue>:
static void prvCheckForValidListAndQueue( void )
{
    /* Check that the list from which active timers are referenced, and the
    queue used to communicate with the timer service, have been
    initialised. */
    taskENTER_CRITICAL();
    2312:	0f b6       	in	r0, 0x3f	; 63
    2314:	f8 94       	cli
    2316:	0f 92       	push	r0
    {
        if( xTimerQueue == NULL )
    2318:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xTimerQueue>
    231c:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xTimerQueue+0x1>
    2320:	89 2b       	or	r24, r25
    2322:	e9 f4       	brne	.+58     	; 0x235e <prvCheckForValidListAndQueue+0x4c>
        {
            vListInitialise( &xActiveTimerList1 );
    2324:	83 ee       	ldi	r24, 0xE3	; 227
    2326:	96 e0       	ldi	r25, 0x06	; 6
    2328:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
            vListInitialise( &xActiveTimerList2 );
    232c:	8a ed       	ldi	r24, 0xDA	; 218
    232e:	96 e0       	ldi	r25, 0x06	; 6
    2330:	0e 94 77 02 	call	0x4ee	; 0x4ee <vListInitialise>
            pxCurrentTimerList = &xActiveTimerList1;
    2334:	83 ee       	ldi	r24, 0xE3	; 227
    2336:	96 e0       	ldi	r25, 0x06	; 6
    2338:	90 93 d9 06 	sts	0x06D9, r25	; 0x8006d9 <pxCurrentTimerList+0x1>
    233c:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <pxCurrentTimerList>
            pxOverflowTimerList = &xActiveTimerList2;
    2340:	8a ed       	ldi	r24, 0xDA	; 218
    2342:	96 e0       	ldi	r25, 0x06	; 6
    2344:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <pxOverflowTimerList+0x1>
    2348:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <pxOverflowTimerList>

                xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
            }
            #else
            {
                xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
    234c:	40 e0       	ldi	r20, 0x00	; 0
    234e:	65 e0       	ldi	r22, 0x05	; 5
    2350:	8a e0       	ldi	r24, 0x0A	; 10
    2352:	0e 94 8b 05 	call	0xb16	; 0xb16 <xQueueGenericCreate>
    2356:	90 93 d5 06 	sts	0x06D5, r25	; 0x8006d5 <xTimerQueue+0x1>
    235a:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <xTimerQueue>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
    235e:	0f 90       	pop	r0
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	08 95       	ret

00002364 <xTimerCreateTimerTask>:
                                    TimerCallbackFunction_t pxCallbackFunction,
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
    2364:	ef 92       	push	r14
    2366:	ff 92       	push	r15
    2368:	0f 93       	push	r16

    /* This function is called when the scheduler is started if
    configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
    timer service task has been created/initialised.  If timers have already
    been created then the initialisation will already have been performed. */
    prvCheckForValidListAndQueue();
    236a:	d3 df       	rcall	.-90     	; 0x2312 <prvCheckForValidListAndQueue>

    if( xTimerQueue != NULL )
    236c:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xTimerQueue>
    2370:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xTimerQueue+0x1>
    2374:	89 2b       	or	r24, r25
    2376:	89 f0       	breq	.+34     	; 0x239a <xTimerCreateTimerTask+0x36>
                xReturn = pdPASS;
            }
        }
        #else
        {
            xReturn = xTaskCreate(    prvTimerTask,
    2378:	0f 2e       	mov	r0, r31
    237a:	f2 ed       	ldi	r31, 0xD2	; 210
    237c:	ef 2e       	mov	r14, r31
    237e:	f6 e0       	ldi	r31, 0x06	; 6
    2380:	ff 2e       	mov	r15, r31
    2382:	f0 2d       	mov	r31, r0
    2384:	03 e0       	ldi	r16, 0x03	; 3
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	45 e5       	ldi	r20, 0x55	; 85
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	62 e4       	ldi	r22, 0x42	; 66
    2390:	72 e0       	ldi	r23, 0x02	; 2
    2392:	83 e0       	ldi	r24, 0x03	; 3
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	d6 d8       	rcall	.-3668   	; 0x1544 <xTaskCreate>
    2398:	01 c0       	rjmp	.+2      	; 0x239c <xTimerCreateTimerTask+0x38>
                                    Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
BaseType_t xReturn = pdFAIL;
    239a:	80 e0       	ldi	r24, 0x00	; 0
        mtCOVERAGE_TEST_MARKER();
    }

    configASSERT( xReturn );
    return xReturn;
}
    239c:	0f 91       	pop	r16
    239e:	ff 90       	pop	r15
    23a0:	ef 90       	pop	r14
    23a2:	08 95       	ret

000023a4 <xTimerCreate>:
    TimerHandle_t xTimerCreate( const char * const pcTimerName,            /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                const TickType_t xTimerPeriodInTicks,
                                const UBaseType_t uxAutoReload,
                                void * const pvTimerID,
                                TimerCallbackFunction_t pxCallbackFunction )
    {
    23a4:	8f 92       	push	r8
    23a6:	9f 92       	push	r9
    23a8:	af 92       	push	r10
    23aa:	bf 92       	push	r11
    23ac:	cf 92       	push	r12
    23ae:	df 92       	push	r13
    23b0:	ff 92       	push	r15
    23b2:	0f 93       	push	r16
    23b4:	1f 93       	push	r17
    23b6:	cf 93       	push	r28
    23b8:	df 93       	push	r29
    23ba:	4c 01       	movw	r8, r24
    23bc:	5b 01       	movw	r10, r22
    23be:	f4 2e       	mov	r15, r20
    23c0:	69 01       	movw	r12, r18
    Timer_t *pxNewTimer;

        pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
    23c2:	84 e1       	ldi	r24, 0x14	; 20
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	0e 94 55 02 	call	0x4aa	; 0x4aa <pvPortMalloc>
    23ca:	ec 01       	movw	r28, r24

        if( pxNewTimer != NULL )
    23cc:	89 2b       	or	r24, r25
    23ce:	99 f0       	breq	.+38     	; 0x23f6 <xTimerCreate+0x52>
        {
            /* Status is thus far zero as the timer is not created statically
            and has not been started.  The autoreload bit may get set in
            prvInitialiseNewTimer. */
            pxNewTimer->ucStatus = 0x00;
    23d0:	1b 8a       	std	Y+19, r1	; 0x13

    if( pxNewTimer != NULL )
    {
        /* Ensure the infrastructure used by the timer service task has been
        created/initialised. */
        prvCheckForValidListAndQueue();
    23d2:	9f df       	rcall	.-194    	; 0x2312 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
        parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
    23d4:	99 82       	std	Y+1, r9	; 0x01
    23d6:	88 82       	st	Y, r8
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
    23d8:	bd 86       	std	Y+13, r11	; 0x0d
    23da:	ac 86       	std	Y+12, r10	; 0x0c
        pxNewTimer->pvTimerID = pvTimerID;
    23dc:	df 86       	std	Y+15, r13	; 0x0f
    23de:	ce 86       	std	Y+14, r12	; 0x0e
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
    23e0:	19 8b       	std	Y+17, r17	; 0x11
    23e2:	08 8b       	std	Y+16, r16	; 0x10
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
    23e4:	ce 01       	movw	r24, r28
    23e6:	02 96       	adiw	r24, 0x02	; 2
    23e8:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialiseItem>
        if( uxAutoReload != pdFALSE )
    23ec:	ff 20       	and	r15, r15
    23ee:	19 f0       	breq	.+6      	; 0x23f6 <xTimerCreate+0x52>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
    23f0:	8b 89       	ldd	r24, Y+19	; 0x13
    23f2:	84 60       	ori	r24, 0x04	; 4
    23f4:	8b 8b       	std	Y+19, r24	; 0x13
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    23f6:	ce 01       	movw	r24, r28
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	1f 91       	pop	r17
    23fe:	0f 91       	pop	r16
    2400:	ff 90       	pop	r15
    2402:	df 90       	pop	r13
    2404:	cf 90       	pop	r12
    2406:	bf 90       	pop	r11
    2408:	af 90       	pop	r10
    240a:	9f 90       	pop	r9
    240c:	8f 90       	pop	r8
    240e:	08 95       	ret

00002410 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2410:	0f 93       	push	r16
    2412:	1f 93       	push	r17
    2414:	cf 93       	push	r28
    2416:	df 93       	push	r29
    2418:	00 d0       	rcall	.+0      	; 0x241a <xTimerGenericCommand+0xa>
    241a:	1f 92       	push	r1
    241c:	1f 92       	push	r1
    241e:	cd b7       	in	r28, 0x3d	; 61
    2420:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2422:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <xTimerQueue>
    2426:	f0 91 d5 06 	lds	r31, 0x06D5	; 0x8006d5 <xTimerQueue+0x1>
    242a:	30 97       	sbiw	r30, 0x00	; 0
    242c:	69 f1       	breq	.+90     	; 0x2488 <xTimerGenericCommand+0x78>
    242e:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2430:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2432:	5b 83       	std	Y+3, r21	; 0x03
    2434:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2436:	9d 83       	std	Y+5, r25	; 0x05
    2438:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    243a:	66 30       	cpi	r22, 0x06	; 6
    243c:	e4 f4       	brge	.+56     	; 0x2476 <xTimerGenericCommand+0x66>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    243e:	73 dc       	rcall	.-1818   	; 0x1d26 <xTaskGetSchedulerState>
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	61 f4       	brne	.+24     	; 0x245c <xTimerGenericCommand+0x4c>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	a8 01       	movw	r20, r16
    2448:	be 01       	movw	r22, r28
    244a:	6f 5f       	subi	r22, 0xFF	; 255
    244c:	7f 4f       	sbci	r23, 0xFF	; 255
    244e:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xTimerQueue>
    2452:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xTimerQueue+0x1>
    2456:	0e 94 b9 05 	call	0xb72	; 0xb72 <xQueueGenericSend>
    245a:	17 c0       	rjmp	.+46     	; 0x248a <xTimerGenericCommand+0x7a>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	40 e0       	ldi	r20, 0x00	; 0
    2460:	50 e0       	ldi	r21, 0x00	; 0
    2462:	be 01       	movw	r22, r28
    2464:	6f 5f       	subi	r22, 0xFF	; 255
    2466:	7f 4f       	sbci	r23, 0xFF	; 255
    2468:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xTimerQueue>
    246c:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xTimerQueue+0x1>
    2470:	0e 94 b9 05 	call	0xb72	; 0xb72 <xQueueGenericSend>
    2474:	0a c0       	rjmp	.+20     	; 0x248a <xTimerGenericCommand+0x7a>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	ad 01       	movw	r20, r26
    247a:	be 01       	movw	r22, r28
    247c:	6f 5f       	subi	r22, 0xFF	; 255
    247e:	7f 4f       	sbci	r23, 0xFF	; 255
    2480:	cf 01       	movw	r24, r30
    2482:	0e 94 66 06 	call	0xccc	; 0xccc <xQueueGenericSendFromISR>
    2486:	01 c0       	rjmp	.+2      	; 0x248a <xTimerGenericCommand+0x7a>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2488:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	df 91       	pop	r29
    2496:	cf 91       	pop	r28
    2498:	1f 91       	pop	r17
    249a:	0f 91       	pop	r16
    249c:	08 95       	ret

0000249e <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    249e:	af 92       	push	r10
    24a0:	bf 92       	push	r11
    24a2:	cf 92       	push	r12
    24a4:	df 92       	push	r13
    24a6:	ef 92       	push	r14
    24a8:	ff 92       	push	r15
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    24b4:	9e d9       	rcall	.-3268   	; 0x17f2 <xTaskGetTickCount>
    24b6:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    24b8:	80 91 d0 06 	lds	r24, 0x06D0	; 0x8006d0 <xLastTime.2432>
    24bc:	90 91 d1 06 	lds	r25, 0x06D1	; 0x8006d1 <xLastTime.2432+0x1>
    24c0:	e8 16       	cp	r14, r24
    24c2:	f9 06       	cpc	r15, r25
    24c4:	08 f0       	brcs	.+2      	; 0x24c8 <prvSampleTimeNow+0x2a>
    24c6:	47 c0       	rjmp	.+142    	; 0x2556 <prvSampleTimeNow+0xb8>
    24c8:	2f c0       	rjmp	.+94     	; 0x2528 <prvSampleTimeNow+0x8a>
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    24ca:	05 80       	ldd	r0, Z+5	; 0x05
    24cc:	f6 81       	ldd	r31, Z+6	; 0x06
    24ce:	e0 2d       	mov	r30, r0
    24d0:	a0 80       	ld	r10, Z
    24d2:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    24d4:	c6 81       	ldd	r28, Z+6	; 0x06
    24d6:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    24d8:	8e 01       	movw	r16, r28
    24da:	0e 5f       	subi	r16, 0xFE	; 254
    24dc:	1f 4f       	sbci	r17, 0xFF	; 255
    24de:	c8 01       	movw	r24, r16
    24e0:	0e 94 db 02 	call	0x5b6	; 0x5b6 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    24e4:	e8 89       	ldd	r30, Y+16	; 0x10
    24e6:	f9 89       	ldd	r31, Y+17	; 0x11
    24e8:	ce 01       	movw	r24, r28
    24ea:	19 95       	eicall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    24ec:	8b 89       	ldd	r24, Y+19	; 0x13
    24ee:	82 ff       	sbrs	r24, 2
    24f0:	1b c0       	rjmp	.+54     	; 0x2528 <prvSampleTimeNow+0x8a>
            the timer going into the same timer list then it has already expired
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    24f2:	8c 85       	ldd	r24, Y+12	; 0x0c
    24f4:	9d 85       	ldd	r25, Y+13	; 0x0d
    24f6:	8a 0d       	add	r24, r10
    24f8:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    24fa:	a8 16       	cp	r10, r24
    24fc:	b9 06       	cpc	r11, r25
    24fe:	60 f4       	brcc	.+24     	; 0x2518 <prvSampleTimeNow+0x7a>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2500:	9b 83       	std	Y+3, r25	; 0x03
    2502:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2504:	d9 87       	std	Y+9, r29	; 0x09
    2506:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2508:	b8 01       	movw	r22, r16
    250a:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <pxCurrentTimerList>
    250e:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <pxCurrentTimerList+0x1>
    2512:	0e 94 aa 02 	call	0x554	; 0x554 <vListInsert>
    2516:	08 c0       	rjmp	.+16     	; 0x2528 <prvSampleTimeNow+0x8a>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2518:	00 e0       	ldi	r16, 0x00	; 0
    251a:	10 e0       	ldi	r17, 0x00	; 0
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	a5 01       	movw	r20, r10
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	ce 01       	movw	r24, r28
    2526:	74 df       	rcall	.-280    	; 0x2410 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expired and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2528:	e0 91 d8 06 	lds	r30, 0x06D8	; 0x8006d8 <pxCurrentTimerList>
    252c:	f0 91 d9 06 	lds	r31, 0x06D9	; 0x8006d9 <pxCurrentTimerList+0x1>
    2530:	80 81       	ld	r24, Z
    2532:	81 11       	cpse	r24, r1
    2534:	ca cf       	rjmp	.-108    	; 0x24ca <prvSampleTimeNow+0x2c>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2536:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <pxOverflowTimerList>
    253a:	90 91 d7 06 	lds	r25, 0x06D7	; 0x8006d7 <pxOverflowTimerList+0x1>
    253e:	90 93 d9 06 	sts	0x06D9, r25	; 0x8006d9 <pxCurrentTimerList+0x1>
    2542:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2546:	f0 93 d7 06 	sts	0x06D7, r31	; 0x8006d7 <pxOverflowTimerList+0x1>
    254a:	e0 93 d6 06 	sts	0x06D6, r30	; 0x8006d6 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	f6 01       	movw	r30, r12
    2552:	80 83       	st	Z, r24
    2554:	02 c0       	rjmp	.+4      	; 0x255a <prvSampleTimeNow+0xbc>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2556:	f6 01       	movw	r30, r12
    2558:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    255a:	f0 92 d1 06 	sts	0x06D1, r15	; 0x8006d1 <xLastTime.2432+0x1>
    255e:	e0 92 d0 06 	sts	0x06D0, r14	; 0x8006d0 <xLastTime.2432>

    return xTimeNow;
}
    2562:	c7 01       	movw	r24, r14
    2564:	df 91       	pop	r29
    2566:	cf 91       	pop	r28
    2568:	1f 91       	pop	r17
    256a:	0f 91       	pop	r16
    256c:	ff 90       	pop	r15
    256e:	ef 90       	pop	r14
    2570:	df 90       	pop	r13
    2572:	cf 90       	pop	r12
    2574:	bf 90       	pop	r11
    2576:	af 90       	pop	r10
    2578:	08 95       	ret

0000257a <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    257a:	08 95       	ret

0000257c <vApplicationMallocFailedHook>:
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    257c:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    257e:	2f 9a       	sbi	0x05, 7	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2580:	2f ef       	ldi	r18, 0xFF	; 255
    2582:	80 e7       	ldi	r24, 0x70	; 112
    2584:	92 e0       	ldi	r25, 0x02	; 2
    2586:	21 50       	subi	r18, 0x01	; 1
    2588:	80 40       	sbci	r24, 0x00	; 0
    258a:	90 40       	sbci	r25, 0x00	; 0
    258c:	e1 f7       	brne	.-8      	; 0x2586 <vApplicationMallocFailedHook+0xa>
    258e:	00 c0       	rjmp	.+0      	; 0x2590 <vApplicationMallocFailedHook+0x14>
    2590:	00 00       	nop
    for(;;)
    {
        _delay_ms(50);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED fast blink.
    2592:	1f 9a       	sbi	0x03, 7	; 3
    2594:	f5 cf       	rjmp	.-22     	; 0x2580 <vApplicationMallocFailedHook+0x4>

00002596 <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook( TaskHandle_t xTask, portCHAR *pcTaskName ) __attribute__((weak));

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)), portCHAR *pcTaskName __attribute__((unused))  )
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2596:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2598:	2f 9a       	sbi	0x05, 7	; 5
    259a:	2f ef       	ldi	r18, 0xFF	; 255
    259c:	87 ea       	ldi	r24, 0xA7	; 167
    259e:	91 e6       	ldi	r25, 0x61	; 97
    25a0:	21 50       	subi	r18, 0x01	; 1
    25a2:	80 40       	sbci	r24, 0x00	; 0
    25a4:	90 40       	sbci	r25, 0x00	; 0
    25a6:	e1 f7       	brne	.-8      	; 0x25a0 <vApplicationStackOverflowHook+0xa>
    25a8:	00 c0       	rjmp	.+0      	; 0x25aa <vApplicationStackOverflowHook+0x14>
    25aa:	00 00       	nop
    for(;;)
    {
        _delay_ms(2000);

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Arduino Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle. Main LED slow blink.
    25ac:	1f 9a       	sbi	0x03, 7	; 3
    25ae:	f5 cf       	rjmp	.-22     	; 0x259a <vApplicationStackOverflowHook+0x4>

000025b0 <main>:
#include "temp_humSensor.h"


int main(void)
{
	DDRA |= _BV(DDA0) | _BV(DDA7);
    25b0:	81 b1       	in	r24, 0x01	; 1
    25b2:	81 68       	ori	r24, 0x81	; 129
    25b4:	81 b9       	out	0x01, r24	; 1
	trace_init();
    25b6:	0e 94 3f 02 	call	0x47e	; 0x47e <trace_init>
	stdioCreate(0);
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <stdioCreate>

	// initialization of resources
	// semaphores
	semaphores_init();
    25c0:	c3 d0       	rcall	.+390    	; 0x2748 <semaphores_init>
	// timers
	timers_init();
    25c2:	75 d1       	rcall	.+746    	; 0x28ae <timers_init>
    25c4:	0e 94 39 02 	call	0x472	; 0x472 <co2_sensor_init>
	// sensors
	co2_sensor_init();
	//temp_hum_sensor_init();
	// lora
	lora_init();
    25c8:	0f d0       	rcall	.+30     	; 0x25e8 <lora_init>
	
	// tasks
	create_tasks();
    25ca:	0f d1       	rcall	.+542    	; 0x27ea <create_tasks>
    25cc:	12 d9       	rcall	.-3548   	; 0x17f2 <xTaskGetTickCount>
	
	// timers start
	//xTimerStart(TempHumTimer, 0);
	//xTimerStart(CO2Timer, 0);
	xTimerStart(LoRaTimer, 0);
    25ce:	00 e0       	ldi	r16, 0x00	; 0
    25d0:	10 e0       	ldi	r17, 0x00	; 0
    25d2:	20 e0       	ldi	r18, 0x00	; 0
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	ac 01       	movw	r20, r24
    25d8:	61 e0       	ldi	r22, 0x01	; 1
    25da:	80 91 59 08 	lds	r24, 0x0859	; 0x800859 <LoRaTimer>
    25de:	90 91 5a 08 	lds	r25, 0x085A	; 0x80085a <LoRaTimer+0x1>
    25e2:	16 df       	rcall	.-468    	; 0x2410 <xTimerGenericCommand>
    25e4:	cd d8       	rcall	.-3686   	; 0x1780 <vTaskStartScheduler>
	
	vTaskStartScheduler(); // initialize and run the freeRTOS scheduler. Execution should never return here.
    25e6:	ff cf       	rjmp	.-2      	; 0x25e6 <main+0x36>

000025e8 <lora_init>:

void lora_init() {
	
		
		
		hal_create(LORA_INIT_TASK_PRIORITY+1);
    25e8:	88 e0       	ldi	r24, 0x08	; 8
    25ea:	90 d1       	rcall	.+800    	; 0x290c <hal_create>
		lora_driver_create(ser_USART1);
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	c1 c3       	rjmp	.+1922   	; 0x2d72 <lora_driver_create>
    25f0:	08 95       	ret

000025f2 <lora_start>:
			}
		}*/
}


void lora_start(){
    25f2:	cf 93       	push	r28
    25f4:	df 93       	push	r29
	
	e_LoRa_return_code_t rc;
	
	
		lora_driver_reset_rn2483(1);
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	f8 d3       	rcall	.+2032   	; 0x2dea <lora_driver_reset_rn2483>
		vTaskDelay(2);
    25fa:	82 e0       	ldi	r24, 0x02	; 2
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	3a da       	rcall	.-2956   	; 0x1a74 <vTaskDelay>
		lora_driver_reset_rn2483(0);
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	f3 d3       	rcall	.+2022   	; 0x2dea <lora_driver_reset_rn2483>
		vTaskDelay(150);
    2604:	86 e9       	ldi	r24, 0x96	; 150
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	35 da       	rcall	.-2966   	; 0x1a74 <vTaskDelay>




		if (lora_driver_rn2483_factory_reset() != LoRA_OK)
    260a:	03 d4       	rcall	.+2054   	; 0x2e12 <lora_driver_rn2483_factory_reset>
    260c:	88 23       	and	r24, r24
    260e:	21 f0       	breq	.+8      	; 0x2618 <lora_start+0x26>
    2610:	8a e4       	ldi	r24, 0x4A	; 74
		{
			printf("FACTORY_RESET_FAILURE \n");
    2612:	92 e0       	ldi	r25, 0x02	; 2
    2614:	0e 94 9d 22 	call	0x453a	; 0x453a <puts>
		}
		vTaskDelay(150);
    2618:	86 e9       	ldi	r24, 0x96	; 150
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	2b da       	rcall	.-2986   	; 0x1a74 <vTaskDelay>

		if (lora_driver_configure_to_eu868() != LoRA_OK)
    261e:	26 d5       	rcall	.+2636   	; 0x306c <lora_driver_configure_to_eu868>
    2620:	88 23       	and	r24, r24
    2622:	21 f0       	breq	.+8      	; 0x262c <lora_start+0x3a>
		{
			printf("CONFIGURE_BREAK \n");
    2624:	81 e6       	ldi	r24, 0x61	; 97
    2626:	92 e0       	ldi	r25, 0x02	; 2
    2628:	0e 94 9d 22 	call	0x453a	; 0x453a <puts>
		}
		static char dev_eui[17]; // It is static to avoid it to occupy stack space in the task
		if (lora_driver_get_rn2483_hweui(dev_eui) != LoRA_OK)
    262c:	8c ee       	ldi	r24, 0xEC	; 236
    262e:	96 e0       	ldi	r25, 0x06	; 6
    2630:	02 d4       	rcall	.+2052   	; 0x2e36 <lora_driver_get_rn2483_hweui>
    2632:	88 23       	and	r24, r24
    2634:	29 f0       	breq	.+10     	; 0x2640 <lora_start+0x4e>
    2636:	82 e7       	ldi	r24, 0x72	; 114
		{
			printf("HWUI_ERROR \n");
    2638:	92 e0       	ldi	r25, 0x02	; 2
    263a:	0e 94 9d 22 	call	0x453a	; 0x453a <puts>
    263e:	0e c0       	rjmp	.+28     	; 0x265c <lora_start+0x6a>
    2640:	8c ee       	ldi	r24, 0xEC	; 236
		}	else printf("%s, DEV_EUI \n",dev_eui);
    2642:	96 e0       	ldi	r25, 0x06	; 6
    2644:	9f 93       	push	r25
    2646:	8f 93       	push	r24
    2648:	8e e7       	ldi	r24, 0x7E	; 126
    264a:	92 e0       	ldi	r25, 0x02	; 2
    264c:	9f 93       	push	r25
    264e:	8f 93       	push	r24
    2650:	0e 94 8a 22 	call	0x4514	; 0x4514 <printf>
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0

		if (lora_driver_set_otaa_identity(LORA_appEUI,LORA_appKEY,dev_eui) != LoRA_OK)
    265c:	4c ee       	ldi	r20, 0xEC	; 236
    265e:	56 e0       	ldi	r21, 0x06	; 6
    2660:	6c e8       	ldi	r22, 0x8C	; 140
    2662:	72 e0       	ldi	r23, 0x02	; 2
    2664:	8d ea       	ldi	r24, 0xAD	; 173
    2666:	92 e0       	ldi	r25, 0x02	; 2
    2668:	df d5       	rcall	.+3006   	; 0x3228 <lora_driver_set_otaa_identity>
    266a:	88 23       	and	r24, r24
    266c:	21 f0       	breq	.+8      	; 0x2676 <lora_start+0x84>
		{
			printf("IDENTITY_BREAK \n");
    266e:	8e eb       	ldi	r24, 0xBE	; 190
    2670:	92 e0       	ldi	r25, 0x02	; 2
    2672:	0e 94 9d 22 	call	0x453a	; 0x453a <puts>
		}
		//e_LoRa_return_code_t rc;
		if ((rc=lora_driver_join(LoRa_OTAA)) == LoRa_ACCEPTED)
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	33 d4       	rcall	.+2150   	; 0x2ee0 <lora_driver_join>
    267a:	88 30       	cpi	r24, 0x08	; 8
    267c:	29 f4       	brne	.+10     	; 0x2688 <lora_start+0x96>
    267e:	8e ec       	ldi	r24, 0xCE	; 206
		{
			printf("LORA_ACCEPTED \n");
    2680:	92 e0       	ldi	r25, 0x02	; 2
    2682:	0e 94 9d 22 	call	0x453a	; 0x453a <puts>
    2686:	13 c0       	rjmp	.+38     	; 0x26ae <lora_start+0xbc>
			}else if(rc==7){
    2688:	87 30       	cpi	r24, 0x07	; 7
    268a:	89 f4       	brne	.+34     	; 0x26ae <lora_start+0xbc>
    268c:	c5 e0       	ldi	r28, 0x05	; 5
    268e:	d0 e0       	ldi	r29, 0x00	; 0
			for (int i = 0; i < 5; ++i) {
				rc=lora_driver_join(LoRa_OTAA);
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	26 d4       	rcall	.+2124   	; 0x2ee0 <lora_driver_join>
    2694:	87 30       	cpi	r24, 0x07	; 7
				if(rc==7){
    2696:	39 f4       	brne	.+14     	; 0x26a6 <lora_start+0xb4>
    2698:	8d ed       	ldi	r24, 0xDD	; 221
					printf("LORA_DENIED\n");
    269a:	92 e0       	ldi	r25, 0x02	; 2
    269c:	0e 94 9d 22 	call	0x453a	; 0x453a <puts>
    26a0:	21 97       	sbiw	r28, 0x01	; 1
    26a2:	b1 f7       	brne	.-20     	; 0x2690 <lora_start+0x9e>
		//e_LoRa_return_code_t rc;
		if ((rc=lora_driver_join(LoRa_OTAA)) == LoRa_ACCEPTED)
		{
			printf("LORA_ACCEPTED \n");
			}else if(rc==7){
			for (int i = 0; i < 5; ++i) {
    26a4:	04 c0       	rjmp	.+8      	; 0x26ae <lora_start+0xbc>
    26a6:	89 ee       	ldi	r24, 0xE9	; 233
				rc=lora_driver_join(LoRa_OTAA);
				if(rc==7){
					printf("LORA_DENIED\n");
					continue;
					}else{
					printf("LORA_ACCEPTED\n");
    26a8:	92 e0       	ldi	r25, 0x02	; 2
    26aa:	0e 94 9d 22 	call	0x453a	; 0x453a <puts>
    26ae:	df 91       	pop	r29
					break;
				}
			}
		
}
			}
    26b0:	cf 91       	pop	r28
    26b2:	08 95       	ret

000026b4 <lora_send_data>:
    26b4:	cf 93       	push	r28

void lora_send_data() {
    26b6:	df 93       	push	r29
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	66 97       	sbiw	r28, 0x16	; 22
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	de bf       	out	0x3e, r29	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	cd bf       	out	0x3d, r28	; 61
	
	vTaskDelay(1000/portTICK_PERIOD_MS);
    26c8:	8e e3       	ldi	r24, 0x3E	; 62
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	d3 d9       	rcall	.-3162   	; 0x1a74 <vTaskDelay>
	printf("lora send");
    26ce:	87 ef       	ldi	r24, 0xF7	; 247
    26d0:	92 e0       	ldi	r25, 0x02	; 2
    26d2:	9f 93       	push	r25
    26d4:	8f 93       	push	r24
    26d6:	0e 94 8a 22 	call	0x4514	; 0x4514 <printf>
	uplink_payload.bytes[3] = temp & 0xFF;
	uplink_payload.bytes[4] = co2_ppm >> 8;
	uplink_payload.bytes[5] = co2_ppm & 0xFF;*/
	
	lora_payload_t uplink_payload;
	uplink_payload.len = 4; // Length of the actual payload
    26da:	84 e0       	ldi	r24, 0x04	; 4
    26dc:	8a 83       	std	Y+2, r24	; 0x02
	uplink_payload.port_no = 4; // The LoRaWAN port no to sent the message to
    26de:	89 83       	std	Y+1, r24	; 0x01
	uplink_payload.bytes[0] = hum >> 8;
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	8b 83       	std	Y+3, r24	; 0x03
	uplink_payload.bytes[1] = hum & 0xFF;
    26e4:	81 e4       	ldi	r24, 0x41	; 65
    26e6:	8c 83       	std	Y+4, r24	; 0x04
	uplink_payload.bytes[2] = temp >> 8;
    26e8:	82 e0       	ldi	r24, 0x02	; 2
    26ea:	8d 83       	std	Y+5, r24	; 0x05
	uplink_payload.bytes[3] = temp & 0xFF;
    26ec:	82 e8       	ldi	r24, 0x82	; 130
    26ee:	8e 83       	std	Y+6, r24	; 0x06
	
	


	e_LoRa_return_code_t rc;
	if ((rc = lora_driver_sent_upload_message(false, &uplink_payload)) == LoRa_MAC_TX_OK )
    26f0:	be 01       	movw	r22, r28
    26f2:	6f 5f       	subi	r22, 0xFF	; 255
    26f4:	7f 4f       	sbci	r23, 0xFF	; 255
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	16 d4       	rcall	.+2092   	; 0x2f26 <lora_driver_sent_upload_message>
    26fa:	0f 90       	pop	r0
    26fc:	0f 90       	pop	r0
    26fe:	8d 30       	cpi	r24, 0x0D	; 13
    2700:	49 f4       	brne	.+18     	; 0x2714 <lora_send_data+0x60>
	{
		// The uplink message is sent and there is no downlink message received
		printf("SEND !!");
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	93 e0       	ldi	r25, 0x03	; 3
    2706:	9f 93       	push	r25
    2708:	8f 93       	push	r24
    270a:	0e 94 8a 22 	call	0x4514	; 0x4514 <printf>
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	0e c0       	rjmp	.+28     	; 0x2730 <lora_send_data+0x7c>
	}
	else if (rc == LoRa_MAC_RX_OK)
    2714:	8e 30       	cpi	r24, 0x0E	; 14
    2716:	61 f0       	breq	.+24     	; 0x2730 <lora_send_data+0x7c>
	{
		// The uplink message is sent and a downlink message is received
	}
	else printf("<%i>",rc);
    2718:	1f 92       	push	r1
    271a:	8f 93       	push	r24
    271c:	89 e0       	ldi	r24, 0x09	; 9
    271e:	93 e0       	ldi	r25, 0x03	; 3
    2720:	9f 93       	push	r25
    2722:	8f 93       	push	r24
    2724:	0e 94 8a 22 	call	0x4514	; 0x4514 <printf>
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
		
	
	vTaskDelay(1000/portTICK_PERIOD_MS);
    2730:	8e e3       	ldi	r24, 0x3E	; 62
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	9f d9       	rcall	.-3266   	; 0x1a74 <vTaskDelay>
    2736:	66 96       	adiw	r28, 0x16	; 22
    2738:	0f b6       	in	r0, 0x3f	; 63
    273a:	f8 94       	cli
    273c:	de bf       	out	0x3e, r29	; 62
    273e:	0f be       	out	0x3f, r0	; 63
    2740:	cd bf       	out	0x3d, r28	; 61
    2742:	df 91       	pop	r29
    2744:	cf 91       	pop	r28
    2746:	08 95       	ret

00002748 <semaphores_init>:
#include "mySemaphores.h"

void semaphores_init() {
		
	/*do {*/
		if(CO2Semaphore == NULL)
    2748:	80 91 55 08 	lds	r24, 0x0855	; 0x800855 <CO2Semaphore>
    274c:	90 91 56 08 	lds	r25, 0x0856	; 0x800856 <CO2Semaphore+0x1>
    2750:	89 2b       	or	r24, r25
    2752:	39 f4       	brne	.+14     	; 0x2762 <semaphores_init+0x1a>
			CO2Semaphore = xSemaphoreCreateMutex();
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	0e 94 4e 06 	call	0xc9c	; 0xc9c <xQueueCreateMutex>
    275a:	90 93 56 08 	sts	0x0856, r25	; 0x800856 <CO2Semaphore+0x1>
    275e:	80 93 55 08 	sts	0x0855, r24	; 0x800855 <CO2Semaphore>
		if(TempHumSemaphore == NULL)
    2762:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <TempHumSemaphore>
    2766:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <TempHumSemaphore+0x1>
    276a:	89 2b       	or	r24, r25
    276c:	39 f4       	brne	.+14     	; 0x277c <semaphores_init+0x34>
			TempHumSemaphore = xSemaphoreCreateMutex();
    276e:	81 e0       	ldi	r24, 0x01	; 1
    2770:	0e 94 4e 06 	call	0xc9c	; 0xc9c <xQueueCreateMutex>
    2774:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <TempHumSemaphore+0x1>
    2778:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <TempHumSemaphore>
		if(LoRaSemaphore == NULL)
    277c:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <LoRaSemaphore>
    2780:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <LoRaSemaphore+0x1>
    2784:	89 2b       	or	r24, r25
    2786:	39 f4       	brne	.+14     	; 0x2796 <semaphores_init+0x4e>
			LoRaSemaphore = xSemaphoreCreateMutex();
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	0e 94 4e 06 	call	0xc9c	; 0xc9c <xQueueCreateMutex>
    278e:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <LoRaSemaphore+0x1>
    2792:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <LoRaSemaphore>
    2796:	08 95       	ret

00002798 <lora_send_data_task>:

void lora_send_data_task(void *pvParameters) {
		// remove compiler warnings
		(void)pvParameters;
	
	printf("task lora");
    2798:	8e e0       	ldi	r24, 0x0E	; 14
    279a:	93 e0       	ldi	r25, 0x03	; 3
    279c:	9f 93       	push	r25
    279e:	8f 93       	push	r24
    27a0:	0e 94 8a 22 	call	0x4514	; 0x4514 <printf>
	vTaskDelay(1000/portTICK_PERIOD_MS);
    27a4:	8e e3       	ldi	r24, 0x3E	; 62
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	65 d9       	rcall	.-3382   	; 0x1a74 <vTaskDelay>
	lora_start();
    27aa:	23 df       	rcall	.-442    	; 0x25f2 <lora_start>
    27ac:	8e e3       	ldi	r24, 0x3E	; 62
	vTaskDelay(1000/portTICK_PERIOD_MS);
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	61 d9       	rcall	.-3390   	; 0x1a74 <vTaskDelay>
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	6f ef       	ldi	r22, 0xFF	; 255
	while(1){
		
		if(xSemaphoreTake(LoRaSemaphore, portMAX_DELAY) == pdTRUE){
    27b8:	7f ef       	ldi	r23, 0xFF	; 255
    27ba:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <LoRaSemaphore>
    27be:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <LoRaSemaphore+0x1>
    27c2:	0e 94 27 07 	call	0xe4e	; 0xe4e <xQueueSemaphoreTake>
    27c6:	81 30       	cpi	r24, 0x01	; 1
    27c8:	b1 f7       	brne	.-20     	; 0x27b6 <lora_send_data_task+0x1e>
			vTaskDelay(1000/portTICK_PERIOD_MS);
    27ca:	8e e3       	ldi	r24, 0x3E	; 62
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	52 d9       	rcall	.-3420   	; 0x1a74 <vTaskDelay>
			lora_send_data();
    27d0:	71 df       	rcall	.-286    	; 0x26b4 <lora_send_data>
    27d2:	20 e0       	ldi	r18, 0x00	; 0
			
			xSemaphoreGive(LoRaSemaphore);
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	50 e0       	ldi	r21, 0x00	; 0
    27d8:	60 e0       	ldi	r22, 0x00	; 0
    27da:	70 e0       	ldi	r23, 0x00	; 0
    27dc:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <LoRaSemaphore>
    27e0:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <LoRaSemaphore+0x1>
    27e4:	0e 94 b9 05 	call	0xb72	; 0xb72 <xQueueGenericSend>
    27e8:	e6 cf       	rjmp	.-52     	; 0x27b6 <lora_send_data_task+0x1e>

000027ea <create_tasks>:
    27ea:	ef 92       	push	r14
#include <timers.h>
#include "temp_humSensor.h"

//int rand_val = 1234;

void create_tasks(void) {
    27ec:	ff 92       	push	r15
    27ee:	0f 93       	push	r16
		(void*) 1,
		2,
		&TempHumMeasureTask
	);*/
	
	xTaskCreate(
    27f0:	0f 2e       	mov	r0, r31
    27f2:	f7 e5       	ldi	r31, 0x57	; 87
    27f4:	ef 2e       	mov	r14, r31
    27f6:	f8 e0       	ldi	r31, 0x08	; 8
    27f8:	ff 2e       	mov	r15, r31
    27fa:	f0 2d       	mov	r31, r0
    27fc:	02 e0       	ldi	r16, 0x02	; 2
    27fe:	21 e0       	ldi	r18, 0x01	; 1
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 ec       	ldi	r20, 0xC0	; 192
    2804:	50 e0       	ldi	r21, 0x00	; 0
    2806:	68 e1       	ldi	r22, 0x18	; 24
    2808:	73 e0       	ldi	r23, 0x03	; 3
    280a:	8c ec       	ldi	r24, 0xCC	; 204
    280c:	93 e1       	ldi	r25, 0x13	; 19
    280e:	0e 94 a2 0a 	call	0x1544	; 0x1544 <xTaskCreate>
		configMINIMAL_STACK_SIZE,
		(void*) 1,
		2,
		&LoRaSendDataTask
	);
}
    2812:	0f 91       	pop	r16
    2814:	ff 90       	pop	r15
    2816:	ef 90       	pop	r14
    2818:	08 95       	ret

0000281a <co2_timer_callback>:
	);
}

void co2_timer_callback(TimerHandle_t pxTimer) {
	//printf("unblock co2 semaphore");
	if( xSemaphoreGive( CO2Semaphore ) != pdTRUE )
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	40 e0       	ldi	r20, 0x00	; 0
    281e:	50 e0       	ldi	r21, 0x00	; 0
    2820:	60 e0       	ldi	r22, 0x00	; 0
    2822:	70 e0       	ldi	r23, 0x00	; 0
    2824:	80 91 55 08 	lds	r24, 0x0855	; 0x800855 <CO2Semaphore>
    2828:	90 91 56 08 	lds	r25, 0x0856	; 0x800856 <CO2Semaphore+0x1>
    282c:	0e 94 b9 05 	call	0xb72	; 0xb72 <xQueueGenericSend>
    2830:	81 30       	cpi	r24, 0x01	; 1
    2832:	41 f0       	breq	.+16     	; 0x2844 <co2_timer_callback+0x2a>
	{
		// We would expect this call to fail because we cannot give
		// a semaphore without first "taking" it!
		printf("we dont have ");
    2834:	8b e5       	ldi	r24, 0x5B	; 91
    2836:	93 e0       	ldi	r25, 0x03	; 3
    2838:	9f 93       	push	r25
    283a:	8f 93       	push	r24
    283c:	0e 94 8a 22 	call	0x4514	; 0x4514 <printf>
    2840:	0f 90       	pop	r0
    2842:	0f 90       	pop	r0
    2844:	08 95       	ret

00002846 <temp_hum_timer_callback>:
	//xSemaphoreTake(CO2Semaphore, portMAX_DELAY);
}

void temp_hum_timer_callback(TimerHandle_t pxTimer){
	//printf("unblock temphum semaphore");
	if( xSemaphoreGive( TempHumSemaphore ) != pdTRUE )
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	40 e0       	ldi	r20, 0x00	; 0
    284a:	50 e0       	ldi	r21, 0x00	; 0
    284c:	60 e0       	ldi	r22, 0x00	; 0
    284e:	70 e0       	ldi	r23, 0x00	; 0
    2850:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <TempHumSemaphore>
    2854:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <TempHumSemaphore+0x1>
    2858:	0e 94 b9 05 	call	0xb72	; 0xb72 <xQueueGenericSend>
    285c:	81 30       	cpi	r24, 0x01	; 1
    285e:	41 f0       	breq	.+16     	; 0x2870 <temp_hum_timer_callback+0x2a>
	{
		// We would expect this call to fail because we cannot give
		// a semaphore without first "taking" it!
		printf("we dont have ");
    2860:	8b e5       	ldi	r24, 0x5B	; 91
    2862:	93 e0       	ldi	r25, 0x03	; 3
    2864:	9f 93       	push	r25
    2866:	8f 93       	push	r24
    2868:	0e 94 8a 22 	call	0x4514	; 0x4514 <printf>
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	08 95       	ret

00002872 <lora_timer_callback>:
	//vTaskDelay(6000/portTICK_PERIOD_MS);
	//xSemaphoreTake(TempHumSemaphore, portMAX_DELAY);
}

void lora_timer_callback(TimerHandle_t pxTimer) {
	printf("unblock lora semaphore ");
    2872:	89 e6       	ldi	r24, 0x69	; 105
    2874:	93 e0       	ldi	r25, 0x03	; 3
    2876:	9f 93       	push	r25
    2878:	8f 93       	push	r24
    287a:	0e 94 8a 22 	call	0x4514	; 0x4514 <printf>
	if( xSemaphoreGive( LoRaSemaphore ) != pdTRUE )
    287e:	20 e0       	ldi	r18, 0x00	; 0
    2880:	40 e0       	ldi	r20, 0x00	; 0
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	60 e0       	ldi	r22, 0x00	; 0
    2886:	70 e0       	ldi	r23, 0x00	; 0
    2888:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <LoRaSemaphore>
    288c:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <LoRaSemaphore+0x1>
    2890:	0e 94 b9 05 	call	0xb72	; 0xb72 <xQueueGenericSend>
    2894:	0f 90       	pop	r0
    2896:	0f 90       	pop	r0
    2898:	81 30       	cpi	r24, 0x01	; 1
    289a:	41 f0       	breq	.+16     	; 0x28ac <lora_timer_callback+0x3a>
	{
		// We would expect this call to fail because we cannot give
		// a semaphore without first "taking" it!
		printf("we dont have ");
    289c:	8b e5       	ldi	r24, 0x5B	; 91
    289e:	93 e0       	ldi	r25, 0x03	; 3
    28a0:	9f 93       	push	r25
    28a2:	8f 93       	push	r24
    28a4:	0e 94 8a 22 	call	0x4514	; 0x4514 <printf>
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	08 95       	ret

000028ae <timers_init>:
#include "myTimers.h"
#include "mySemaphores.h"

void timers_init() {
    28ae:	0f 93       	push	r16
    28b0:	1f 93       	push	r17
	
	CO2Timer = xTimerCreate(
    28b2:	0d e0       	ldi	r16, 0x0D	; 13
    28b4:	14 e1       	ldi	r17, 0x14	; 20
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	41 e0       	ldi	r20, 0x01	; 1
    28bc:	6d e7       	ldi	r22, 0x7D	; 125
    28be:	70 e0       	ldi	r23, 0x00	; 0
    28c0:	81 e8       	ldi	r24, 0x81	; 129
    28c2:	93 e0       	ldi	r25, 0x03	; 3
    28c4:	6f dd       	rcall	.-1314   	; 0x23a4 <xTimerCreate>
    28c6:	90 93 60 08 	sts	0x0860, r25	; 0x800860 <CO2Timer+0x1>
    28ca:	80 93 5f 08 	sts	0x085F, r24	; 0x80085f <CO2Timer>
		pdTRUE,
		(void*) 0,
		co2_timer_callback
	);
	
	TempHumTimer = xTimerCreate(
    28ce:	03 e2       	ldi	r16, 0x23	; 35
    28d0:	14 e1       	ldi	r17, 0x14	; 20
    28d2:	21 e0       	ldi	r18, 0x01	; 1
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	41 e0       	ldi	r20, 0x01	; 1
    28d8:	6b eb       	ldi	r22, 0xBB	; 187
    28da:	70 e0       	ldi	r23, 0x00	; 0
    28dc:	8b e8       	ldi	r24, 0x8B	; 139
    28de:	93 e0       	ldi	r25, 0x03	; 3
    28e0:	61 dd       	rcall	.-1342   	; 0x23a4 <xTimerCreate>
    28e2:	90 93 66 08 	sts	0x0866, r25	; 0x800866 <TempHumTimer+0x1>
    28e6:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <TempHumTimer>
		pdTRUE,
		(void*) 1,
		temp_hum_timer_callback
	);
	
	LoRaTimer = xTimerCreate(
    28ea:	09 e3       	ldi	r16, 0x39	; 57
    28ec:	14 e1       	ldi	r17, 0x14	; 20
    28ee:	22 e0       	ldi	r18, 0x02	; 2
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	41 e0       	ldi	r20, 0x01	; 1
    28f4:	6b eb       	ldi	r22, 0xBB	; 187
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	8a e9       	ldi	r24, 0x9A	; 154
    28fa:	93 e0       	ldi	r25, 0x03	; 3
    28fc:	53 dd       	rcall	.-1370   	; 0x23a4 <xTimerCreate>
    28fe:	90 93 5a 08 	sts	0x085A, r25	; 0x80085a <LoRaTimer+0x1>
    2902:	80 93 59 08 	sts	0x0859, r24	; 0x800859 <LoRaTimer>
		(3000/portTICK_PERIOD_MS),
		pdTRUE,
		(void*) 2,
		lora_timer_callback
	);
}
    2906:	1f 91       	pop	r17
    2908:	0f 91       	pop	r16
    290a:	08 95       	ret

0000290c <hal_create>:
    290c:	e7 e6       	ldi	r30, 0x67	; 103
    290e:	f8 e0       	ldi	r31, 0x08	; 8
    2910:	2a ea       	ldi	r18, 0xAA	; 170
    2912:	39 e1       	ldi	r19, 0x19	; 25
    2914:	31 83       	std	Z+1, r19	; 0x01
    2916:	20 83       	st	Z, r18
    2918:	2d ea       	ldi	r18, 0xAD	; 173
    291a:	39 e1       	ldi	r19, 0x19	; 25
    291c:	33 83       	std	Z+3, r19	; 0x03
    291e:	22 83       	std	Z+2, r18	; 0x02
    2920:	28 eb       	ldi	r18, 0xB8	; 184
    2922:	39 e1       	ldi	r19, 0x19	; 25
    2924:	35 83       	std	Z+5, r19	; 0x05
    2926:	24 83       	std	Z+4, r18	; 0x04
    2928:	2c eb       	ldi	r18, 0xBC	; 188
    292a:	39 e1       	ldi	r19, 0x19	; 25
    292c:	37 83       	std	Z+7, r19	; 0x07
    292e:	26 83       	std	Z+6, r18	; 0x06
    2930:	22 ec       	ldi	r18, 0xC2	; 194
    2932:	39 e1       	ldi	r19, 0x19	; 25
    2934:	31 87       	std	Z+9, r19	; 0x09
    2936:	20 87       	std	Z+8, r18	; 0x08
    2938:	2e ec       	ldi	r18, 0xCE	; 206
    293a:	39 e1       	ldi	r19, 0x19	; 25
    293c:	33 87       	std	Z+11, r19	; 0x0b
    293e:	22 87       	std	Z+10, r18	; 0x0a
    2940:	23 ed       	ldi	r18, 0xD3	; 211
    2942:	39 e1       	ldi	r19, 0x19	; 25
    2944:	35 87       	std	Z+13, r19	; 0x0d
    2946:	24 87       	std	Z+12, r18	; 0x0c
    2948:	2f ed       	ldi	r18, 0xDF	; 223
    294a:	39 e1       	ldi	r19, 0x19	; 25
    294c:	37 87       	std	Z+15, r19	; 0x0f
    294e:	26 87       	std	Z+14, r18	; 0x0e
    2950:	2f eb       	ldi	r18, 0xBF	; 191
    2952:	39 e1       	ldi	r19, 0x19	; 25
    2954:	31 8b       	std	Z+17, r19	; 0x11
    2956:	20 8b       	std	Z+16, r18	; 0x10
    2958:	24 ee       	ldi	r18, 0xE4	; 228
    295a:	39 e1       	ldi	r19, 0x19	; 25
    295c:	33 8b       	std	Z+19, r19	; 0x13
    295e:	22 8b       	std	Z+18, r18	; 0x12
    2960:	21 ef       	ldi	r18, 0xF1	; 241
    2962:	39 e1       	ldi	r19, 0x19	; 25
    2964:	35 8b       	std	Z+21, r19	; 0x15
    2966:	24 8b       	std	Z+20, r18	; 0x14
    2968:	68 2f       	mov	r22, r24
    296a:	cf 01       	movw	r24, r30
    296c:	a1 c0       	rjmp	.+322    	; 0x2ab0 <led_create>
    296e:	08 95       	ret

00002970 <_turn_off>:
    2970:	cf 93       	push	r28
    2972:	df 93       	push	r29
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	fc 01       	movw	r30, r24
    2978:	ee 0f       	add	r30, r30
    297a:	ff 1f       	adc	r31, r31
    297c:	e8 0f       	add	r30, r24
    297e:	f9 1f       	adc	r31, r25
    2980:	ee 0f       	add	r30, r30
    2982:	ff 1f       	adc	r31, r31
    2984:	e3 50       	subi	r30, 0x03	; 3
    2986:	f9 4f       	sbci	r31, 0xF9	; 249
    2988:	23 81       	ldd	r18, Z+3	; 0x03
    298a:	21 11       	cpse	r18, r1
    298c:	0a c0       	rjmp	.+20     	; 0x29a2 <_turn_off+0x32>
    298e:	ef 01       	movw	r28, r30
    2990:	e0 91 6f 08 	lds	r30, 0x086F	; 0x80086f <register_access+0x8>
    2994:	f0 91 70 08 	lds	r31, 0x0870	; 0x800870 <register_access+0x9>
    2998:	6a 81       	ldd	r22, Y+2	; 0x02
    299a:	88 81       	ld	r24, Y
    299c:	99 81       	ldd	r25, Y+1	; 0x01
    299e:	19 95       	eicall
    29a0:	12 c0       	rjmp	.+36     	; 0x29c6 <_turn_off+0x56>
    29a2:	dc 01       	movw	r26, r24
    29a4:	aa 0f       	add	r26, r26
    29a6:	bb 1f       	adc	r27, r27
    29a8:	ed 01       	movw	r28, r26
    29aa:	c8 0f       	add	r28, r24
    29ac:	d9 1f       	adc	r29, r25
    29ae:	cc 0f       	add	r28, r28
    29b0:	dd 1f       	adc	r29, r29
    29b2:	c3 50       	subi	r28, 0x03	; 3
    29b4:	d9 4f       	sbci	r29, 0xF9	; 249
    29b6:	e0 91 79 08 	lds	r30, 0x0879	; 0x800879 <register_access+0x12>
    29ba:	f0 91 7a 08 	lds	r31, 0x087A	; 0x80087a <register_access+0x13>
    29be:	6a 81       	ldd	r22, Y+2	; 0x02
    29c0:	88 81       	ld	r24, Y
    29c2:	99 81       	ldd	r25, Y+1	; 0x01
    29c4:	19 95       	eicall
    29c6:	df 91       	pop	r29
    29c8:	cf 91       	pop	r28
    29ca:	08 95       	ret

000029cc <_turn_on>:
    29cc:	cf 93       	push	r28
    29ce:	df 93       	push	r29
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	fc 01       	movw	r30, r24
    29d4:	ee 0f       	add	r30, r30
    29d6:	ff 1f       	adc	r31, r31
    29d8:	e8 0f       	add	r30, r24
    29da:	f9 1f       	adc	r31, r25
    29dc:	ee 0f       	add	r30, r30
    29de:	ff 1f       	adc	r31, r31
    29e0:	e3 50       	subi	r30, 0x03	; 3
    29e2:	f9 4f       	sbci	r31, 0xF9	; 249
    29e4:	23 81       	ldd	r18, Z+3	; 0x03
    29e6:	21 11       	cpse	r18, r1
    29e8:	0a c0       	rjmp	.+20     	; 0x29fe <_turn_on+0x32>
    29ea:	ef 01       	movw	r28, r30
    29ec:	e0 91 79 08 	lds	r30, 0x0879	; 0x800879 <register_access+0x12>
    29f0:	f0 91 7a 08 	lds	r31, 0x087A	; 0x80087a <register_access+0x13>
    29f4:	6a 81       	ldd	r22, Y+2	; 0x02
    29f6:	88 81       	ld	r24, Y
    29f8:	99 81       	ldd	r25, Y+1	; 0x01
    29fa:	19 95       	eicall
    29fc:	12 c0       	rjmp	.+36     	; 0x2a22 <_turn_on+0x56>
    29fe:	dc 01       	movw	r26, r24
    2a00:	aa 0f       	add	r26, r26
    2a02:	bb 1f       	adc	r27, r27
    2a04:	ed 01       	movw	r28, r26
    2a06:	c8 0f       	add	r28, r24
    2a08:	d9 1f       	adc	r29, r25
    2a0a:	cc 0f       	add	r28, r28
    2a0c:	dd 1f       	adc	r29, r29
    2a0e:	c3 50       	subi	r28, 0x03	; 3
    2a10:	d9 4f       	sbci	r29, 0xF9	; 249
    2a12:	e0 91 6f 08 	lds	r30, 0x086F	; 0x80086f <register_access+0x8>
    2a16:	f0 91 70 08 	lds	r31, 0x0870	; 0x800870 <register_access+0x9>
    2a1a:	6a 81       	ldd	r22, Y+2	; 0x02
    2a1c:	88 81       	ld	r24, Y
    2a1e:	99 81       	ldd	r25, Y+1	; 0x01
    2a20:	19 95       	eicall
    2a22:	df 91       	pop	r29
    2a24:	cf 91       	pop	r28
    2a26:	08 95       	ret

00002a28 <_hal_led_task>:
    2a28:	85 ea       	ldi	r24, 0xA5	; 165
    2a2a:	93 e0       	ldi	r25, 0x03	; 3
    2a2c:	0e 94 9d 22 	call	0x453a	; 0x453a <puts>
    2a30:	0f 2e       	mov	r0, r31
    2a32:	f7 e6       	ldi	r31, 0x67	; 103
    2a34:	cf 2e       	mov	r12, r31
    2a36:	f8 e0       	ldi	r31, 0x08	; 8
    2a38:	df 2e       	mov	r13, r31
    2a3a:	f0 2d       	mov	r31, r0
    2a3c:	04 e0       	ldi	r16, 0x04	; 4
    2a3e:	cd ef       	ldi	r28, 0xFD	; 253
    2a40:	d6 e0       	ldi	r29, 0x06	; 6
    2a42:	10 e0       	ldi	r17, 0x00	; 0
    2a44:	8c 81       	ldd	r24, Y+4	; 0x04
    2a46:	81 30       	cpi	r24, 0x01	; 1
    2a48:	69 f0       	breq	.+26     	; 0x2a64 <_hal_led_task+0x3c>
    2a4a:	e8 f0       	brcs	.+58     	; 0x2a86 <_hal_led_task+0x5e>
    2a4c:	82 30       	cpi	r24, 0x02	; 2
    2a4e:	39 f5       	brne	.+78     	; 0x2a9e <_hal_led_task+0x76>
    2a50:	d6 01       	movw	r26, r12
    2a52:	1c 96       	adiw	r26, 0x0c	; 12
    2a54:	ed 91       	ld	r30, X+
    2a56:	fc 91       	ld	r31, X
    2a58:	1d 97       	sbiw	r26, 0x0d	; 13
    2a5a:	6a 81       	ldd	r22, Y+2	; 0x02
    2a5c:	88 81       	ld	r24, Y
    2a5e:	99 81       	ldd	r25, Y+1	; 0x01
    2a60:	19 95       	eicall
    2a62:	1d c0       	rjmp	.+58     	; 0x2a9e <_hal_led_task+0x76>
    2a64:	8d 81       	ldd	r24, Y+5	; 0x05
    2a66:	8f 5f       	subi	r24, 0xFF	; 255
    2a68:	8a 30       	cpi	r24, 0x0A	; 10
    2a6a:	10 f4       	brcc	.+4      	; 0x2a70 <_hal_led_task+0x48>
    2a6c:	8d 83       	std	Y+5, r24	; 0x05
    2a6e:	17 c0       	rjmp	.+46     	; 0x2a9e <_hal_led_task+0x76>
    2a70:	1d 82       	std	Y+5, r1	; 0x05
    2a72:	d6 01       	movw	r26, r12
    2a74:	1c 96       	adiw	r26, 0x0c	; 12
    2a76:	ed 91       	ld	r30, X+
    2a78:	fc 91       	ld	r31, X
    2a7a:	1d 97       	sbiw	r26, 0x0d	; 13
    2a7c:	6a 81       	ldd	r22, Y+2	; 0x02
    2a7e:	88 81       	ld	r24, Y
    2a80:	99 81       	ldd	r25, Y+1	; 0x01
    2a82:	19 95       	eicall
    2a84:	0c c0       	rjmp	.+24     	; 0x2a9e <_hal_led_task+0x76>
    2a86:	8d 81       	ldd	r24, Y+5	; 0x05
    2a88:	88 23       	and	r24, r24
    2a8a:	31 f0       	breq	.+12     	; 0x2a98 <_hal_led_task+0x70>
    2a8c:	81 2f       	mov	r24, r17
    2a8e:	9e df       	rcall	.-196    	; 0x29cc <_turn_on>
    2a90:	8d 81       	ldd	r24, Y+5	; 0x05
    2a92:	81 50       	subi	r24, 0x01	; 1
    2a94:	8d 83       	std	Y+5, r24	; 0x05
    2a96:	03 c0       	rjmp	.+6      	; 0x2a9e <_hal_led_task+0x76>
    2a98:	0c 83       	std	Y+4, r16	; 0x04
    2a9a:	81 2f       	mov	r24, r17
    2a9c:	69 df       	rcall	.-302    	; 0x2970 <_turn_off>
    2a9e:	1f 5f       	subi	r17, 0xFF	; 255
    2aa0:	26 96       	adiw	r28, 0x06	; 6
    2aa2:	14 30       	cpi	r17, 0x04	; 4
    2aa4:	79 f6       	brne	.-98     	; 0x2a44 <_hal_led_task+0x1c>
    2aa6:	85 e0       	ldi	r24, 0x05	; 5
    2aa8:	90 e0       	ldi	r25, 0x00	; 0
    2aaa:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <vTaskDelay>
    2aae:	c7 cf       	rjmp	.-114    	; 0x2a3e <_hal_led_task+0x16>

00002ab0 <led_create>:
    2ab0:	cf 92       	push	r12
    2ab2:	df 92       	push	r13
    2ab4:	ef 92       	push	r14
    2ab6:	ff 92       	push	r15
    2ab8:	0f 93       	push	r16
    2aba:	1f 93       	push	r17
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
    2ac0:	06 2f       	mov	r16, r22
    2ac2:	0f 2e       	mov	r0, r31
    2ac4:	f7 e6       	ldi	r31, 0x67	; 103
    2ac6:	ef 2e       	mov	r14, r31
    2ac8:	f8 e0       	ldi	r31, 0x08	; 8
    2aca:	ff 2e       	mov	r15, r31
    2acc:	f0 2d       	mov	r31, r0
    2ace:	d7 01       	movw	r26, r14
    2ad0:	18 96       	adiw	r26, 0x08	; 8
    2ad2:	ed 91       	ld	r30, X+
    2ad4:	fc 91       	ld	r31, X
    2ad6:	19 97       	sbiw	r26, 0x09	; 9
    2ad8:	66 e0       	ldi	r22, 0x06	; 6
    2ada:	87 e2       	ldi	r24, 0x27	; 39
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	19 95       	eicall
    2ae0:	cd ef       	ldi	r28, 0xFD	; 253
    2ae2:	d6 e0       	ldi	r29, 0x06	; 6
    2ae4:	0f 2e       	mov	r0, r31
    2ae6:	f8 e2       	ldi	r31, 0x28	; 40
    2ae8:	cf 2e       	mov	r12, r31
    2aea:	d1 2c       	mov	r13, r1
    2aec:	f0 2d       	mov	r31, r0
    2aee:	d9 82       	std	Y+1, r13	; 0x01
    2af0:	c8 82       	st	Y, r12
    2af2:	86 e0       	ldi	r24, 0x06	; 6
    2af4:	8a 83       	std	Y+2, r24	; 0x02
    2af6:	1b 82       	std	Y+3, r1	; 0x03
    2af8:	14 e0       	ldi	r17, 0x04	; 4
    2afa:	1c 83       	std	Y+4, r17	; 0x04
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	38 df       	rcall	.-400    	; 0x2970 <_turn_off>
    2b00:	d7 01       	movw	r26, r14
    2b02:	18 96       	adiw	r26, 0x08	; 8
    2b04:	ed 91       	ld	r30, X+
    2b06:	fc 91       	ld	r31, X
    2b08:	19 97       	sbiw	r26, 0x09	; 9
    2b0a:	67 e0       	ldi	r22, 0x07	; 7
    2b0c:	87 e2       	ldi	r24, 0x27	; 39
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	19 95       	eicall
    2b12:	df 82       	std	Y+7, r13	; 0x07
    2b14:	ce 82       	std	Y+6, r12	; 0x06
    2b16:	87 e0       	ldi	r24, 0x07	; 7
    2b18:	88 87       	std	Y+8, r24	; 0x08
    2b1a:	19 86       	std	Y+9, r1	; 0x09
    2b1c:	1a 87       	std	Y+10, r17	; 0x0a
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	27 df       	rcall	.-434    	; 0x2970 <_turn_off>
    2b22:	d7 01       	movw	r26, r14
    2b24:	18 96       	adiw	r26, 0x08	; 8
    2b26:	ed 91       	ld	r30, X+
    2b28:	fc 91       	ld	r31, X
    2b2a:	19 97       	sbiw	r26, 0x09	; 9
    2b2c:	65 e0       	ldi	r22, 0x05	; 5
    2b2e:	83 e3       	ldi	r24, 0x33	; 51
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	19 95       	eicall
    2b34:	d7 01       	movw	r26, r14
    2b36:	18 96       	adiw	r26, 0x08	; 8
    2b38:	ed 91       	ld	r30, X+
    2b3a:	fc 91       	ld	r31, X
    2b3c:	19 97       	sbiw	r26, 0x09	; 9
    2b3e:	61 e0       	ldi	r22, 0x01	; 1
    2b40:	84 e3       	ldi	r24, 0x34	; 52
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	19 95       	eicall
    2b46:	84 e3       	ldi	r24, 0x34	; 52
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	9d 87       	std	Y+13, r25	; 0x0d
    2b4c:	8c 87       	std	Y+12, r24	; 0x0c
    2b4e:	85 e0       	ldi	r24, 0x05	; 5
    2b50:	8e 87       	std	Y+14, r24	; 0x0e
    2b52:	1f 86       	std	Y+15, r1	; 0x0f
    2b54:	18 8b       	std	Y+16, r17	; 0x10
    2b56:	82 e0       	ldi	r24, 0x02	; 2
    2b58:	0b df       	rcall	.-490    	; 0x2970 <_turn_off>
    2b5a:	d7 01       	movw	r26, r14
    2b5c:	18 96       	adiw	r26, 0x08	; 8
    2b5e:	ed 91       	ld	r30, X+
    2b60:	fc 91       	ld	r31, X
    2b62:	19 97       	sbiw	r26, 0x09	; 9
    2b64:	64 e0       	ldi	r22, 0x04	; 4
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	91 e0       	ldi	r25, 0x01	; 1
    2b6a:	19 95       	eicall
    2b6c:	d7 01       	movw	r26, r14
    2b6e:	18 96       	adiw	r26, 0x08	; 8
    2b70:	ed 91       	ld	r30, X+
    2b72:	fc 91       	ld	r31, X
    2b74:	19 97       	sbiw	r26, 0x09	; 9
    2b76:	61 e0       	ldi	r22, 0x01	; 1
    2b78:	82 e0       	ldi	r24, 0x02	; 2
    2b7a:	91 e0       	ldi	r25, 0x01	; 1
    2b7c:	19 95       	eicall
    2b7e:	82 e0       	ldi	r24, 0x02	; 2
    2b80:	91 e0       	ldi	r25, 0x01	; 1
    2b82:	9b 8b       	std	Y+19, r25	; 0x13
    2b84:	8a 8b       	std	Y+18, r24	; 0x12
    2b86:	1c 8b       	std	Y+20, r17	; 0x14
    2b88:	1d 8a       	std	Y+21, r1	; 0x15
    2b8a:	1e 8b       	std	Y+22, r17	; 0x16
    2b8c:	83 e0       	ldi	r24, 0x03	; 3
    2b8e:	f0 de       	rcall	.-544    	; 0x2970 <_turn_off>
    2b90:	e1 2c       	mov	r14, r1
    2b92:	f1 2c       	mov	r15, r1
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	40 ec       	ldi	r20, 0xC0	; 192
    2b9a:	50 e0       	ldi	r21, 0x00	; 0
    2b9c:	6c eb       	ldi	r22, 0xBC	; 188
    2b9e:	73 e0       	ldi	r23, 0x03	; 3
    2ba0:	84 e1       	ldi	r24, 0x14	; 20
    2ba2:	95 e1       	ldi	r25, 0x15	; 21
    2ba4:	0e 94 a2 0a 	call	0x1544	; 0x1544 <xTaskCreate>
    2ba8:	df 91       	pop	r29
    2baa:	cf 91       	pop	r28
    2bac:	1f 91       	pop	r17
    2bae:	0f 91       	pop	r16
    2bb0:	ff 90       	pop	r15
    2bb2:	ef 90       	pop	r14
    2bb4:	df 90       	pop	r13
    2bb6:	cf 90       	pop	r12
    2bb8:	08 95       	ret

00002bba <_serial_call_back>:
    2bba:	0f 93       	push	r16
    2bbc:	1f 93       	push	r17
    2bbe:	cf 93       	push	r28
    2bc0:	df 93       	push	r29
    2bc2:	1f 92       	push	r1
    2bc4:	1f 92       	push	r1
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	8c 01       	movw	r16, r24
    2bcc:	19 82       	std	Y+1, r1	; 0x01
    2bce:	2d c0       	rjmp	.+90     	; 0x2c2a <_serial_call_back+0x70>
    2bd0:	e0 91 79 07 	lds	r30, 0x0779	; 0x800779 <rec_buf_inp.2926>
    2bd4:	ec 32       	cpi	r30, 0x2C	; 44
    2bd6:	50 f4       	brcc	.+20     	; 0x2bec <_serial_call_back+0x32>
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	8e 0f       	add	r24, r30
    2bdc:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <rec_buf_inp.2926>
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	e7 55       	subi	r30, 0x57	; 87
    2be4:	f8 4f       	sbci	r31, 0xF8	; 248
    2be6:	8a 81       	ldd	r24, Y+2	; 0x02
    2be8:	80 83       	st	Z, r24
    2bea:	02 c0       	rjmp	.+4      	; 0x2bf0 <_serial_call_back+0x36>
    2bec:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <rec_buf_inp.2926>
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	8a 30       	cpi	r24, 0x0A	; 10
    2bf4:	d1 f4       	brne	.+52     	; 0x2c2a <_serial_call_back+0x70>
    2bf6:	40 91 79 07 	lds	r20, 0x0779	; 0x800779 <rec_buf_inp.2926>
    2bfa:	50 e0       	ldi	r21, 0x00	; 0
    2bfc:	fa 01       	movw	r30, r20
    2bfe:	e9 55       	subi	r30, 0x59	; 89
    2c00:	f8 4f       	sbci	r31, 0xF8	; 248
    2c02:	10 82       	st	Z, r1
    2c04:	41 50       	subi	r20, 0x01	; 1
    2c06:	51 09       	sbc	r21, r1
    2c08:	9e 01       	movw	r18, r28
    2c0a:	2f 5f       	subi	r18, 0xFF	; 255
    2c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c0e:	69 ea       	ldi	r22, 0xA9	; 169
    2c10:	77 e0       	ldi	r23, 0x07	; 7
    2c12:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <_reply_buffer_handle>
    2c16:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <_reply_buffer_handle+0x1>
    2c1a:	0e 94 53 09 	call	0x12a6	; 0x12a6 <xStreamBufferSendFromISR>
    2c1e:	89 81       	ldd	r24, Y+1	; 0x01
    2c20:	81 11       	cpse	r24, r1
    2c22:	0e 94 b0 03 	call	0x760	; 0x760 <vPortYield>
    2c26:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <rec_buf_inp.2926>
    2c2a:	be 01       	movw	r22, r28
    2c2c:	6e 5f       	subi	r22, 0xFE	; 254
    2c2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c30:	c8 01       	movw	r24, r16
    2c32:	71 d5       	rcall	.+2786   	; 0x3716 <serial_get_byte>
    2c34:	88 23       	and	r24, r24
    2c36:	61 f2       	breq	.-104    	; 0x2bd0 <_serial_call_back+0x16>
    2c38:	0f 90       	pop	r0
    2c3a:	0f 90       	pop	r0
    2c3c:	df 91       	pop	r29
    2c3e:	cf 91       	pop	r28
    2c40:	1f 91       	pop	r17
    2c42:	0f 91       	pop	r16
    2c44:	08 95       	ret

00002c46 <_upload_message>:
    2c46:	0f 93       	push	r16
    2c48:	1f 93       	push	r17
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	8c 01       	movw	r16, r24
    2c50:	eb 01       	movw	r28, r22
    2c52:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <_reply_buffer_handle>
    2c56:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <_reply_buffer_handle+0x1>
    2c5a:	0e 94 14 09 	call	0x1228	; 0x1228 <xStreamBufferReset>
    2c5e:	b8 01       	movw	r22, r16
    2c60:	85 e1       	ldi	r24, 0x15	; 21
    2c62:	97 e0       	ldi	r25, 0x07	; 7
    2c64:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <strcpy>
    2c68:	20 97       	sbiw	r28, 0x00	; 0
    2c6a:	79 f0       	breq	.+30     	; 0x2c8a <_upload_message+0x44>
    2c6c:	e5 e1       	ldi	r30, 0x15	; 21
    2c6e:	f7 e0       	ldi	r31, 0x07	; 7
    2c70:	01 90       	ld	r0, Z+
    2c72:	00 20       	and	r0, r0
    2c74:	e9 f7       	brne	.-6      	; 0x2c70 <_upload_message+0x2a>
    2c76:	31 97       	sbiw	r30, 0x01	; 1
    2c78:	80 e2       	ldi	r24, 0x20	; 32
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	91 83       	std	Z+1, r25	; 0x01
    2c7e:	80 83       	st	Z, r24
    2c80:	be 01       	movw	r22, r28
    2c82:	85 e1       	ldi	r24, 0x15	; 21
    2c84:	97 e0       	ldi	r25, 0x07	; 7
    2c86:	0e 94 60 22 	call	0x44c0	; 0x44c0 <strcat>
    2c8a:	e5 e1       	ldi	r30, 0x15	; 21
    2c8c:	f7 e0       	ldi	r31, 0x07	; 7
    2c8e:	df 01       	movw	r26, r30
    2c90:	0d 90       	ld	r0, X+
    2c92:	00 20       	and	r0, r0
    2c94:	e9 f7       	brne	.-6      	; 0x2c90 <_upload_message+0x4a>
    2c96:	11 97       	sbiw	r26, 0x01	; 1
    2c98:	8d e0       	ldi	r24, 0x0D	; 13
    2c9a:	9a e0       	ldi	r25, 0x0A	; 10
    2c9c:	11 96       	adiw	r26, 0x01	; 1
    2c9e:	9c 93       	st	X, r25
    2ca0:	8e 93       	st	-X, r24
    2ca2:	12 96       	adiw	r26, 0x02	; 2
    2ca4:	1c 92       	st	X, r1
    2ca6:	01 90       	ld	r0, Z+
    2ca8:	00 20       	and	r0, r0
    2caa:	e9 f7       	brne	.-6      	; 0x2ca6 <_upload_message+0x60>
    2cac:	31 97       	sbiw	r30, 0x01	; 1
    2cae:	e5 51       	subi	r30, 0x15	; 21
    2cb0:	f7 40       	sbci	r31, 0x07	; 7
    2cb2:	ae 2f       	mov	r26, r30
    2cb4:	85 e1       	ldi	r24, 0x15	; 21
    2cb6:	97 e0       	ldi	r25, 0x07	; 7
    2cb8:	ac 01       	movw	r20, r24
    2cba:	6a 2f       	mov	r22, r26
    2cbc:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <_rn2483_serial>
    2cc0:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <_rn2483_serial+0x1>
    2cc4:	d8 d4       	rcall	.+2480   	; 0x3676 <serial_send_bytes>
    2cc6:	81 11       	cpse	r24, r1
    2cc8:	0f c0       	rjmp	.+30     	; 0x2ce8 <_upload_message+0xa2>
    2cca:	28 e2       	ldi	r18, 0x28	; 40
    2ccc:	35 e0       	ldi	r19, 0x05	; 5
    2cce:	4d e2       	ldi	r20, 0x2D	; 45
    2cd0:	50 e0       	ldi	r21, 0x00	; 0
    2cd2:	63 e0       	ldi	r22, 0x03	; 3
    2cd4:	78 e0       	ldi	r23, 0x08	; 8
    2cd6:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <_reply_buffer_handle>
    2cda:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <_reply_buffer_handle+0x1>
    2cde:	0e 94 95 09 	call	0x132a	; 0x132a <xStreamBufferReceive>
    2ce2:	83 e0       	ldi	r24, 0x03	; 3
    2ce4:	98 e0       	ldi	r25, 0x08	; 8
    2ce6:	02 c0       	rjmp	.+4      	; 0x2cec <_upload_message+0xa6>
    2ce8:	80 e0       	ldi	r24, 0x00	; 0
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	08 95       	ret

00002cf6 <_reply2return_code>:
    2cf6:	af 92       	push	r10
    2cf8:	bf 92       	push	r11
    2cfa:	cf 92       	push	r12
    2cfc:	df 92       	push	r13
    2cfe:	ef 92       	push	r14
    2d00:	ff 92       	push	r15
    2d02:	0f 93       	push	r16
    2d04:	1f 93       	push	r17
    2d06:	cf 93       	push	r28
    2d08:	df 93       	push	r29
    2d0a:	6c 01       	movw	r12, r24
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	01 90       	ld	r0, Z+
    2d10:	00 20       	and	r0, r0
    2d12:	e9 f7       	brne	.-6      	; 0x2d0e <_reply2return_code+0x18>
    2d14:	31 97       	sbiw	r30, 0x01	; 1
    2d16:	7f 01       	movw	r14, r30
    2d18:	e8 1a       	sub	r14, r24
    2d1a:	f9 0a       	sbc	r15, r25
    2d1c:	08 e3       	ldi	r16, 0x38	; 56
    2d1e:	16 e0       	ldi	r17, 0x06	; 6
    2d20:	c0 e0       	ldi	r28, 0x00	; 0
    2d22:	d0 e0       	ldi	r29, 0x00	; 0
    2d24:	f8 01       	movw	r30, r16
    2d26:	60 81       	ld	r22, Z
    2d28:	71 81       	ldd	r23, Z+1	; 0x01
    2d2a:	a7 01       	movw	r20, r14
    2d2c:	c6 01       	movw	r24, r12
    2d2e:	0e 94 72 22 	call	0x44e4	; 0x44e4 <strncasecmp>
    2d32:	89 2b       	or	r24, r25
    2d34:	49 f4       	brne	.+18     	; 0x2d48 <_reply2return_code+0x52>
    2d36:	fe 01       	movw	r30, r28
    2d38:	ee 0f       	add	r30, r30
    2d3a:	ff 1f       	adc	r31, r31
    2d3c:	ec 0f       	add	r30, r28
    2d3e:	fd 1f       	adc	r31, r29
    2d40:	e9 5c       	subi	r30, 0xC9	; 201
    2d42:	f9 4f       	sbci	r31, 0xF9	; 249
    2d44:	80 81       	ld	r24, Z
    2d46:	07 c0       	rjmp	.+14     	; 0x2d56 <_reply2return_code+0x60>
    2d48:	21 96       	adiw	r28, 0x01	; 1
    2d4a:	0d 5f       	subi	r16, 0xFD	; 253
    2d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4e:	c1 31       	cpi	r28, 0x11	; 17
    2d50:	d1 05       	cpc	r29, r1
    2d52:	41 f7       	brne	.-48     	; 0x2d24 <_reply2return_code+0x2e>
    2d54:	80 e1       	ldi	r24, 0x10	; 16
    2d56:	df 91       	pop	r29
    2d58:	cf 91       	pop	r28
    2d5a:	1f 91       	pop	r17
    2d5c:	0f 91       	pop	r16
    2d5e:	ff 90       	pop	r15
    2d60:	ef 90       	pop	r14
    2d62:	df 90       	pop	r13
    2d64:	cf 90       	pop	r12
    2d66:	bf 90       	pop	r11
    2d68:	af 90       	pop	r10
    2d6a:	08 95       	ret

00002d6c <_upload_message_rc>:
    2d6c:	6c df       	rcall	.-296    	; 0x2c46 <_upload_message>
    2d6e:	c3 cf       	rjmp	.-122    	; 0x2cf6 <_reply2return_code>
    2d70:	08 95       	ret

00002d72 <lora_driver_create>:
    2d72:	8f 92       	push	r8
    2d74:	9f 92       	push	r9
    2d76:	af 92       	push	r10
    2d78:	cf 92       	push	r12
    2d7a:	ef 92       	push	r14
    2d7c:	0f 93       	push	r16
    2d7e:	cf 93       	push	r28
    2d80:	c8 2f       	mov	r28, r24
    2d82:	41 e0       	ldi	r20, 0x01	; 1
    2d84:	60 e0       	ldi	r22, 0x00	; 0
    2d86:	70 e0       	ldi	r23, 0x00	; 0
    2d88:	88 ec       	ldi	r24, 0xC8	; 200
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <xStreamBufferGenericCreate>
    2d90:	90 93 7b 07 	sts	0x077B, r25	; 0x80077b <_reply_buffer_handle+0x1>
    2d94:	80 93 7a 07 	sts	0x077A, r24	; 0x80077a <_reply_buffer_handle>
    2d98:	0f 2e       	mov	r0, r31
    2d9a:	fd ed       	ldi	r31, 0xDD	; 221
    2d9c:	8f 2e       	mov	r8, r31
    2d9e:	f5 e1       	ldi	r31, 0x15	; 21
    2da0:	9f 2e       	mov	r9, r31
    2da2:	f0 2d       	mov	r31, r0
    2da4:	68 94       	set
    2da6:	aa 24       	eor	r10, r10
    2da8:	a6 f8       	bld	r10, 6
    2daa:	68 94       	set
    2dac:	cc 24       	eor	r12, r12
    2dae:	c6 f8       	bld	r12, 6
    2db0:	e1 2c       	mov	r14, r1
    2db2:	00 e0       	ldi	r16, 0x00	; 0
    2db4:	23 e0       	ldi	r18, 0x03	; 3
    2db6:	40 e0       	ldi	r20, 0x00	; 0
    2db8:	51 ee       	ldi	r21, 0xE1	; 225
    2dba:	60 e0       	ldi	r22, 0x00	; 0
    2dbc:	70 e0       	ldi	r23, 0x00	; 0
    2dbe:	8c 2f       	mov	r24, r28
    2dc0:	9f d3       	rcall	.+1854   	; 0x3500 <serial_new_instance>
    2dc2:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <_rn2483_serial+0x1>
    2dc6:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <_rn2483_serial>
    2dca:	e0 91 6f 08 	lds	r30, 0x086F	; 0x80086f <register_access+0x8>
    2dce:	f0 91 70 08 	lds	r31, 0x0870	; 0x800870 <register_access+0x9>
    2dd2:	64 e0       	ldi	r22, 0x04	; 4
    2dd4:	87 e0       	ldi	r24, 0x07	; 7
    2dd6:	91 e0       	ldi	r25, 0x01	; 1
    2dd8:	19 95       	eicall
    2dda:	cf 91       	pop	r28
    2ddc:	0f 91       	pop	r16
    2dde:	ef 90       	pop	r14
    2de0:	cf 90       	pop	r12
    2de2:	af 90       	pop	r10
    2de4:	9f 90       	pop	r9
    2de6:	8f 90       	pop	r8
    2de8:	08 95       	ret

00002dea <lora_driver_reset_rn2483>:
    2dea:	88 23       	and	r24, r24
    2dec:	49 f0       	breq	.+18     	; 0x2e00 <lora_driver_reset_rn2483+0x16>
    2dee:	e0 91 79 08 	lds	r30, 0x0879	; 0x800879 <register_access+0x12>
    2df2:	f0 91 7a 08 	lds	r31, 0x087A	; 0x80087a <register_access+0x13>
    2df6:	64 e0       	ldi	r22, 0x04	; 4
    2df8:	88 e0       	ldi	r24, 0x08	; 8
    2dfa:	91 e0       	ldi	r25, 0x01	; 1
    2dfc:	19 95       	eicall
    2dfe:	08 95       	ret
    2e00:	e0 91 6f 08 	lds	r30, 0x086F	; 0x80086f <register_access+0x8>
    2e04:	f0 91 70 08 	lds	r31, 0x0870	; 0x800870 <register_access+0x9>
    2e08:	64 e0       	ldi	r22, 0x04	; 4
    2e0a:	88 e0       	ldi	r24, 0x08	; 8
    2e0c:	91 e0       	ldi	r25, 0x01	; 1
    2e0e:	19 95       	eicall
    2e10:	08 95       	ret

00002e12 <lora_driver_rn2483_factory_reset>:
    2e12:	60 e0       	ldi	r22, 0x00	; 0
    2e14:	70 e0       	ldi	r23, 0x00	; 0
    2e16:	83 ee       	ldi	r24, 0xE3	; 227
    2e18:	93 e0       	ldi	r25, 0x03	; 3
    2e1a:	15 df       	rcall	.-470    	; 0x2c46 <_upload_message>
    2e1c:	e3 e0       	ldi	r30, 0x03	; 3
    2e1e:	f8 e0       	ldi	r31, 0x08	; 8
    2e20:	01 90       	ld	r0, Z+
    2e22:	00 20       	and	r0, r0
    2e24:	e9 f7       	brne	.-6      	; 0x2e20 <lora_driver_rn2483_factory_reset+0xe>
    2e26:	31 97       	sbiw	r30, 0x01	; 1
    2e28:	e3 50       	subi	r30, 0x03	; 3
    2e2a:	f8 40       	sbci	r31, 0x08	; 8
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	75 97       	sbiw	r30, 0x15	; 21
    2e30:	08 f0       	brcs	.+2      	; 0x2e34 <lora_driver_rn2483_factory_reset+0x22>
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	08 95       	ret

00002e36 <lora_driver_get_rn2483_hweui>:
    2e36:	cf 93       	push	r28
    2e38:	df 93       	push	r29
    2e3a:	ec 01       	movw	r28, r24
    2e3c:	60 e0       	ldi	r22, 0x00	; 0
    2e3e:	70 e0       	ldi	r23, 0x00	; 0
    2e40:	84 ef       	ldi	r24, 0xF4	; 244
    2e42:	93 e0       	ldi	r25, 0x03	; 3
    2e44:	00 df       	rcall	.-512    	; 0x2c46 <_upload_message>
    2e46:	e3 e0       	ldi	r30, 0x03	; 3
    2e48:	f8 e0       	ldi	r31, 0x08	; 8
    2e4a:	01 90       	ld	r0, Z+
    2e4c:	00 20       	and	r0, r0
    2e4e:	e9 f7       	brne	.-6      	; 0x2e4a <lora_driver_get_rn2483_hweui+0x14>
    2e50:	e4 51       	subi	r30, 0x14	; 20
    2e52:	f8 40       	sbci	r31, 0x08	; 8
    2e54:	39 f4       	brne	.+14     	; 0x2e64 <lora_driver_get_rn2483_hweui+0x2e>
    2e56:	63 e0       	ldi	r22, 0x03	; 3
    2e58:	78 e0       	ldi	r23, 0x08	; 8
    2e5a:	ce 01       	movw	r24, r28
    2e5c:	0e 94 6b 22 	call	0x44d6	; 0x44d6 <strcpy>
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	02 c0       	rjmp	.+4      	; 0x2e68 <lora_driver_get_rn2483_hweui+0x32>
    2e64:	18 82       	st	Y, r1
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	df 91       	pop	r29
    2e6a:	cf 91       	pop	r28
    2e6c:	08 95       	ret

00002e6e <lora_driver_set_device_identifier>:
    2e6e:	fc 01       	movw	r30, r24
    2e70:	01 90       	ld	r0, Z+
    2e72:	00 20       	and	r0, r0
    2e74:	e9 f7       	brne	.-6      	; 0x2e70 <lora_driver_set_device_identifier+0x2>
    2e76:	9f 01       	movw	r18, r30
    2e78:	21 51       	subi	r18, 0x11	; 17
    2e7a:	31 09       	sbc	r19, r1
    2e7c:	28 17       	cp	r18, r24
    2e7e:	39 07       	cpc	r19, r25
    2e80:	29 f4       	brne	.+10     	; 0x2e8c <lora_driver_set_device_identifier+0x1e>
    2e82:	bc 01       	movw	r22, r24
    2e84:	82 e2       	ldi	r24, 0x22	; 34
    2e86:	94 e0       	ldi	r25, 0x04	; 4
    2e88:	71 cf       	rjmp	.-286    	; 0x2d6c <_upload_message_rc>
    2e8a:	08 95       	ret
    2e8c:	89 e0       	ldi	r24, 0x09	; 9
    2e8e:	08 95       	ret

00002e90 <lora_driver_set_application_identifier>:
    2e90:	fc 01       	movw	r30, r24
    2e92:	01 90       	ld	r0, Z+
    2e94:	00 20       	and	r0, r0
    2e96:	e9 f7       	brne	.-6      	; 0x2e92 <lora_driver_set_application_identifier+0x2>
    2e98:	9f 01       	movw	r18, r30
    2e9a:	21 51       	subi	r18, 0x11	; 17
    2e9c:	31 09       	sbc	r19, r1
    2e9e:	28 17       	cp	r18, r24
    2ea0:	39 07       	cpc	r19, r25
    2ea2:	29 f4       	brne	.+10     	; 0x2eae <lora_driver_set_application_identifier+0x1e>
    2ea4:	bc 01       	movw	r22, r24
    2ea6:	81 e3       	ldi	r24, 0x31	; 49
    2ea8:	94 e0       	ldi	r25, 0x04	; 4
    2eaa:	60 cf       	rjmp	.-320    	; 0x2d6c <_upload_message_rc>
    2eac:	08 95       	ret
    2eae:	89 e0       	ldi	r24, 0x09	; 9
    2eb0:	08 95       	ret

00002eb2 <lora_driver_set_application_key>:
    2eb2:	fc 01       	movw	r30, r24
    2eb4:	01 90       	ld	r0, Z+
    2eb6:	00 20       	and	r0, r0
    2eb8:	e9 f7       	brne	.-6      	; 0x2eb4 <lora_driver_set_application_key+0x2>
    2eba:	9f 01       	movw	r18, r30
    2ebc:	21 52       	subi	r18, 0x21	; 33
    2ebe:	31 09       	sbc	r19, r1
    2ec0:	28 17       	cp	r18, r24
    2ec2:	39 07       	cpc	r19, r25
    2ec4:	29 f4       	brne	.+10     	; 0x2ed0 <lora_driver_set_application_key+0x1e>
    2ec6:	bc 01       	movw	r22, r24
    2ec8:	80 e4       	ldi	r24, 0x40	; 64
    2eca:	94 e0       	ldi	r25, 0x04	; 4
    2ecc:	4f cf       	rjmp	.-354    	; 0x2d6c <_upload_message_rc>
    2ece:	08 95       	ret
    2ed0:	89 e0       	ldi	r24, 0x09	; 9
    2ed2:	08 95       	ret

00002ed4 <lora_driver_save_mac>:
    2ed4:	60 e0       	ldi	r22, 0x00	; 0
    2ed6:	70 e0       	ldi	r23, 0x00	; 0
    2ed8:	8f e7       	ldi	r24, 0x7F	; 127
    2eda:	94 e0       	ldi	r25, 0x04	; 4
    2edc:	47 cf       	rjmp	.-370    	; 0x2d6c <_upload_message_rc>
    2ede:	08 95       	ret

00002ee0 <lora_driver_join>:
    2ee0:	e8 2f       	mov	r30, r24
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	ee 0f       	add	r30, r30
    2ee6:	ff 1f       	adc	r31, r31
    2ee8:	ed 5c       	subi	r30, 0xCD	; 205
    2eea:	f9 4f       	sbci	r31, 0xF9	; 249
    2eec:	60 81       	ld	r22, Z
    2eee:	71 81       	ldd	r23, Z+1	; 0x01
    2ef0:	88 e8       	ldi	r24, 0x88	; 136
    2ef2:	94 e0       	ldi	r25, 0x04	; 4
    2ef4:	3b df       	rcall	.-394    	; 0x2d6c <_upload_message_rc>
    2ef6:	81 11       	cpse	r24, r1
    2ef8:	12 c0       	rjmp	.+36     	; 0x2f1e <lora_driver_join+0x3e>
    2efa:	28 e2       	ldi	r18, 0x28	; 40
    2efc:	35 e0       	ldi	r19, 0x05	; 5
    2efe:	4d e2       	ldi	r20, 0x2D	; 45
    2f00:	50 e0       	ldi	r21, 0x00	; 0
    2f02:	63 e0       	ldi	r22, 0x03	; 3
    2f04:	78 e0       	ldi	r23, 0x08	; 8
    2f06:	80 91 7a 07 	lds	r24, 0x077A	; 0x80077a <_reply_buffer_handle>
    2f0a:	90 91 7b 07 	lds	r25, 0x077B	; 0x80077b <_reply_buffer_handle+0x1>
    2f0e:	0e 94 95 09 	call	0x132a	; 0x132a <xStreamBufferReceive>
    2f12:	88 23       	and	r24, r24
    2f14:	21 f0       	breq	.+8      	; 0x2f1e <lora_driver_join+0x3e>
    2f16:	83 e0       	ldi	r24, 0x03	; 3
    2f18:	98 e0       	ldi	r25, 0x08	; 8
    2f1a:	ed ce       	rjmp	.-550    	; 0x2cf6 <_reply2return_code>
    2f1c:	08 95       	ret
    2f1e:	83 e0       	ldi	r24, 0x03	; 3
    2f20:	98 e0       	ldi	r25, 0x08	; 8
    2f22:	e9 ce       	rjmp	.-558    	; 0x2cf6 <_reply2return_code>
    2f24:	08 95       	ret

00002f26 <lora_driver_sent_upload_message>:
    2f26:	cf 93       	push	r28
    2f28:	df 93       	push	r29
    2f2a:	1f 92       	push	r1
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
    2f30:	db 01       	movw	r26, r22
    2f32:	11 96       	adiw	r26, 0x01	; 1
    2f34:	9c 91       	ld	r25, X
    2f36:	11 97       	sbiw	r26, 0x01	; 1
    2f38:	95 31       	cpi	r25, 0x15	; 21
    2f3a:	08 f0       	brcs	.+2      	; 0x2f3e <lora_driver_sent_upload_message+0x18>
    2f3c:	87 c0       	rjmp	.+270    	; 0x304c <lora_driver_sent_upload_message+0x126>
    2f3e:	99 23       	and	r25, r25
    2f40:	81 f1       	breq	.+96     	; 0x2fa2 <lora_driver_sent_upload_message+0x7c>
    2f42:	60 e0       	ldi	r22, 0x00	; 0
    2f44:	70 e0       	ldi	r23, 0x00	; 0
    2f46:	27 2f       	mov	r18, r23
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	46 2f       	mov	r20, r22
    2f4c:	50 e0       	ldi	r21, 0x00	; 0
    2f4e:	fd 01       	movw	r30, r26
    2f50:	e4 0f       	add	r30, r20
    2f52:	f5 1f       	adc	r31, r21
    2f54:	92 81       	ldd	r25, Z+2	; 0x02
    2f56:	92 95       	swap	r25
    2f58:	9f 70       	andi	r25, 0x0F	; 15
    2f5a:	9a 30       	cpi	r25, 0x0A	; 10
    2f5c:	10 f0       	brcs	.+4      	; 0x2f62 <lora_driver_sent_upload_message+0x3c>
    2f5e:	99 5c       	subi	r25, 0xC9	; 201
    2f60:	01 c0       	rjmp	.+2      	; 0x2f64 <lora_driver_sent_upload_message+0x3e>
    2f62:	90 5d       	subi	r25, 0xD0	; 208
    2f64:	f9 01       	movw	r30, r18
    2f66:	ec 56       	subi	r30, 0x6C	; 108
    2f68:	f8 4f       	sbci	r31, 0xF8	; 248
    2f6a:	90 83       	st	Z, r25
    2f6c:	2f 5f       	subi	r18, 0xFF	; 255
    2f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f70:	fd 01       	movw	r30, r26
    2f72:	e4 0f       	add	r30, r20
    2f74:	f5 1f       	adc	r31, r21
    2f76:	92 81       	ldd	r25, Z+2	; 0x02
    2f78:	9f 70       	andi	r25, 0x0F	; 15
    2f7a:	49 2f       	mov	r20, r25
    2f7c:	50 e0       	ldi	r21, 0x00	; 0
    2f7e:	4a 30       	cpi	r20, 0x0A	; 10
    2f80:	51 05       	cpc	r21, r1
    2f82:	14 f0       	brlt	.+4      	; 0x2f88 <lora_driver_sent_upload_message+0x62>
    2f84:	99 5c       	subi	r25, 0xC9	; 201
    2f86:	01 c0       	rjmp	.+2      	; 0x2f8a <lora_driver_sent_upload_message+0x64>
    2f88:	90 5d       	subi	r25, 0xD0	; 208
    2f8a:	f9 01       	movw	r30, r18
    2f8c:	ec 56       	subi	r30, 0x6C	; 108
    2f8e:	f8 4f       	sbci	r31, 0xF8	; 248
    2f90:	90 83       	st	Z, r25
    2f92:	7e 5f       	subi	r23, 0xFE	; 254
    2f94:	6f 5f       	subi	r22, 0xFF	; 255
    2f96:	11 96       	adiw	r26, 0x01	; 1
    2f98:	9c 91       	ld	r25, X
    2f9a:	11 97       	sbiw	r26, 0x01	; 1
    2f9c:	69 17       	cp	r22, r25
    2f9e:	98 f2       	brcs	.-90     	; 0x2f46 <lora_driver_sent_upload_message+0x20>
    2fa0:	01 c0       	rjmp	.+2      	; 0x2fa4 <lora_driver_sent_upload_message+0x7e>
    2fa2:	70 e0       	ldi	r23, 0x00	; 0
    2fa4:	e7 2f       	mov	r30, r23
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	ec 56       	subi	r30, 0x6C	; 108
    2faa:	f8 4f       	sbci	r31, 0xF8	; 248
    2fac:	10 82       	st	Z, r1
    2fae:	4c 91       	ld	r20, X
    2fb0:	81 11       	cpse	r24, r1
    2fb2:	03 c0       	rjmp	.+6      	; 0x2fba <lora_driver_sent_upload_message+0x94>
    2fb4:	81 e9       	ldi	r24, 0x91	; 145
    2fb6:	94 e0       	ldi	r25, 0x04	; 4
    2fb8:	02 c0       	rjmp	.+4      	; 0x2fbe <lora_driver_sent_upload_message+0x98>
    2fba:	83 e9       	ldi	r24, 0x93	; 147
    2fbc:	94 e0       	ldi	r25, 0x04	; 4
    2fbe:	24 e9       	ldi	r18, 0x94	; 148
    2fc0:	37 e0       	ldi	r19, 0x07	; 7
    2fc2:	3f 93       	push	r19
    2fc4:	2f 93       	push	r18
    2fc6:	1f 92       	push	r1
    2fc8:	4f 93       	push	r20
    2fca:	9f 93       	push	r25
    2fcc:	8f 93       	push	r24
    2fce:	87 e9       	ldi	r24, 0x97	; 151
    2fd0:	94 e0       	ldi	r25, 0x04	; 4
    2fd2:	9f 93       	push	r25
    2fd4:	8f 93       	push	r24
    2fd6:	86 ed       	ldi	r24, 0xD6	; 214
    2fd8:	97 e0       	ldi	r25, 0x07	; 7
    2fda:	9f 93       	push	r25
    2fdc:	8f 93       	push	r24
    2fde:	0e 94 cd 22 	call	0x459a	; 0x459a <sprintf>
    2fe2:	60 e0       	ldi	r22, 0x00	; 0
    2fe4:	70 e0       	ldi	r23, 0x00	; 0
    2fe6:	86 ed       	ldi	r24, 0xD6	; 214
    2fe8:	97 e0       	ldi	r25, 0x07	; 7
    2fea:	c0 de       	rcall	.-640    	; 0x2d6c <_upload_message_rc>
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	de bf       	out	0x3e, r29	; 62
    2ff2:	0f be       	out	0x3f, r0	; 63
    2ff4:	cd bf       	out	0x3d, r28	; 61
    2ff6:	8e 30       	cpi	r24, 0x0E	; 14
    2ff8:	51 f5       	brne	.+84     	; 0x304e <lora_driver_sent_upload_message+0x128>
    2ffa:	87 e0       	ldi	r24, 0x07	; 7
    2ffc:	89 83       	std	Y+1, r24	; 0x01
    2ffe:	be 01       	movw	r22, r28
    3000:	6f 5f       	subi	r22, 0xFF	; 255
    3002:	7f 4f       	sbci	r23, 0xFF	; 255
    3004:	83 e0       	ldi	r24, 0x03	; 3
    3006:	98 e0       	ldi	r25, 0x08	; 8
    3008:	30 d1       	rcall	.+608    	; 0x326a <decode_port_no>
    300a:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <_downlink_payload>
    300e:	e9 81       	ldd	r30, Y+1	; 0x01
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	ed 5f       	subi	r30, 0xFD	; 253
    3014:	f7 4f       	sbci	r31, 0xF7	; 247
    3016:	df 01       	movw	r26, r30
    3018:	0d 90       	ld	r0, X+
    301a:	00 20       	and	r0, r0
    301c:	e9 f7       	brne	.-6      	; 0x3018 <lora_driver_sent_upload_message+0xf2>
    301e:	11 97       	sbiw	r26, 0x01	; 1
    3020:	ae 1b       	sub	r26, r30
    3022:	bf 0b       	sbc	r27, r31
    3024:	aa 23       	and	r26, r26
    3026:	81 f0       	breq	.+32     	; 0x3048 <lora_driver_sent_upload_message+0x122>
    3028:	bb 27       	eor	r27, r27
    302a:	11 97       	sbiw	r26, 0x01	; 1
    302c:	cd 01       	movw	r24, r26
    302e:	0a f4       	brpl	.+2      	; 0x3032 <lora_driver_sent_upload_message+0x10c>
    3030:	01 96       	adiw	r24, 0x01	; 1
    3032:	95 95       	asr	r25
    3034:	87 95       	ror	r24
    3036:	80 93 7f 07 	sts	0x077F, r24	; 0x80077f <_downlink_payload+0x1>
    303a:	af 01       	movw	r20, r30
    303c:	4f 5f       	subi	r20, 0xFF	; 255
    303e:	5f 4f       	sbci	r21, 0xFF	; 255
    3040:	64 e1       	ldi	r22, 0x14	; 20
    3042:	80 e8       	ldi	r24, 0x80	; 128
    3044:	97 e0       	ldi	r25, 0x07	; 7
    3046:	3d d1       	rcall	.+634    	; 0x32c2 <decode_hexadecimal_string_bytes>
    3048:	8e e0       	ldi	r24, 0x0E	; 14
    304a:	01 c0       	rjmp	.+2      	; 0x304e <lora_driver_sent_upload_message+0x128>
    304c:	84 e1       	ldi	r24, 0x14	; 20
    304e:	0f 90       	pop	r0
    3050:	df 91       	pop	r29
    3052:	cf 91       	pop	r28
    3054:	08 95       	ret

00003056 <lora_driver_set_adaptive_data_rate>:
    3056:	81 30       	cpi	r24, 0x01	; 1
    3058:	19 f0       	breq	.+6      	; 0x3060 <lora_driver_set_adaptive_data_rate+0xa>
    305a:	67 ea       	ldi	r22, 0xA7	; 167
    305c:	74 e0       	ldi	r23, 0x04	; 4
    305e:	02 c0       	rjmp	.+4      	; 0x3064 <lora_driver_set_adaptive_data_rate+0xe>
    3060:	67 e6       	ldi	r22, 0x67	; 103
    3062:	75 e0       	ldi	r23, 0x05	; 5
    3064:	8b ea       	ldi	r24, 0xAB	; 171
    3066:	94 e0       	ldi	r25, 0x04	; 4
    3068:	81 ce       	rjmp	.-766    	; 0x2d6c <_upload_message_rc>
    306a:	08 95       	ret

0000306c <lora_driver_configure_to_eu868>:
    306c:	2f 92       	push	r2
    306e:	3f 92       	push	r3
    3070:	4f 92       	push	r4
    3072:	5f 92       	push	r5
    3074:	6f 92       	push	r6
    3076:	7f 92       	push	r7
    3078:	8f 92       	push	r8
    307a:	9f 92       	push	r9
    307c:	af 92       	push	r10
    307e:	bf 92       	push	r11
    3080:	cf 92       	push	r12
    3082:	df 92       	push	r13
    3084:	ef 92       	push	r14
    3086:	ff 92       	push	r15
    3088:	0f 93       	push	r16
    308a:	1f 93       	push	r17
    308c:	cf 93       	push	r28
    308e:	df 93       	push	r29
    3090:	cd b7       	in	r28, 0x3d	; 61
    3092:	de b7       	in	r29, 0x3e	; 62
    3094:	a0 97       	sbiw	r28, 0x20	; 32
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	60 ef       	ldi	r22, 0xF0	; 240
    30a2:	74 e0       	ldi	r23, 0x04	; 4
    30a4:	8c ef       	ldi	r24, 0xFC	; 252
    30a6:	94 e0       	ldi	r25, 0x04	; 4
    30a8:	ce dd       	rcall	.-1124   	; 0x2c46 <_upload_message>
    30aa:	25 de       	rcall	.-950    	; 0x2cf6 <_reply2return_code>
    30ac:	81 11       	cpse	r24, r1
    30ae:	a3 c0       	rjmp	.+326    	; 0x31f6 <lora_driver_configure_to_eu868+0x18a>
    30b0:	80 e2       	ldi	r24, 0x20	; 32
    30b2:	ed e1       	ldi	r30, 0x1D	; 29
    30b4:	f2 e0       	ldi	r31, 0x02	; 2
    30b6:	de 01       	movw	r26, r28
    30b8:	11 96       	adiw	r26, 0x01	; 1
    30ba:	01 90       	ld	r0, Z+
    30bc:	0d 92       	st	X+, r0
    30be:	8a 95       	dec	r24
    30c0:	e1 f7       	brne	.-8      	; 0x30ba <lora_driver_configure_to_eu868+0x4e>
    30c2:	9e 01       	movw	r18, r28
    30c4:	2f 5f       	subi	r18, 0xFF	; 255
    30c6:	3f 4f       	sbci	r19, 0xFF	; 255
    30c8:	69 01       	movw	r12, r18
    30ca:	e1 2c       	mov	r14, r1
    30cc:	f1 2c       	mov	r15, r1
    30ce:	0f 2e       	mov	r0, r31
    30d0:	f8 e0       	ldi	r31, 0x08	; 8
    30d2:	af 2e       	mov	r10, r31
    30d4:	f5 e0       	ldi	r31, 0x05	; 5
    30d6:	bf 2e       	mov	r11, r31
    30d8:	f0 2d       	mov	r31, r0
    30da:	06 ed       	ldi	r16, 0xD6	; 214
    30dc:	17 e0       	ldi	r17, 0x07	; 7
    30de:	0f 2e       	mov	r0, r31
    30e0:	f1 e2       	ldi	r31, 0x21	; 33
    30e2:	4f 2e       	mov	r4, r31
    30e4:	f5 e0       	ldi	r31, 0x05	; 5
    30e6:	5f 2e       	mov	r5, r31
    30e8:	f0 2d       	mov	r31, r0
    30ea:	0f 2e       	mov	r0, r31
    30ec:	f8 e3       	ldi	r31, 0x38	; 56
    30ee:	8f 2e       	mov	r8, r31
    30f0:	f5 e0       	ldi	r31, 0x05	; 5
    30f2:	9f 2e       	mov	r9, r31
    30f4:	f0 2d       	mov	r31, r0
    30f6:	0f 2e       	mov	r0, r31
    30f8:	f2 e5       	ldi	r31, 0x52	; 82
    30fa:	6f 2e       	mov	r6, r31
    30fc:	f5 e0       	ldi	r31, 0x05	; 5
    30fe:	7f 2e       	mov	r7, r31
    3100:	f0 2d       	mov	r31, r0
    3102:	3e 2c       	mov	r3, r14
    3104:	2f 2c       	mov	r2, r15
    3106:	ff 92       	push	r15
    3108:	ef 92       	push	r14
    310a:	bf 92       	push	r11
    310c:	af 92       	push	r10
    310e:	1f 93       	push	r17
    3110:	0f 93       	push	r16
    3112:	0e 94 cd 22 	call	0x459a	; 0x459a <sprintf>
    3116:	60 e0       	ldi	r22, 0x00	; 0
    3118:	70 e0       	ldi	r23, 0x00	; 0
    311a:	c8 01       	movw	r24, r16
    311c:	94 dd       	rcall	.-1240   	; 0x2c46 <_upload_message>
    311e:	eb dd       	rcall	.-1066   	; 0x2cf6 <_reply2return_code>
    3120:	0f 90       	pop	r0
    3122:	0f 90       	pop	r0
    3124:	0f 90       	pop	r0
    3126:	0f 90       	pop	r0
    3128:	0f 90       	pop	r0
    312a:	0f 90       	pop	r0
    312c:	81 11       	cpse	r24, r1
    312e:	63 c0       	rjmp	.+198    	; 0x31f6 <lora_driver_configure_to_eu868+0x18a>
    3130:	32 e0       	ldi	r19, 0x02	; 2
    3132:	3e 15       	cp	r19, r14
    3134:	e8 f4       	brcc	.+58     	; 0x3170 <lora_driver_configure_to_eu868+0x104>
    3136:	f6 01       	movw	r30, r12
    3138:	83 81       	ldd	r24, Z+3	; 0x03
    313a:	8f 93       	push	r24
    313c:	82 81       	ldd	r24, Z+2	; 0x02
    313e:	8f 93       	push	r24
    3140:	81 81       	ldd	r24, Z+1	; 0x01
    3142:	8f 93       	push	r24
    3144:	80 81       	ld	r24, Z
    3146:	8f 93       	push	r24
    3148:	ff 92       	push	r15
    314a:	ef 92       	push	r14
    314c:	5f 92       	push	r5
    314e:	4f 92       	push	r4
    3150:	1f 93       	push	r17
    3152:	0f 93       	push	r16
    3154:	0e 94 cd 22 	call	0x459a	; 0x459a <sprintf>
    3158:	60 e0       	ldi	r22, 0x00	; 0
    315a:	70 e0       	ldi	r23, 0x00	; 0
    315c:	c8 01       	movw	r24, r16
    315e:	73 dd       	rcall	.-1306   	; 0x2c46 <_upload_message>
    3160:	ca dd       	rcall	.-1132   	; 0x2cf6 <_reply2return_code>
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	cd bf       	out	0x3d, r28	; 61
    316c:	81 11       	cpse	r24, r1
    316e:	43 c0       	rjmp	.+134    	; 0x31f6 <lora_driver_configure_to_eu868+0x18a>
    3170:	2f 92       	push	r2
    3172:	3f 92       	push	r3
    3174:	9f 92       	push	r9
    3176:	8f 92       	push	r8
    3178:	1f 93       	push	r17
    317a:	0f 93       	push	r16
    317c:	0e 94 cd 22 	call	0x459a	; 0x459a <sprintf>
    3180:	60 e0       	ldi	r22, 0x00	; 0
    3182:	70 e0       	ldi	r23, 0x00	; 0
    3184:	c8 01       	movw	r24, r16
    3186:	5f dd       	rcall	.-1346   	; 0x2c46 <_upload_message>
    3188:	b6 dd       	rcall	.-1172   	; 0x2cf6 <_reply2return_code>
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	0f 90       	pop	r0
    3196:	81 11       	cpse	r24, r1
    3198:	2e c0       	rjmp	.+92     	; 0x31f6 <lora_driver_configure_to_eu868+0x18a>
    319a:	2f 92       	push	r2
    319c:	3f 92       	push	r3
    319e:	7f 92       	push	r7
    31a0:	6f 92       	push	r6
    31a2:	1f 93       	push	r17
    31a4:	0f 93       	push	r16
    31a6:	0e 94 cd 22 	call	0x459a	; 0x459a <sprintf>
    31aa:	60 e0       	ldi	r22, 0x00	; 0
    31ac:	70 e0       	ldi	r23, 0x00	; 0
    31ae:	c8 01       	movw	r24, r16
    31b0:	4a dd       	rcall	.-1388   	; 0x2c46 <_upload_message>
    31b2:	a1 dd       	rcall	.-1214   	; 0x2cf6 <_reply2return_code>
    31b4:	0f 90       	pop	r0
    31b6:	0f 90       	pop	r0
    31b8:	0f 90       	pop	r0
    31ba:	0f 90       	pop	r0
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	81 11       	cpse	r24, r1
    31c2:	19 c0       	rjmp	.+50     	; 0x31f6 <lora_driver_configure_to_eu868+0x18a>
    31c4:	3f ef       	ldi	r19, 0xFF	; 255
    31c6:	e3 1a       	sub	r14, r19
    31c8:	f3 0a       	sbc	r15, r19
    31ca:	84 e0       	ldi	r24, 0x04	; 4
    31cc:	c8 0e       	add	r12, r24
    31ce:	d1 1c       	adc	r13, r1
    31d0:	98 e0       	ldi	r25, 0x08	; 8
    31d2:	e9 16       	cp	r14, r25
    31d4:	f1 04       	cpc	r15, r1
    31d6:	09 f0       	breq	.+2      	; 0x31da <lora_driver_configure_to_eu868+0x16e>
    31d8:	94 cf       	rjmp	.-216    	; 0x3102 <lora_driver_configure_to_eu868+0x96>
    31da:	60 e0       	ldi	r22, 0x00	; 0
    31dc:	70 e0       	ldi	r23, 0x00	; 0
    31de:	8a e6       	ldi	r24, 0x6A	; 106
    31e0:	95 e0       	ldi	r25, 0x05	; 5
    31e2:	31 dd       	rcall	.-1438   	; 0x2c46 <_upload_message>
    31e4:	88 dd       	rcall	.-1264   	; 0x2cf6 <_reply2return_code>
    31e6:	81 11       	cpse	r24, r1
    31e8:	06 c0       	rjmp	.+12     	; 0x31f6 <lora_driver_configure_to_eu868+0x18a>
    31ea:	60 e0       	ldi	r22, 0x00	; 0
    31ec:	70 e0       	ldi	r23, 0x00	; 0
    31ee:	8b e7       	ldi	r24, 0x7B	; 123
    31f0:	95 e0       	ldi	r25, 0x05	; 5
    31f2:	29 dd       	rcall	.-1454   	; 0x2c46 <_upload_message>
    31f4:	80 dd       	rcall	.-1280   	; 0x2cf6 <_reply2return_code>
    31f6:	a0 96       	adiw	r28, 0x20	; 32
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	df 91       	pop	r29
    3204:	cf 91       	pop	r28
    3206:	1f 91       	pop	r17
    3208:	0f 91       	pop	r16
    320a:	ff 90       	pop	r15
    320c:	ef 90       	pop	r14
    320e:	df 90       	pop	r13
    3210:	cf 90       	pop	r12
    3212:	bf 90       	pop	r11
    3214:	af 90       	pop	r10
    3216:	9f 90       	pop	r9
    3218:	8f 90       	pop	r8
    321a:	7f 90       	pop	r7
    321c:	6f 90       	pop	r6
    321e:	5f 90       	pop	r5
    3220:	4f 90       	pop	r4
    3222:	3f 90       	pop	r3
    3224:	2f 90       	pop	r2
    3226:	08 95       	ret

00003228 <lora_driver_set_otaa_identity>:
    3228:	ef 92       	push	r14
    322a:	ff 92       	push	r15
    322c:	0f 93       	push	r16
    322e:	1f 93       	push	r17
    3230:	cf 93       	push	r28
    3232:	df 93       	push	r29
    3234:	ec 01       	movw	r28, r24
    3236:	8b 01       	movw	r16, r22
    3238:	7a 01       	movw	r14, r20
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	0c df       	rcall	.-488    	; 0x3056 <lora_driver_set_adaptive_data_rate>
    323e:	81 11       	cpse	r24, r1
    3240:	0d c0       	rjmp	.+26     	; 0x325c <lora_driver_set_otaa_identity+0x34>
    3242:	ce 01       	movw	r24, r28
    3244:	25 de       	rcall	.-950    	; 0x2e90 <lora_driver_set_application_identifier>
    3246:	81 11       	cpse	r24, r1
    3248:	09 c0       	rjmp	.+18     	; 0x325c <lora_driver_set_otaa_identity+0x34>
    324a:	c8 01       	movw	r24, r16
    324c:	32 de       	rcall	.-924    	; 0x2eb2 <lora_driver_set_application_key>
    324e:	81 11       	cpse	r24, r1
    3250:	05 c0       	rjmp	.+10     	; 0x325c <lora_driver_set_otaa_identity+0x34>
    3252:	c7 01       	movw	r24, r14
    3254:	0c de       	rcall	.-1000   	; 0x2e6e <lora_driver_set_device_identifier>
    3256:	81 11       	cpse	r24, r1
    3258:	01 c0       	rjmp	.+2      	; 0x325c <lora_driver_set_otaa_identity+0x34>
    325a:	3c de       	rcall	.-904    	; 0x2ed4 <lora_driver_save_mac>
    325c:	df 91       	pop	r29
    325e:	cf 91       	pop	r28
    3260:	1f 91       	pop	r17
    3262:	0f 91       	pop	r16
    3264:	ff 90       	pop	r15
    3266:	ef 90       	pop	r14
    3268:	08 95       	ret

0000326a <decode_port_no>:
    326a:	dc 01       	movw	r26, r24
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	29 f1       	breq	.+74     	; 0x32ba <decode_port_no+0x50>
    3270:	fb 01       	movw	r30, r22
    3272:	20 81       	ld	r18, Z
    3274:	fc 01       	movw	r30, r24
    3276:	01 90       	ld	r0, Z+
    3278:	00 20       	and	r0, r0
    327a:	e9 f7       	brne	.-6      	; 0x3276 <decode_port_no+0xc>
    327c:	31 97       	sbiw	r30, 0x01	; 1
    327e:	e8 1b       	sub	r30, r24
    3280:	f9 0b       	sbc	r31, r25
    3282:	82 2f       	mov	r24, r18
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	e8 17       	cp	r30, r24
    3288:	f9 07       	cpc	r31, r25
    328a:	c8 f0       	brcs	.+50     	; 0x32be <decode_port_no+0x54>
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	08 c0       	rjmp	.+16     	; 0x32a0 <decode_port_no+0x36>
    3290:	88 0f       	add	r24, r24
    3292:	38 2f       	mov	r19, r24
    3294:	33 0f       	add	r19, r19
    3296:	33 0f       	add	r19, r19
    3298:	83 0f       	add	r24, r19
    329a:	80 53       	subi	r24, 0x30	; 48
    329c:	89 0f       	add	r24, r25
    329e:	2f 5f       	subi	r18, 0xFF	; 255
    32a0:	fd 01       	movw	r30, r26
    32a2:	e2 0f       	add	r30, r18
    32a4:	f1 1d       	adc	r31, r1
    32a6:	90 81       	ld	r25, Z
    32a8:	30 ed       	ldi	r19, 0xD0	; 208
    32aa:	39 0f       	add	r19, r25
    32ac:	3a 30       	cpi	r19, 0x0A	; 10
    32ae:	10 f4       	brcc	.+4      	; 0x32b4 <decode_port_no+0x4a>
    32b0:	91 11       	cpse	r25, r1
    32b2:	ee cf       	rjmp	.-36     	; 0x3290 <decode_port_no+0x26>
    32b4:	fb 01       	movw	r30, r22
    32b6:	20 83       	st	Z, r18
    32b8:	08 95       	ret
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	08 95       	ret
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	08 95       	ret

000032c2 <decode_hexadecimal_string_bytes>:
    32c2:	0f 93       	push	r16
    32c4:	1f 93       	push	r17
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	dc 01       	movw	r26, r24
    32cc:	ea 01       	movw	r28, r20
    32ce:	20 97       	sbiw	r28, 0x00	; 0
    32d0:	e1 f1       	breq	.+120    	; 0x334a <decode_hexadecimal_string_bytes+0x88>
    32d2:	fa 01       	movw	r30, r20
    32d4:	01 90       	ld	r0, Z+
    32d6:	00 20       	and	r0, r0
    32d8:	e9 f7       	brne	.-6      	; 0x32d4 <decode_hexadecimal_string_bytes+0x12>
    32da:	31 97       	sbiw	r30, 0x01	; 1
    32dc:	e4 1b       	sub	r30, r20
    32de:	f5 0b       	sbc	r31, r21
    32e0:	32 97       	sbiw	r30, 0x02	; 2
    32e2:	10 f5       	brcc	.+68     	; 0x3328 <decode_hexadecimal_string_bytes+0x66>
    32e4:	32 c0       	rjmp	.+100    	; 0x334a <decode_hexadecimal_string_bytes+0x88>
    32e6:	8d 01       	movw	r16, r26
    32e8:	04 0f       	add	r16, r20
    32ea:	15 1f       	adc	r17, r21
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	ae 01       	movw	r20, r28
    32f0:	42 0f       	add	r20, r18
    32f2:	53 1f       	adc	r21, r19
    32f4:	fa 01       	movw	r30, r20
    32f6:	90 81       	ld	r25, Z
    32f8:	91 34       	cpi	r25, 0x41	; 65
    32fa:	28 f0       	brcs	.+10     	; 0x3306 <decode_hexadecimal_string_bytes+0x44>
    32fc:	97 53       	subi	r25, 0x37	; 55
    32fe:	59 2f       	mov	r21, r25
    3300:	52 95       	swap	r21
    3302:	50 7f       	andi	r21, 0xF0	; 240
    3304:	03 c0       	rjmp	.+6      	; 0x330c <decode_hexadecimal_string_bytes+0x4a>
    3306:	59 2f       	mov	r21, r25
    3308:	52 95       	swap	r21
    330a:	50 7f       	andi	r21, 0xF0	; 240
    330c:	2c 0f       	add	r18, r28
    330e:	3d 1f       	adc	r19, r29
    3310:	f9 01       	movw	r30, r18
    3312:	91 81       	ldd	r25, Z+1	; 0x01
    3314:	91 34       	cpi	r25, 0x41	; 65
    3316:	10 f0       	brcs	.+4      	; 0x331c <decode_hexadecimal_string_bytes+0x5a>
    3318:	97 53       	subi	r25, 0x37	; 55
    331a:	01 c0       	rjmp	.+2      	; 0x331e <decode_hexadecimal_string_bytes+0x5c>
    331c:	90 53       	subi	r25, 0x30	; 48
    331e:	95 0f       	add	r25, r21
    3320:	f8 01       	movw	r30, r16
    3322:	90 83       	st	Z, r25
    3324:	8f 5f       	subi	r24, 0xFF	; 255
    3326:	01 c0       	rjmp	.+2      	; 0x332a <decode_hexadecimal_string_bytes+0x68>
    3328:	80 e0       	ldi	r24, 0x00	; 0
    332a:	28 2f       	mov	r18, r24
    332c:	22 0f       	add	r18, r18
    332e:	48 2f       	mov	r20, r24
    3330:	50 e0       	ldi	r21, 0x00	; 0
    3332:	fe 01       	movw	r30, r28
    3334:	01 90       	ld	r0, Z+
    3336:	00 20       	and	r0, r0
    3338:	e9 f7       	brne	.-6      	; 0x3334 <decode_hexadecimal_string_bytes+0x72>
    333a:	31 97       	sbiw	r30, 0x01	; 1
    333c:	ec 1b       	sub	r30, r28
    333e:	fd 0b       	sbc	r31, r29
    3340:	4e 17       	cp	r20, r30
    3342:	5f 07       	cpc	r21, r31
    3344:	10 f4       	brcc	.+4      	; 0x334a <decode_hexadecimal_string_bytes+0x88>
    3346:	86 13       	cpse	r24, r22
    3348:	ce cf       	rjmp	.-100    	; 0x32e6 <decode_hexadecimal_string_bytes+0x24>
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	1f 91       	pop	r17
    3350:	0f 91       	pop	r16
    3352:	08 95       	ret

00003354 <reg_read_register>:
    3354:	fc 01       	movw	r30, r24
    3356:	80 81       	ld	r24, Z
    3358:	08 95       	ret

0000335a <reg_read_bit>:
    335a:	fc 01       	movw	r30, r24
    335c:	20 81       	ld	r18, Z
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	02 c0       	rjmp	.+4      	; 0x3368 <reg_read_bit+0xe>
    3364:	88 0f       	add	r24, r24
    3366:	99 1f       	adc	r25, r25
    3368:	6a 95       	dec	r22
    336a:	e2 f7       	brpl	.-8      	; 0x3364 <reg_read_bit+0xa>
    336c:	82 23       	and	r24, r18
    336e:	08 95       	ret

00003370 <reg_read_bits>:
    3370:	fc 01       	movw	r30, r24
    3372:	80 81       	ld	r24, Z
    3374:	86 23       	and	r24, r22
    3376:	08 95       	ret

00003378 <reg_set_register>:
    3378:	fc 01       	movw	r30, r24
    337a:	60 83       	st	Z, r22
    337c:	08 95       	ret

0000337e <reg_clear_register>:
    337e:	fc 01       	movw	r30, r24
    3380:	10 82       	st	Z, r1
    3382:	08 95       	ret

00003384 <reg_set_bit>:
    3384:	fc 01       	movw	r30, r24
    3386:	40 81       	ld	r20, Z
    3388:	21 e0       	ldi	r18, 0x01	; 1
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	02 c0       	rjmp	.+4      	; 0x3392 <reg_set_bit+0xe>
    338e:	22 0f       	add	r18, r18
    3390:	33 1f       	adc	r19, r19
    3392:	6a 95       	dec	r22
    3394:	e2 f7       	brpl	.-8      	; 0x338e <reg_set_bit+0xa>
    3396:	24 2b       	or	r18, r20
    3398:	20 83       	st	Z, r18
    339a:	08 95       	ret

0000339c <reg_set_bits>:
    339c:	fc 01       	movw	r30, r24
    339e:	20 81       	ld	r18, Z
    33a0:	62 2b       	or	r22, r18
    33a2:	60 83       	st	Z, r22
    33a4:	08 95       	ret

000033a6 <reg_toggle_bit>:
    33a6:	fc 01       	movw	r30, r24
    33a8:	40 81       	ld	r20, Z
    33aa:	21 e0       	ldi	r18, 0x01	; 1
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	02 c0       	rjmp	.+4      	; 0x33b4 <reg_toggle_bit+0xe>
    33b0:	22 0f       	add	r18, r18
    33b2:	33 1f       	adc	r19, r19
    33b4:	6a 95       	dec	r22
    33b6:	e2 f7       	brpl	.-8      	; 0x33b0 <reg_toggle_bit+0xa>
    33b8:	24 27       	eor	r18, r20
    33ba:	20 83       	st	Z, r18
    33bc:	08 95       	ret

000033be <reg_toggle_bits>:
    33be:	fc 01       	movw	r30, r24
    33c0:	20 81       	ld	r18, Z
    33c2:	62 27       	eor	r22, r18
    33c4:	60 83       	st	Z, r22
    33c6:	08 95       	ret

000033c8 <reg_clear_bit>:
    33c8:	fc 01       	movw	r30, r24
    33ca:	90 81       	ld	r25, Z
    33cc:	21 e0       	ldi	r18, 0x01	; 1
    33ce:	30 e0       	ldi	r19, 0x00	; 0
    33d0:	02 c0       	rjmp	.+4      	; 0x33d6 <reg_clear_bit+0xe>
    33d2:	22 0f       	add	r18, r18
    33d4:	33 1f       	adc	r19, r19
    33d6:	6a 95       	dec	r22
    33d8:	e2 f7       	brpl	.-8      	; 0x33d2 <reg_clear_bit+0xa>
    33da:	20 95       	com	r18
    33dc:	29 23       	and	r18, r25
    33de:	20 83       	st	Z, r18
    33e0:	08 95       	ret

000033e2 <reg_clear_bits>:
    33e2:	fc 01       	movw	r30, r24
    33e4:	90 81       	ld	r25, Z
    33e6:	60 95       	com	r22
    33e8:	69 23       	and	r22, r25
    33ea:	60 83       	st	Z, r22
    33ec:	08 95       	ret

000033ee <_serial_call_back>:
    33ee:	80 91 33 08 	lds	r24, 0x0833	; 0x800833 <crc_sum.1941>
    33f2:	86 0f       	add	r24, r22
    33f4:	80 93 33 08 	sts	0x0833, r24	; 0x800833 <crc_sum.1941>
    33f8:	90 91 36 08 	lds	r25, 0x0836	; 0x800836 <_mh_state>
    33fc:	91 30       	cpi	r25, 0x01	; 1
    33fe:	79 f0       	breq	.+30     	; 0x341e <_serial_call_back+0x30>
    3400:	28 f0       	brcs	.+10     	; 0x340c <_serial_call_back+0x1e>
    3402:	92 30       	cpi	r25, 0x02	; 2
    3404:	a9 f0       	breq	.+42     	; 0x3430 <_serial_call_back+0x42>
    3406:	93 30       	cpi	r25, 0x03	; 3
    3408:	19 f1       	breq	.+70     	; 0x3450 <_serial_call_back+0x62>
    340a:	08 95       	ret
    340c:	6f 3f       	cpi	r22, 0xFF	; 255
    340e:	09 f0       	breq	.+2      	; 0x3412 <_serial_call_back+0x24>
    3410:	48 c0       	rjmp	.+144    	; 0x34a2 <_serial_call_back+0xb4>
    3412:	10 92 33 08 	sts	0x0833, r1	; 0x800833 <crc_sum.1941>
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <_mh_state>
    341c:	08 95       	ret
    341e:	66 38       	cpi	r22, 0x86	; 134
    3420:	09 f0       	breq	.+2      	; 0x3424 <_serial_call_back+0x36>
    3422:	3f c0       	rjmp	.+126    	; 0x34a2 <_serial_call_back+0xb4>
    3424:	10 92 32 08 	sts	0x0832, r1	; 0x800832 <inDex.1939>
    3428:	82 e0       	ldi	r24, 0x02	; 2
    342a:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <_mh_state>
    342e:	08 95       	ret
    3430:	e0 91 32 08 	lds	r30, 0x0832	; 0x800832 <inDex.1939>
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	8e 0f       	add	r24, r30
    3438:	80 93 32 08 	sts	0x0832, r24	; 0x800832 <inDex.1939>
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	e0 5d       	subi	r30, 0xD0	; 208
    3440:	f7 4f       	sbci	r31, 0xF7	; 247
    3442:	60 83       	st	Z, r22
    3444:	82 30       	cpi	r24, 0x02	; 2
    3446:	69 f5       	brne	.+90     	; 0x34a2 <_serial_call_back+0xb4>
    3448:	83 e0       	ldi	r24, 0x03	; 3
    344a:	80 93 36 08 	sts	0x0836, r24	; 0x800836 <_mh_state>
    344e:	08 95       	ret
    3450:	90 91 32 08 	lds	r25, 0x0832	; 0x800832 <inDex.1939>
    3454:	21 e0       	ldi	r18, 0x01	; 1
    3456:	29 0f       	add	r18, r25
    3458:	20 93 32 08 	sts	0x0832, r18	; 0x800832 <inDex.1939>
    345c:	96 30       	cpi	r25, 0x06	; 6
    345e:	09 f5       	brne	.+66     	; 0x34a2 <_serial_call_back+0xb4>
    3460:	81 11       	cpse	r24, r1
    3462:	0e c0       	rjmp	.+28     	; 0x3480 <_serial_call_back+0x92>
    3464:	e0 e3       	ldi	r30, 0x30	; 48
    3466:	f8 e0       	ldi	r31, 0x08	; 8
    3468:	80 81       	ld	r24, Z
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	98 2f       	mov	r25, r24
    346e:	88 27       	eor	r24, r24
    3470:	21 81       	ldd	r18, Z+1	; 0x01
    3472:	82 0f       	add	r24, r18
    3474:	91 1d       	adc	r25, r1
    3476:	90 93 38 08 	sts	0x0838, r25	; 0x800838 <_ppm+0x1>
    347a:	80 93 37 08 	sts	0x0837, r24	; 0x800837 <_ppm>
    347e:	04 c0       	rjmp	.+8      	; 0x3488 <_serial_call_back+0x9a>
    3480:	10 92 38 08 	sts	0x0838, r1	; 0x800838 <_ppm+0x1>
    3484:	10 92 37 08 	sts	0x0837, r1	; 0x800837 <_ppm>
    3488:	10 92 36 08 	sts	0x0836, r1	; 0x800836 <_mh_state>
    348c:	e0 91 34 08 	lds	r30, 0x0834	; 0x800834 <_app_call_back>
    3490:	f0 91 35 08 	lds	r31, 0x0835	; 0x800835 <_app_call_back+0x1>
    3494:	30 97       	sbiw	r30, 0x00	; 0
    3496:	29 f0       	breq	.+10     	; 0x34a2 <_serial_call_back+0xb4>
    3498:	80 91 37 08 	lds	r24, 0x0837	; 0x800837 <_ppm>
    349c:	90 91 38 08 	lds	r25, 0x0838	; 0x800838 <_ppm+0x1>
    34a0:	19 95       	eicall
    34a2:	08 95       	ret

000034a4 <mh_z19_create>:
    34a4:	8f 92       	push	r8
    34a6:	9f 92       	push	r9
    34a8:	af 92       	push	r10
    34aa:	cf 92       	push	r12
    34ac:	ef 92       	push	r14
    34ae:	0f 93       	push	r16
    34b0:	cf 93       	push	r28
    34b2:	df 93       	push	r29
    34b4:	eb 01       	movw	r28, r22
    34b6:	0f 2e       	mov	r0, r31
    34b8:	f7 ef       	ldi	r31, 0xF7	; 247
    34ba:	8f 2e       	mov	r8, r31
    34bc:	f9 e1       	ldi	r31, 0x19	; 25
    34be:	9f 2e       	mov	r9, r31
    34c0:	f0 2d       	mov	r31, r0
    34c2:	68 94       	set
    34c4:	aa 24       	eor	r10, r10
    34c6:	a4 f8       	bld	r10, 4
    34c8:	68 94       	set
    34ca:	cc 24       	eor	r12, r12
    34cc:	c4 f8       	bld	r12, 4
    34ce:	e1 2c       	mov	r14, r1
    34d0:	00 e0       	ldi	r16, 0x00	; 0
    34d2:	23 e0       	ldi	r18, 0x03	; 3
    34d4:	40 e8       	ldi	r20, 0x80	; 128
    34d6:	55 e2       	ldi	r21, 0x25	; 37
    34d8:	60 e0       	ldi	r22, 0x00	; 0
    34da:	70 e0       	ldi	r23, 0x00	; 0
    34dc:	11 d0       	rcall	.+34     	; 0x3500 <serial_new_instance>
    34de:	90 93 3a 08 	sts	0x083A, r25	; 0x80083a <_serial+0x1>
    34e2:	80 93 39 08 	sts	0x0839, r24	; 0x800839 <_serial>
    34e6:	d0 93 35 08 	sts	0x0835, r29	; 0x800835 <_app_call_back+0x1>
    34ea:	c0 93 34 08 	sts	0x0834, r28	; 0x800834 <_app_call_back>
    34ee:	df 91       	pop	r29
    34f0:	cf 91       	pop	r28
    34f2:	0f 91       	pop	r16
    34f4:	ef 90       	pop	r14
    34f6:	cf 90       	pop	r12
    34f8:	af 90       	pop	r10
    34fa:	9f 90       	pop	r9
    34fc:	8f 90       	pop	r8
    34fe:	08 95       	ret

00003500 <serial_new_instance>:
    3500:	2f 92       	push	r2
    3502:	3f 92       	push	r3
    3504:	4f 92       	push	r4
    3506:	5f 92       	push	r5
    3508:	6f 92       	push	r6
    350a:	7f 92       	push	r7
    350c:	8f 92       	push	r8
    350e:	9f 92       	push	r9
    3510:	af 92       	push	r10
    3512:	cf 92       	push	r12
    3514:	ef 92       	push	r14
    3516:	ff 92       	push	r15
    3518:	0f 93       	push	r16
    351a:	1f 93       	push	r17
    351c:	cf 93       	push	r28
    351e:	df 93       	push	r29
    3520:	cd b7       	in	r28, 0x3d	; 61
    3522:	de b7       	in	r29, 0x3e	; 62
    3524:	f8 2e       	mov	r15, r24
    3526:	2a 01       	movw	r4, r20
    3528:	3b 01       	movw	r6, r22
    352a:	88 e0       	ldi	r24, 0x08	; 8
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	93 d6       	rcall	.+3366   	; 0x4256 <malloc>
    3530:	8c 01       	movw	r16, r24
    3532:	8f 2d       	mov	r24, r15
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	88 0f       	add	r24, r24
    3538:	99 1f       	adc	r25, r25
    353a:	fc 01       	movw	r30, r24
    353c:	e5 5c       	subi	r30, 0xC5	; 197
    353e:	f7 4f       	sbci	r31, 0xF7	; 247
    3540:	11 83       	std	Z+1, r17	; 0x01
    3542:	00 83       	st	Z, r16
    3544:	fc 01       	movw	r30, r24
    3546:	ea 5f       	subi	r30, 0xFA	; 250
    3548:	fd 4f       	sbci	r31, 0xFD	; 253
    354a:	80 81       	ld	r24, Z
    354c:	91 81       	ldd	r25, Z+1	; 0x01
    354e:	d8 01       	movw	r26, r16
    3550:	8d 93       	st	X+, r24
    3552:	9c 93       	st	X, r25
    3554:	6c 2d       	mov	r22, r12
    3556:	70 e0       	ldi	r23, 0x00	; 0
    3558:	84 e0       	ldi	r24, 0x04	; 4
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	62 d6       	rcall	.+3268   	; 0x4222 <calloc>
    355e:	1c 01       	movw	r2, r24
    3560:	61 e0       	ldi	r22, 0x01	; 1
    3562:	70 e0       	ldi	r23, 0x00	; 0
    3564:	86 e0       	ldi	r24, 0x06	; 6
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	5c d6       	rcall	.+3256   	; 0x4222 <calloc>
    356a:	7c 01       	movw	r14, r24
    356c:	4c 2d       	mov	r20, r12
    356e:	b1 01       	movw	r22, r2
    3570:	4a d4       	rcall	.+2196   	; 0x3e06 <fifo_init>
    3572:	f8 01       	movw	r30, r16
    3574:	f5 82       	std	Z+5, r15	; 0x05
    3576:	e4 82       	std	Z+4, r14	; 0x04
    3578:	6a 2d       	mov	r22, r10
    357a:	70 e0       	ldi	r23, 0x00	; 0
    357c:	84 e0       	ldi	r24, 0x04	; 4
    357e:	90 e0       	ldi	r25, 0x00	; 0
    3580:	50 d6       	rcall	.+3232   	; 0x4222 <calloc>
    3582:	1c 01       	movw	r2, r24
    3584:	61 e0       	ldi	r22, 0x01	; 1
    3586:	70 e0       	ldi	r23, 0x00	; 0
    3588:	86 e0       	ldi	r24, 0x06	; 6
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	4a d6       	rcall	.+3220   	; 0x4222 <calloc>
    358e:	7c 01       	movw	r14, r24
    3590:	4a 2d       	mov	r20, r10
    3592:	b1 01       	movw	r22, r2
    3594:	38 d4       	rcall	.+2160   	; 0x3e06 <fifo_init>
    3596:	d8 01       	movw	r26, r16
    3598:	13 96       	adiw	r26, 0x03	; 3
    359a:	fc 92       	st	X, r15
    359c:	ee 92       	st	-X, r14
    359e:	12 97       	sbiw	r26, 0x02	; 2
    35a0:	17 96       	adiw	r26, 0x07	; 7
    35a2:	9c 92       	st	X, r9
    35a4:	8e 92       	st	-X, r8
    35a6:	16 97       	sbiw	r26, 0x06	; 6
    35a8:	ff b6       	in	r15, 0x3f	; 63
    35aa:	f8 94       	cli
    35ac:	ed 91       	ld	r30, X+
    35ae:	fc 91       	ld	r31, X
    35b0:	11 97       	sbiw	r26, 0x01	; 1
    35b2:	36 97       	sbiw	r30, 0x06	; 6
    35b4:	80 81       	ld	r24, Z
    35b6:	82 60       	ori	r24, 0x02	; 2
    35b8:	80 83       	st	Z, r24
    35ba:	8d 90       	ld	r8, X+
    35bc:	9c 90       	ld	r9, X
    35be:	c3 01       	movw	r24, r6
    35c0:	b2 01       	movw	r22, r4
    35c2:	36 d5       	rcall	.+2668   	; 0x4030 <__floatunsisf>
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e0       	ldi	r20, 0x00	; 0
    35ca:	51 e4       	ldi	r21, 0x41	; 65
    35cc:	bf d5       	rcall	.+2942   	; 0x414c <__mulsf3>
    35ce:	9b 01       	movw	r18, r22
    35d0:	ac 01       	movw	r20, r24
    35d2:	60 e0       	ldi	r22, 0x00	; 0
    35d4:	74 e2       	ldi	r23, 0x24	; 36
    35d6:	84 e7       	ldi	r24, 0x74	; 116
    35d8:	9b e4       	ldi	r25, 0x4B	; 75
    35da:	96 d4       	rcall	.+2348   	; 0x3f08 <__divsf3>
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	40 e8       	ldi	r20, 0x80	; 128
    35e2:	5f e3       	ldi	r21, 0x3F	; 63
    35e4:	2c d4       	rcall	.+2136   	; 0x3e3e <__subsf3>
    35e6:	f8 d4       	rcall	.+2544   	; 0x3fd8 <__fixunssfsi>
    35e8:	f4 01       	movw	r30, r8
    35ea:	32 97       	sbiw	r30, 0x02	; 2
    35ec:	60 83       	st	Z, r22
    35ee:	d8 01       	movw	r26, r16
    35f0:	ed 91       	ld	r30, X+
    35f2:	fc 91       	ld	r31, X
    35f4:	11 97       	sbiw	r26, 0x01	; 1
    35f6:	35 97       	sbiw	r30, 0x05	; 5
    35f8:	88 e9       	ldi	r24, 0x98	; 152
    35fa:	80 83       	st	Z, r24
    35fc:	ed 91       	ld	r30, X+
    35fe:	fc 91       	ld	r31, X
    3600:	34 97       	sbiw	r30, 0x04	; 4
    3602:	86 e0       	ldi	r24, 0x06	; 6
    3604:	80 83       	st	Z, r24
    3606:	ff be       	out	0x3f, r15	; 63
    3608:	c8 01       	movw	r24, r16
    360a:	df 91       	pop	r29
    360c:	cf 91       	pop	r28
    360e:	1f 91       	pop	r17
    3610:	0f 91       	pop	r16
    3612:	ff 90       	pop	r15
    3614:	ef 90       	pop	r14
    3616:	cf 90       	pop	r12
    3618:	af 90       	pop	r10
    361a:	9f 90       	pop	r9
    361c:	8f 90       	pop	r8
    361e:	7f 90       	pop	r7
    3620:	6f 90       	pop	r6
    3622:	5f 90       	pop	r5
    3624:	4f 90       	pop	r4
    3626:	3f 90       	pop	r3
    3628:	2f 90       	pop	r2
    362a:	08 95       	ret

0000362c <serial_send_byte>:
    362c:	cf 93       	push	r28
    362e:	df 93       	push	r29
    3630:	ec 01       	movw	r28, r24
    3632:	ea 81       	ldd	r30, Y+2	; 0x02
    3634:	fb 81       	ldd	r31, Y+3	; 0x03
    3636:	93 81       	ldd	r25, Z+3	; 0x03
    3638:	82 81       	ldd	r24, Z+2	; 0x02
    363a:	25 81       	ldd	r18, Z+5	; 0x05
    363c:	98 1b       	sub	r25, r24
    363e:	92 23       	and	r25, r18
    3640:	84 81       	ldd	r24, Z+4	; 0x04
    3642:	98 17       	cp	r25, r24
    3644:	a1 f0       	breq	.+40     	; 0x366e <serial_send_byte+0x42>
    3646:	93 81       	ldd	r25, Z+3	; 0x03
    3648:	26 95       	lsr	r18
    364a:	29 23       	and	r18, r25
    364c:	a0 81       	ld	r26, Z
    364e:	b1 81       	ldd	r27, Z+1	; 0x01
    3650:	a2 0f       	add	r26, r18
    3652:	b1 1d       	adc	r27, r1
    3654:	6c 93       	st	X, r22
    3656:	9f 5f       	subi	r25, 0xFF	; 255
    3658:	25 81       	ldd	r18, Z+5	; 0x05
    365a:	92 23       	and	r25, r18
    365c:	93 83       	std	Z+3, r25	; 0x03
    365e:	e8 81       	ld	r30, Y
    3660:	f9 81       	ldd	r31, Y+1	; 0x01
    3662:	35 97       	sbiw	r30, 0x05	; 5
    3664:	80 81       	ld	r24, Z
    3666:	80 62       	ori	r24, 0x20	; 32
    3668:	80 83       	st	Z, r24
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	01 c0       	rjmp	.+2      	; 0x3670 <serial_send_byte+0x44>
    366e:	82 e0       	ldi	r24, 0x02	; 2
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	08 95       	ret

00003676 <serial_send_bytes>:
    3676:	ef 92       	push	r14
    3678:	ff 92       	push	r15
    367a:	0f 93       	push	r16
    367c:	1f 93       	push	r17
    367e:	cf 93       	push	r28
    3680:	df 93       	push	r29
    3682:	7c 01       	movw	r14, r24
    3684:	dc 01       	movw	r26, r24
    3686:	12 96       	adiw	r26, 0x02	; 2
    3688:	ed 91       	ld	r30, X+
    368a:	fc 91       	ld	r31, X
    368c:	13 97       	sbiw	r26, 0x03	; 3
    368e:	93 81       	ldd	r25, Z+3	; 0x03
    3690:	82 81       	ldd	r24, Z+2	; 0x02
    3692:	98 1b       	sub	r25, r24
    3694:	85 81       	ldd	r24, Z+5	; 0x05
    3696:	98 23       	and	r25, r24
    3698:	84 81       	ldd	r24, Z+4	; 0x04
    369a:	89 1b       	sub	r24, r25
    369c:	86 17       	cp	r24, r22
    369e:	98 f1       	brcs	.+102    	; 0x3706 <serial_send_bytes+0x90>
    36a0:	66 23       	and	r22, r22
    36a2:	41 f1       	breq	.+80     	; 0x36f4 <serial_send_bytes+0x7e>
    36a4:	84 2f       	mov	r24, r20
    36a6:	95 2f       	mov	r25, r21
    36a8:	dc 01       	movw	r26, r24
    36aa:	61 50       	subi	r22, 0x01	; 1
    36ac:	46 2f       	mov	r20, r22
    36ae:	50 e0       	ldi	r21, 0x00	; 0
    36b0:	4f 5f       	subi	r20, 0xFF	; 255
    36b2:	5f 4f       	sbci	r21, 0xFF	; 255
    36b4:	48 0f       	add	r20, r24
    36b6:	59 1f       	adc	r21, r25
    36b8:	e7 01       	movw	r28, r14
    36ba:	ea 81       	ldd	r30, Y+2	; 0x02
    36bc:	fb 81       	ldd	r31, Y+3	; 0x03
    36be:	93 81       	ldd	r25, Z+3	; 0x03
    36c0:	82 81       	ldd	r24, Z+2	; 0x02
    36c2:	25 81       	ldd	r18, Z+5	; 0x05
    36c4:	98 1b       	sub	r25, r24
    36c6:	92 23       	and	r25, r18
    36c8:	84 81       	ldd	r24, Z+4	; 0x04
    36ca:	98 17       	cp	r25, r24
    36cc:	79 f0       	breq	.+30     	; 0x36ec <serial_send_bytes+0x76>
    36ce:	8c 91       	ld	r24, X
    36d0:	93 81       	ldd	r25, Z+3	; 0x03
    36d2:	26 95       	lsr	r18
    36d4:	29 23       	and	r18, r25
    36d6:	60 81       	ld	r22, Z
    36d8:	71 81       	ldd	r23, Z+1	; 0x01
    36da:	8b 01       	movw	r16, r22
    36dc:	02 0f       	add	r16, r18
    36de:	11 1d       	adc	r17, r1
    36e0:	e8 01       	movw	r28, r16
    36e2:	88 83       	st	Y, r24
    36e4:	9f 5f       	subi	r25, 0xFF	; 255
    36e6:	85 81       	ldd	r24, Z+5	; 0x05
    36e8:	98 23       	and	r25, r24
    36ea:	93 83       	std	Z+3, r25	; 0x03
    36ec:	11 96       	adiw	r26, 0x01	; 1
    36ee:	a4 17       	cp	r26, r20
    36f0:	b5 07       	cpc	r27, r21
    36f2:	11 f7       	brne	.-60     	; 0x36b8 <serial_send_bytes+0x42>
    36f4:	d7 01       	movw	r26, r14
    36f6:	ed 91       	ld	r30, X+
    36f8:	fc 91       	ld	r31, X
    36fa:	35 97       	sbiw	r30, 0x05	; 5
    36fc:	80 81       	ld	r24, Z
    36fe:	80 62       	ori	r24, 0x20	; 32
    3700:	80 83       	st	Z, r24
    3702:	80 e0       	ldi	r24, 0x00	; 0
    3704:	01 c0       	rjmp	.+2      	; 0x3708 <serial_send_bytes+0x92>
    3706:	82 e0       	ldi	r24, 0x02	; 2
    3708:	df 91       	pop	r29
    370a:	cf 91       	pop	r28
    370c:	1f 91       	pop	r17
    370e:	0f 91       	pop	r16
    3710:	ff 90       	pop	r15
    3712:	ef 90       	pop	r14
    3714:	08 95       	ret

00003716 <serial_get_byte>:
    3716:	dc 01       	movw	r26, r24
    3718:	14 96       	adiw	r26, 0x04	; 4
    371a:	ed 91       	ld	r30, X+
    371c:	fc 91       	ld	r31, X
    371e:	15 97       	sbiw	r26, 0x05	; 5
    3720:	93 81       	ldd	r25, Z+3	; 0x03
    3722:	82 81       	ldd	r24, Z+2	; 0x02
    3724:	98 17       	cp	r25, r24
    3726:	89 f0       	breq	.+34     	; 0x374a <serial_get_byte+0x34>
    3728:	92 81       	ldd	r25, Z+2	; 0x02
    372a:	85 81       	ldd	r24, Z+5	; 0x05
    372c:	86 95       	lsr	r24
    372e:	89 23       	and	r24, r25
    3730:	a0 81       	ld	r26, Z
    3732:	b1 81       	ldd	r27, Z+1	; 0x01
    3734:	a8 0f       	add	r26, r24
    3736:	b1 1d       	adc	r27, r1
    3738:	8c 91       	ld	r24, X
    373a:	db 01       	movw	r26, r22
    373c:	8c 93       	st	X, r24
    373e:	9f 5f       	subi	r25, 0xFF	; 255
    3740:	85 81       	ldd	r24, Z+5	; 0x05
    3742:	98 23       	and	r25, r24
    3744:	92 83       	std	Z+2, r25	; 0x02
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	08 95       	ret
    374a:	83 e0       	ldi	r24, 0x03	; 3
    374c:	08 95       	ret

0000374e <__vector_25>:
    374e:	1f 92       	push	r1
    3750:	0f 92       	push	r0
    3752:	0f b6       	in	r0, 0x3f	; 63
    3754:	0f 92       	push	r0
    3756:	11 24       	eor	r1, r1
    3758:	0b b6       	in	r0, 0x3b	; 59
    375a:	0f 92       	push	r0
    375c:	2f 93       	push	r18
    375e:	3f 93       	push	r19
    3760:	4f 93       	push	r20
    3762:	5f 93       	push	r21
    3764:	6f 93       	push	r22
    3766:	7f 93       	push	r23
    3768:	8f 93       	push	r24
    376a:	9f 93       	push	r25
    376c:	af 93       	push	r26
    376e:	bf 93       	push	r27
    3770:	cf 93       	push	r28
    3772:	df 93       	push	r29
    3774:	ef 93       	push	r30
    3776:	ff 93       	push	r31
    3778:	a0 91 3b 08 	lds	r26, 0x083B	; 0x80083b <_ser_handle>
    377c:	b0 91 3c 08 	lds	r27, 0x083C	; 0x80083c <_ser_handle+0x1>
    3780:	10 97       	sbiw	r26, 0x00	; 0
    3782:	11 f1       	breq	.+68     	; 0x37c8 <__vector_25+0x7a>
    3784:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3788:	14 96       	adiw	r26, 0x04	; 4
    378a:	ed 91       	ld	r30, X+
    378c:	fc 91       	ld	r31, X
    378e:	15 97       	sbiw	r26, 0x05	; 5
    3790:	93 81       	ldd	r25, Z+3	; 0x03
    3792:	82 81       	ldd	r24, Z+2	; 0x02
    3794:	25 81       	ldd	r18, Z+5	; 0x05
    3796:	98 1b       	sub	r25, r24
    3798:	92 23       	and	r25, r18
    379a:	84 81       	ldd	r24, Z+4	; 0x04
    379c:	98 17       	cp	r25, r24
    379e:	61 f0       	breq	.+24     	; 0x37b8 <__vector_25+0x6a>
    37a0:	83 81       	ldd	r24, Z+3	; 0x03
    37a2:	26 95       	lsr	r18
    37a4:	28 23       	and	r18, r24
    37a6:	c0 81       	ld	r28, Z
    37a8:	d1 81       	ldd	r29, Z+1	; 0x01
    37aa:	c2 0f       	add	r28, r18
    37ac:	d1 1d       	adc	r29, r1
    37ae:	68 83       	st	Y, r22
    37b0:	8f 5f       	subi	r24, 0xFF	; 255
    37b2:	95 81       	ldd	r25, Z+5	; 0x05
    37b4:	89 23       	and	r24, r25
    37b6:	83 83       	std	Z+3, r24	; 0x03
    37b8:	16 96       	adiw	r26, 0x06	; 6
    37ba:	ed 91       	ld	r30, X+
    37bc:	fc 91       	ld	r31, X
    37be:	17 97       	sbiw	r26, 0x07	; 7
    37c0:	30 97       	sbiw	r30, 0x00	; 0
    37c2:	11 f0       	breq	.+4      	; 0x37c8 <__vector_25+0x7a>
    37c4:	cd 01       	movw	r24, r26
    37c6:	19 95       	eicall
    37c8:	ff 91       	pop	r31
    37ca:	ef 91       	pop	r30
    37cc:	df 91       	pop	r29
    37ce:	cf 91       	pop	r28
    37d0:	bf 91       	pop	r27
    37d2:	af 91       	pop	r26
    37d4:	9f 91       	pop	r25
    37d6:	8f 91       	pop	r24
    37d8:	7f 91       	pop	r23
    37da:	6f 91       	pop	r22
    37dc:	5f 91       	pop	r21
    37de:	4f 91       	pop	r20
    37e0:	3f 91       	pop	r19
    37e2:	2f 91       	pop	r18
    37e4:	0f 90       	pop	r0
    37e6:	0b be       	out	0x3b, r0	; 59
    37e8:	0f 90       	pop	r0
    37ea:	0f be       	out	0x3f, r0	; 63
    37ec:	0f 90       	pop	r0
    37ee:	1f 90       	pop	r1
    37f0:	18 95       	reti

000037f2 <__vector_26>:
    37f2:	1f 92       	push	r1
    37f4:	0f 92       	push	r0
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	0f 92       	push	r0
    37fa:	11 24       	eor	r1, r1
    37fc:	0b b6       	in	r0, 0x3b	; 59
    37fe:	0f 92       	push	r0
    3800:	2f 93       	push	r18
    3802:	8f 93       	push	r24
    3804:	9f 93       	push	r25
    3806:	af 93       	push	r26
    3808:	bf 93       	push	r27
    380a:	ef 93       	push	r30
    380c:	ff 93       	push	r31
    380e:	e0 91 3b 08 	lds	r30, 0x083B	; 0x80083b <_ser_handle>
    3812:	f0 91 3c 08 	lds	r31, 0x083C	; 0x80083c <_ser_handle+0x1>
    3816:	30 97       	sbiw	r30, 0x00	; 0
    3818:	b9 f0       	breq	.+46     	; 0x3848 <__vector_26+0x56>
    381a:	02 80       	ldd	r0, Z+2	; 0x02
    381c:	f3 81       	ldd	r31, Z+3	; 0x03
    381e:	e0 2d       	mov	r30, r0
    3820:	93 81       	ldd	r25, Z+3	; 0x03
    3822:	82 81       	ldd	r24, Z+2	; 0x02
    3824:	98 17       	cp	r25, r24
    3826:	b1 f0       	breq	.+44     	; 0x3854 <__vector_26+0x62>
    3828:	92 81       	ldd	r25, Z+2	; 0x02
    382a:	85 81       	ldd	r24, Z+5	; 0x05
    382c:	28 2f       	mov	r18, r24
    382e:	26 95       	lsr	r18
    3830:	29 23       	and	r18, r25
    3832:	a0 81       	ld	r26, Z
    3834:	b1 81       	ldd	r27, Z+1	; 0x01
    3836:	a2 0f       	add	r26, r18
    3838:	b1 1d       	adc	r27, r1
    383a:	2c 91       	ld	r18, X
    383c:	9f 5f       	subi	r25, 0xFF	; 255
    383e:	89 23       	and	r24, r25
    3840:	82 83       	std	Z+2, r24	; 0x02
    3842:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3846:	0b c0       	rjmp	.+22     	; 0x385e <__vector_26+0x6c>
    3848:	e1 ec       	ldi	r30, 0xC1	; 193
    384a:	f0 e0       	ldi	r31, 0x00	; 0
    384c:	80 81       	ld	r24, Z
    384e:	8f 7d       	andi	r24, 0xDF	; 223
    3850:	80 83       	st	Z, r24
    3852:	05 c0       	rjmp	.+10     	; 0x385e <__vector_26+0x6c>
    3854:	e1 ec       	ldi	r30, 0xC1	; 193
    3856:	f0 e0       	ldi	r31, 0x00	; 0
    3858:	80 81       	ld	r24, Z
    385a:	8f 7d       	andi	r24, 0xDF	; 223
    385c:	80 83       	st	Z, r24
    385e:	ff 91       	pop	r31
    3860:	ef 91       	pop	r30
    3862:	bf 91       	pop	r27
    3864:	af 91       	pop	r26
    3866:	9f 91       	pop	r25
    3868:	8f 91       	pop	r24
    386a:	2f 91       	pop	r18
    386c:	0f 90       	pop	r0
    386e:	0b be       	out	0x3b, r0	; 59
    3870:	0f 90       	pop	r0
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	0f 90       	pop	r0
    3876:	1f 90       	pop	r1
    3878:	18 95       	reti

0000387a <__vector_36>:
    387a:	1f 92       	push	r1
    387c:	0f 92       	push	r0
    387e:	0f b6       	in	r0, 0x3f	; 63
    3880:	0f 92       	push	r0
    3882:	11 24       	eor	r1, r1
    3884:	0b b6       	in	r0, 0x3b	; 59
    3886:	0f 92       	push	r0
    3888:	2f 93       	push	r18
    388a:	3f 93       	push	r19
    388c:	4f 93       	push	r20
    388e:	5f 93       	push	r21
    3890:	6f 93       	push	r22
    3892:	7f 93       	push	r23
    3894:	8f 93       	push	r24
    3896:	9f 93       	push	r25
    3898:	af 93       	push	r26
    389a:	bf 93       	push	r27
    389c:	cf 93       	push	r28
    389e:	df 93       	push	r29
    38a0:	ef 93       	push	r30
    38a2:	ff 93       	push	r31
    38a4:	a0 91 3d 08 	lds	r26, 0x083D	; 0x80083d <_ser_handle+0x2>
    38a8:	b0 91 3e 08 	lds	r27, 0x083E	; 0x80083e <_ser_handle+0x3>
    38ac:	10 97       	sbiw	r26, 0x00	; 0
    38ae:	11 f1       	breq	.+68     	; 0x38f4 <__vector_36+0x7a>
    38b0:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    38b4:	14 96       	adiw	r26, 0x04	; 4
    38b6:	ed 91       	ld	r30, X+
    38b8:	fc 91       	ld	r31, X
    38ba:	15 97       	sbiw	r26, 0x05	; 5
    38bc:	93 81       	ldd	r25, Z+3	; 0x03
    38be:	82 81       	ldd	r24, Z+2	; 0x02
    38c0:	25 81       	ldd	r18, Z+5	; 0x05
    38c2:	98 1b       	sub	r25, r24
    38c4:	92 23       	and	r25, r18
    38c6:	84 81       	ldd	r24, Z+4	; 0x04
    38c8:	98 17       	cp	r25, r24
    38ca:	61 f0       	breq	.+24     	; 0x38e4 <__vector_36+0x6a>
    38cc:	83 81       	ldd	r24, Z+3	; 0x03
    38ce:	26 95       	lsr	r18
    38d0:	28 23       	and	r18, r24
    38d2:	c0 81       	ld	r28, Z
    38d4:	d1 81       	ldd	r29, Z+1	; 0x01
    38d6:	c2 0f       	add	r28, r18
    38d8:	d1 1d       	adc	r29, r1
    38da:	68 83       	st	Y, r22
    38dc:	8f 5f       	subi	r24, 0xFF	; 255
    38de:	95 81       	ldd	r25, Z+5	; 0x05
    38e0:	89 23       	and	r24, r25
    38e2:	83 83       	std	Z+3, r24	; 0x03
    38e4:	16 96       	adiw	r26, 0x06	; 6
    38e6:	ed 91       	ld	r30, X+
    38e8:	fc 91       	ld	r31, X
    38ea:	17 97       	sbiw	r26, 0x07	; 7
    38ec:	30 97       	sbiw	r30, 0x00	; 0
    38ee:	11 f0       	breq	.+4      	; 0x38f4 <__vector_36+0x7a>
    38f0:	cd 01       	movw	r24, r26
    38f2:	19 95       	eicall
    38f4:	ff 91       	pop	r31
    38f6:	ef 91       	pop	r30
    38f8:	df 91       	pop	r29
    38fa:	cf 91       	pop	r28
    38fc:	bf 91       	pop	r27
    38fe:	af 91       	pop	r26
    3900:	9f 91       	pop	r25
    3902:	8f 91       	pop	r24
    3904:	7f 91       	pop	r23
    3906:	6f 91       	pop	r22
    3908:	5f 91       	pop	r21
    390a:	4f 91       	pop	r20
    390c:	3f 91       	pop	r19
    390e:	2f 91       	pop	r18
    3910:	0f 90       	pop	r0
    3912:	0b be       	out	0x3b, r0	; 59
    3914:	0f 90       	pop	r0
    3916:	0f be       	out	0x3f, r0	; 63
    3918:	0f 90       	pop	r0
    391a:	1f 90       	pop	r1
    391c:	18 95       	reti

0000391e <__vector_37>:
    391e:	1f 92       	push	r1
    3920:	0f 92       	push	r0
    3922:	0f b6       	in	r0, 0x3f	; 63
    3924:	0f 92       	push	r0
    3926:	11 24       	eor	r1, r1
    3928:	0b b6       	in	r0, 0x3b	; 59
    392a:	0f 92       	push	r0
    392c:	2f 93       	push	r18
    392e:	8f 93       	push	r24
    3930:	9f 93       	push	r25
    3932:	af 93       	push	r26
    3934:	bf 93       	push	r27
    3936:	ef 93       	push	r30
    3938:	ff 93       	push	r31
    393a:	e0 91 3d 08 	lds	r30, 0x083D	; 0x80083d <_ser_handle+0x2>
    393e:	f0 91 3e 08 	lds	r31, 0x083E	; 0x80083e <_ser_handle+0x3>
    3942:	30 97       	sbiw	r30, 0x00	; 0
    3944:	b9 f0       	breq	.+46     	; 0x3974 <__vector_37+0x56>
    3946:	02 80       	ldd	r0, Z+2	; 0x02
    3948:	f3 81       	ldd	r31, Z+3	; 0x03
    394a:	e0 2d       	mov	r30, r0
    394c:	93 81       	ldd	r25, Z+3	; 0x03
    394e:	82 81       	ldd	r24, Z+2	; 0x02
    3950:	98 17       	cp	r25, r24
    3952:	b1 f0       	breq	.+44     	; 0x3980 <__vector_37+0x62>
    3954:	92 81       	ldd	r25, Z+2	; 0x02
    3956:	85 81       	ldd	r24, Z+5	; 0x05
    3958:	28 2f       	mov	r18, r24
    395a:	26 95       	lsr	r18
    395c:	29 23       	and	r18, r25
    395e:	a0 81       	ld	r26, Z
    3960:	b1 81       	ldd	r27, Z+1	; 0x01
    3962:	a2 0f       	add	r26, r18
    3964:	b1 1d       	adc	r27, r1
    3966:	2c 91       	ld	r18, X
    3968:	9f 5f       	subi	r25, 0xFF	; 255
    396a:	89 23       	and	r24, r25
    396c:	82 83       	std	Z+2, r24	; 0x02
    396e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3972:	0b c0       	rjmp	.+22     	; 0x398a <__vector_37+0x6c>
    3974:	e9 ec       	ldi	r30, 0xC9	; 201
    3976:	f0 e0       	ldi	r31, 0x00	; 0
    3978:	80 81       	ld	r24, Z
    397a:	8f 7d       	andi	r24, 0xDF	; 223
    397c:	80 83       	st	Z, r24
    397e:	05 c0       	rjmp	.+10     	; 0x398a <__vector_37+0x6c>
    3980:	e9 ec       	ldi	r30, 0xC9	; 201
    3982:	f0 e0       	ldi	r31, 0x00	; 0
    3984:	80 81       	ld	r24, Z
    3986:	8f 7d       	andi	r24, 0xDF	; 223
    3988:	80 83       	st	Z, r24
    398a:	ff 91       	pop	r31
    398c:	ef 91       	pop	r30
    398e:	bf 91       	pop	r27
    3990:	af 91       	pop	r26
    3992:	9f 91       	pop	r25
    3994:	8f 91       	pop	r24
    3996:	2f 91       	pop	r18
    3998:	0f 90       	pop	r0
    399a:	0b be       	out	0x3b, r0	; 59
    399c:	0f 90       	pop	r0
    399e:	0f be       	out	0x3f, r0	; 63
    39a0:	0f 90       	pop	r0
    39a2:	1f 90       	pop	r1
    39a4:	18 95       	reti

000039a6 <__vector_51>:
    39a6:	1f 92       	push	r1
    39a8:	0f 92       	push	r0
    39aa:	0f b6       	in	r0, 0x3f	; 63
    39ac:	0f 92       	push	r0
    39ae:	11 24       	eor	r1, r1
    39b0:	0b b6       	in	r0, 0x3b	; 59
    39b2:	0f 92       	push	r0
    39b4:	2f 93       	push	r18
    39b6:	3f 93       	push	r19
    39b8:	4f 93       	push	r20
    39ba:	5f 93       	push	r21
    39bc:	6f 93       	push	r22
    39be:	7f 93       	push	r23
    39c0:	8f 93       	push	r24
    39c2:	9f 93       	push	r25
    39c4:	af 93       	push	r26
    39c6:	bf 93       	push	r27
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	ef 93       	push	r30
    39ce:	ff 93       	push	r31
    39d0:	a0 91 3f 08 	lds	r26, 0x083F	; 0x80083f <_ser_handle+0x4>
    39d4:	b0 91 40 08 	lds	r27, 0x0840	; 0x800840 <_ser_handle+0x5>
    39d8:	10 97       	sbiw	r26, 0x00	; 0
    39da:	11 f1       	breq	.+68     	; 0x3a20 <__vector_51+0x7a>
    39dc:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    39e0:	14 96       	adiw	r26, 0x04	; 4
    39e2:	ed 91       	ld	r30, X+
    39e4:	fc 91       	ld	r31, X
    39e6:	15 97       	sbiw	r26, 0x05	; 5
    39e8:	93 81       	ldd	r25, Z+3	; 0x03
    39ea:	82 81       	ldd	r24, Z+2	; 0x02
    39ec:	25 81       	ldd	r18, Z+5	; 0x05
    39ee:	98 1b       	sub	r25, r24
    39f0:	92 23       	and	r25, r18
    39f2:	84 81       	ldd	r24, Z+4	; 0x04
    39f4:	98 17       	cp	r25, r24
    39f6:	61 f0       	breq	.+24     	; 0x3a10 <__vector_51+0x6a>
    39f8:	83 81       	ldd	r24, Z+3	; 0x03
    39fa:	26 95       	lsr	r18
    39fc:	28 23       	and	r18, r24
    39fe:	c0 81       	ld	r28, Z
    3a00:	d1 81       	ldd	r29, Z+1	; 0x01
    3a02:	c2 0f       	add	r28, r18
    3a04:	d1 1d       	adc	r29, r1
    3a06:	68 83       	st	Y, r22
    3a08:	8f 5f       	subi	r24, 0xFF	; 255
    3a0a:	95 81       	ldd	r25, Z+5	; 0x05
    3a0c:	89 23       	and	r24, r25
    3a0e:	83 83       	std	Z+3, r24	; 0x03
    3a10:	16 96       	adiw	r26, 0x06	; 6
    3a12:	ed 91       	ld	r30, X+
    3a14:	fc 91       	ld	r31, X
    3a16:	17 97       	sbiw	r26, 0x07	; 7
    3a18:	30 97       	sbiw	r30, 0x00	; 0
    3a1a:	11 f0       	breq	.+4      	; 0x3a20 <__vector_51+0x7a>
    3a1c:	cd 01       	movw	r24, r26
    3a1e:	19 95       	eicall
    3a20:	ff 91       	pop	r31
    3a22:	ef 91       	pop	r30
    3a24:	df 91       	pop	r29
    3a26:	cf 91       	pop	r28
    3a28:	bf 91       	pop	r27
    3a2a:	af 91       	pop	r26
    3a2c:	9f 91       	pop	r25
    3a2e:	8f 91       	pop	r24
    3a30:	7f 91       	pop	r23
    3a32:	6f 91       	pop	r22
    3a34:	5f 91       	pop	r21
    3a36:	4f 91       	pop	r20
    3a38:	3f 91       	pop	r19
    3a3a:	2f 91       	pop	r18
    3a3c:	0f 90       	pop	r0
    3a3e:	0b be       	out	0x3b, r0	; 59
    3a40:	0f 90       	pop	r0
    3a42:	0f be       	out	0x3f, r0	; 63
    3a44:	0f 90       	pop	r0
    3a46:	1f 90       	pop	r1
    3a48:	18 95       	reti

00003a4a <__vector_52>:
    3a4a:	1f 92       	push	r1
    3a4c:	0f 92       	push	r0
    3a4e:	0f b6       	in	r0, 0x3f	; 63
    3a50:	0f 92       	push	r0
    3a52:	11 24       	eor	r1, r1
    3a54:	0b b6       	in	r0, 0x3b	; 59
    3a56:	0f 92       	push	r0
    3a58:	2f 93       	push	r18
    3a5a:	8f 93       	push	r24
    3a5c:	9f 93       	push	r25
    3a5e:	af 93       	push	r26
    3a60:	bf 93       	push	r27
    3a62:	ef 93       	push	r30
    3a64:	ff 93       	push	r31
    3a66:	e0 91 3f 08 	lds	r30, 0x083F	; 0x80083f <_ser_handle+0x4>
    3a6a:	f0 91 40 08 	lds	r31, 0x0840	; 0x800840 <_ser_handle+0x5>
    3a6e:	30 97       	sbiw	r30, 0x00	; 0
    3a70:	b9 f0       	breq	.+46     	; 0x3aa0 <__vector_52+0x56>
    3a72:	02 80       	ldd	r0, Z+2	; 0x02
    3a74:	f3 81       	ldd	r31, Z+3	; 0x03
    3a76:	e0 2d       	mov	r30, r0
    3a78:	93 81       	ldd	r25, Z+3	; 0x03
    3a7a:	82 81       	ldd	r24, Z+2	; 0x02
    3a7c:	98 17       	cp	r25, r24
    3a7e:	b1 f0       	breq	.+44     	; 0x3aac <__vector_52+0x62>
    3a80:	92 81       	ldd	r25, Z+2	; 0x02
    3a82:	85 81       	ldd	r24, Z+5	; 0x05
    3a84:	28 2f       	mov	r18, r24
    3a86:	26 95       	lsr	r18
    3a88:	29 23       	and	r18, r25
    3a8a:	a0 81       	ld	r26, Z
    3a8c:	b1 81       	ldd	r27, Z+1	; 0x01
    3a8e:	a2 0f       	add	r26, r18
    3a90:	b1 1d       	adc	r27, r1
    3a92:	2c 91       	ld	r18, X
    3a94:	9f 5f       	subi	r25, 0xFF	; 255
    3a96:	89 23       	and	r24, r25
    3a98:	82 83       	std	Z+2, r24	; 0x02
    3a9a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3a9e:	0b c0       	rjmp	.+22     	; 0x3ab6 <__vector_52+0x6c>
    3aa0:	e1 ed       	ldi	r30, 0xD1	; 209
    3aa2:	f0 e0       	ldi	r31, 0x00	; 0
    3aa4:	80 81       	ld	r24, Z
    3aa6:	8f 7d       	andi	r24, 0xDF	; 223
    3aa8:	80 83       	st	Z, r24
    3aaa:	05 c0       	rjmp	.+10     	; 0x3ab6 <__vector_52+0x6c>
    3aac:	e1 ed       	ldi	r30, 0xD1	; 209
    3aae:	f0 e0       	ldi	r31, 0x00	; 0
    3ab0:	80 81       	ld	r24, Z
    3ab2:	8f 7d       	andi	r24, 0xDF	; 223
    3ab4:	80 83       	st	Z, r24
    3ab6:	ff 91       	pop	r31
    3ab8:	ef 91       	pop	r30
    3aba:	bf 91       	pop	r27
    3abc:	af 91       	pop	r26
    3abe:	9f 91       	pop	r25
    3ac0:	8f 91       	pop	r24
    3ac2:	2f 91       	pop	r18
    3ac4:	0f 90       	pop	r0
    3ac6:	0b be       	out	0x3b, r0	; 59
    3ac8:	0f 90       	pop	r0
    3aca:	0f be       	out	0x3f, r0	; 63
    3acc:	0f 90       	pop	r0
    3ace:	1f 90       	pop	r1
    3ad0:	18 95       	reti

00003ad2 <__vector_54>:
    3ad2:	1f 92       	push	r1
    3ad4:	0f 92       	push	r0
    3ad6:	0f b6       	in	r0, 0x3f	; 63
    3ad8:	0f 92       	push	r0
    3ada:	11 24       	eor	r1, r1
    3adc:	0b b6       	in	r0, 0x3b	; 59
    3ade:	0f 92       	push	r0
    3ae0:	2f 93       	push	r18
    3ae2:	3f 93       	push	r19
    3ae4:	4f 93       	push	r20
    3ae6:	5f 93       	push	r21
    3ae8:	6f 93       	push	r22
    3aea:	7f 93       	push	r23
    3aec:	8f 93       	push	r24
    3aee:	9f 93       	push	r25
    3af0:	af 93       	push	r26
    3af2:	bf 93       	push	r27
    3af4:	cf 93       	push	r28
    3af6:	df 93       	push	r29
    3af8:	ef 93       	push	r30
    3afa:	ff 93       	push	r31
    3afc:	a0 91 41 08 	lds	r26, 0x0841	; 0x800841 <_ser_handle+0x6>
    3b00:	b0 91 42 08 	lds	r27, 0x0842	; 0x800842 <_ser_handle+0x7>
    3b04:	10 97       	sbiw	r26, 0x00	; 0
    3b06:	11 f1       	breq	.+68     	; 0x3b4c <__vector_54+0x7a>
    3b08:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3b0c:	14 96       	adiw	r26, 0x04	; 4
    3b0e:	ed 91       	ld	r30, X+
    3b10:	fc 91       	ld	r31, X
    3b12:	15 97       	sbiw	r26, 0x05	; 5
    3b14:	93 81       	ldd	r25, Z+3	; 0x03
    3b16:	82 81       	ldd	r24, Z+2	; 0x02
    3b18:	25 81       	ldd	r18, Z+5	; 0x05
    3b1a:	98 1b       	sub	r25, r24
    3b1c:	92 23       	and	r25, r18
    3b1e:	84 81       	ldd	r24, Z+4	; 0x04
    3b20:	98 17       	cp	r25, r24
    3b22:	61 f0       	breq	.+24     	; 0x3b3c <__vector_54+0x6a>
    3b24:	83 81       	ldd	r24, Z+3	; 0x03
    3b26:	26 95       	lsr	r18
    3b28:	28 23       	and	r18, r24
    3b2a:	c0 81       	ld	r28, Z
    3b2c:	d1 81       	ldd	r29, Z+1	; 0x01
    3b2e:	c2 0f       	add	r28, r18
    3b30:	d1 1d       	adc	r29, r1
    3b32:	68 83       	st	Y, r22
    3b34:	8f 5f       	subi	r24, 0xFF	; 255
    3b36:	95 81       	ldd	r25, Z+5	; 0x05
    3b38:	89 23       	and	r24, r25
    3b3a:	83 83       	std	Z+3, r24	; 0x03
    3b3c:	16 96       	adiw	r26, 0x06	; 6
    3b3e:	ed 91       	ld	r30, X+
    3b40:	fc 91       	ld	r31, X
    3b42:	17 97       	sbiw	r26, 0x07	; 7
    3b44:	30 97       	sbiw	r30, 0x00	; 0
    3b46:	11 f0       	breq	.+4      	; 0x3b4c <__vector_54+0x7a>
    3b48:	cd 01       	movw	r24, r26
    3b4a:	19 95       	eicall
    3b4c:	ff 91       	pop	r31
    3b4e:	ef 91       	pop	r30
    3b50:	df 91       	pop	r29
    3b52:	cf 91       	pop	r28
    3b54:	bf 91       	pop	r27
    3b56:	af 91       	pop	r26
    3b58:	9f 91       	pop	r25
    3b5a:	8f 91       	pop	r24
    3b5c:	7f 91       	pop	r23
    3b5e:	6f 91       	pop	r22
    3b60:	5f 91       	pop	r21
    3b62:	4f 91       	pop	r20
    3b64:	3f 91       	pop	r19
    3b66:	2f 91       	pop	r18
    3b68:	0f 90       	pop	r0
    3b6a:	0b be       	out	0x3b, r0	; 59
    3b6c:	0f 90       	pop	r0
    3b6e:	0f be       	out	0x3f, r0	; 63
    3b70:	0f 90       	pop	r0
    3b72:	1f 90       	pop	r1
    3b74:	18 95       	reti

00003b76 <__vector_55>:
    3b76:	1f 92       	push	r1
    3b78:	0f 92       	push	r0
    3b7a:	0f b6       	in	r0, 0x3f	; 63
    3b7c:	0f 92       	push	r0
    3b7e:	11 24       	eor	r1, r1
    3b80:	0b b6       	in	r0, 0x3b	; 59
    3b82:	0f 92       	push	r0
    3b84:	2f 93       	push	r18
    3b86:	8f 93       	push	r24
    3b88:	9f 93       	push	r25
    3b8a:	af 93       	push	r26
    3b8c:	bf 93       	push	r27
    3b8e:	ef 93       	push	r30
    3b90:	ff 93       	push	r31
    3b92:	e0 91 41 08 	lds	r30, 0x0841	; 0x800841 <_ser_handle+0x6>
    3b96:	f0 91 42 08 	lds	r31, 0x0842	; 0x800842 <_ser_handle+0x7>
    3b9a:	30 97       	sbiw	r30, 0x00	; 0
    3b9c:	b9 f0       	breq	.+46     	; 0x3bcc <__vector_55+0x56>
    3b9e:	02 80       	ldd	r0, Z+2	; 0x02
    3ba0:	f3 81       	ldd	r31, Z+3	; 0x03
    3ba2:	e0 2d       	mov	r30, r0
    3ba4:	93 81       	ldd	r25, Z+3	; 0x03
    3ba6:	82 81       	ldd	r24, Z+2	; 0x02
    3ba8:	98 17       	cp	r25, r24
    3baa:	b1 f0       	breq	.+44     	; 0x3bd8 <__vector_55+0x62>
    3bac:	92 81       	ldd	r25, Z+2	; 0x02
    3bae:	85 81       	ldd	r24, Z+5	; 0x05
    3bb0:	28 2f       	mov	r18, r24
    3bb2:	26 95       	lsr	r18
    3bb4:	29 23       	and	r18, r25
    3bb6:	a0 81       	ld	r26, Z
    3bb8:	b1 81       	ldd	r27, Z+1	; 0x01
    3bba:	a2 0f       	add	r26, r18
    3bbc:	b1 1d       	adc	r27, r1
    3bbe:	2c 91       	ld	r18, X
    3bc0:	9f 5f       	subi	r25, 0xFF	; 255
    3bc2:	89 23       	and	r24, r25
    3bc4:	82 83       	std	Z+2, r24	; 0x02
    3bc6:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    3bca:	0b c0       	rjmp	.+22     	; 0x3be2 <__vector_55+0x6c>
    3bcc:	e1 e3       	ldi	r30, 0x31	; 49
    3bce:	f1 e0       	ldi	r31, 0x01	; 1
    3bd0:	80 81       	ld	r24, Z
    3bd2:	8f 7d       	andi	r24, 0xDF	; 223
    3bd4:	80 83       	st	Z, r24
    3bd6:	05 c0       	rjmp	.+10     	; 0x3be2 <__vector_55+0x6c>
    3bd8:	e1 e3       	ldi	r30, 0x31	; 49
    3bda:	f1 e0       	ldi	r31, 0x01	; 1
    3bdc:	80 81       	ld	r24, Z
    3bde:	8f 7d       	andi	r24, 0xDF	; 223
    3be0:	80 83       	st	Z, r24
    3be2:	ff 91       	pop	r31
    3be4:	ef 91       	pop	r30
    3be6:	bf 91       	pop	r27
    3be8:	af 91       	pop	r26
    3bea:	9f 91       	pop	r25
    3bec:	8f 91       	pop	r24
    3bee:	2f 91       	pop	r18
    3bf0:	0f 90       	pop	r0
    3bf2:	0b be       	out	0x3b, r0	; 59
    3bf4:	0f 90       	pop	r0
    3bf6:	0f be       	out	0x3f, r0	; 63
    3bf8:	0f 90       	pop	r0
    3bfa:	1f 90       	pop	r1
    3bfc:	18 95       	reti

00003bfe <usart_getchar>:
    3bfe:	cf 93       	push	r28
    3c00:	df 93       	push	r29
    3c02:	1f 92       	push	r1
    3c04:	cd b7       	in	r28, 0x3d	; 61
    3c06:	de b7       	in	r29, 0x3e	; 62
    3c08:	be 01       	movw	r22, r28
    3c0a:	6f 5f       	subi	r22, 0xFF	; 255
    3c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    3c0e:	80 91 43 08 	lds	r24, 0x0843	; 0x800843 <_com_serial_instance>
    3c12:	90 91 44 08 	lds	r25, 0x0844	; 0x800844 <_com_serial_instance+0x1>
    3c16:	7f dd       	rcall	.-1282   	; 0x3716 <serial_get_byte>
    3c18:	81 11       	cpse	r24, r1
    3c1a:	f6 cf       	rjmp	.-20     	; 0x3c08 <usart_getchar+0xa>
    3c1c:	89 81       	ldd	r24, Y+1	; 0x01
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	0f 90       	pop	r0
    3c22:	df 91       	pop	r29
    3c24:	cf 91       	pop	r28
    3c26:	08 95       	ret

00003c28 <usart_putchar>:
    3c28:	68 2f       	mov	r22, r24
    3c2a:	80 91 43 08 	lds	r24, 0x0843	; 0x800843 <_com_serial_instance>
    3c2e:	90 91 44 08 	lds	r25, 0x0844	; 0x800844 <_com_serial_instance+0x1>
    3c32:	fc dc       	rcall	.-1544   	; 0x362c <serial_send_byte>
    3c34:	80 e0       	ldi	r24, 0x00	; 0
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	08 95       	ret

00003c3a <stdioCreate>:
    3c3a:	8f 92       	push	r8
    3c3c:	9f 92       	push	r9
    3c3e:	af 92       	push	r10
    3c40:	cf 92       	push	r12
    3c42:	ef 92       	push	r14
    3c44:	0f 93       	push	r16
    3c46:	81 2c       	mov	r8, r1
    3c48:	91 2c       	mov	r9, r1
    3c4a:	68 94       	set
    3c4c:	aa 24       	eor	r10, r10
    3c4e:	a7 f8       	bld	r10, 7
    3c50:	68 94       	set
    3c52:	cc 24       	eor	r12, r12
    3c54:	c7 f8       	bld	r12, 7
    3c56:	e1 2c       	mov	r14, r1
    3c58:	00 e0       	ldi	r16, 0x00	; 0
    3c5a:	23 e0       	ldi	r18, 0x03	; 3
    3c5c:	40 e0       	ldi	r20, 0x00	; 0
    3c5e:	51 ee       	ldi	r21, 0xE1	; 225
    3c60:	60 e0       	ldi	r22, 0x00	; 0
    3c62:	70 e0       	ldi	r23, 0x00	; 0
    3c64:	4d dc       	rcall	.-1894   	; 0x3500 <serial_new_instance>
    3c66:	90 93 44 08 	sts	0x0844, r25	; 0x800844 <_com_serial_instance+0x1>
    3c6a:	80 93 43 08 	sts	0x0843, r24	; 0x800843 <_com_serial_instance>
    3c6e:	e1 e8       	ldi	r30, 0x81	; 129
    3c70:	f8 e0       	ldi	r31, 0x08	; 8
    3c72:	8e e0       	ldi	r24, 0x0E	; 14
    3c74:	92 e0       	ldi	r25, 0x02	; 2
    3c76:	91 83       	std	Z+1, r25	; 0x01
    3c78:	80 83       	st	Z, r24
    3c7a:	93 83       	std	Z+3, r25	; 0x03
    3c7c:	82 83       	std	Z+2, r24	; 0x02
    3c7e:	0f 91       	pop	r16
    3c80:	ef 90       	pop	r14
    3c82:	cf 90       	pop	r12
    3c84:	af 90       	pop	r10
    3c86:	9f 90       	pop	r9
    3c88:	8f 90       	pop	r8
    3c8a:	08 95       	ret

00003c8c <__vector_39>:
    3c8c:	1f 92       	push	r1
    3c8e:	0f 92       	push	r0
    3c90:	0f b6       	in	r0, 0x3f	; 63
    3c92:	0f 92       	push	r0
    3c94:	11 24       	eor	r1, r1
    3c96:	0b b6       	in	r0, 0x3b	; 59
    3c98:	0f 92       	push	r0
    3c9a:	2f 93       	push	r18
    3c9c:	3f 93       	push	r19
    3c9e:	4f 93       	push	r20
    3ca0:	5f 93       	push	r21
    3ca2:	6f 93       	push	r22
    3ca4:	7f 93       	push	r23
    3ca6:	8f 93       	push	r24
    3ca8:	9f 93       	push	r25
    3caa:	af 93       	push	r26
    3cac:	bf 93       	push	r27
    3cae:	ef 93       	push	r30
    3cb0:	ff 93       	push	r31
    3cb2:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3cb6:	8e 2f       	mov	r24, r30
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	fc 01       	movw	r30, r24
    3cbc:	38 97       	sbiw	r30, 0x08	; 8
    3cbe:	e1 35       	cpi	r30, 0x51	; 81
    3cc0:	f1 05       	cpc	r31, r1
    3cc2:	08 f0       	brcs	.+2      	; 0x3cc6 <__vector_39+0x3a>
    3cc4:	75 c0       	rjmp	.+234    	; 0x3db0 <__vector_39+0x124>
    3cc6:	88 27       	eor	r24, r24
    3cc8:	e4 58       	subi	r30, 0x84	; 132
    3cca:	ff 4f       	sbci	r31, 0xFF	; 255
    3ccc:	8f 4f       	sbci	r24, 0xFF	; 255
    3cce:	a1 c2       	rjmp	.+1346   	; 0x4212 <__tablejump2__>
    3cd0:	10 92 45 08 	sts	0x0845, r1	; 0x800845 <_index.1885>
    3cd4:	e0 91 45 08 	lds	r30, 0x0845	; 0x800845 <_index.1885>
    3cd8:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <_twiMessageLen>
    3cdc:	e8 17       	cp	r30, r24
    3cde:	70 f4       	brcc	.+28     	; 0x3cfc <__vector_39+0x70>
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	8e 0f       	add	r24, r30
    3ce4:	80 93 45 08 	sts	0x0845, r24	; 0x800845 <_index.1885>
    3ce8:	f0 e0       	ldi	r31, 0x00	; 0
    3cea:	e7 5b       	subi	r30, 0xB7	; 183
    3cec:	f7 4f       	sbci	r31, 0xF7	; 247
    3cee:	80 81       	ld	r24, Z
    3cf0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3cf4:	85 e8       	ldi	r24, 0x85	; 133
    3cf6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3cfa:	72 c0       	rjmp	.+228    	; 0x3de0 <__vector_39+0x154>
    3cfc:	84 e9       	ldi	r24, 0x94	; 148
    3cfe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3d02:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <_twiCurrentHandler>
    3d06:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <_twiCurrentHandler+0x1>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	12 96       	adiw	r26, 0x02	; 2
    3d0e:	ed 91       	ld	r30, X+
    3d10:	fc 91       	ld	r31, X
    3d12:	13 97       	sbiw	r26, 0x03	; 3
    3d14:	30 97       	sbiw	r30, 0x00	; 0
    3d16:	09 f4       	brne	.+2      	; 0x3d1a <__vector_39+0x8e>
    3d18:	63 c0       	rjmp	.+198    	; 0x3de0 <__vector_39+0x154>
    3d1a:	20 e0       	ldi	r18, 0x00	; 0
    3d1c:	40 e0       	ldi	r20, 0x00	; 0
    3d1e:	50 e0       	ldi	r21, 0x00	; 0
    3d20:	64 e0       	ldi	r22, 0x04	; 4
    3d22:	19 95       	eicall
    3d24:	5d c0       	rjmp	.+186    	; 0x3de0 <__vector_39+0x154>
    3d26:	e0 91 45 08 	lds	r30, 0x0845	; 0x800845 <_index.1885>
    3d2a:	81 e0       	ldi	r24, 0x01	; 1
    3d2c:	8e 0f       	add	r24, r30
    3d2e:	80 93 45 08 	sts	0x0845, r24	; 0x800845 <_index.1885>
    3d32:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3d36:	f0 e0       	ldi	r31, 0x00	; 0
    3d38:	e7 5b       	subi	r30, 0xB7	; 183
    3d3a:	f7 4f       	sbci	r31, 0xF7	; 247
    3d3c:	80 83       	st	Z, r24
    3d3e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3d42:	80 34       	cpi	r24, 0x40	; 64
    3d44:	11 f4       	brne	.+4      	; 0x3d4a <__vector_39+0xbe>
    3d46:	10 92 45 08 	sts	0x0845, r1	; 0x800845 <_index.1885>
    3d4a:	20 91 45 08 	lds	r18, 0x0845	; 0x800845 <_index.1885>
    3d4e:	30 e0       	ldi	r19, 0x00	; 0
    3d50:	80 91 48 08 	lds	r24, 0x0848	; 0x800848 <_twiMessageLen>
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	01 97       	sbiw	r24, 0x01	; 1
    3d58:	28 17       	cp	r18, r24
    3d5a:	39 07       	cpc	r19, r25
    3d5c:	24 f4       	brge	.+8      	; 0x3d66 <__vector_39+0xda>
    3d5e:	85 ec       	ldi	r24, 0xC5	; 197
    3d60:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3d64:	3d c0       	rjmp	.+122    	; 0x3de0 <__vector_39+0x154>
    3d66:	85 e8       	ldi	r24, 0x85	; 133
    3d68:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3d6c:	39 c0       	rjmp	.+114    	; 0x3de0 <__vector_39+0x154>
    3d6e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    3d72:	e0 91 45 08 	lds	r30, 0x0845	; 0x800845 <_index.1885>
    3d76:	f0 e0       	ldi	r31, 0x00	; 0
    3d78:	e7 5b       	subi	r30, 0xB7	; 183
    3d7a:	f7 4f       	sbci	r31, 0xF7	; 247
    3d7c:	80 83       	st	Z, r24
    3d7e:	84 e9       	ldi	r24, 0x94	; 148
    3d80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3d84:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <_twiCurrentHandler>
    3d88:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <_twiCurrentHandler+0x1>
    3d8c:	dc 01       	movw	r26, r24
    3d8e:	12 96       	adiw	r26, 0x02	; 2
    3d90:	ed 91       	ld	r30, X+
    3d92:	fc 91       	ld	r31, X
    3d94:	13 97       	sbiw	r26, 0x03	; 3
    3d96:	30 97       	sbiw	r30, 0x00	; 0
    3d98:	19 f1       	breq	.+70     	; 0x3de0 <__vector_39+0x154>
    3d9a:	20 91 48 08 	lds	r18, 0x0848	; 0x800848 <_twiMessageLen>
    3d9e:	49 e4       	ldi	r20, 0x49	; 73
    3da0:	58 e0       	ldi	r21, 0x08	; 8
    3da2:	65 e0       	ldi	r22, 0x05	; 5
    3da4:	19 95       	eicall
    3da6:	1c c0       	rjmp	.+56     	; 0x3de0 <__vector_39+0x154>
    3da8:	85 ea       	ldi	r24, 0xA5	; 165
    3daa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3dae:	18 c0       	rjmp	.+48     	; 0x3de0 <__vector_39+0x154>
    3db0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    3db4:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <_twiCurrentState>
    3db8:	84 e0       	ldi	r24, 0x04	; 4
    3dba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    3dbe:	80 91 46 08 	lds	r24, 0x0846	; 0x800846 <_twiCurrentHandler>
    3dc2:	90 91 47 08 	lds	r25, 0x0847	; 0x800847 <_twiCurrentHandler+0x1>
    3dc6:	dc 01       	movw	r26, r24
    3dc8:	12 96       	adiw	r26, 0x02	; 2
    3dca:	ed 91       	ld	r30, X+
    3dcc:	fc 91       	ld	r31, X
    3dce:	13 97       	sbiw	r26, 0x03	; 3
    3dd0:	30 97       	sbiw	r30, 0x00	; 0
    3dd2:	31 f0       	breq	.+12     	; 0x3de0 <__vector_39+0x154>
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	40 e0       	ldi	r20, 0x00	; 0
    3dd8:	50 e0       	ldi	r21, 0x00	; 0
    3dda:	60 91 1c 02 	lds	r22, 0x021C	; 0x80021c <_twiCurrentState>
    3dde:	19 95       	eicall
    3de0:	ff 91       	pop	r31
    3de2:	ef 91       	pop	r30
    3de4:	bf 91       	pop	r27
    3de6:	af 91       	pop	r26
    3de8:	9f 91       	pop	r25
    3dea:	8f 91       	pop	r24
    3dec:	7f 91       	pop	r23
    3dee:	6f 91       	pop	r22
    3df0:	5f 91       	pop	r21
    3df2:	4f 91       	pop	r20
    3df4:	3f 91       	pop	r19
    3df6:	2f 91       	pop	r18
    3df8:	0f 90       	pop	r0
    3dfa:	0b be       	out	0x3b, r0	; 59
    3dfc:	0f 90       	pop	r0
    3dfe:	0f be       	out	0x3f, r0	; 63
    3e00:	0f 90       	pop	r0
    3e02:	1f 90       	pop	r1
    3e04:	18 95       	reti

00003e06 <fifo_init>:
    3e06:	fc 01       	movw	r30, r24
    3e08:	41 11       	cpse	r20, r1
    3e0a:	01 c0       	rjmp	.+2      	; 0x3e0e <fifo_init+0x8>
    3e0c:	45 d3       	rcall	.+1674   	; 0x4498 <abort>
    3e0e:	84 2f       	mov	r24, r20
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	9c 01       	movw	r18, r24
    3e14:	21 50       	subi	r18, 0x01	; 1
    3e16:	31 09       	sbc	r19, r1
    3e18:	82 23       	and	r24, r18
    3e1a:	93 23       	and	r25, r19
    3e1c:	89 2b       	or	r24, r25
    3e1e:	09 f0       	breq	.+2      	; 0x3e22 <fifo_init+0x1c>
    3e20:	3b d3       	rcall	.+1654   	; 0x4498 <abort>
    3e22:	41 38       	cpi	r20, 0x81	; 129
    3e24:	08 f0       	brcs	.+2      	; 0x3e28 <fifo_init+0x22>
    3e26:	38 d3       	rcall	.+1648   	; 0x4498 <abort>
    3e28:	12 82       	std	Z+2, r1	; 0x02
    3e2a:	13 82       	std	Z+3, r1	; 0x03
    3e2c:	44 83       	std	Z+4, r20	; 0x04
    3e2e:	44 0f       	add	r20, r20
    3e30:	41 50       	subi	r20, 0x01	; 1
    3e32:	45 83       	std	Z+5, r20	; 0x05
    3e34:	71 83       	std	Z+1, r23	; 0x01
    3e36:	60 83       	st	Z, r22
    3e38:	80 e0       	ldi	r24, 0x00	; 0
    3e3a:	90 e0       	ldi	r25, 0x00	; 0
    3e3c:	08 95       	ret

00003e3e <__subsf3>:
    3e3e:	50 58       	subi	r21, 0x80	; 128

00003e40 <__addsf3>:
    3e40:	bb 27       	eor	r27, r27
    3e42:	aa 27       	eor	r26, r26
    3e44:	0e d0       	rcall	.+28     	; 0x3e62 <__addsf3x>
    3e46:	48 c1       	rjmp	.+656    	; 0x40d8 <__fp_round>
    3e48:	39 d1       	rcall	.+626    	; 0x40bc <__fp_pscA>
    3e4a:	30 f0       	brcs	.+12     	; 0x3e58 <__addsf3+0x18>
    3e4c:	3e d1       	rcall	.+636    	; 0x40ca <__fp_pscB>
    3e4e:	20 f0       	brcs	.+8      	; 0x3e58 <__addsf3+0x18>
    3e50:	31 f4       	brne	.+12     	; 0x3e5e <__addsf3+0x1e>
    3e52:	9f 3f       	cpi	r25, 0xFF	; 255
    3e54:	11 f4       	brne	.+4      	; 0x3e5a <__addsf3+0x1a>
    3e56:	1e f4       	brtc	.+6      	; 0x3e5e <__addsf3+0x1e>
    3e58:	2e c1       	rjmp	.+604    	; 0x40b6 <__fp_nan>
    3e5a:	0e f4       	brtc	.+2      	; 0x3e5e <__addsf3+0x1e>
    3e5c:	e0 95       	com	r30
    3e5e:	e7 fb       	bst	r30, 7
    3e60:	24 c1       	rjmp	.+584    	; 0x40aa <__fp_inf>

00003e62 <__addsf3x>:
    3e62:	e9 2f       	mov	r30, r25
    3e64:	4a d1       	rcall	.+660    	; 0x40fa <__fp_split3>
    3e66:	80 f3       	brcs	.-32     	; 0x3e48 <__addsf3+0x8>
    3e68:	ba 17       	cp	r27, r26
    3e6a:	62 07       	cpc	r22, r18
    3e6c:	73 07       	cpc	r23, r19
    3e6e:	84 07       	cpc	r24, r20
    3e70:	95 07       	cpc	r25, r21
    3e72:	18 f0       	brcs	.+6      	; 0x3e7a <__addsf3x+0x18>
    3e74:	71 f4       	brne	.+28     	; 0x3e92 <__addsf3x+0x30>
    3e76:	9e f5       	brtc	.+102    	; 0x3ede <__addsf3x+0x7c>
    3e78:	62 c1       	rjmp	.+708    	; 0x413e <__fp_zero>
    3e7a:	0e f4       	brtc	.+2      	; 0x3e7e <__addsf3x+0x1c>
    3e7c:	e0 95       	com	r30
    3e7e:	0b 2e       	mov	r0, r27
    3e80:	ba 2f       	mov	r27, r26
    3e82:	a0 2d       	mov	r26, r0
    3e84:	0b 01       	movw	r0, r22
    3e86:	b9 01       	movw	r22, r18
    3e88:	90 01       	movw	r18, r0
    3e8a:	0c 01       	movw	r0, r24
    3e8c:	ca 01       	movw	r24, r20
    3e8e:	a0 01       	movw	r20, r0
    3e90:	11 24       	eor	r1, r1
    3e92:	ff 27       	eor	r31, r31
    3e94:	59 1b       	sub	r21, r25
    3e96:	99 f0       	breq	.+38     	; 0x3ebe <__addsf3x+0x5c>
    3e98:	59 3f       	cpi	r21, 0xF9	; 249
    3e9a:	50 f4       	brcc	.+20     	; 0x3eb0 <__addsf3x+0x4e>
    3e9c:	50 3e       	cpi	r21, 0xE0	; 224
    3e9e:	68 f1       	brcs	.+90     	; 0x3efa <__addsf3x+0x98>
    3ea0:	1a 16       	cp	r1, r26
    3ea2:	f0 40       	sbci	r31, 0x00	; 0
    3ea4:	a2 2f       	mov	r26, r18
    3ea6:	23 2f       	mov	r18, r19
    3ea8:	34 2f       	mov	r19, r20
    3eaa:	44 27       	eor	r20, r20
    3eac:	58 5f       	subi	r21, 0xF8	; 248
    3eae:	f3 cf       	rjmp	.-26     	; 0x3e96 <__addsf3x+0x34>
    3eb0:	46 95       	lsr	r20
    3eb2:	37 95       	ror	r19
    3eb4:	27 95       	ror	r18
    3eb6:	a7 95       	ror	r26
    3eb8:	f0 40       	sbci	r31, 0x00	; 0
    3eba:	53 95       	inc	r21
    3ebc:	c9 f7       	brne	.-14     	; 0x3eb0 <__addsf3x+0x4e>
    3ebe:	7e f4       	brtc	.+30     	; 0x3ede <__addsf3x+0x7c>
    3ec0:	1f 16       	cp	r1, r31
    3ec2:	ba 0b       	sbc	r27, r26
    3ec4:	62 0b       	sbc	r22, r18
    3ec6:	73 0b       	sbc	r23, r19
    3ec8:	84 0b       	sbc	r24, r20
    3eca:	ba f0       	brmi	.+46     	; 0x3efa <__addsf3x+0x98>
    3ecc:	91 50       	subi	r25, 0x01	; 1
    3ece:	a1 f0       	breq	.+40     	; 0x3ef8 <__addsf3x+0x96>
    3ed0:	ff 0f       	add	r31, r31
    3ed2:	bb 1f       	adc	r27, r27
    3ed4:	66 1f       	adc	r22, r22
    3ed6:	77 1f       	adc	r23, r23
    3ed8:	88 1f       	adc	r24, r24
    3eda:	c2 f7       	brpl	.-16     	; 0x3ecc <__addsf3x+0x6a>
    3edc:	0e c0       	rjmp	.+28     	; 0x3efa <__addsf3x+0x98>
    3ede:	ba 0f       	add	r27, r26
    3ee0:	62 1f       	adc	r22, r18
    3ee2:	73 1f       	adc	r23, r19
    3ee4:	84 1f       	adc	r24, r20
    3ee6:	48 f4       	brcc	.+18     	; 0x3efa <__addsf3x+0x98>
    3ee8:	87 95       	ror	r24
    3eea:	77 95       	ror	r23
    3eec:	67 95       	ror	r22
    3eee:	b7 95       	ror	r27
    3ef0:	f7 95       	ror	r31
    3ef2:	9e 3f       	cpi	r25, 0xFE	; 254
    3ef4:	08 f0       	brcs	.+2      	; 0x3ef8 <__addsf3x+0x96>
    3ef6:	b3 cf       	rjmp	.-154    	; 0x3e5e <__addsf3+0x1e>
    3ef8:	93 95       	inc	r25
    3efa:	88 0f       	add	r24, r24
    3efc:	08 f0       	brcs	.+2      	; 0x3f00 <__addsf3x+0x9e>
    3efe:	99 27       	eor	r25, r25
    3f00:	ee 0f       	add	r30, r30
    3f02:	97 95       	ror	r25
    3f04:	87 95       	ror	r24
    3f06:	08 95       	ret

00003f08 <__divsf3>:
    3f08:	0c d0       	rcall	.+24     	; 0x3f22 <__divsf3x>
    3f0a:	e6 c0       	rjmp	.+460    	; 0x40d8 <__fp_round>
    3f0c:	de d0       	rcall	.+444    	; 0x40ca <__fp_pscB>
    3f0e:	40 f0       	brcs	.+16     	; 0x3f20 <__divsf3+0x18>
    3f10:	d5 d0       	rcall	.+426    	; 0x40bc <__fp_pscA>
    3f12:	30 f0       	brcs	.+12     	; 0x3f20 <__divsf3+0x18>
    3f14:	21 f4       	brne	.+8      	; 0x3f1e <__divsf3+0x16>
    3f16:	5f 3f       	cpi	r21, 0xFF	; 255
    3f18:	19 f0       	breq	.+6      	; 0x3f20 <__divsf3+0x18>
    3f1a:	c7 c0       	rjmp	.+398    	; 0x40aa <__fp_inf>
    3f1c:	51 11       	cpse	r21, r1
    3f1e:	10 c1       	rjmp	.+544    	; 0x4140 <__fp_szero>
    3f20:	ca c0       	rjmp	.+404    	; 0x40b6 <__fp_nan>

00003f22 <__divsf3x>:
    3f22:	eb d0       	rcall	.+470    	; 0x40fa <__fp_split3>
    3f24:	98 f3       	brcs	.-26     	; 0x3f0c <__divsf3+0x4>

00003f26 <__divsf3_pse>:
    3f26:	99 23       	and	r25, r25
    3f28:	c9 f3       	breq	.-14     	; 0x3f1c <__divsf3+0x14>
    3f2a:	55 23       	and	r21, r21
    3f2c:	b1 f3       	breq	.-20     	; 0x3f1a <__divsf3+0x12>
    3f2e:	95 1b       	sub	r25, r21
    3f30:	55 0b       	sbc	r21, r21
    3f32:	bb 27       	eor	r27, r27
    3f34:	aa 27       	eor	r26, r26
    3f36:	62 17       	cp	r22, r18
    3f38:	73 07       	cpc	r23, r19
    3f3a:	84 07       	cpc	r24, r20
    3f3c:	38 f0       	brcs	.+14     	; 0x3f4c <__divsf3_pse+0x26>
    3f3e:	9f 5f       	subi	r25, 0xFF	; 255
    3f40:	5f 4f       	sbci	r21, 0xFF	; 255
    3f42:	22 0f       	add	r18, r18
    3f44:	33 1f       	adc	r19, r19
    3f46:	44 1f       	adc	r20, r20
    3f48:	aa 1f       	adc	r26, r26
    3f4a:	a9 f3       	breq	.-22     	; 0x3f36 <__divsf3_pse+0x10>
    3f4c:	33 d0       	rcall	.+102    	; 0x3fb4 <__divsf3_pse+0x8e>
    3f4e:	0e 2e       	mov	r0, r30
    3f50:	3a f0       	brmi	.+14     	; 0x3f60 <__divsf3_pse+0x3a>
    3f52:	e0 e8       	ldi	r30, 0x80	; 128
    3f54:	30 d0       	rcall	.+96     	; 0x3fb6 <__divsf3_pse+0x90>
    3f56:	91 50       	subi	r25, 0x01	; 1
    3f58:	50 40       	sbci	r21, 0x00	; 0
    3f5a:	e6 95       	lsr	r30
    3f5c:	00 1c       	adc	r0, r0
    3f5e:	ca f7       	brpl	.-14     	; 0x3f52 <__divsf3_pse+0x2c>
    3f60:	29 d0       	rcall	.+82     	; 0x3fb4 <__divsf3_pse+0x8e>
    3f62:	fe 2f       	mov	r31, r30
    3f64:	27 d0       	rcall	.+78     	; 0x3fb4 <__divsf3_pse+0x8e>
    3f66:	66 0f       	add	r22, r22
    3f68:	77 1f       	adc	r23, r23
    3f6a:	88 1f       	adc	r24, r24
    3f6c:	bb 1f       	adc	r27, r27
    3f6e:	26 17       	cp	r18, r22
    3f70:	37 07       	cpc	r19, r23
    3f72:	48 07       	cpc	r20, r24
    3f74:	ab 07       	cpc	r26, r27
    3f76:	b0 e8       	ldi	r27, 0x80	; 128
    3f78:	09 f0       	breq	.+2      	; 0x3f7c <__divsf3_pse+0x56>
    3f7a:	bb 0b       	sbc	r27, r27
    3f7c:	80 2d       	mov	r24, r0
    3f7e:	bf 01       	movw	r22, r30
    3f80:	ff 27       	eor	r31, r31
    3f82:	93 58       	subi	r25, 0x83	; 131
    3f84:	5f 4f       	sbci	r21, 0xFF	; 255
    3f86:	2a f0       	brmi	.+10     	; 0x3f92 <__divsf3_pse+0x6c>
    3f88:	9e 3f       	cpi	r25, 0xFE	; 254
    3f8a:	51 05       	cpc	r21, r1
    3f8c:	68 f0       	brcs	.+26     	; 0x3fa8 <__divsf3_pse+0x82>
    3f8e:	8d c0       	rjmp	.+282    	; 0x40aa <__fp_inf>
    3f90:	d7 c0       	rjmp	.+430    	; 0x4140 <__fp_szero>
    3f92:	5f 3f       	cpi	r21, 0xFF	; 255
    3f94:	ec f3       	brlt	.-6      	; 0x3f90 <__divsf3_pse+0x6a>
    3f96:	98 3e       	cpi	r25, 0xE8	; 232
    3f98:	dc f3       	brlt	.-10     	; 0x3f90 <__divsf3_pse+0x6a>
    3f9a:	86 95       	lsr	r24
    3f9c:	77 95       	ror	r23
    3f9e:	67 95       	ror	r22
    3fa0:	b7 95       	ror	r27
    3fa2:	f7 95       	ror	r31
    3fa4:	9f 5f       	subi	r25, 0xFF	; 255
    3fa6:	c9 f7       	brne	.-14     	; 0x3f9a <__divsf3_pse+0x74>
    3fa8:	88 0f       	add	r24, r24
    3faa:	91 1d       	adc	r25, r1
    3fac:	96 95       	lsr	r25
    3fae:	87 95       	ror	r24
    3fb0:	97 f9       	bld	r25, 7
    3fb2:	08 95       	ret
    3fb4:	e1 e0       	ldi	r30, 0x01	; 1
    3fb6:	66 0f       	add	r22, r22
    3fb8:	77 1f       	adc	r23, r23
    3fba:	88 1f       	adc	r24, r24
    3fbc:	bb 1f       	adc	r27, r27
    3fbe:	62 17       	cp	r22, r18
    3fc0:	73 07       	cpc	r23, r19
    3fc2:	84 07       	cpc	r24, r20
    3fc4:	ba 07       	cpc	r27, r26
    3fc6:	20 f0       	brcs	.+8      	; 0x3fd0 <__divsf3_pse+0xaa>
    3fc8:	62 1b       	sub	r22, r18
    3fca:	73 0b       	sbc	r23, r19
    3fcc:	84 0b       	sbc	r24, r20
    3fce:	ba 0b       	sbc	r27, r26
    3fd0:	ee 1f       	adc	r30, r30
    3fd2:	88 f7       	brcc	.-30     	; 0x3fb6 <__divsf3_pse+0x90>
    3fd4:	e0 95       	com	r30
    3fd6:	08 95       	ret

00003fd8 <__fixunssfsi>:
    3fd8:	98 d0       	rcall	.+304    	; 0x410a <__fp_splitA>
    3fda:	88 f0       	brcs	.+34     	; 0x3ffe <__fixunssfsi+0x26>
    3fdc:	9f 57       	subi	r25, 0x7F	; 127
    3fde:	90 f0       	brcs	.+36     	; 0x4004 <__fixunssfsi+0x2c>
    3fe0:	b9 2f       	mov	r27, r25
    3fe2:	99 27       	eor	r25, r25
    3fe4:	b7 51       	subi	r27, 0x17	; 23
    3fe6:	a0 f0       	brcs	.+40     	; 0x4010 <__fixunssfsi+0x38>
    3fe8:	d1 f0       	breq	.+52     	; 0x401e <__fixunssfsi+0x46>
    3fea:	66 0f       	add	r22, r22
    3fec:	77 1f       	adc	r23, r23
    3fee:	88 1f       	adc	r24, r24
    3ff0:	99 1f       	adc	r25, r25
    3ff2:	1a f0       	brmi	.+6      	; 0x3ffa <__fixunssfsi+0x22>
    3ff4:	ba 95       	dec	r27
    3ff6:	c9 f7       	brne	.-14     	; 0x3fea <__fixunssfsi+0x12>
    3ff8:	12 c0       	rjmp	.+36     	; 0x401e <__fixunssfsi+0x46>
    3ffa:	b1 30       	cpi	r27, 0x01	; 1
    3ffc:	81 f0       	breq	.+32     	; 0x401e <__fixunssfsi+0x46>
    3ffe:	9f d0       	rcall	.+318    	; 0x413e <__fp_zero>
    4000:	b1 e0       	ldi	r27, 0x01	; 1
    4002:	08 95       	ret
    4004:	9c c0       	rjmp	.+312    	; 0x413e <__fp_zero>
    4006:	67 2f       	mov	r22, r23
    4008:	78 2f       	mov	r23, r24
    400a:	88 27       	eor	r24, r24
    400c:	b8 5f       	subi	r27, 0xF8	; 248
    400e:	39 f0       	breq	.+14     	; 0x401e <__fixunssfsi+0x46>
    4010:	b9 3f       	cpi	r27, 0xF9	; 249
    4012:	cc f3       	brlt	.-14     	; 0x4006 <__fixunssfsi+0x2e>
    4014:	86 95       	lsr	r24
    4016:	77 95       	ror	r23
    4018:	67 95       	ror	r22
    401a:	b3 95       	inc	r27
    401c:	d9 f7       	brne	.-10     	; 0x4014 <__fixunssfsi+0x3c>
    401e:	3e f4       	brtc	.+14     	; 0x402e <__fixunssfsi+0x56>
    4020:	90 95       	com	r25
    4022:	80 95       	com	r24
    4024:	70 95       	com	r23
    4026:	61 95       	neg	r22
    4028:	7f 4f       	sbci	r23, 0xFF	; 255
    402a:	8f 4f       	sbci	r24, 0xFF	; 255
    402c:	9f 4f       	sbci	r25, 0xFF	; 255
    402e:	08 95       	ret

00004030 <__floatunsisf>:
    4030:	e8 94       	clt
    4032:	09 c0       	rjmp	.+18     	; 0x4046 <__floatsisf+0x12>

00004034 <__floatsisf>:
    4034:	97 fb       	bst	r25, 7
    4036:	3e f4       	brtc	.+14     	; 0x4046 <__floatsisf+0x12>
    4038:	90 95       	com	r25
    403a:	80 95       	com	r24
    403c:	70 95       	com	r23
    403e:	61 95       	neg	r22
    4040:	7f 4f       	sbci	r23, 0xFF	; 255
    4042:	8f 4f       	sbci	r24, 0xFF	; 255
    4044:	9f 4f       	sbci	r25, 0xFF	; 255
    4046:	99 23       	and	r25, r25
    4048:	a9 f0       	breq	.+42     	; 0x4074 <__floatsisf+0x40>
    404a:	f9 2f       	mov	r31, r25
    404c:	96 e9       	ldi	r25, 0x96	; 150
    404e:	bb 27       	eor	r27, r27
    4050:	93 95       	inc	r25
    4052:	f6 95       	lsr	r31
    4054:	87 95       	ror	r24
    4056:	77 95       	ror	r23
    4058:	67 95       	ror	r22
    405a:	b7 95       	ror	r27
    405c:	f1 11       	cpse	r31, r1
    405e:	f8 cf       	rjmp	.-16     	; 0x4050 <__floatsisf+0x1c>
    4060:	fa f4       	brpl	.+62     	; 0x40a0 <__floatsisf+0x6c>
    4062:	bb 0f       	add	r27, r27
    4064:	11 f4       	brne	.+4      	; 0x406a <__floatsisf+0x36>
    4066:	60 ff       	sbrs	r22, 0
    4068:	1b c0       	rjmp	.+54     	; 0x40a0 <__floatsisf+0x6c>
    406a:	6f 5f       	subi	r22, 0xFF	; 255
    406c:	7f 4f       	sbci	r23, 0xFF	; 255
    406e:	8f 4f       	sbci	r24, 0xFF	; 255
    4070:	9f 4f       	sbci	r25, 0xFF	; 255
    4072:	16 c0       	rjmp	.+44     	; 0x40a0 <__floatsisf+0x6c>
    4074:	88 23       	and	r24, r24
    4076:	11 f0       	breq	.+4      	; 0x407c <__floatsisf+0x48>
    4078:	96 e9       	ldi	r25, 0x96	; 150
    407a:	11 c0       	rjmp	.+34     	; 0x409e <__floatsisf+0x6a>
    407c:	77 23       	and	r23, r23
    407e:	21 f0       	breq	.+8      	; 0x4088 <__floatsisf+0x54>
    4080:	9e e8       	ldi	r25, 0x8E	; 142
    4082:	87 2f       	mov	r24, r23
    4084:	76 2f       	mov	r23, r22
    4086:	05 c0       	rjmp	.+10     	; 0x4092 <__floatsisf+0x5e>
    4088:	66 23       	and	r22, r22
    408a:	71 f0       	breq	.+28     	; 0x40a8 <__floatsisf+0x74>
    408c:	96 e8       	ldi	r25, 0x86	; 134
    408e:	86 2f       	mov	r24, r22
    4090:	70 e0       	ldi	r23, 0x00	; 0
    4092:	60 e0       	ldi	r22, 0x00	; 0
    4094:	2a f0       	brmi	.+10     	; 0x40a0 <__floatsisf+0x6c>
    4096:	9a 95       	dec	r25
    4098:	66 0f       	add	r22, r22
    409a:	77 1f       	adc	r23, r23
    409c:	88 1f       	adc	r24, r24
    409e:	da f7       	brpl	.-10     	; 0x4096 <__floatsisf+0x62>
    40a0:	88 0f       	add	r24, r24
    40a2:	96 95       	lsr	r25
    40a4:	87 95       	ror	r24
    40a6:	97 f9       	bld	r25, 7
    40a8:	08 95       	ret

000040aa <__fp_inf>:
    40aa:	97 f9       	bld	r25, 7
    40ac:	9f 67       	ori	r25, 0x7F	; 127
    40ae:	80 e8       	ldi	r24, 0x80	; 128
    40b0:	70 e0       	ldi	r23, 0x00	; 0
    40b2:	60 e0       	ldi	r22, 0x00	; 0
    40b4:	08 95       	ret

000040b6 <__fp_nan>:
    40b6:	9f ef       	ldi	r25, 0xFF	; 255
    40b8:	80 ec       	ldi	r24, 0xC0	; 192
    40ba:	08 95       	ret

000040bc <__fp_pscA>:
    40bc:	00 24       	eor	r0, r0
    40be:	0a 94       	dec	r0
    40c0:	16 16       	cp	r1, r22
    40c2:	17 06       	cpc	r1, r23
    40c4:	18 06       	cpc	r1, r24
    40c6:	09 06       	cpc	r0, r25
    40c8:	08 95       	ret

000040ca <__fp_pscB>:
    40ca:	00 24       	eor	r0, r0
    40cc:	0a 94       	dec	r0
    40ce:	12 16       	cp	r1, r18
    40d0:	13 06       	cpc	r1, r19
    40d2:	14 06       	cpc	r1, r20
    40d4:	05 06       	cpc	r0, r21
    40d6:	08 95       	ret

000040d8 <__fp_round>:
    40d8:	09 2e       	mov	r0, r25
    40da:	03 94       	inc	r0
    40dc:	00 0c       	add	r0, r0
    40de:	11 f4       	brne	.+4      	; 0x40e4 <__fp_round+0xc>
    40e0:	88 23       	and	r24, r24
    40e2:	52 f0       	brmi	.+20     	; 0x40f8 <__fp_round+0x20>
    40e4:	bb 0f       	add	r27, r27
    40e6:	40 f4       	brcc	.+16     	; 0x40f8 <__fp_round+0x20>
    40e8:	bf 2b       	or	r27, r31
    40ea:	11 f4       	brne	.+4      	; 0x40f0 <__fp_round+0x18>
    40ec:	60 ff       	sbrs	r22, 0
    40ee:	04 c0       	rjmp	.+8      	; 0x40f8 <__fp_round+0x20>
    40f0:	6f 5f       	subi	r22, 0xFF	; 255
    40f2:	7f 4f       	sbci	r23, 0xFF	; 255
    40f4:	8f 4f       	sbci	r24, 0xFF	; 255
    40f6:	9f 4f       	sbci	r25, 0xFF	; 255
    40f8:	08 95       	ret

000040fa <__fp_split3>:
    40fa:	57 fd       	sbrc	r21, 7
    40fc:	90 58       	subi	r25, 0x80	; 128
    40fe:	44 0f       	add	r20, r20
    4100:	55 1f       	adc	r21, r21
    4102:	59 f0       	breq	.+22     	; 0x411a <__fp_splitA+0x10>
    4104:	5f 3f       	cpi	r21, 0xFF	; 255
    4106:	71 f0       	breq	.+28     	; 0x4124 <__fp_splitA+0x1a>
    4108:	47 95       	ror	r20

0000410a <__fp_splitA>:
    410a:	88 0f       	add	r24, r24
    410c:	97 fb       	bst	r25, 7
    410e:	99 1f       	adc	r25, r25
    4110:	61 f0       	breq	.+24     	; 0x412a <__fp_splitA+0x20>
    4112:	9f 3f       	cpi	r25, 0xFF	; 255
    4114:	79 f0       	breq	.+30     	; 0x4134 <__fp_splitA+0x2a>
    4116:	87 95       	ror	r24
    4118:	08 95       	ret
    411a:	12 16       	cp	r1, r18
    411c:	13 06       	cpc	r1, r19
    411e:	14 06       	cpc	r1, r20
    4120:	55 1f       	adc	r21, r21
    4122:	f2 cf       	rjmp	.-28     	; 0x4108 <__fp_split3+0xe>
    4124:	46 95       	lsr	r20
    4126:	f1 df       	rcall	.-30     	; 0x410a <__fp_splitA>
    4128:	08 c0       	rjmp	.+16     	; 0x413a <__fp_splitA+0x30>
    412a:	16 16       	cp	r1, r22
    412c:	17 06       	cpc	r1, r23
    412e:	18 06       	cpc	r1, r24
    4130:	99 1f       	adc	r25, r25
    4132:	f1 cf       	rjmp	.-30     	; 0x4116 <__fp_splitA+0xc>
    4134:	86 95       	lsr	r24
    4136:	71 05       	cpc	r23, r1
    4138:	61 05       	cpc	r22, r1
    413a:	08 94       	sec
    413c:	08 95       	ret

0000413e <__fp_zero>:
    413e:	e8 94       	clt

00004140 <__fp_szero>:
    4140:	bb 27       	eor	r27, r27
    4142:	66 27       	eor	r22, r22
    4144:	77 27       	eor	r23, r23
    4146:	cb 01       	movw	r24, r22
    4148:	97 f9       	bld	r25, 7
    414a:	08 95       	ret

0000414c <__mulsf3>:
    414c:	0b d0       	rcall	.+22     	; 0x4164 <__mulsf3x>
    414e:	c4 cf       	rjmp	.-120    	; 0x40d8 <__fp_round>
    4150:	b5 df       	rcall	.-150    	; 0x40bc <__fp_pscA>
    4152:	28 f0       	brcs	.+10     	; 0x415e <__mulsf3+0x12>
    4154:	ba df       	rcall	.-140    	; 0x40ca <__fp_pscB>
    4156:	18 f0       	brcs	.+6      	; 0x415e <__mulsf3+0x12>
    4158:	95 23       	and	r25, r21
    415a:	09 f0       	breq	.+2      	; 0x415e <__mulsf3+0x12>
    415c:	a6 cf       	rjmp	.-180    	; 0x40aa <__fp_inf>
    415e:	ab cf       	rjmp	.-170    	; 0x40b6 <__fp_nan>
    4160:	11 24       	eor	r1, r1
    4162:	ee cf       	rjmp	.-36     	; 0x4140 <__fp_szero>

00004164 <__mulsf3x>:
    4164:	ca df       	rcall	.-108    	; 0x40fa <__fp_split3>
    4166:	a0 f3       	brcs	.-24     	; 0x4150 <__mulsf3+0x4>

00004168 <__mulsf3_pse>:
    4168:	95 9f       	mul	r25, r21
    416a:	d1 f3       	breq	.-12     	; 0x4160 <__mulsf3+0x14>
    416c:	95 0f       	add	r25, r21
    416e:	50 e0       	ldi	r21, 0x00	; 0
    4170:	55 1f       	adc	r21, r21
    4172:	62 9f       	mul	r22, r18
    4174:	f0 01       	movw	r30, r0
    4176:	72 9f       	mul	r23, r18
    4178:	bb 27       	eor	r27, r27
    417a:	f0 0d       	add	r31, r0
    417c:	b1 1d       	adc	r27, r1
    417e:	63 9f       	mul	r22, r19
    4180:	aa 27       	eor	r26, r26
    4182:	f0 0d       	add	r31, r0
    4184:	b1 1d       	adc	r27, r1
    4186:	aa 1f       	adc	r26, r26
    4188:	64 9f       	mul	r22, r20
    418a:	66 27       	eor	r22, r22
    418c:	b0 0d       	add	r27, r0
    418e:	a1 1d       	adc	r26, r1
    4190:	66 1f       	adc	r22, r22
    4192:	82 9f       	mul	r24, r18
    4194:	22 27       	eor	r18, r18
    4196:	b0 0d       	add	r27, r0
    4198:	a1 1d       	adc	r26, r1
    419a:	62 1f       	adc	r22, r18
    419c:	73 9f       	mul	r23, r19
    419e:	b0 0d       	add	r27, r0
    41a0:	a1 1d       	adc	r26, r1
    41a2:	62 1f       	adc	r22, r18
    41a4:	83 9f       	mul	r24, r19
    41a6:	a0 0d       	add	r26, r0
    41a8:	61 1d       	adc	r22, r1
    41aa:	22 1f       	adc	r18, r18
    41ac:	74 9f       	mul	r23, r20
    41ae:	33 27       	eor	r19, r19
    41b0:	a0 0d       	add	r26, r0
    41b2:	61 1d       	adc	r22, r1
    41b4:	23 1f       	adc	r18, r19
    41b6:	84 9f       	mul	r24, r20
    41b8:	60 0d       	add	r22, r0
    41ba:	21 1d       	adc	r18, r1
    41bc:	82 2f       	mov	r24, r18
    41be:	76 2f       	mov	r23, r22
    41c0:	6a 2f       	mov	r22, r26
    41c2:	11 24       	eor	r1, r1
    41c4:	9f 57       	subi	r25, 0x7F	; 127
    41c6:	50 40       	sbci	r21, 0x00	; 0
    41c8:	8a f0       	brmi	.+34     	; 0x41ec <__mulsf3_pse+0x84>
    41ca:	e1 f0       	breq	.+56     	; 0x4204 <__mulsf3_pse+0x9c>
    41cc:	88 23       	and	r24, r24
    41ce:	4a f0       	brmi	.+18     	; 0x41e2 <__mulsf3_pse+0x7a>
    41d0:	ee 0f       	add	r30, r30
    41d2:	ff 1f       	adc	r31, r31
    41d4:	bb 1f       	adc	r27, r27
    41d6:	66 1f       	adc	r22, r22
    41d8:	77 1f       	adc	r23, r23
    41da:	88 1f       	adc	r24, r24
    41dc:	91 50       	subi	r25, 0x01	; 1
    41de:	50 40       	sbci	r21, 0x00	; 0
    41e0:	a9 f7       	brne	.-22     	; 0x41cc <__mulsf3_pse+0x64>
    41e2:	9e 3f       	cpi	r25, 0xFE	; 254
    41e4:	51 05       	cpc	r21, r1
    41e6:	70 f0       	brcs	.+28     	; 0x4204 <__mulsf3_pse+0x9c>
    41e8:	60 cf       	rjmp	.-320    	; 0x40aa <__fp_inf>
    41ea:	aa cf       	rjmp	.-172    	; 0x4140 <__fp_szero>
    41ec:	5f 3f       	cpi	r21, 0xFF	; 255
    41ee:	ec f3       	brlt	.-6      	; 0x41ea <__mulsf3_pse+0x82>
    41f0:	98 3e       	cpi	r25, 0xE8	; 232
    41f2:	dc f3       	brlt	.-10     	; 0x41ea <__mulsf3_pse+0x82>
    41f4:	86 95       	lsr	r24
    41f6:	77 95       	ror	r23
    41f8:	67 95       	ror	r22
    41fa:	b7 95       	ror	r27
    41fc:	f7 95       	ror	r31
    41fe:	e7 95       	ror	r30
    4200:	9f 5f       	subi	r25, 0xFF	; 255
    4202:	c1 f7       	brne	.-16     	; 0x41f4 <__mulsf3_pse+0x8c>
    4204:	fe 2b       	or	r31, r30
    4206:	88 0f       	add	r24, r24
    4208:	91 1d       	adc	r25, r1
    420a:	96 95       	lsr	r25
    420c:	87 95       	ror	r24
    420e:	97 f9       	bld	r25, 7
    4210:	08 95       	ret

00004212 <__tablejump2__>:
    4212:	ee 0f       	add	r30, r30
    4214:	ff 1f       	adc	r31, r31
    4216:	88 1f       	adc	r24, r24
    4218:	8b bf       	out	0x3b, r24	; 59
    421a:	07 90       	elpm	r0, Z+
    421c:	f6 91       	elpm	r31, Z
    421e:	e0 2d       	mov	r30, r0
    4220:	19 94       	eijmp

00004222 <calloc>:
    4222:	0f 93       	push	r16
    4224:	1f 93       	push	r17
    4226:	cf 93       	push	r28
    4228:	df 93       	push	r29
    422a:	86 9f       	mul	r24, r22
    422c:	80 01       	movw	r16, r0
    422e:	87 9f       	mul	r24, r23
    4230:	10 0d       	add	r17, r0
    4232:	96 9f       	mul	r25, r22
    4234:	10 0d       	add	r17, r0
    4236:	11 24       	eor	r1, r1
    4238:	c8 01       	movw	r24, r16
    423a:	0d d0       	rcall	.+26     	; 0x4256 <malloc>
    423c:	ec 01       	movw	r28, r24
    423e:	00 97       	sbiw	r24, 0x00	; 0
    4240:	21 f0       	breq	.+8      	; 0x424a <calloc+0x28>
    4242:	a8 01       	movw	r20, r16
    4244:	60 e0       	ldi	r22, 0x00	; 0
    4246:	70 e0       	ldi	r23, 0x00	; 0
    4248:	34 d1       	rcall	.+616    	; 0x44b2 <memset>
    424a:	ce 01       	movw	r24, r28
    424c:	df 91       	pop	r29
    424e:	cf 91       	pop	r28
    4250:	1f 91       	pop	r17
    4252:	0f 91       	pop	r16
    4254:	08 95       	ret

00004256 <malloc>:
    4256:	0f 93       	push	r16
    4258:	1f 93       	push	r17
    425a:	cf 93       	push	r28
    425c:	df 93       	push	r29
    425e:	82 30       	cpi	r24, 0x02	; 2
    4260:	91 05       	cpc	r25, r1
    4262:	10 f4       	brcc	.+4      	; 0x4268 <malloc+0x12>
    4264:	82 e0       	ldi	r24, 0x02	; 2
    4266:	90 e0       	ldi	r25, 0x00	; 0
    4268:	e0 91 7f 08 	lds	r30, 0x087F	; 0x80087f <__flp>
    426c:	f0 91 80 08 	lds	r31, 0x0880	; 0x800880 <__flp+0x1>
    4270:	20 e0       	ldi	r18, 0x00	; 0
    4272:	30 e0       	ldi	r19, 0x00	; 0
    4274:	a0 e0       	ldi	r26, 0x00	; 0
    4276:	b0 e0       	ldi	r27, 0x00	; 0
    4278:	30 97       	sbiw	r30, 0x00	; 0
    427a:	19 f1       	breq	.+70     	; 0x42c2 <malloc+0x6c>
    427c:	40 81       	ld	r20, Z
    427e:	51 81       	ldd	r21, Z+1	; 0x01
    4280:	02 81       	ldd	r16, Z+2	; 0x02
    4282:	13 81       	ldd	r17, Z+3	; 0x03
    4284:	48 17       	cp	r20, r24
    4286:	59 07       	cpc	r21, r25
    4288:	c8 f0       	brcs	.+50     	; 0x42bc <malloc+0x66>
    428a:	84 17       	cp	r24, r20
    428c:	95 07       	cpc	r25, r21
    428e:	69 f4       	brne	.+26     	; 0x42aa <malloc+0x54>
    4290:	10 97       	sbiw	r26, 0x00	; 0
    4292:	31 f0       	breq	.+12     	; 0x42a0 <malloc+0x4a>
    4294:	12 96       	adiw	r26, 0x02	; 2
    4296:	0c 93       	st	X, r16
    4298:	12 97       	sbiw	r26, 0x02	; 2
    429a:	13 96       	adiw	r26, 0x03	; 3
    429c:	1c 93       	st	X, r17
    429e:	27 c0       	rjmp	.+78     	; 0x42ee <malloc+0x98>
    42a0:	00 93 7f 08 	sts	0x087F, r16	; 0x80087f <__flp>
    42a4:	10 93 80 08 	sts	0x0880, r17	; 0x800880 <__flp+0x1>
    42a8:	22 c0       	rjmp	.+68     	; 0x42ee <malloc+0x98>
    42aa:	21 15       	cp	r18, r1
    42ac:	31 05       	cpc	r19, r1
    42ae:	19 f0       	breq	.+6      	; 0x42b6 <malloc+0x60>
    42b0:	42 17       	cp	r20, r18
    42b2:	53 07       	cpc	r21, r19
    42b4:	18 f4       	brcc	.+6      	; 0x42bc <malloc+0x66>
    42b6:	9a 01       	movw	r18, r20
    42b8:	bd 01       	movw	r22, r26
    42ba:	ef 01       	movw	r28, r30
    42bc:	df 01       	movw	r26, r30
    42be:	f8 01       	movw	r30, r16
    42c0:	db cf       	rjmp	.-74     	; 0x4278 <malloc+0x22>
    42c2:	21 15       	cp	r18, r1
    42c4:	31 05       	cpc	r19, r1
    42c6:	f9 f0       	breq	.+62     	; 0x4306 <malloc+0xb0>
    42c8:	28 1b       	sub	r18, r24
    42ca:	39 0b       	sbc	r19, r25
    42cc:	24 30       	cpi	r18, 0x04	; 4
    42ce:	31 05       	cpc	r19, r1
    42d0:	80 f4       	brcc	.+32     	; 0x42f2 <malloc+0x9c>
    42d2:	8a 81       	ldd	r24, Y+2	; 0x02
    42d4:	9b 81       	ldd	r25, Y+3	; 0x03
    42d6:	61 15       	cp	r22, r1
    42d8:	71 05       	cpc	r23, r1
    42da:	21 f0       	breq	.+8      	; 0x42e4 <malloc+0x8e>
    42dc:	fb 01       	movw	r30, r22
    42de:	93 83       	std	Z+3, r25	; 0x03
    42e0:	82 83       	std	Z+2, r24	; 0x02
    42e2:	04 c0       	rjmp	.+8      	; 0x42ec <malloc+0x96>
    42e4:	90 93 80 08 	sts	0x0880, r25	; 0x800880 <__flp+0x1>
    42e8:	80 93 7f 08 	sts	0x087F, r24	; 0x80087f <__flp>
    42ec:	fe 01       	movw	r30, r28
    42ee:	32 96       	adiw	r30, 0x02	; 2
    42f0:	44 c0       	rjmp	.+136    	; 0x437a <malloc+0x124>
    42f2:	fe 01       	movw	r30, r28
    42f4:	e2 0f       	add	r30, r18
    42f6:	f3 1f       	adc	r31, r19
    42f8:	81 93       	st	Z+, r24
    42fa:	91 93       	st	Z+, r25
    42fc:	22 50       	subi	r18, 0x02	; 2
    42fe:	31 09       	sbc	r19, r1
    4300:	39 83       	std	Y+1, r19	; 0x01
    4302:	28 83       	st	Y, r18
    4304:	3a c0       	rjmp	.+116    	; 0x437a <malloc+0x124>
    4306:	20 91 7d 08 	lds	r18, 0x087D	; 0x80087d <__brkval>
    430a:	30 91 7e 08 	lds	r19, 0x087E	; 0x80087e <__brkval+0x1>
    430e:	23 2b       	or	r18, r19
    4310:	41 f4       	brne	.+16     	; 0x4322 <malloc+0xcc>
    4312:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4316:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    431a:	30 93 7e 08 	sts	0x087E, r19	; 0x80087e <__brkval+0x1>
    431e:	20 93 7d 08 	sts	0x087D, r18	; 0x80087d <__brkval>
    4322:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4326:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    432a:	21 15       	cp	r18, r1
    432c:	31 05       	cpc	r19, r1
    432e:	41 f4       	brne	.+16     	; 0x4340 <malloc+0xea>
    4330:	2d b7       	in	r18, 0x3d	; 61
    4332:	3e b7       	in	r19, 0x3e	; 62
    4334:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4338:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    433c:	24 1b       	sub	r18, r20
    433e:	35 0b       	sbc	r19, r21
    4340:	e0 91 7d 08 	lds	r30, 0x087D	; 0x80087d <__brkval>
    4344:	f0 91 7e 08 	lds	r31, 0x087E	; 0x80087e <__brkval+0x1>
    4348:	e2 17       	cp	r30, r18
    434a:	f3 07       	cpc	r31, r19
    434c:	a0 f4       	brcc	.+40     	; 0x4376 <malloc+0x120>
    434e:	2e 1b       	sub	r18, r30
    4350:	3f 0b       	sbc	r19, r31
    4352:	28 17       	cp	r18, r24
    4354:	39 07       	cpc	r19, r25
    4356:	78 f0       	brcs	.+30     	; 0x4376 <malloc+0x120>
    4358:	ac 01       	movw	r20, r24
    435a:	4e 5f       	subi	r20, 0xFE	; 254
    435c:	5f 4f       	sbci	r21, 0xFF	; 255
    435e:	24 17       	cp	r18, r20
    4360:	35 07       	cpc	r19, r21
    4362:	48 f0       	brcs	.+18     	; 0x4376 <malloc+0x120>
    4364:	4e 0f       	add	r20, r30
    4366:	5f 1f       	adc	r21, r31
    4368:	50 93 7e 08 	sts	0x087E, r21	; 0x80087e <__brkval+0x1>
    436c:	40 93 7d 08 	sts	0x087D, r20	; 0x80087d <__brkval>
    4370:	81 93       	st	Z+, r24
    4372:	91 93       	st	Z+, r25
    4374:	02 c0       	rjmp	.+4      	; 0x437a <malloc+0x124>
    4376:	e0 e0       	ldi	r30, 0x00	; 0
    4378:	f0 e0       	ldi	r31, 0x00	; 0
    437a:	cf 01       	movw	r24, r30
    437c:	df 91       	pop	r29
    437e:	cf 91       	pop	r28
    4380:	1f 91       	pop	r17
    4382:	0f 91       	pop	r16
    4384:	08 95       	ret

00004386 <free>:
    4386:	cf 93       	push	r28
    4388:	df 93       	push	r29
    438a:	00 97       	sbiw	r24, 0x00	; 0
    438c:	09 f4       	brne	.+2      	; 0x4390 <free+0xa>
    438e:	81 c0       	rjmp	.+258    	; 0x4492 <free+0x10c>
    4390:	fc 01       	movw	r30, r24
    4392:	32 97       	sbiw	r30, 0x02	; 2
    4394:	13 82       	std	Z+3, r1	; 0x03
    4396:	12 82       	std	Z+2, r1	; 0x02
    4398:	a0 91 7f 08 	lds	r26, 0x087F	; 0x80087f <__flp>
    439c:	b0 91 80 08 	lds	r27, 0x0880	; 0x800880 <__flp+0x1>
    43a0:	10 97       	sbiw	r26, 0x00	; 0
    43a2:	81 f4       	brne	.+32     	; 0x43c4 <free+0x3e>
    43a4:	20 81       	ld	r18, Z
    43a6:	31 81       	ldd	r19, Z+1	; 0x01
    43a8:	82 0f       	add	r24, r18
    43aa:	93 1f       	adc	r25, r19
    43ac:	20 91 7d 08 	lds	r18, 0x087D	; 0x80087d <__brkval>
    43b0:	30 91 7e 08 	lds	r19, 0x087E	; 0x80087e <__brkval+0x1>
    43b4:	28 17       	cp	r18, r24
    43b6:	39 07       	cpc	r19, r25
    43b8:	51 f5       	brne	.+84     	; 0x440e <free+0x88>
    43ba:	f0 93 7e 08 	sts	0x087E, r31	; 0x80087e <__brkval+0x1>
    43be:	e0 93 7d 08 	sts	0x087D, r30	; 0x80087d <__brkval>
    43c2:	67 c0       	rjmp	.+206    	; 0x4492 <free+0x10c>
    43c4:	ed 01       	movw	r28, r26
    43c6:	20 e0       	ldi	r18, 0x00	; 0
    43c8:	30 e0       	ldi	r19, 0x00	; 0
    43ca:	ce 17       	cp	r28, r30
    43cc:	df 07       	cpc	r29, r31
    43ce:	40 f4       	brcc	.+16     	; 0x43e0 <free+0x5a>
    43d0:	4a 81       	ldd	r20, Y+2	; 0x02
    43d2:	5b 81       	ldd	r21, Y+3	; 0x03
    43d4:	9e 01       	movw	r18, r28
    43d6:	41 15       	cp	r20, r1
    43d8:	51 05       	cpc	r21, r1
    43da:	f1 f0       	breq	.+60     	; 0x4418 <free+0x92>
    43dc:	ea 01       	movw	r28, r20
    43de:	f5 cf       	rjmp	.-22     	; 0x43ca <free+0x44>
    43e0:	d3 83       	std	Z+3, r29	; 0x03
    43e2:	c2 83       	std	Z+2, r28	; 0x02
    43e4:	40 81       	ld	r20, Z
    43e6:	51 81       	ldd	r21, Z+1	; 0x01
    43e8:	84 0f       	add	r24, r20
    43ea:	95 1f       	adc	r25, r21
    43ec:	c8 17       	cp	r28, r24
    43ee:	d9 07       	cpc	r29, r25
    43f0:	59 f4       	brne	.+22     	; 0x4408 <free+0x82>
    43f2:	88 81       	ld	r24, Y
    43f4:	99 81       	ldd	r25, Y+1	; 0x01
    43f6:	84 0f       	add	r24, r20
    43f8:	95 1f       	adc	r25, r21
    43fa:	02 96       	adiw	r24, 0x02	; 2
    43fc:	91 83       	std	Z+1, r25	; 0x01
    43fe:	80 83       	st	Z, r24
    4400:	8a 81       	ldd	r24, Y+2	; 0x02
    4402:	9b 81       	ldd	r25, Y+3	; 0x03
    4404:	93 83       	std	Z+3, r25	; 0x03
    4406:	82 83       	std	Z+2, r24	; 0x02
    4408:	21 15       	cp	r18, r1
    440a:	31 05       	cpc	r19, r1
    440c:	29 f4       	brne	.+10     	; 0x4418 <free+0x92>
    440e:	f0 93 80 08 	sts	0x0880, r31	; 0x800880 <__flp+0x1>
    4412:	e0 93 7f 08 	sts	0x087F, r30	; 0x80087f <__flp>
    4416:	3d c0       	rjmp	.+122    	; 0x4492 <free+0x10c>
    4418:	e9 01       	movw	r28, r18
    441a:	fb 83       	std	Y+3, r31	; 0x03
    441c:	ea 83       	std	Y+2, r30	; 0x02
    441e:	49 91       	ld	r20, Y+
    4420:	59 91       	ld	r21, Y+
    4422:	c4 0f       	add	r28, r20
    4424:	d5 1f       	adc	r29, r21
    4426:	ec 17       	cp	r30, r28
    4428:	fd 07       	cpc	r31, r29
    442a:	61 f4       	brne	.+24     	; 0x4444 <free+0xbe>
    442c:	80 81       	ld	r24, Z
    442e:	91 81       	ldd	r25, Z+1	; 0x01
    4430:	84 0f       	add	r24, r20
    4432:	95 1f       	adc	r25, r21
    4434:	02 96       	adiw	r24, 0x02	; 2
    4436:	e9 01       	movw	r28, r18
    4438:	99 83       	std	Y+1, r25	; 0x01
    443a:	88 83       	st	Y, r24
    443c:	82 81       	ldd	r24, Z+2	; 0x02
    443e:	93 81       	ldd	r25, Z+3	; 0x03
    4440:	9b 83       	std	Y+3, r25	; 0x03
    4442:	8a 83       	std	Y+2, r24	; 0x02
    4444:	e0 e0       	ldi	r30, 0x00	; 0
    4446:	f0 e0       	ldi	r31, 0x00	; 0
    4448:	12 96       	adiw	r26, 0x02	; 2
    444a:	8d 91       	ld	r24, X+
    444c:	9c 91       	ld	r25, X
    444e:	13 97       	sbiw	r26, 0x03	; 3
    4450:	00 97       	sbiw	r24, 0x00	; 0
    4452:	19 f0       	breq	.+6      	; 0x445a <free+0xd4>
    4454:	fd 01       	movw	r30, r26
    4456:	dc 01       	movw	r26, r24
    4458:	f7 cf       	rjmp	.-18     	; 0x4448 <free+0xc2>
    445a:	8d 91       	ld	r24, X+
    445c:	9c 91       	ld	r25, X
    445e:	11 97       	sbiw	r26, 0x01	; 1
    4460:	9d 01       	movw	r18, r26
    4462:	2e 5f       	subi	r18, 0xFE	; 254
    4464:	3f 4f       	sbci	r19, 0xFF	; 255
    4466:	82 0f       	add	r24, r18
    4468:	93 1f       	adc	r25, r19
    446a:	20 91 7d 08 	lds	r18, 0x087D	; 0x80087d <__brkval>
    446e:	30 91 7e 08 	lds	r19, 0x087E	; 0x80087e <__brkval+0x1>
    4472:	28 17       	cp	r18, r24
    4474:	39 07       	cpc	r19, r25
    4476:	69 f4       	brne	.+26     	; 0x4492 <free+0x10c>
    4478:	30 97       	sbiw	r30, 0x00	; 0
    447a:	29 f4       	brne	.+10     	; 0x4486 <free+0x100>
    447c:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <__flp+0x1>
    4480:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <__flp>
    4484:	02 c0       	rjmp	.+4      	; 0x448a <free+0x104>
    4486:	13 82       	std	Z+3, r1	; 0x03
    4488:	12 82       	std	Z+2, r1	; 0x02
    448a:	b0 93 7e 08 	sts	0x087E, r27	; 0x80087e <__brkval+0x1>
    448e:	a0 93 7d 08 	sts	0x087D, r26	; 0x80087d <__brkval>
    4492:	df 91       	pop	r29
    4494:	cf 91       	pop	r28
    4496:	08 95       	ret

00004498 <abort>:
    4498:	81 e0       	ldi	r24, 0x01	; 1
    449a:	90 e0       	ldi	r25, 0x00	; 0
    449c:	f8 94       	cli
    449e:	58 c3       	rjmp	.+1712   	; 0x4b50 <_exit>

000044a0 <memcpy>:
    44a0:	fb 01       	movw	r30, r22
    44a2:	dc 01       	movw	r26, r24
    44a4:	02 c0       	rjmp	.+4      	; 0x44aa <memcpy+0xa>
    44a6:	01 90       	ld	r0, Z+
    44a8:	0d 92       	st	X+, r0
    44aa:	41 50       	subi	r20, 0x01	; 1
    44ac:	50 40       	sbci	r21, 0x00	; 0
    44ae:	d8 f7       	brcc	.-10     	; 0x44a6 <memcpy+0x6>
    44b0:	08 95       	ret

000044b2 <memset>:
    44b2:	dc 01       	movw	r26, r24
    44b4:	01 c0       	rjmp	.+2      	; 0x44b8 <memset+0x6>
    44b6:	6d 93       	st	X+, r22
    44b8:	41 50       	subi	r20, 0x01	; 1
    44ba:	50 40       	sbci	r21, 0x00	; 0
    44bc:	e0 f7       	brcc	.-8      	; 0x44b6 <memset+0x4>
    44be:	08 95       	ret

000044c0 <strcat>:
    44c0:	fb 01       	movw	r30, r22
    44c2:	dc 01       	movw	r26, r24
    44c4:	0d 90       	ld	r0, X+
    44c6:	00 20       	and	r0, r0
    44c8:	e9 f7       	brne	.-6      	; 0x44c4 <strcat+0x4>
    44ca:	11 97       	sbiw	r26, 0x01	; 1
    44cc:	01 90       	ld	r0, Z+
    44ce:	0d 92       	st	X+, r0
    44d0:	00 20       	and	r0, r0
    44d2:	e1 f7       	brne	.-8      	; 0x44cc <strcat+0xc>
    44d4:	08 95       	ret

000044d6 <strcpy>:
    44d6:	fb 01       	movw	r30, r22
    44d8:	dc 01       	movw	r26, r24
    44da:	01 90       	ld	r0, Z+
    44dc:	0d 92       	st	X+, r0
    44de:	00 20       	and	r0, r0
    44e0:	e1 f7       	brne	.-8      	; 0x44da <strcpy+0x4>
    44e2:	08 95       	ret

000044e4 <strncasecmp>:
    44e4:	fb 01       	movw	r30, r22
    44e6:	dc 01       	movw	r26, r24
    44e8:	41 50       	subi	r20, 0x01	; 1
    44ea:	50 40       	sbci	r21, 0x00	; 0
    44ec:	88 f0       	brcs	.+34     	; 0x4510 <strncasecmp+0x2c>
    44ee:	8d 91       	ld	r24, X+
    44f0:	81 34       	cpi	r24, 0x41	; 65
    44f2:	1c f0       	brlt	.+6      	; 0x44fa <strncasecmp+0x16>
    44f4:	8b 35       	cpi	r24, 0x5B	; 91
    44f6:	0c f4       	brge	.+2      	; 0x44fa <strncasecmp+0x16>
    44f8:	80 5e       	subi	r24, 0xE0	; 224
    44fa:	61 91       	ld	r22, Z+
    44fc:	61 34       	cpi	r22, 0x41	; 65
    44fe:	1c f0       	brlt	.+6      	; 0x4506 <strncasecmp+0x22>
    4500:	6b 35       	cpi	r22, 0x5B	; 91
    4502:	0c f4       	brge	.+2      	; 0x4506 <strncasecmp+0x22>
    4504:	60 5e       	subi	r22, 0xE0	; 224
    4506:	86 1b       	sub	r24, r22
    4508:	61 11       	cpse	r22, r1
    450a:	71 f3       	breq	.-36     	; 0x44e8 <strncasecmp+0x4>
    450c:	99 0b       	sbc	r25, r25
    450e:	08 95       	ret
    4510:	88 1b       	sub	r24, r24
    4512:	fc cf       	rjmp	.-8      	; 0x450c <strncasecmp+0x28>

00004514 <printf>:
    4514:	cf 93       	push	r28
    4516:	df 93       	push	r29
    4518:	cd b7       	in	r28, 0x3d	; 61
    451a:	de b7       	in	r29, 0x3e	; 62
    451c:	ae 01       	movw	r20, r28
    451e:	4a 5f       	subi	r20, 0xFA	; 250
    4520:	5f 4f       	sbci	r21, 0xFF	; 255
    4522:	fa 01       	movw	r30, r20
    4524:	61 91       	ld	r22, Z+
    4526:	71 91       	ld	r23, Z+
    4528:	af 01       	movw	r20, r30
    452a:	80 91 83 08 	lds	r24, 0x0883	; 0x800883 <__iob+0x2>
    452e:	90 91 84 08 	lds	r25, 0x0884	; 0x800884 <__iob+0x3>
    4532:	61 d0       	rcall	.+194    	; 0x45f6 <vfprintf>
    4534:	df 91       	pop	r29
    4536:	cf 91       	pop	r28
    4538:	08 95       	ret

0000453a <puts>:
    453a:	0f 93       	push	r16
    453c:	1f 93       	push	r17
    453e:	cf 93       	push	r28
    4540:	df 93       	push	r29
    4542:	e0 91 83 08 	lds	r30, 0x0883	; 0x800883 <__iob+0x2>
    4546:	f0 91 84 08 	lds	r31, 0x0884	; 0x800884 <__iob+0x3>
    454a:	23 81       	ldd	r18, Z+3	; 0x03
    454c:	21 ff       	sbrs	r18, 1
    454e:	1b c0       	rjmp	.+54     	; 0x4586 <puts+0x4c>
    4550:	8c 01       	movw	r16, r24
    4552:	d0 e0       	ldi	r29, 0x00	; 0
    4554:	c0 e0       	ldi	r28, 0x00	; 0
    4556:	f8 01       	movw	r30, r16
    4558:	81 91       	ld	r24, Z+
    455a:	8f 01       	movw	r16, r30
    455c:	60 91 83 08 	lds	r22, 0x0883	; 0x800883 <__iob+0x2>
    4560:	70 91 84 08 	lds	r23, 0x0884	; 0x800884 <__iob+0x3>
    4564:	db 01       	movw	r26, r22
    4566:	18 96       	adiw	r26, 0x08	; 8
    4568:	ed 91       	ld	r30, X+
    456a:	fc 91       	ld	r31, X
    456c:	19 97       	sbiw	r26, 0x09	; 9
    456e:	88 23       	and	r24, r24
    4570:	31 f0       	breq	.+12     	; 0x457e <puts+0x44>
    4572:	19 95       	eicall
    4574:	89 2b       	or	r24, r25
    4576:	79 f3       	breq	.-34     	; 0x4556 <puts+0x1c>
    4578:	df ef       	ldi	r29, 0xFF	; 255
    457a:	cf ef       	ldi	r28, 0xFF	; 255
    457c:	ec cf       	rjmp	.-40     	; 0x4556 <puts+0x1c>
    457e:	8a e0       	ldi	r24, 0x0A	; 10
    4580:	19 95       	eicall
    4582:	89 2b       	or	r24, r25
    4584:	19 f0       	breq	.+6      	; 0x458c <puts+0x52>
    4586:	8f ef       	ldi	r24, 0xFF	; 255
    4588:	9f ef       	ldi	r25, 0xFF	; 255
    458a:	02 c0       	rjmp	.+4      	; 0x4590 <puts+0x56>
    458c:	8d 2f       	mov	r24, r29
    458e:	9c 2f       	mov	r25, r28
    4590:	df 91       	pop	r29
    4592:	cf 91       	pop	r28
    4594:	1f 91       	pop	r17
    4596:	0f 91       	pop	r16
    4598:	08 95       	ret

0000459a <sprintf>:
    459a:	0f 93       	push	r16
    459c:	1f 93       	push	r17
    459e:	cf 93       	push	r28
    45a0:	df 93       	push	r29
    45a2:	cd b7       	in	r28, 0x3d	; 61
    45a4:	de b7       	in	r29, 0x3e	; 62
    45a6:	2e 97       	sbiw	r28, 0x0e	; 14
    45a8:	0f b6       	in	r0, 0x3f	; 63
    45aa:	f8 94       	cli
    45ac:	de bf       	out	0x3e, r29	; 62
    45ae:	0f be       	out	0x3f, r0	; 63
    45b0:	cd bf       	out	0x3d, r28	; 61
    45b2:	0e 89       	ldd	r16, Y+22	; 0x16
    45b4:	1f 89       	ldd	r17, Y+23	; 0x17
    45b6:	86 e0       	ldi	r24, 0x06	; 6
    45b8:	8c 83       	std	Y+4, r24	; 0x04
    45ba:	1a 83       	std	Y+2, r17	; 0x02
    45bc:	09 83       	std	Y+1, r16	; 0x01
    45be:	8f ef       	ldi	r24, 0xFF	; 255
    45c0:	9f e7       	ldi	r25, 0x7F	; 127
    45c2:	9e 83       	std	Y+6, r25	; 0x06
    45c4:	8d 83       	std	Y+5, r24	; 0x05
    45c6:	ae 01       	movw	r20, r28
    45c8:	46 5e       	subi	r20, 0xE6	; 230
    45ca:	5f 4f       	sbci	r21, 0xFF	; 255
    45cc:	68 8d       	ldd	r22, Y+24	; 0x18
    45ce:	79 8d       	ldd	r23, Y+25	; 0x19
    45d0:	ce 01       	movw	r24, r28
    45d2:	01 96       	adiw	r24, 0x01	; 1
    45d4:	10 d0       	rcall	.+32     	; 0x45f6 <vfprintf>
    45d6:	ef 81       	ldd	r30, Y+7	; 0x07
    45d8:	f8 85       	ldd	r31, Y+8	; 0x08
    45da:	e0 0f       	add	r30, r16
    45dc:	f1 1f       	adc	r31, r17
    45de:	10 82       	st	Z, r1
    45e0:	2e 96       	adiw	r28, 0x0e	; 14
    45e2:	0f b6       	in	r0, 0x3f	; 63
    45e4:	f8 94       	cli
    45e6:	de bf       	out	0x3e, r29	; 62
    45e8:	0f be       	out	0x3f, r0	; 63
    45ea:	cd bf       	out	0x3d, r28	; 61
    45ec:	df 91       	pop	r29
    45ee:	cf 91       	pop	r28
    45f0:	1f 91       	pop	r17
    45f2:	0f 91       	pop	r16
    45f4:	08 95       	ret

000045f6 <vfprintf>:
    45f6:	2f 92       	push	r2
    45f8:	3f 92       	push	r3
    45fa:	4f 92       	push	r4
    45fc:	5f 92       	push	r5
    45fe:	6f 92       	push	r6
    4600:	7f 92       	push	r7
    4602:	8f 92       	push	r8
    4604:	9f 92       	push	r9
    4606:	af 92       	push	r10
    4608:	bf 92       	push	r11
    460a:	cf 92       	push	r12
    460c:	df 92       	push	r13
    460e:	ef 92       	push	r14
    4610:	ff 92       	push	r15
    4612:	0f 93       	push	r16
    4614:	1f 93       	push	r17
    4616:	cf 93       	push	r28
    4618:	df 93       	push	r29
    461a:	cd b7       	in	r28, 0x3d	; 61
    461c:	de b7       	in	r29, 0x3e	; 62
    461e:	2b 97       	sbiw	r28, 0x0b	; 11
    4620:	0f b6       	in	r0, 0x3f	; 63
    4622:	f8 94       	cli
    4624:	de bf       	out	0x3e, r29	; 62
    4626:	0f be       	out	0x3f, r0	; 63
    4628:	cd bf       	out	0x3d, r28	; 61
    462a:	6c 01       	movw	r12, r24
    462c:	7b 01       	movw	r14, r22
    462e:	8a 01       	movw	r16, r20
    4630:	fc 01       	movw	r30, r24
    4632:	17 82       	std	Z+7, r1	; 0x07
    4634:	16 82       	std	Z+6, r1	; 0x06
    4636:	83 81       	ldd	r24, Z+3	; 0x03
    4638:	81 ff       	sbrs	r24, 1
    463a:	bf c1       	rjmp	.+894    	; 0x49ba <vfprintf+0x3c4>
    463c:	ce 01       	movw	r24, r28
    463e:	01 96       	adiw	r24, 0x01	; 1
    4640:	3c 01       	movw	r6, r24
    4642:	f6 01       	movw	r30, r12
    4644:	93 81       	ldd	r25, Z+3	; 0x03
    4646:	f7 01       	movw	r30, r14
    4648:	93 fd       	sbrc	r25, 3
    464a:	85 91       	lpm	r24, Z+
    464c:	93 ff       	sbrs	r25, 3
    464e:	81 91       	ld	r24, Z+
    4650:	7f 01       	movw	r14, r30
    4652:	88 23       	and	r24, r24
    4654:	09 f4       	brne	.+2      	; 0x4658 <vfprintf+0x62>
    4656:	ad c1       	rjmp	.+858    	; 0x49b2 <vfprintf+0x3bc>
    4658:	85 32       	cpi	r24, 0x25	; 37
    465a:	39 f4       	brne	.+14     	; 0x466a <vfprintf+0x74>
    465c:	93 fd       	sbrc	r25, 3
    465e:	85 91       	lpm	r24, Z+
    4660:	93 ff       	sbrs	r25, 3
    4662:	81 91       	ld	r24, Z+
    4664:	7f 01       	movw	r14, r30
    4666:	85 32       	cpi	r24, 0x25	; 37
    4668:	21 f4       	brne	.+8      	; 0x4672 <vfprintf+0x7c>
    466a:	b6 01       	movw	r22, r12
    466c:	90 e0       	ldi	r25, 0x00	; 0
    466e:	d6 d1       	rcall	.+940    	; 0x4a1c <fputc>
    4670:	e8 cf       	rjmp	.-48     	; 0x4642 <vfprintf+0x4c>
    4672:	91 2c       	mov	r9, r1
    4674:	21 2c       	mov	r2, r1
    4676:	31 2c       	mov	r3, r1
    4678:	ff e1       	ldi	r31, 0x1F	; 31
    467a:	f3 15       	cp	r31, r3
    467c:	d8 f0       	brcs	.+54     	; 0x46b4 <vfprintf+0xbe>
    467e:	8b 32       	cpi	r24, 0x2B	; 43
    4680:	79 f0       	breq	.+30     	; 0x46a0 <vfprintf+0xaa>
    4682:	38 f4       	brcc	.+14     	; 0x4692 <vfprintf+0x9c>
    4684:	80 32       	cpi	r24, 0x20	; 32
    4686:	79 f0       	breq	.+30     	; 0x46a6 <vfprintf+0xb0>
    4688:	83 32       	cpi	r24, 0x23	; 35
    468a:	a1 f4       	brne	.+40     	; 0x46b4 <vfprintf+0xbe>
    468c:	23 2d       	mov	r18, r3
    468e:	20 61       	ori	r18, 0x10	; 16
    4690:	1d c0       	rjmp	.+58     	; 0x46cc <vfprintf+0xd6>
    4692:	8d 32       	cpi	r24, 0x2D	; 45
    4694:	61 f0       	breq	.+24     	; 0x46ae <vfprintf+0xb8>
    4696:	80 33       	cpi	r24, 0x30	; 48
    4698:	69 f4       	brne	.+26     	; 0x46b4 <vfprintf+0xbe>
    469a:	23 2d       	mov	r18, r3
    469c:	21 60       	ori	r18, 0x01	; 1
    469e:	16 c0       	rjmp	.+44     	; 0x46cc <vfprintf+0xd6>
    46a0:	83 2d       	mov	r24, r3
    46a2:	82 60       	ori	r24, 0x02	; 2
    46a4:	38 2e       	mov	r3, r24
    46a6:	e3 2d       	mov	r30, r3
    46a8:	e4 60       	ori	r30, 0x04	; 4
    46aa:	3e 2e       	mov	r3, r30
    46ac:	2a c0       	rjmp	.+84     	; 0x4702 <vfprintf+0x10c>
    46ae:	f3 2d       	mov	r31, r3
    46b0:	f8 60       	ori	r31, 0x08	; 8
    46b2:	1d c0       	rjmp	.+58     	; 0x46ee <vfprintf+0xf8>
    46b4:	37 fc       	sbrc	r3, 7
    46b6:	2d c0       	rjmp	.+90     	; 0x4712 <vfprintf+0x11c>
    46b8:	20 ed       	ldi	r18, 0xD0	; 208
    46ba:	28 0f       	add	r18, r24
    46bc:	2a 30       	cpi	r18, 0x0A	; 10
    46be:	40 f0       	brcs	.+16     	; 0x46d0 <vfprintf+0xda>
    46c0:	8e 32       	cpi	r24, 0x2E	; 46
    46c2:	b9 f4       	brne	.+46     	; 0x46f2 <vfprintf+0xfc>
    46c4:	36 fc       	sbrc	r3, 6
    46c6:	75 c1       	rjmp	.+746    	; 0x49b2 <vfprintf+0x3bc>
    46c8:	23 2d       	mov	r18, r3
    46ca:	20 64       	ori	r18, 0x40	; 64
    46cc:	32 2e       	mov	r3, r18
    46ce:	19 c0       	rjmp	.+50     	; 0x4702 <vfprintf+0x10c>
    46d0:	36 fe       	sbrs	r3, 6
    46d2:	06 c0       	rjmp	.+12     	; 0x46e0 <vfprintf+0xea>
    46d4:	8a e0       	ldi	r24, 0x0A	; 10
    46d6:	98 9e       	mul	r9, r24
    46d8:	20 0d       	add	r18, r0
    46da:	11 24       	eor	r1, r1
    46dc:	92 2e       	mov	r9, r18
    46de:	11 c0       	rjmp	.+34     	; 0x4702 <vfprintf+0x10c>
    46e0:	ea e0       	ldi	r30, 0x0A	; 10
    46e2:	2e 9e       	mul	r2, r30
    46e4:	20 0d       	add	r18, r0
    46e6:	11 24       	eor	r1, r1
    46e8:	22 2e       	mov	r2, r18
    46ea:	f3 2d       	mov	r31, r3
    46ec:	f0 62       	ori	r31, 0x20	; 32
    46ee:	3f 2e       	mov	r3, r31
    46f0:	08 c0       	rjmp	.+16     	; 0x4702 <vfprintf+0x10c>
    46f2:	8c 36       	cpi	r24, 0x6C	; 108
    46f4:	21 f4       	brne	.+8      	; 0x46fe <vfprintf+0x108>
    46f6:	83 2d       	mov	r24, r3
    46f8:	80 68       	ori	r24, 0x80	; 128
    46fa:	38 2e       	mov	r3, r24
    46fc:	02 c0       	rjmp	.+4      	; 0x4702 <vfprintf+0x10c>
    46fe:	88 36       	cpi	r24, 0x68	; 104
    4700:	41 f4       	brne	.+16     	; 0x4712 <vfprintf+0x11c>
    4702:	f7 01       	movw	r30, r14
    4704:	93 fd       	sbrc	r25, 3
    4706:	85 91       	lpm	r24, Z+
    4708:	93 ff       	sbrs	r25, 3
    470a:	81 91       	ld	r24, Z+
    470c:	7f 01       	movw	r14, r30
    470e:	81 11       	cpse	r24, r1
    4710:	b3 cf       	rjmp	.-154    	; 0x4678 <vfprintf+0x82>
    4712:	98 2f       	mov	r25, r24
    4714:	9f 7d       	andi	r25, 0xDF	; 223
    4716:	95 54       	subi	r25, 0x45	; 69
    4718:	93 30       	cpi	r25, 0x03	; 3
    471a:	28 f4       	brcc	.+10     	; 0x4726 <vfprintf+0x130>
    471c:	0c 5f       	subi	r16, 0xFC	; 252
    471e:	1f 4f       	sbci	r17, 0xFF	; 255
    4720:	9f e3       	ldi	r25, 0x3F	; 63
    4722:	99 83       	std	Y+1, r25	; 0x01
    4724:	0d c0       	rjmp	.+26     	; 0x4740 <vfprintf+0x14a>
    4726:	83 36       	cpi	r24, 0x63	; 99
    4728:	31 f0       	breq	.+12     	; 0x4736 <vfprintf+0x140>
    472a:	83 37       	cpi	r24, 0x73	; 115
    472c:	71 f0       	breq	.+28     	; 0x474a <vfprintf+0x154>
    472e:	83 35       	cpi	r24, 0x53	; 83
    4730:	09 f0       	breq	.+2      	; 0x4734 <vfprintf+0x13e>
    4732:	55 c0       	rjmp	.+170    	; 0x47de <vfprintf+0x1e8>
    4734:	20 c0       	rjmp	.+64     	; 0x4776 <vfprintf+0x180>
    4736:	f8 01       	movw	r30, r16
    4738:	80 81       	ld	r24, Z
    473a:	89 83       	std	Y+1, r24	; 0x01
    473c:	0e 5f       	subi	r16, 0xFE	; 254
    473e:	1f 4f       	sbci	r17, 0xFF	; 255
    4740:	88 24       	eor	r8, r8
    4742:	83 94       	inc	r8
    4744:	91 2c       	mov	r9, r1
    4746:	53 01       	movw	r10, r6
    4748:	12 c0       	rjmp	.+36     	; 0x476e <vfprintf+0x178>
    474a:	28 01       	movw	r4, r16
    474c:	f2 e0       	ldi	r31, 0x02	; 2
    474e:	4f 0e       	add	r4, r31
    4750:	51 1c       	adc	r5, r1
    4752:	f8 01       	movw	r30, r16
    4754:	a0 80       	ld	r10, Z
    4756:	b1 80       	ldd	r11, Z+1	; 0x01
    4758:	36 fe       	sbrs	r3, 6
    475a:	03 c0       	rjmp	.+6      	; 0x4762 <vfprintf+0x16c>
    475c:	69 2d       	mov	r22, r9
    475e:	70 e0       	ldi	r23, 0x00	; 0
    4760:	02 c0       	rjmp	.+4      	; 0x4766 <vfprintf+0x170>
    4762:	6f ef       	ldi	r22, 0xFF	; 255
    4764:	7f ef       	ldi	r23, 0xFF	; 255
    4766:	c5 01       	movw	r24, r10
    4768:	4e d1       	rcall	.+668    	; 0x4a06 <strnlen>
    476a:	4c 01       	movw	r8, r24
    476c:	82 01       	movw	r16, r4
    476e:	f3 2d       	mov	r31, r3
    4770:	ff 77       	andi	r31, 0x7F	; 127
    4772:	3f 2e       	mov	r3, r31
    4774:	15 c0       	rjmp	.+42     	; 0x47a0 <vfprintf+0x1aa>
    4776:	28 01       	movw	r4, r16
    4778:	22 e0       	ldi	r18, 0x02	; 2
    477a:	42 0e       	add	r4, r18
    477c:	51 1c       	adc	r5, r1
    477e:	f8 01       	movw	r30, r16
    4780:	a0 80       	ld	r10, Z
    4782:	b1 80       	ldd	r11, Z+1	; 0x01
    4784:	36 fe       	sbrs	r3, 6
    4786:	03 c0       	rjmp	.+6      	; 0x478e <vfprintf+0x198>
    4788:	69 2d       	mov	r22, r9
    478a:	70 e0       	ldi	r23, 0x00	; 0
    478c:	02 c0       	rjmp	.+4      	; 0x4792 <vfprintf+0x19c>
    478e:	6f ef       	ldi	r22, 0xFF	; 255
    4790:	7f ef       	ldi	r23, 0xFF	; 255
    4792:	c5 01       	movw	r24, r10
    4794:	2d d1       	rcall	.+602    	; 0x49f0 <strnlen_P>
    4796:	4c 01       	movw	r8, r24
    4798:	f3 2d       	mov	r31, r3
    479a:	f0 68       	ori	r31, 0x80	; 128
    479c:	3f 2e       	mov	r3, r31
    479e:	82 01       	movw	r16, r4
    47a0:	33 fc       	sbrc	r3, 3
    47a2:	19 c0       	rjmp	.+50     	; 0x47d6 <vfprintf+0x1e0>
    47a4:	82 2d       	mov	r24, r2
    47a6:	90 e0       	ldi	r25, 0x00	; 0
    47a8:	88 16       	cp	r8, r24
    47aa:	99 06       	cpc	r9, r25
    47ac:	a0 f4       	brcc	.+40     	; 0x47d6 <vfprintf+0x1e0>
    47ae:	b6 01       	movw	r22, r12
    47b0:	80 e2       	ldi	r24, 0x20	; 32
    47b2:	90 e0       	ldi	r25, 0x00	; 0
    47b4:	33 d1       	rcall	.+614    	; 0x4a1c <fputc>
    47b6:	2a 94       	dec	r2
    47b8:	f5 cf       	rjmp	.-22     	; 0x47a4 <vfprintf+0x1ae>
    47ba:	f5 01       	movw	r30, r10
    47bc:	37 fc       	sbrc	r3, 7
    47be:	85 91       	lpm	r24, Z+
    47c0:	37 fe       	sbrs	r3, 7
    47c2:	81 91       	ld	r24, Z+
    47c4:	5f 01       	movw	r10, r30
    47c6:	b6 01       	movw	r22, r12
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	28 d1       	rcall	.+592    	; 0x4a1c <fputc>
    47cc:	21 10       	cpse	r2, r1
    47ce:	2a 94       	dec	r2
    47d0:	21 e0       	ldi	r18, 0x01	; 1
    47d2:	82 1a       	sub	r8, r18
    47d4:	91 08       	sbc	r9, r1
    47d6:	81 14       	cp	r8, r1
    47d8:	91 04       	cpc	r9, r1
    47da:	79 f7       	brne	.-34     	; 0x47ba <vfprintf+0x1c4>
    47dc:	e1 c0       	rjmp	.+450    	; 0x49a0 <vfprintf+0x3aa>
    47de:	84 36       	cpi	r24, 0x64	; 100
    47e0:	11 f0       	breq	.+4      	; 0x47e6 <vfprintf+0x1f0>
    47e2:	89 36       	cpi	r24, 0x69	; 105
    47e4:	39 f5       	brne	.+78     	; 0x4834 <vfprintf+0x23e>
    47e6:	f8 01       	movw	r30, r16
    47e8:	37 fe       	sbrs	r3, 7
    47ea:	07 c0       	rjmp	.+14     	; 0x47fa <vfprintf+0x204>
    47ec:	60 81       	ld	r22, Z
    47ee:	71 81       	ldd	r23, Z+1	; 0x01
    47f0:	82 81       	ldd	r24, Z+2	; 0x02
    47f2:	93 81       	ldd	r25, Z+3	; 0x03
    47f4:	0c 5f       	subi	r16, 0xFC	; 252
    47f6:	1f 4f       	sbci	r17, 0xFF	; 255
    47f8:	08 c0       	rjmp	.+16     	; 0x480a <vfprintf+0x214>
    47fa:	60 81       	ld	r22, Z
    47fc:	71 81       	ldd	r23, Z+1	; 0x01
    47fe:	07 2e       	mov	r0, r23
    4800:	00 0c       	add	r0, r0
    4802:	88 0b       	sbc	r24, r24
    4804:	99 0b       	sbc	r25, r25
    4806:	0e 5f       	subi	r16, 0xFE	; 254
    4808:	1f 4f       	sbci	r17, 0xFF	; 255
    480a:	f3 2d       	mov	r31, r3
    480c:	ff 76       	andi	r31, 0x6F	; 111
    480e:	3f 2e       	mov	r3, r31
    4810:	97 ff       	sbrs	r25, 7
    4812:	09 c0       	rjmp	.+18     	; 0x4826 <vfprintf+0x230>
    4814:	90 95       	com	r25
    4816:	80 95       	com	r24
    4818:	70 95       	com	r23
    481a:	61 95       	neg	r22
    481c:	7f 4f       	sbci	r23, 0xFF	; 255
    481e:	8f 4f       	sbci	r24, 0xFF	; 255
    4820:	9f 4f       	sbci	r25, 0xFF	; 255
    4822:	f0 68       	ori	r31, 0x80	; 128
    4824:	3f 2e       	mov	r3, r31
    4826:	2a e0       	ldi	r18, 0x0A	; 10
    4828:	30 e0       	ldi	r19, 0x00	; 0
    482a:	a3 01       	movw	r20, r6
    482c:	33 d1       	rcall	.+614    	; 0x4a94 <__ultoa_invert>
    482e:	88 2e       	mov	r8, r24
    4830:	86 18       	sub	r8, r6
    4832:	44 c0       	rjmp	.+136    	; 0x48bc <vfprintf+0x2c6>
    4834:	85 37       	cpi	r24, 0x75	; 117
    4836:	31 f4       	brne	.+12     	; 0x4844 <vfprintf+0x24e>
    4838:	23 2d       	mov	r18, r3
    483a:	2f 7e       	andi	r18, 0xEF	; 239
    483c:	b2 2e       	mov	r11, r18
    483e:	2a e0       	ldi	r18, 0x0A	; 10
    4840:	30 e0       	ldi	r19, 0x00	; 0
    4842:	25 c0       	rjmp	.+74     	; 0x488e <vfprintf+0x298>
    4844:	93 2d       	mov	r25, r3
    4846:	99 7f       	andi	r25, 0xF9	; 249
    4848:	b9 2e       	mov	r11, r25
    484a:	8f 36       	cpi	r24, 0x6F	; 111
    484c:	c1 f0       	breq	.+48     	; 0x487e <vfprintf+0x288>
    484e:	18 f4       	brcc	.+6      	; 0x4856 <vfprintf+0x260>
    4850:	88 35       	cpi	r24, 0x58	; 88
    4852:	79 f0       	breq	.+30     	; 0x4872 <vfprintf+0x27c>
    4854:	ae c0       	rjmp	.+348    	; 0x49b2 <vfprintf+0x3bc>
    4856:	80 37       	cpi	r24, 0x70	; 112
    4858:	19 f0       	breq	.+6      	; 0x4860 <vfprintf+0x26a>
    485a:	88 37       	cpi	r24, 0x78	; 120
    485c:	21 f0       	breq	.+8      	; 0x4866 <vfprintf+0x270>
    485e:	a9 c0       	rjmp	.+338    	; 0x49b2 <vfprintf+0x3bc>
    4860:	e9 2f       	mov	r30, r25
    4862:	e0 61       	ori	r30, 0x10	; 16
    4864:	be 2e       	mov	r11, r30
    4866:	b4 fe       	sbrs	r11, 4
    4868:	0d c0       	rjmp	.+26     	; 0x4884 <vfprintf+0x28e>
    486a:	fb 2d       	mov	r31, r11
    486c:	f4 60       	ori	r31, 0x04	; 4
    486e:	bf 2e       	mov	r11, r31
    4870:	09 c0       	rjmp	.+18     	; 0x4884 <vfprintf+0x28e>
    4872:	34 fe       	sbrs	r3, 4
    4874:	0a c0       	rjmp	.+20     	; 0x488a <vfprintf+0x294>
    4876:	29 2f       	mov	r18, r25
    4878:	26 60       	ori	r18, 0x06	; 6
    487a:	b2 2e       	mov	r11, r18
    487c:	06 c0       	rjmp	.+12     	; 0x488a <vfprintf+0x294>
    487e:	28 e0       	ldi	r18, 0x08	; 8
    4880:	30 e0       	ldi	r19, 0x00	; 0
    4882:	05 c0       	rjmp	.+10     	; 0x488e <vfprintf+0x298>
    4884:	20 e1       	ldi	r18, 0x10	; 16
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	02 c0       	rjmp	.+4      	; 0x488e <vfprintf+0x298>
    488a:	20 e1       	ldi	r18, 0x10	; 16
    488c:	32 e0       	ldi	r19, 0x02	; 2
    488e:	f8 01       	movw	r30, r16
    4890:	b7 fe       	sbrs	r11, 7
    4892:	07 c0       	rjmp	.+14     	; 0x48a2 <vfprintf+0x2ac>
    4894:	60 81       	ld	r22, Z
    4896:	71 81       	ldd	r23, Z+1	; 0x01
    4898:	82 81       	ldd	r24, Z+2	; 0x02
    489a:	93 81       	ldd	r25, Z+3	; 0x03
    489c:	0c 5f       	subi	r16, 0xFC	; 252
    489e:	1f 4f       	sbci	r17, 0xFF	; 255
    48a0:	06 c0       	rjmp	.+12     	; 0x48ae <vfprintf+0x2b8>
    48a2:	60 81       	ld	r22, Z
    48a4:	71 81       	ldd	r23, Z+1	; 0x01
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	0e 5f       	subi	r16, 0xFE	; 254
    48ac:	1f 4f       	sbci	r17, 0xFF	; 255
    48ae:	a3 01       	movw	r20, r6
    48b0:	f1 d0       	rcall	.+482    	; 0x4a94 <__ultoa_invert>
    48b2:	88 2e       	mov	r8, r24
    48b4:	86 18       	sub	r8, r6
    48b6:	fb 2d       	mov	r31, r11
    48b8:	ff 77       	andi	r31, 0x7F	; 127
    48ba:	3f 2e       	mov	r3, r31
    48bc:	36 fe       	sbrs	r3, 6
    48be:	0d c0       	rjmp	.+26     	; 0x48da <vfprintf+0x2e4>
    48c0:	23 2d       	mov	r18, r3
    48c2:	2e 7f       	andi	r18, 0xFE	; 254
    48c4:	a2 2e       	mov	r10, r18
    48c6:	89 14       	cp	r8, r9
    48c8:	58 f4       	brcc	.+22     	; 0x48e0 <vfprintf+0x2ea>
    48ca:	34 fe       	sbrs	r3, 4
    48cc:	0b c0       	rjmp	.+22     	; 0x48e4 <vfprintf+0x2ee>
    48ce:	32 fc       	sbrc	r3, 2
    48d0:	09 c0       	rjmp	.+18     	; 0x48e4 <vfprintf+0x2ee>
    48d2:	83 2d       	mov	r24, r3
    48d4:	8e 7e       	andi	r24, 0xEE	; 238
    48d6:	a8 2e       	mov	r10, r24
    48d8:	05 c0       	rjmp	.+10     	; 0x48e4 <vfprintf+0x2ee>
    48da:	b8 2c       	mov	r11, r8
    48dc:	a3 2c       	mov	r10, r3
    48de:	03 c0       	rjmp	.+6      	; 0x48e6 <vfprintf+0x2f0>
    48e0:	b8 2c       	mov	r11, r8
    48e2:	01 c0       	rjmp	.+2      	; 0x48e6 <vfprintf+0x2f0>
    48e4:	b9 2c       	mov	r11, r9
    48e6:	a4 fe       	sbrs	r10, 4
    48e8:	0f c0       	rjmp	.+30     	; 0x4908 <vfprintf+0x312>
    48ea:	fe 01       	movw	r30, r28
    48ec:	e8 0d       	add	r30, r8
    48ee:	f1 1d       	adc	r31, r1
    48f0:	80 81       	ld	r24, Z
    48f2:	80 33       	cpi	r24, 0x30	; 48
    48f4:	21 f4       	brne	.+8      	; 0x48fe <vfprintf+0x308>
    48f6:	9a 2d       	mov	r25, r10
    48f8:	99 7e       	andi	r25, 0xE9	; 233
    48fa:	a9 2e       	mov	r10, r25
    48fc:	09 c0       	rjmp	.+18     	; 0x4910 <vfprintf+0x31a>
    48fe:	a2 fe       	sbrs	r10, 2
    4900:	06 c0       	rjmp	.+12     	; 0x490e <vfprintf+0x318>
    4902:	b3 94       	inc	r11
    4904:	b3 94       	inc	r11
    4906:	04 c0       	rjmp	.+8      	; 0x4910 <vfprintf+0x31a>
    4908:	8a 2d       	mov	r24, r10
    490a:	86 78       	andi	r24, 0x86	; 134
    490c:	09 f0       	breq	.+2      	; 0x4910 <vfprintf+0x31a>
    490e:	b3 94       	inc	r11
    4910:	a3 fc       	sbrc	r10, 3
    4912:	10 c0       	rjmp	.+32     	; 0x4934 <vfprintf+0x33e>
    4914:	a0 fe       	sbrs	r10, 0
    4916:	06 c0       	rjmp	.+12     	; 0x4924 <vfprintf+0x32e>
    4918:	b2 14       	cp	r11, r2
    491a:	80 f4       	brcc	.+32     	; 0x493c <vfprintf+0x346>
    491c:	28 0c       	add	r2, r8
    491e:	92 2c       	mov	r9, r2
    4920:	9b 18       	sub	r9, r11
    4922:	0d c0       	rjmp	.+26     	; 0x493e <vfprintf+0x348>
    4924:	b2 14       	cp	r11, r2
    4926:	58 f4       	brcc	.+22     	; 0x493e <vfprintf+0x348>
    4928:	b6 01       	movw	r22, r12
    492a:	80 e2       	ldi	r24, 0x20	; 32
    492c:	90 e0       	ldi	r25, 0x00	; 0
    492e:	76 d0       	rcall	.+236    	; 0x4a1c <fputc>
    4930:	b3 94       	inc	r11
    4932:	f8 cf       	rjmp	.-16     	; 0x4924 <vfprintf+0x32e>
    4934:	b2 14       	cp	r11, r2
    4936:	18 f4       	brcc	.+6      	; 0x493e <vfprintf+0x348>
    4938:	2b 18       	sub	r2, r11
    493a:	02 c0       	rjmp	.+4      	; 0x4940 <vfprintf+0x34a>
    493c:	98 2c       	mov	r9, r8
    493e:	21 2c       	mov	r2, r1
    4940:	a4 fe       	sbrs	r10, 4
    4942:	0f c0       	rjmp	.+30     	; 0x4962 <vfprintf+0x36c>
    4944:	b6 01       	movw	r22, r12
    4946:	80 e3       	ldi	r24, 0x30	; 48
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	68 d0       	rcall	.+208    	; 0x4a1c <fputc>
    494c:	a2 fe       	sbrs	r10, 2
    494e:	16 c0       	rjmp	.+44     	; 0x497c <vfprintf+0x386>
    4950:	a1 fc       	sbrc	r10, 1
    4952:	03 c0       	rjmp	.+6      	; 0x495a <vfprintf+0x364>
    4954:	88 e7       	ldi	r24, 0x78	; 120
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	02 c0       	rjmp	.+4      	; 0x495e <vfprintf+0x368>
    495a:	88 e5       	ldi	r24, 0x58	; 88
    495c:	90 e0       	ldi	r25, 0x00	; 0
    495e:	b6 01       	movw	r22, r12
    4960:	0c c0       	rjmp	.+24     	; 0x497a <vfprintf+0x384>
    4962:	8a 2d       	mov	r24, r10
    4964:	86 78       	andi	r24, 0x86	; 134
    4966:	51 f0       	breq	.+20     	; 0x497c <vfprintf+0x386>
    4968:	a1 fe       	sbrs	r10, 1
    496a:	02 c0       	rjmp	.+4      	; 0x4970 <vfprintf+0x37a>
    496c:	8b e2       	ldi	r24, 0x2B	; 43
    496e:	01 c0       	rjmp	.+2      	; 0x4972 <vfprintf+0x37c>
    4970:	80 e2       	ldi	r24, 0x20	; 32
    4972:	a7 fc       	sbrc	r10, 7
    4974:	8d e2       	ldi	r24, 0x2D	; 45
    4976:	b6 01       	movw	r22, r12
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	50 d0       	rcall	.+160    	; 0x4a1c <fputc>
    497c:	89 14       	cp	r8, r9
    497e:	30 f4       	brcc	.+12     	; 0x498c <vfprintf+0x396>
    4980:	b6 01       	movw	r22, r12
    4982:	80 e3       	ldi	r24, 0x30	; 48
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	4a d0       	rcall	.+148    	; 0x4a1c <fputc>
    4988:	9a 94       	dec	r9
    498a:	f8 cf       	rjmp	.-16     	; 0x497c <vfprintf+0x386>
    498c:	8a 94       	dec	r8
    498e:	f3 01       	movw	r30, r6
    4990:	e8 0d       	add	r30, r8
    4992:	f1 1d       	adc	r31, r1
    4994:	80 81       	ld	r24, Z
    4996:	b6 01       	movw	r22, r12
    4998:	90 e0       	ldi	r25, 0x00	; 0
    499a:	40 d0       	rcall	.+128    	; 0x4a1c <fputc>
    499c:	81 10       	cpse	r8, r1
    499e:	f6 cf       	rjmp	.-20     	; 0x498c <vfprintf+0x396>
    49a0:	22 20       	and	r2, r2
    49a2:	09 f4       	brne	.+2      	; 0x49a6 <vfprintf+0x3b0>
    49a4:	4e ce       	rjmp	.-868    	; 0x4642 <vfprintf+0x4c>
    49a6:	b6 01       	movw	r22, r12
    49a8:	80 e2       	ldi	r24, 0x20	; 32
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	37 d0       	rcall	.+110    	; 0x4a1c <fputc>
    49ae:	2a 94       	dec	r2
    49b0:	f7 cf       	rjmp	.-18     	; 0x49a0 <vfprintf+0x3aa>
    49b2:	f6 01       	movw	r30, r12
    49b4:	86 81       	ldd	r24, Z+6	; 0x06
    49b6:	97 81       	ldd	r25, Z+7	; 0x07
    49b8:	02 c0       	rjmp	.+4      	; 0x49be <vfprintf+0x3c8>
    49ba:	8f ef       	ldi	r24, 0xFF	; 255
    49bc:	9f ef       	ldi	r25, 0xFF	; 255
    49be:	2b 96       	adiw	r28, 0x0b	; 11
    49c0:	0f b6       	in	r0, 0x3f	; 63
    49c2:	f8 94       	cli
    49c4:	de bf       	out	0x3e, r29	; 62
    49c6:	0f be       	out	0x3f, r0	; 63
    49c8:	cd bf       	out	0x3d, r28	; 61
    49ca:	df 91       	pop	r29
    49cc:	cf 91       	pop	r28
    49ce:	1f 91       	pop	r17
    49d0:	0f 91       	pop	r16
    49d2:	ff 90       	pop	r15
    49d4:	ef 90       	pop	r14
    49d6:	df 90       	pop	r13
    49d8:	cf 90       	pop	r12
    49da:	bf 90       	pop	r11
    49dc:	af 90       	pop	r10
    49de:	9f 90       	pop	r9
    49e0:	8f 90       	pop	r8
    49e2:	7f 90       	pop	r7
    49e4:	6f 90       	pop	r6
    49e6:	5f 90       	pop	r5
    49e8:	4f 90       	pop	r4
    49ea:	3f 90       	pop	r3
    49ec:	2f 90       	pop	r2
    49ee:	08 95       	ret

000049f0 <strnlen_P>:
    49f0:	fc 01       	movw	r30, r24
    49f2:	05 90       	lpm	r0, Z+
    49f4:	61 50       	subi	r22, 0x01	; 1
    49f6:	70 40       	sbci	r23, 0x00	; 0
    49f8:	01 10       	cpse	r0, r1
    49fa:	d8 f7       	brcc	.-10     	; 0x49f2 <strnlen_P+0x2>
    49fc:	80 95       	com	r24
    49fe:	90 95       	com	r25
    4a00:	8e 0f       	add	r24, r30
    4a02:	9f 1f       	adc	r25, r31
    4a04:	08 95       	ret

00004a06 <strnlen>:
    4a06:	fc 01       	movw	r30, r24
    4a08:	61 50       	subi	r22, 0x01	; 1
    4a0a:	70 40       	sbci	r23, 0x00	; 0
    4a0c:	01 90       	ld	r0, Z+
    4a0e:	01 10       	cpse	r0, r1
    4a10:	d8 f7       	brcc	.-10     	; 0x4a08 <strnlen+0x2>
    4a12:	80 95       	com	r24
    4a14:	90 95       	com	r25
    4a16:	8e 0f       	add	r24, r30
    4a18:	9f 1f       	adc	r25, r31
    4a1a:	08 95       	ret

00004a1c <fputc>:
    4a1c:	0f 93       	push	r16
    4a1e:	1f 93       	push	r17
    4a20:	cf 93       	push	r28
    4a22:	df 93       	push	r29
    4a24:	fb 01       	movw	r30, r22
    4a26:	23 81       	ldd	r18, Z+3	; 0x03
    4a28:	21 fd       	sbrc	r18, 1
    4a2a:	03 c0       	rjmp	.+6      	; 0x4a32 <fputc+0x16>
    4a2c:	8f ef       	ldi	r24, 0xFF	; 255
    4a2e:	9f ef       	ldi	r25, 0xFF	; 255
    4a30:	2c c0       	rjmp	.+88     	; 0x4a8a <fputc+0x6e>
    4a32:	22 ff       	sbrs	r18, 2
    4a34:	16 c0       	rjmp	.+44     	; 0x4a62 <fputc+0x46>
    4a36:	46 81       	ldd	r20, Z+6	; 0x06
    4a38:	57 81       	ldd	r21, Z+7	; 0x07
    4a3a:	24 81       	ldd	r18, Z+4	; 0x04
    4a3c:	35 81       	ldd	r19, Z+5	; 0x05
    4a3e:	42 17       	cp	r20, r18
    4a40:	53 07       	cpc	r21, r19
    4a42:	44 f4       	brge	.+16     	; 0x4a54 <fputc+0x38>
    4a44:	a0 81       	ld	r26, Z
    4a46:	b1 81       	ldd	r27, Z+1	; 0x01
    4a48:	9d 01       	movw	r18, r26
    4a4a:	2f 5f       	subi	r18, 0xFF	; 255
    4a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a4e:	31 83       	std	Z+1, r19	; 0x01
    4a50:	20 83       	st	Z, r18
    4a52:	8c 93       	st	X, r24
    4a54:	26 81       	ldd	r18, Z+6	; 0x06
    4a56:	37 81       	ldd	r19, Z+7	; 0x07
    4a58:	2f 5f       	subi	r18, 0xFF	; 255
    4a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a5c:	37 83       	std	Z+7, r19	; 0x07
    4a5e:	26 83       	std	Z+6, r18	; 0x06
    4a60:	14 c0       	rjmp	.+40     	; 0x4a8a <fputc+0x6e>
    4a62:	8b 01       	movw	r16, r22
    4a64:	ec 01       	movw	r28, r24
    4a66:	fb 01       	movw	r30, r22
    4a68:	00 84       	ldd	r0, Z+8	; 0x08
    4a6a:	f1 85       	ldd	r31, Z+9	; 0x09
    4a6c:	e0 2d       	mov	r30, r0
    4a6e:	19 95       	eicall
    4a70:	89 2b       	or	r24, r25
    4a72:	e1 f6       	brne	.-72     	; 0x4a2c <fputc+0x10>
    4a74:	d8 01       	movw	r26, r16
    4a76:	16 96       	adiw	r26, 0x06	; 6
    4a78:	8d 91       	ld	r24, X+
    4a7a:	9c 91       	ld	r25, X
    4a7c:	17 97       	sbiw	r26, 0x07	; 7
    4a7e:	01 96       	adiw	r24, 0x01	; 1
    4a80:	17 96       	adiw	r26, 0x07	; 7
    4a82:	9c 93       	st	X, r25
    4a84:	8e 93       	st	-X, r24
    4a86:	16 97       	sbiw	r26, 0x06	; 6
    4a88:	ce 01       	movw	r24, r28
    4a8a:	df 91       	pop	r29
    4a8c:	cf 91       	pop	r28
    4a8e:	1f 91       	pop	r17
    4a90:	0f 91       	pop	r16
    4a92:	08 95       	ret

00004a94 <__ultoa_invert>:
    4a94:	fa 01       	movw	r30, r20
    4a96:	aa 27       	eor	r26, r26
    4a98:	28 30       	cpi	r18, 0x08	; 8
    4a9a:	51 f1       	breq	.+84     	; 0x4af0 <__ultoa_invert+0x5c>
    4a9c:	20 31       	cpi	r18, 0x10	; 16
    4a9e:	81 f1       	breq	.+96     	; 0x4b00 <__ultoa_invert+0x6c>
    4aa0:	e8 94       	clt
    4aa2:	6f 93       	push	r22
    4aa4:	6e 7f       	andi	r22, 0xFE	; 254
    4aa6:	6e 5f       	subi	r22, 0xFE	; 254
    4aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    4aaa:	8f 4f       	sbci	r24, 0xFF	; 255
    4aac:	9f 4f       	sbci	r25, 0xFF	; 255
    4aae:	af 4f       	sbci	r26, 0xFF	; 255
    4ab0:	b1 e0       	ldi	r27, 0x01	; 1
    4ab2:	3e d0       	rcall	.+124    	; 0x4b30 <__ultoa_invert+0x9c>
    4ab4:	b4 e0       	ldi	r27, 0x04	; 4
    4ab6:	3c d0       	rcall	.+120    	; 0x4b30 <__ultoa_invert+0x9c>
    4ab8:	67 0f       	add	r22, r23
    4aba:	78 1f       	adc	r23, r24
    4abc:	89 1f       	adc	r24, r25
    4abe:	9a 1f       	adc	r25, r26
    4ac0:	a1 1d       	adc	r26, r1
    4ac2:	68 0f       	add	r22, r24
    4ac4:	79 1f       	adc	r23, r25
    4ac6:	8a 1f       	adc	r24, r26
    4ac8:	91 1d       	adc	r25, r1
    4aca:	a1 1d       	adc	r26, r1
    4acc:	6a 0f       	add	r22, r26
    4ace:	71 1d       	adc	r23, r1
    4ad0:	81 1d       	adc	r24, r1
    4ad2:	91 1d       	adc	r25, r1
    4ad4:	a1 1d       	adc	r26, r1
    4ad6:	20 d0       	rcall	.+64     	; 0x4b18 <__ultoa_invert+0x84>
    4ad8:	09 f4       	brne	.+2      	; 0x4adc <__ultoa_invert+0x48>
    4ada:	68 94       	set
    4adc:	3f 91       	pop	r19
    4ade:	2a e0       	ldi	r18, 0x0A	; 10
    4ae0:	26 9f       	mul	r18, r22
    4ae2:	11 24       	eor	r1, r1
    4ae4:	30 19       	sub	r19, r0
    4ae6:	30 5d       	subi	r19, 0xD0	; 208
    4ae8:	31 93       	st	Z+, r19
    4aea:	de f6       	brtc	.-74     	; 0x4aa2 <__ultoa_invert+0xe>
    4aec:	cf 01       	movw	r24, r30
    4aee:	08 95       	ret
    4af0:	46 2f       	mov	r20, r22
    4af2:	47 70       	andi	r20, 0x07	; 7
    4af4:	40 5d       	subi	r20, 0xD0	; 208
    4af6:	41 93       	st	Z+, r20
    4af8:	b3 e0       	ldi	r27, 0x03	; 3
    4afa:	0f d0       	rcall	.+30     	; 0x4b1a <__ultoa_invert+0x86>
    4afc:	c9 f7       	brne	.-14     	; 0x4af0 <__ultoa_invert+0x5c>
    4afe:	f6 cf       	rjmp	.-20     	; 0x4aec <__ultoa_invert+0x58>
    4b00:	46 2f       	mov	r20, r22
    4b02:	4f 70       	andi	r20, 0x0F	; 15
    4b04:	40 5d       	subi	r20, 0xD0	; 208
    4b06:	4a 33       	cpi	r20, 0x3A	; 58
    4b08:	18 f0       	brcs	.+6      	; 0x4b10 <__ultoa_invert+0x7c>
    4b0a:	49 5d       	subi	r20, 0xD9	; 217
    4b0c:	31 fd       	sbrc	r19, 1
    4b0e:	40 52       	subi	r20, 0x20	; 32
    4b10:	41 93       	st	Z+, r20
    4b12:	02 d0       	rcall	.+4      	; 0x4b18 <__ultoa_invert+0x84>
    4b14:	a9 f7       	brne	.-22     	; 0x4b00 <__ultoa_invert+0x6c>
    4b16:	ea cf       	rjmp	.-44     	; 0x4aec <__ultoa_invert+0x58>
    4b18:	b4 e0       	ldi	r27, 0x04	; 4
    4b1a:	a6 95       	lsr	r26
    4b1c:	97 95       	ror	r25
    4b1e:	87 95       	ror	r24
    4b20:	77 95       	ror	r23
    4b22:	67 95       	ror	r22
    4b24:	ba 95       	dec	r27
    4b26:	c9 f7       	brne	.-14     	; 0x4b1a <__ultoa_invert+0x86>
    4b28:	00 97       	sbiw	r24, 0x00	; 0
    4b2a:	61 05       	cpc	r22, r1
    4b2c:	71 05       	cpc	r23, r1
    4b2e:	08 95       	ret
    4b30:	9b 01       	movw	r18, r22
    4b32:	ac 01       	movw	r20, r24
    4b34:	0a 2e       	mov	r0, r26
    4b36:	06 94       	lsr	r0
    4b38:	57 95       	ror	r21
    4b3a:	47 95       	ror	r20
    4b3c:	37 95       	ror	r19
    4b3e:	27 95       	ror	r18
    4b40:	ba 95       	dec	r27
    4b42:	c9 f7       	brne	.-14     	; 0x4b36 <__ultoa_invert+0xa2>
    4b44:	62 0f       	add	r22, r18
    4b46:	73 1f       	adc	r23, r19
    4b48:	84 1f       	adc	r24, r20
    4b4a:	95 1f       	adc	r25, r21
    4b4c:	a0 1d       	adc	r26, r0
    4b4e:	08 95       	ret

00004b50 <_exit>:
    4b50:	f8 94       	cli

00004b52 <__stop_program>:
    4b52:	ff cf       	rjmp	.-2      	; 0x4b52 <__stop_program>
